/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var gm = require('gm');

var LocalStorage = require('oae-content/lib/backends/local');
var RestAPI = require('oae-rest');
var RestUtil = require('oae-rest/lib/util');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;


describe('Users', function() {

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a Cambridge tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make an anonymous request to the Cambridge tenant.
    var anonymousRestContext = null;
    // The directory where files will be stored during the tests.
    var rootFilesDir = null;

    before(function(callback) {
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up tenant admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Get the root files directory.
        rootFilesDir = LocalStorage.getRootDirectory();
        RestAPI.User.getMe(camAdminRestContext, function(err, user) {
            assert.ok(!err);
            callback();
        });
    });

    /**
     * Create a user and return a RestContext for it.
     *
     * @param {Function}    callback        Standard callback method.
     * @param {RestContext} callback.ctx    The RestContext for the created user.
     */
    var createUser = function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);
            var user = _.values(users)[0];
            var ctx = user.restContext;
            ctx.user = user.user;
            callback(ctx);

        });
    };

    /**
     * Create 2 users.
     *
     * @param {Function}    callback            Standard callback method.
     * @param {Object}      callback.contexts   The RestContexts for the created users keyed by 'simon' and 'nicolaas'.
     */
    var createUsers = function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
            assert.ok(!err);
            var contexts = {};
            users = _.values(users);
            contexts['simon'] = users[0];
            contexts['nicolaas'] = users[1];
            callback(contexts);
        });
    };

    /**
     * @return {Stream} A stream to jpg image.
     */
    var getPictureStream = function() {
        var file = __dirname + '/data/restroom.jpg';
        return fs.createReadStream(file);
    };

    /**
     * @return {Stream} A stream to text file.
     */
    var getTextStream = function() {
        var file = __dirname + '/data/speech.txt';
        return fs.createReadStream(file);
    };

    /**
     * Returns an object that can be used to crop out a rectangle.
     */
    var createSelectedArea = function(x, y, width) {
        return {
            'x': x,
            'y': y,
            'width': width
        };
    };


    /*
     * Verifies the size of an image.
     */
    var verifySize = function(uri, width, height, callback) {
        // Strip 'local:' from the uri.
        var path = rootFilesDir + '/' + uri.substr(6);
        gm(path).size(function(err, size) {
            if (err) {
                throw err;
            }
            assert.equal(size.width, width);
            assert.equal(size.height, height);
            callback();
        });
    };

    /*
     * Attempts to crop a picture, if it's expected to succeed the resulting file will be checked.
     */
    var verifyCropping = function(ctx, principalId, selectedArea, expectedHttpCode, callback) {
        RestAPI.Crop.cropPicture(ctx, principalId, selectedArea, function(err, data) {
            if (expectedHttpCode === 200) {
                assert.ok(!err);
            } else {
                // It was expected that this request would fail.
                assert.equal(err.code, expectedHttpCode);
                return callback();
            }

            // When the request was OK, we verify if the cropping actually happened.
            verifySize(data.picture.smallUri, PrincipalsConstants.picture.size.SMALL, PrincipalsConstants.picture.size.SMALL, function() {
                verifySize(data.picture.mediumUri, PrincipalsConstants.picture.size.MEDIUM, PrincipalsConstants.picture.size.MEDIUM, function() {
                    callback();
                });
            });
        });
    };

    describe('Profile picture', function() {

        /*!
         * Verify that you can upload a picture.
         */
        it('verify uploading', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });

        /*!
         * Verify basic parameter requirements.
         */
        it('verify basic parameter requirements', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, null, null, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /*!
         * Verify that the picture upload endpoint only accepts pictures.
         */
        it('verify uploading bad mimetype', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getTextStream, null, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /*!
         * Verify that cropping actually occurs.
         */
        it('verify cropping', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    var selectedArea = createSelectedArea(10, 10, 200);
                    verifyCropping(ctx, ctx.user.id, selectedArea, 200, callback);
                });
            });
        });

        /*!
         * Verify you get an appropriate response if you haven't uploaded a picture yet.
         */
        it('verify cropping fails if the user hasn\'t uploaded a picture yet', function(callback) {
            createUser(function(ctx) {
                verifyCropping(ctx, ctx.user.id, createSelectedArea(10, 10, 200), 400, callback);
            });
        });

        /*!
         * Verify you can crop and upload an image within 1 REST API call.
         */
        it('verify uploading and cropping', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200);
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });

        /*!
         * Verify that the area selection cannot be negative.
         */
        it('verify cropping validation negative coordinates', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.user.id, createSelectedArea(-10, 10, 200), 400, function() {
                        verifyCropping(ctx, ctx.user.id, createSelectedArea(10, -10, 200), 400, function() {
                            verifyCropping(ctx, ctx.user.id, createSelectedArea(-10, -10, 200), 400, function() {
                                verifyCropping(ctx, ctx.user.id, createSelectedArea(10, 10, -200), 400, callback);
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the area selection does some type validation.
         */
        it('verify cropping validation area only takes numbers', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.user.id, createSelectedArea("foo", 10, 200), 400, function() {
                        verifyCropping(ctx, ctx.user.id, createSelectedArea(10, "foo", 200), 400, function() {
                            verifyCropping(ctx, ctx.user.id, createSelectedArea(10, 10, "foo"), 400, function() {
                                verifyCropping(ctx, ctx.user.id, createSelectedArea(10, 10, "NaN"), 400, callback);
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the rectangle should be completely within the image boundaries.
         */
        it('verify cropping cannot happen partially outside of the image', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.user.id, createSelectedArea(10, 10, 20000), 400, callback);
                });
            });
        });

        /*!
         * Verify that you cannot crop outside the image.
         */
        it('verify cropping fails if x or y coord is outside of image', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.user.id, createSelectedArea(20000, 10, 100), 400, function() {
                        verifyCropping(ctx, ctx.user.id, createSelectedArea(10, 200000, 100), 400, callback);
                    });
                });
            });
        });

        /*!
         * Verify that you can download a user picture.
         */
        it('verify downloading user picture', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    // Download the different sizes.
                    RestAPI.User.downloadPicture(ctx, ctx.user.id, 'small', function(err, body, response) {
                        assert.ok(!err);
                        assert.equal(response.statusCode, 204);
                        RestAPI.User.downloadPicture(ctx, ctx.user.id, 'medium', function(err, body, response) {
                            assert.ok(!err);
                            assert.equal(response.statusCode, 204);
                            RestAPI.User.downloadPicture(ctx, ctx.user.id, 'large', function(err, body, response) {
                                assert.ok(!err);
                                assert.equal(response.statusCode, 204);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that you can upload/crop/download profile pictures for groups.
         */
        it('verify uploading, cropping and downloading of group profile pictures', function(callback) {
            createUser(function(ctx) {
                TestsUtil.generateTestGroups(ctx, 1, function(err, groups) {
                    var group = groups[Object.keys(groups)[0]];
                    RestAPI.Group.uploadPicture(ctx, group.id, getPictureStream, null, function(err) {
                        assert.ok(!err);
                        verifyCropping(ctx, group.id, createSelectedArea(-10, 10, 200), 400, function() {
                            verifyCropping(ctx, group.id, createSelectedArea(10, -10, 200), 400, function() {
                                verifyCropping(ctx, group.id, createSelectedArea(-10, -10, 200), 400, function() {
                                    verifyCropping(ctx, group.id, createSelectedArea(10, 10, 200), 200, function() {
                                        // Download the different sizes.
                                        RestAPI.Group.downloadPicture(ctx, group.id, 'small', function(err, body, request) {
                                            assert.ok(!err);
                                            assert.equal(request.statusCode, 204);
                                            RestAPI.Group.downloadPicture(ctx, group.id, 'medium', function(err, body, request) {
                                                assert.ok(!err);
                                                assert.equal(request.statusCode, 204);
                                                RestAPI.Group.downloadPicture(ctx, group.id, 'large', function(err, body, request) {
                                                    assert.ok(!err);
                                                    assert.equal(request.statusCode, 204);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the endpoints don't expose profile pictures if the user has set his visibility to private/loggedin.
         */
        it('verify visibility', function(callback) {
            createUsers(function(contexts) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(contexts['simon'].restContext, contexts['simon'].user.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    RestAPI.User.updateUser(contexts['simon'].restContext, contexts['simon'].user.id, {'visibility': 'private'}, function(err) {
                        assert.ok(!err);

                        RestAPI.User.getUser(contexts['nicolaas'].restContext, contexts['simon'].user.id, function(err, user) {
                            assert.ok(!err);
                            assert.equal(user.picture.small, undefined);
                            assert.equal(user.picture.smallUri, undefined);
                            assert.equal(user.picture.medium, undefined);
                            assert.equal(user.picture.mediumUri, undefined);
                            assert.equal(user.picture.large, undefined);
                            assert.equal(user.picture.largeUri, undefined);

                            RestAPI.User.getUser(anonymousRestContext, contexts['simon'].user.id, function(err, user) {
                                assert.ok(!err);
                                assert.equal(user.picture.small, undefined);
                                assert.equal(user.picture.smallUri, undefined);
                                assert.equal(user.picture.medium, undefined);
                                assert.equal(user.picture.mediumUri, undefined);
                                assert.equal(user.picture.large, undefined);
                                assert.equal(user.picture.largeUri, undefined);

                                RestAPI.User.updateUser(contexts['simon'].restContext, contexts['simon'].user.id, {'visibility': 'loggedin'}, function(err) {
                                    assert.ok(!err);

                                    RestAPI.User.getUser(contexts['nicolaas'].restContext, contexts['simon'].user.id, function(err, user) {
                                        assert.ok(!err);
                                        assert.ok(user.picture.small);
                                        assert.ok(user.picture.smallUri);
                                        assert.ok(user.picture.medium);
                                        assert.ok(user.picture.mediumUri);
                                        assert.ok(user.picture.large);
                                        assert.ok(user.picture.largeUri);

                                        // The user who owns the pictures can see everything
                                        RestAPI.User.getUser(contexts['simon'].restContext, contexts['simon'].user.id, function(err, user) {
                                            assert.ok(!err);
                                            assert.ok(user.picture.small);
                                            assert.ok(user.picture.smallUri);
                                            assert.ok(user.picture.medium);
                                            assert.ok(user.picture.mediumUri);
                                            assert.ok(user.picture.large);
                                            assert.ok(user.picture.largeUri);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that you cannot set/crop a picture for someone else.
         */
        it('verify uploading or cropping a picture for another user is not allowed', function(callback) {
            createUsers(function(contexts) {
                RestAPI.User.uploadPicture(contexts['simon'].restContext, contexts['nicolaas'].user.id, getPictureStream, null, function(err) {
                    assert.equal(err.code, 401);
                    verifyCropping(contexts['simon'].restContext, contexts['nicolaas'].user.id, createSelectedArea(10, 10, 200), 401, callback);
                });
            });
        });

        /*!
         * Verify that you cannot set a picture for a group you have no management rights on.
         */
        it('verify uploading or cropping a picture for a non-managed group is not allowed', function(callback) {
            createUsers(function(contexts) {
                TestsUtil.generateTestGroups(contexts['simon'].restContext, 1, function(err, groups) {
                    var group = groups[Object.keys(groups)[0]];
                    RestAPI.Group.uploadPicture(contexts['nicolaas'].restContext, group.id, getPictureStream, null, function(err) {
                        assert.equal(err.code, 401);
                        verifyCropping(contexts['nicolaas'].restContext, group.id, createSelectedArea(10, 10, 200), 401, function() {
                            // Making Nico a member should still not allow him to change the picture.
                            var members = {};
                            members[contexts['nicolaas'].user.id] = 'member';
                            RestAPI.Group.setGroupMembers(contexts['simon'].restContext, group.id, members, function(err) {
                                assert.ok(!err);
                                RestAPI.Group.uploadPicture(contexts['nicolaas'].restContext, group.id, getPictureStream, null, function(err) {
                                    assert.equal(err.code, 401);
                                    verifyCropping(contexts['nicolaas'].restContext, group.id, createSelectedArea(10, 10, 200), 401, function() {

                                        // Making him a manager should.
                                        members[contexts['nicolaas'].user.id] = 'manager';
                                        RestAPI.Group.setGroupMembers(contexts['simon'].restContext, group.id, members, function(err) {
                                            assert.ok(!err);
                                            RestAPI.Group.uploadPicture(contexts['nicolaas'].restContext, group.id, getPictureStream, null, function(err) {
                                                assert.ok(!err);
                                                verifyCropping(contexts['nicolaas'].restContext, group.id, createSelectedArea(10, 10, 200), 200, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the urls we generate for profile pictures are cacheable.
         */
        it('verify profile pictures are cacheable', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    // Get my data twice, the url's for the pictures shouldn't change as that would mean they aren't cacheable.
                    RestAPI.User.getUser(ctx, ctx.user.id, function(err, firstRequestUser) {
                        assert.ok(!err);
                        RestAPI.User.getUser(ctx, ctx.user.id, function(err, secondRequestUser) {
                            assert.ok(!err);
                            assert.equal(firstRequestUser.smallPicture, secondRequestUser.smallPicture);
                            assert.equal(firstRequestUser.mediumPicture, secondRequestUser.mediumPicture);
                            assert.equal(firstRequestUser.largePicture, secondRequestUser.largePicture);
                            callback();
                        });
                    });
                });
            });
        });

        /*!
         * Verify that when you upload a new picture, the old profile pictures does NOT get removed.
         */
        it('verify that old pictures are not removed when uploading a new large picture', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    // Get the user metadata and thus the picture url.
                    RestAPI.User.getUser(ctx, ctx.user.id, function(err, firstRequestUser) {
                        assert.ok(!err);

                        // Upload a new picture.
                        RestAPI.User.uploadPicture(ctx, ctx.user.id, getPictureStream, null, function(err) {
                            assert.ok(!err);

                            // Get the new user metadata.
                            RestAPI.User.getUser(ctx, ctx.user.id, function(err, secondRequestUser) {
                                assert.ok(!err);

                                // Get the URIs and check that they are not removed on the filesystem.
                                var smallPicturePath = rootFilesDir + '/' + firstRequestUser.picture.smallUri.split(':')[1];
                                var mediumPicturePath = rootFilesDir + '/' + firstRequestUser.picture.mediumUri.split(':')[1];
                                assert.equal(fs.existsSync(smallPicturePath), true, "The small picture has been removed.");
                                assert.equal(fs.existsSync(mediumPicturePath), true, "The medium picture has been removed.");

                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * This test searches trough all the members of a group and checks if the current user can see the profile pictures of them.
         * It assumes that the group has 3 members, each with a different user visibility setting.
         *
         * @param {RestContext} restContext     The context to search with.
         * @param {String}      groupId         The ID of the group
         * @param {Boolean}     canPublic       Whether or not the user in the passed in `restContext` should be able to see the profile picture of the public user.
         * @param {Boolean}     canLoggedIn     Whether or not the user in the passed in `restContext` should be able to see the profile picture of the loggedin user.
         * @param {Boolean}     canPrivate      Whether or not the user in the passed in `restContext` should be able to see the profile picture of the private user.
         * @param {String}      publicUserId    The ID of the user who has a visibility set to public.
         * @param {String}      loggedinUserId  The ID of the user who has a visibility set to public.
         * @param {String}      privateUserId   The ID of the user who has a visibility set to private.
         * @param {Function}    callback        Standard callback method.
         */
        var verifySearchThumbnails = function(restContext, groupId, canPublic, canLoggedIn, canPrivate, publicUserId, loggedinUserId, privateUserId, callback) {
            SearchTestsUtil.searchAll(restContext, 'members', [groupId], null, function(err, results) {
                assert.ok(!err);
                assert.equal(results.total, 3);
                var users = {};
                for (var i = 0; i < results.results.length; i++) {
                    users[results.results[i].id] = results.results[i];
                }

                assert.equal(users[publicUserId].hasOwnProperty('thumbnailUrl'), canPublic);
                assert.equal(users[loggedinUserId].hasOwnProperty('thumbnailUrl'), canLoggedIn);
                assert.equal(users[privateUserId].hasOwnProperty('thumbnailUrl'), canPrivate);
                callback();
            });
        };

        /**
         * Test that verifies that the thumbnail property in search results respects the user visibility
         */
        it('verify the user thumbnail visibility in member search results', function(callback) {
            // Setup the user/group structure.
             TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users) {
                assert.ok(!err);

                var publicUser = _.values(users)[0];
                var loggedInUser = _.values(users)[1];
                var privateUser = _.values(users)[2];
                var nonMemberUser = _.values(users)[3];

                RestAPI.User.updateUser(loggedInUser.restContext, loggedInUser.user.id, { 'visibility': 'loggedin' }, function(err) {
                    assert.ok(!err);

                    RestAPI.User.updateUser(privateUser.restContext, privateUser.user.id, { 'visibility': 'private' }, function(err) {
                        assert.ok(!err);

                        // each user has a profile picture.
                        var selectedArea = createSelectedArea(10, 10, 200, 200);
                        RestAPI.User.uploadPicture(publicUser.restContext, publicUser.user.id, getPictureStream, selectedArea, function(err) {
                            assert.ok(!err);

                            RestAPI.User.uploadPicture(loggedInUser.restContext, loggedInUser.user.id, getPictureStream, selectedArea, function(err) {
                                assert.ok(!err);

                                RestAPI.User.uploadPicture(privateUser.restContext, privateUser.user.id, getPictureStream, selectedArea, function(err) {
                                    assert.ok(!err);

                                    // Create a group with the two other members.
                                    var groupName = TestsUtil.generateTestUserId('someGroupName');
                                    RestAPI.Group.createGroup(privateUser.restContext, groupName, groupName, groupName, 'public', 'no', [], [loggedInUser.user.id, publicUser.user.id], function(err, group) {
                                        assert.ok(!err);
                                        // Perform one search where we wait for the search index to refresh.
                                        // All subsequent search requests don't have to wait.
                                        SearchTestsUtil.searchAll(anonymousRestContext, 'members', [group.id], null, function(err, results) {
                                            assert.ok(!err);

                                            // anonymous can search the group membership list but can only see the public user his picture.
                                            verifySearchThumbnails(anonymousRestContext, group.id, true, false, false, publicUser.user.id, loggedInUser.user.id, privateUser.user.id, function() {
                                                // a logged in user can see the public and 'logged in' user.
                                                verifySearchThumbnails(nonMemberUser.restContext, group.id, true, true, false, publicUser.user.id, loggedInUser.user.id, privateUser.user.id, function() {
                                                    // The public member can only see his own thumbnail and the loggedin user.
                                                    verifySearchThumbnails(publicUser.restContext, group.id, true, true, false, publicUser.user.id, loggedInUser.user.id, privateUser.user.id, function() {
                                                        // The 'logged in' user can see his own thumbnail and the public one.
                                                        verifySearchThumbnails(loggedInUser.restContext, group.id, true, true, false, publicUser.user.id, loggedInUser.user.id, privateUser.user.id, function() {
                                                            // The private user can see everyone's thumbnail.
                                                            verifySearchThumbnails(privateUser.restContext, group.id, true, true, true, publicUser.user.id, loggedInUser.user.id, privateUser.user.id, callback);
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the thumbnail property in search results respects the group visibility
         */
        it('verify the thumbnail is present in group search results', function(callback) {
            // Setup the user/group structure.
             TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var simon = _.values(users)[0];

                // Create some groups.
                TestsUtil.generateTestGroups(simon.restContext, 4, function(err, groups) {
                    assert.ok(!err);

                    var oaeTeam = _.values(groups)[0];
                    var backendTeam = _.values(groups)[1];
                    var uiTeam = _.values(groups)[2];
                    var qaTeam = _.values(groups)[3];

                    // Upload pictures for the sub teams
                    var selectedArea = createSelectedArea(10, 10, 200, 200);
                    RestAPI.User.uploadPicture(simon.restContext, backendTeam.id, getPictureStream, selectedArea, function(err) {
                        assert.ok(!err);

                        RestAPI.User.uploadPicture(simon.restContext, uiTeam.id, getPictureStream, selectedArea, function(err) {
                            assert.ok(!err);

                            RestAPI.User.uploadPicture(simon.restContext, qaTeam.id, getPictureStream, selectedArea, function(err) {
                                assert.ok(!err);

                                // Make the uiTeam loggedin.
                                RestAPI.Group.updateGroup(simon.restContext, uiTeam.id, { 'visibility': 'loggedin'}, function(err) {
                                    assert.ok(!err);

                                    // Make the qa team private.
                                    RestAPI.Group.updateGroup(simon.restContext, qaTeam.id, { 'visibility': 'private'}, function(err) {
                                        assert.ok(!err);

                                        // Make the backend, ui and qa teams member of oae team.
                                        var changes = {};
                                        changes[backendTeam.id] = 'member';
                                        changes[uiTeam.id] = 'member';
                                        changes[qaTeam.id] = 'member';
                                        RestAPI.Group.setGroupMembers(simon.restContext, oaeTeam.id, changes, function(err) {
                                            assert.ok(!err);

                                            // Search trough the memberlist of oaeTeam and filter the results so we only get the backend team group back.
                                            SearchTestsUtil.searchAll(simon.restContext, 'members', [oaeTeam.id], { 'q': 'Group' }, function(err, results) {
                                                assert.ok(!err);
                                                assert.equal(results.total, 3);
                                                // All the groups should expose their thumbnail regardless of their visibility setting.
                                                assert.ok(results.results[0].thumbnailUrl);
                                                assert.ok(results.results[1].thumbnailUrl);
                                                assert.ok(results.results[2].thumbnailUrl);

                                                // Try downloading it by just using the returned url.
                                                RestUtil.RestRequest(simon.restContext, results.results[0].thumbnailUrl, 'GET', null, function(err, body, response) {
                                                    assert.ok(!err);
                                                    // Downloading happens via nginx, so we can't verify the response body.
                                                    // We can verify if the status code is a 204 and if the appropriate headers are present.
                                                    assert.equal(response.statusCode, 204);
                                                    assert.ok(response.headers['x-accel-redirect']);
                                                    assert.ok(response.headers['content-disposition']);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
