/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthzAPI = require('oae-authz');
var ConfigTestUtil = require('oae-config/lib/test/util');
var ContentTestUtil = require('oae-content/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var FoldersContentLibrary = require('oae-folders/lib/internal/contentLibrary');
var FoldersDAO = require('oae-folders/lib/internal/dao');
var FoldersFolderLibrary = require('oae-folders/lib/internal/foldersLibrary');
var FoldersLibrary = require('oae-folders/lib/library');
var FoldersTestUtil = require('oae-folders/lib/test/util');

describe('Folders', function() {

    var camAdminRestContext = null;

    /*!
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });

    describe('Posting messages', function() {

        /**
         * Test that verifies input validation when creating a message
         */
        it('verify message creation validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, user, user1, user2) {
                assert.ok(!err);

                // Create a folder to test with
                FoldersTestUtil.assertCreateFolderSucceeds(user1.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                    // Test invalid folder id
                    FoldersTestUtil.assertCreateMessageFails(user1.restContext, 'not-a-valid-id', 'a body', null, 400, function() {

                        // Test not existing folder id
                        FoldersTestUtil.assertCreateMessageFails(user1.restContext, 'f:foo:bar', 'a body', null, 404, function() {

                            // Test no body
                            FoldersTestUtil.assertCreateMessageFails(user1.restContext, folder.id, null, null, 400, function() {

                                // Test invalid reply-to timestamp
                                FoldersTestUtil.assertCreateMessageFails(user1.restContext, folder.id, 'a body', 'NaN', 400, function() {

                                    // Test non-existing reply-to timestamp
                                    FoldersTestUtil.assertCreateMessageFails(user1.restContext, folder.id, 'a body', Date.now(), 400, function() {

                                        // Test a body that is longer than the maximum allowed size
                                        var body = TestsUtil.generateRandomText(10000);
                                        FoldersTestUtil.assertCreateMessageFails(user1.restContext, folder.id, body, null, 400, function() {

                                            // Sanity check
                                            FoldersTestUtil.assertCreateMessageSucceeds(user1.restContext, folder.id, 'a body', null, function(message) {
                                                assert.ok(message);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the model of created messages, and permissions of creating messages on different types of folders
         */
        it('verify creating a message, model and permissions', function(callback) {
            FoldersTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Cannot post message as anonymous user
                FoldersTestUtil.assertCreateMessageFails(publicTenant.anonymousRestContext, publicTenant.publicFolder.id, 'a body', null, 401, function() {

                    // Cannot post to private folder as non-member
                    FoldersTestUtil.assertCreateMessageFails(publicTenant.privateUser.restContext, publicTenant.privateFolder.id, 'a body', null, 401, function() {

                        // Can post as an authenticated user from the same tenant, verify the model
                        FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.publicUser.restContext, publicTenant.publicFolder.id, 'Top-level message', null, function(message) {
                            assert.ok(message);

                            // This is the expected messagebox id of the folder
                            var messageBoxId = publicTenant.publicFolder.id;

                            assert.equal(message.id, messageBoxId + '#' + message.created);
                            assert.equal(message.messageBoxId, messageBoxId);
                            assert.equal(message.threadKey, message.created + '|');
                            assert.equal(message.body, 'Top-level message');
                            assert.equal(message.createdBy.id, publicTenant.publicUser.user.id);
                            assert.notEqual(parseInt(message.created, 10), NaN);
                            assert.strictEqual(message.level, 0);
                            assert.ok(!message.replyTo);

                            // Reply to that message and verify the model
                            FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.publicFolder.id, 'Reply message', message.created, function(replyMessage) {
                                assert.ok(replyMessage);

                                // This is the expected replyMessagebox id of the folder
                                assert.equal(replyMessage.id, messageBoxId + '#' + replyMessage.created);
                                assert.equal(replyMessage.messageBoxId, messageBoxId);
                                assert.equal(replyMessage.threadKey, message.created + '#' + replyMessage.created + '|');
                                assert.equal(replyMessage.body, 'Reply message');
                                assert.equal(replyMessage.createdBy.id, publicTenant.loggedinUser.user.id);
                                assert.notEqual(parseInt(replyMessage.created, 10), NaN);
                                assert.strictEqual(replyMessage.level, 1);
                                assert.ok(replyMessage.replyTo, message.created);

                                // Cross-tenant user from public tenant can post to a public folder
                                FoldersTestUtil.assertCreateMessageSucceeds(publicTenant1.loggedinUser.restContext, publicTenant.publicFolder.id, 'Message from external user', null, function(message) {
                                    assert.ok(message);

                                    // Cross-tenant user from public tenant cannot post to a loggedin folder
                                    FoldersTestUtil.assertCreateMessageFails(publicTenant1.publicUser.restContext, publicTenant.loggedinFolder.id, 'Message from external user', null, 401, function() {

                                        // Cross-tenant user from private tenant cannot post to a public folder
                                        FoldersTestUtil.assertCreateMessageFails(privateTenant.publicUser.restContext, publicTenant.publicFolder.id, 'Message from external user', null, 401, function() {

                                            // Cross-tenant admin cannot post to a loggedin folder
                                            FoldersTestUtil.assertCreateMessageFails(publicTenant1.adminRestContext, publicTenant.loggedinFolder.id, 'Message from external user', null, 401, function() {

                                                // Can post to private folder as a member. Share it, then test creating a message
                                                FoldersTestUtil.assertShareFolderSucceeds(publicTenant.adminRestContext, publicTenant.adminRestContext, publicTenant.privateFolder.id, [publicTenant.privateUser], function() {

                                                    FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.privateUser.restContext, publicTenant.privateFolder.id, 'Message from external user', null, function(message) {
                                                        assert.ok(message);

                                                        // Can post to folder as admin
                                                        FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.adminRestContext, publicTenant.privateFolder.id, 'Message from tenant admin user', null, function(message) {
                                                            assert.ok(message);
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that messages contain user profile pictures
         */
        it('verify messages contain user profile pictures', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, bert, nicolaas) {
                assert.ok(!err);

                /**
                 * Return a profile picture stream
                 *
                 * @return {Stream}     A stream containing an profile picture
                 */
                var getPictureStream = function() {
                    var file = __dirname + '/data/profilepic.jpg';
                    return fs.createReadStream(file);
                };

                // Give one of the users a profile picture
                var cropArea = {'x': 0, 'y': 0, 'width': 150, 'height': 150};
                RestAPI.User.uploadPicture(bert.restContext, bert.user.id, getPictureStream, cropArea, function(err) {
                    assert.ok(!err);

                    // Create a folder and share it with a user that has no profile picture
                    FoldersTestUtil.assertCreateFolderSucceeds(bert.restContext, 'test displayName', 'test description', 'public', [], [nicolaas], function(folder) {

                        // Add a message to the folder as a user with a profile picture
                        FoldersTestUtil.assertCreateMessageSucceeds(bert.restContext, folder.id, 'Message body 1', null, function(message) {

                            // Assert that the picture URLs are present
                            assert.ok(message.createdBy);
                            assert.ok(message.createdBy.picture);
                            assert.ok(message.createdBy.picture.small);
                            assert.ok(message.createdBy.picture.medium);
                            assert.ok(message.createdBy.picture.large);

                            // Assert that this works for replies as well
                            FoldersTestUtil.assertCreateMessageSucceeds(bert.restContext, folder.id, 'Message body 2', message.created, function(reply) {

                                 // Assert that the picture URLs are present
                                assert.ok(reply.createdBy);
                                assert.ok(reply.createdBy.picture);
                                assert.ok(reply.createdBy.picture.small);
                                assert.ok(reply.createdBy.picture.medium);
                                assert.ok(reply.createdBy.picture.large);

                                // Add a message to the folder as a user with no profile picture
                                FoldersTestUtil.assertCreateMessageSucceeds(nicolaas.restContext, folder.id, 'Message body 3', null, function(message) {

                                    // Assert that no picture URLs are present
                                    assert.ok(message.createdBy);
                                    assert.ok(message.createdBy.picture);
                                    assert.ok(!message.createdBy.picture.small);
                                    assert.ok(!message.createdBy.picture.medium);
                                    assert.ok(!message.createdBy.picture.large);

                                    // Assert that this works for replies as well
                                    FoldersTestUtil.assertCreateMessageSucceeds(nicolaas.restContext, folder.id, 'Message body 4', message.created, function(reply) {

                                        // Assert that no picture URLs are present
                                        assert.ok(reply.createdBy);
                                        assert.ok(reply.createdBy.picture);
                                        assert.ok(!reply.createdBy.picture.small);
                                        assert.ok(!reply.createdBy.picture.medium);
                                        assert.ok(!reply.createdBy.picture.large);

                                        // Assert the profile picture urls are present when retrieving a list of messages
                                        FoldersTestUtil.assertGetMessagesSucceeds(bert.restContext, folder.id, null, 10, function(messages) {
                                            assert.equal(messages.results.length, 4);
                                            _.each(messages.results, function(message) {
                                                assert.ok(message.createdBy);
                                                assert.ok(message.createdBy.picture);

                                                // Verify that the messages have a picture for the user that
                                                // has a profile picture
                                                if (message.createdBy.id === bert.user.id) {
                                                    assert.ok(message.createdBy.picture.small);
                                                    assert.ok(message.createdBy.picture.medium);
                                                    assert.ok(message.createdBy.picture.large);

                                                // Verify that the messages don't have a picture for the user
                                                // without a profile picture
                                                } else if (message.createdBy.id === nicolaas.user.id) {
                                                    assert.ok(!message.createdBy.picture.small);
                                                    assert.ok(!message.createdBy.picture.medium);
                                                    assert.ok(!message.createdBy.picture.large);
                                                } else {
                                                    assert.fail('Unexpected user in messages');
                                                }
                                            });

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a folder is updated at most every hour as a result of new message postings
         */
        it('verify folder update threshold with messages', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Create a folder to test with
                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                    var lastModified1 = folder.lastModified;

                    // Create a message to test with
                    FoldersTestUtil.assertCreateMessageSucceeds(simong.restContext, folder.id, 'My message', null, function(message) {

                        // Ensure lastModified didn't change because it is within the one hour threshold
                        FoldersTestUtil.assertGetFolderSucceeds(simong.restContext, folder.id, function(folder) {
                            assert.ok(!err);
                            assert.equal(folder.lastModified, lastModified1);

                            // Force a naughty update through the DAO of the lastModified to more than an hour ago (threshold duration)
                            var lastModified0 = lastModified1 - (1 * 60 * 61 * 1000);
                            FoldersDAO.updateFolder(folder, {'lastModified': lastModified0}, function(err, folder) {
                                assert.ok(!err);
                                assert.equal(folder.lastModified, lastModified0);

                                // Message again, this time the lastModified should update
                                FoldersTestUtil.assertCreateMessageSucceeds(simong.restContext, folder.id, 'My second message', null, function(message) {

                                    // Ensure the new lastModified is greater than the original creation one
                                    FoldersTestUtil.assertGetFolderSucceeds(simong.restContext, folder.id, function(folder) {
                                        assert.ok(parseInt(folder.lastModified, 10) > parseInt(lastModified1, 10));

                                        // Note at this time, since the lastModified of the folder updated under the hood without
                                        // a library update, the library of user should 2 versions of this folder. Lets see if it
                                        // auto-repairs
                                        FoldersTestUtil.assertGetFoldersLibrarySucceeds(simong.restContext, simong.user.id, null, null, function(items) {
                                            assert.equal(items.results.length, 1);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Listing messages', function() {

        /**
         * Test that verifies input validation of listing messages from a folder
         */
        it('verify list messages validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Create a folder to test with
                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                    // Validate invalid folder id
                    FoldersTestUtil.assertGetMessagesFails(simong.restContext, 'not-a-valid-id', null, null, 400, function() {

                        // Non-existing folder
                        FoldersTestUtil.assertGetMessagesFails(simong.restContext, 'f:foo:bar', null, null, 404, function() {

                            // Sanity-check
                            FoldersTestUtil.assertGetMessagesSucceeds(simong.restContext, folder.id, null, null, function(messages) {
                                assert.ok(!err);
                                assert.ok(messages);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the model of messages, and permissions for accessing them
         */
        it('verify listing messages, model and permissions', function(callback) {

            /*!
             * Ensure that the message model is correct between the message to test and the message against which to test.
             *
             * @param  {Message}    messageToTest           The message to test
             * @param  {Message}    messageToTestAgainst    The message against which to test
             * @param  {User}       creatorToTestAgainst    The user data (i.e., `createdBy`) to test against for the message creator
             * @param  {Boolean}    userScrubbed            Whether or not the createdBy field should have scrubbed user data
             * @throws {Error}                              Throws an assertion error if the data fails assertions
             */
            var _assertMessageModel = function(messageToTest, messageToTestAgainst, creatorToTestAgainst, userScrubbed) {

                // Verify message model
                assert.equal(messageToTest.id, messageToTestAgainst.id);
                assert.equal(messageToTest.messageBoxId, messageToTestAgainst.messageBoxId);
                assert.equal(messageToTest.threadKey, messageToTestAgainst.threadKey);
                assert.equal(messageToTest.body, messageToTestAgainst.body);
                assert.equal(messageToTest.created, messageToTestAgainst.created);
                assert.strictEqual(messageToTest.level, messageToTestAgainst.level);
                assert.equal(messageToTest.replyTo, messageToTestAgainst.replyTo);

                // Verify creator model
                assert.ok(messageToTest.createdBy);
                assert.equal(messageToTest.createdBy.tenant.alias, creatorToTestAgainst.tenant.alias);
                assert.equal(messageToTest.createdBy.tenant.displayName, creatorToTestAgainst.tenant.displayName);
                assert.equal(messageToTest.createdBy.visibility, creatorToTestAgainst.visibility);

                // Privacy check
                if (userScrubbed) {
                    assert.equal(messageToTest.createdBy.displayName, creatorToTestAgainst.publicAlias);
                } else {
                    assert.equal(messageToTest.createdBy.displayName, creatorToTestAgainst.displayName);
                }
            };

            // Set up the tenants for tenant privacy rule checking
            FoldersTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Create message structure on the public folder
                FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.publicFolder.id, 'Message1 parent on public', null, function(publicMessage1) {
                    FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.publicFolder.id, 'Message1 reply on public', publicMessage1.created, function(replyPublicMessage1) {
                        FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.publicFolder.id, 'Message2 parent on public', null, function(publicMessage2) {

                            // Create message on the loggedin folder
                            FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.loggedinFolder.id, 'Message on loggedin', null, function(loggedinMessage) {

                                // Share and post message on the private folder
                                FoldersTestUtil.assertShareFolderSucceeds(publicTenant.adminRestContext, publicTenant.adminRestContext, publicTenant.privateFolder.id, [publicTenant.privateUser], function() {

                                    FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.privateUser.restContext, publicTenant.privateFolder.id, 'Message on private', null, function(privateMessage) {

                                        // Anonymous can read on public, but not loggedin or private
                                        FoldersTestUtil.assertGetMessagesSucceeds(publicTenant.anonymousRestContext, publicTenant.publicFolder.id, null, null, function(messages) {
                                            assert.ok(messages);
                                            assert.equal(messages.results.length, 3);

                                            // Verify the model of all 3 messages
                                            _assertMessageModel(messages.results[0], publicMessage2, publicTenant.loggedinUser.user, true);
                                            _assertMessageModel(messages.results[1], publicMessage1, publicTenant.loggedinUser.user, true);
                                            _assertMessageModel(messages.results[2], replyPublicMessage1, publicTenant.loggedinUser.user, true);

                                            FoldersTestUtil.assertGetMessagesFails(publicTenant.anonymousRestContext, publicTenant.loggedinFolder.id, null, null, 401, function(messages) {
                                                FoldersTestUtil.assertGetMessagesFails(publicTenant.anonymousRestContext, publicTenant.privateFolder.id, null, null, 401, function(messages) {

                                                    // Authenticated user can read loggedin
                                                    FoldersTestUtil.assertGetMessagesSucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinFolder.id, null, null, function(messages) {
                                                        assert.ok(messages);
                                                        assert.equal(messages.results.length, 1);

                                                        // Verify the model of the message, the loggedin user should not be scrubbed
                                                        _assertMessageModel(messages.results[0], loggedinMessage, publicTenant.loggedinUser.user, false);

                                                        // Authenticated user cannot read private
                                                        FoldersTestUtil.assertGetMessagesFails(publicTenant.publicUser.restContext, publicTenant.privateFolder.id, null, null, 401, function(messages) {

                                                            // Member user can read private
                                                            FoldersTestUtil.assertGetMessagesSucceeds(publicTenant.privateUser.restContext, publicTenant.privateFolder.id, null, null, function(messages) {
                                                                assert.ok(messages);
                                                                assert.equal(messages.results.length, 1);

                                                                // Verify the model of the message, the loggedin user should not be scrubbed
                                                                _assertMessageModel(messages.results[0], privateMessage, publicTenant.privateUser.user, false);

                                                                // Ensure paging of the messages
                                                                FoldersTestUtil.assertGetMessagesSucceeds(publicTenant.anonymousRestContext, publicTenant.publicFolder.id, null, 2, function(messages) {
                                                                    assert.ok(messages);
                                                                    assert.equal(messages.nextToken, messages.results[1].threadKey);

                                                                    assert.equal(messages.results.length, 2);

                                                                    // Verify the model and ordering of the messages
                                                                    _assertMessageModel(messages.results[0], publicMessage2, publicTenant.loggedinUser.user, true);
                                                                    _assertMessageModel(messages.results[1], publicMessage1, publicTenant.loggedinUser.user, true);

                                                                    // Try and get 2 more. Should only get 1 and it should be the 3rd message
                                                                    FoldersTestUtil.assertGetMessagesSucceeds(publicTenant.anonymousRestContext, publicTenant.publicFolder.id, publicMessage1.threadKey, 2, function(messages) {
                                                                        assert.ok(messages);
                                                                        assert.equal(messages.results.length, 1);
                                                                        assert.ok(!messages.nextToken);

                                                                        // Verify the model and ordering of the messages
                                                                        _assertMessageModel(messages.results[0], replyPublicMessage1, publicTenant.loggedinUser.user, true);

                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Deleting messages', function() {

        /**
         * Test that verifies input validation of deleting messages from a folder
         */
        it('verify delete message validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user, simong) {
                assert.ok(!err);

                // Create a folder to test with
                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                    // Create message on the folder to delete
                    FoldersTestUtil.assertCreateMessageSucceeds(simong.restContext, folder.id, 'a message', null, function(message) {

                        // Validate invalid folder id
                        FoldersTestUtil.assertDeleteMessageFails(simong.restContext, 'not-a-folder-id', message.created, 400, function() {

                            // Unknown folder id
                            FoldersTestUtil.assertDeleteMessageFails(simong.restContext, 'f:foo:bar', message.created, 404, function() {

                                // Validate invalid timestamp
                                FoldersTestUtil.assertDeleteMessageFails(simong.restContext, folder.id, 'NaN', 400, function() {
                                    FoldersTestUtil.assertDeleteMessageFails(simong.restContext, folder.id, 'Not a created timestamp', 400, function() {

                                        // Assert the message was not removed
                                        FoldersTestUtil.assertGetMessagesSucceeds(simong.restContext, folder.id, null, 2, function(messages) {
                                            assert.strictEqual(messages.results.length, 1);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the logic of deleting messages, and the model and permissions for the operation
         */
        it('verify deleting messages, model and permissions', function(callback) {

            FoldersTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Add a manager to the folder
                var updates = {};
                updates[publicTenant.privateUser.user.id] = 'manager';
                updates[publicTenant.loggedinUser.user.id] = 'viewer';
                FoldersTestUtil.assertUpdateFolderMembersSucceeds(publicTenant.adminRestContext, publicTenant.adminRestContext, publicTenant.privateFolder.id, updates, function() {

                    // Create message structure on the public folder
                    FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.privateFolder.id, 'Message1 parent on public', null, function(publicMessage1) {
                        FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.privateFolder.id, 'Message1 reply on public', publicMessage1.created, function(replyPublicMessage1) {
                            FoldersTestUtil.assertCreateMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.privateFolder.id, 'Message2 parent on public', null, function(publicMessage2) {

                                // Verify anonymous cannot delete a message
                                FoldersTestUtil.assertDeleteMessageFails(publicTenant.anonymousRestContext, publicTenant.privateFolder.id, publicMessage1.created, 401, function() {

                                    // Verify non-manager, non-creator user can't delete a message
                                    FoldersTestUtil.assertDeleteMessageFails(publicTenant.publicUser.restContext, publicTenant.privateFolder.id, publicMessage1.created, 401, function() {

                                        // Verify manager can delete, also verify the parent message is soft-deleted and its model
                                        FoldersTestUtil.assertDeleteMessageSucceeds(publicTenant.privateUser.restContext, publicTenant.privateFolder.id, publicMessage1.created, function(message) {

                                            // Ensure the deleted message model
                                            assert.equal(message.id, publicMessage1.id);
                                            assert.equal(message.messageBoxId, publicMessage1.messageBoxId);
                                            assert.equal(message.threadKey, publicMessage1.threadKey);
                                            assert.equal(message.created, publicMessage1.created);
                                            assert.equal(message.replyTo, publicMessage1.replyTo);
                                            assert.notEqual(parseInt(message.deleted, 10), NaN);
                                            assert.ok(parseInt(message.deleted, 10) > parseInt(message.created, 10));
                                            assert.strictEqual(message.level, publicMessage1.level);
                                            assert.ok(!message.body);
                                            assert.ok(!message.createdBy);

                                            // Ensure the deleted message is still in the list of messages, but marked as deleted
                                            FoldersTestUtil.assertGetMessagesSucceeds(publicTenant.privateUser.restContext, publicTenant.privateFolder.id, null, null, function(items) {
                                                assert.ok(items.results.length, 3);

                                                var message = items.results[1];
                                                assert.equal(message.id, publicMessage1.id);
                                                assert.equal(message.messageBoxId, publicMessage1.messageBoxId);
                                                assert.equal(message.threadKey, publicMessage1.threadKey);
                                                assert.equal(message.created, publicMessage1.created);
                                                assert.equal(message.replyTo, publicMessage1.replyTo);
                                                assert.notEqual(parseInt(message.deleted, 10), NaN);
                                                assert.ok(parseInt(message.deleted, 10) > parseInt(message.created, 10));
                                                assert.strictEqual(message.level, publicMessage1.level);
                                                assert.ok(!message.body);
                                                assert.ok(!message.createdBy);

                                                // Delete the rest of the messages to test hard-deletes. This also tests owner can delete
                                                FoldersTestUtil.assertDeleteMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.privateFolder.id, replyPublicMessage1.created, function(message) {
                                                    assert.ok(!message);

                                                    // We re-delete this one, but it should actually do a hard delete this time as there are no children
                                                    FoldersTestUtil.assertDeleteMessageSucceeds(publicTenant.loggedinUser.restContext, publicTenant.privateFolder.id, publicMessage1.created, function(message) {
                                                        assert.ok(!message);

                                                        // Perform a hard-delete on this leaf message. This also tests admin can delete
                                                        FoldersTestUtil.assertDeleteMessageSucceeds(publicTenant.adminRestContext, publicTenant.privateFolder.id, publicMessage2.created, function(message) {
                                                            assert.ok(!message);

                                                            // Should be no more messages in the folder as they should have all been de-indexed by hard deletes
                                                            FoldersTestUtil.assertGetMessagesSucceeds(publicTenant.privateUser.restContext, publicTenant.privateFolder.id, null, null, function(items) {
                                                                assert.equal(items.results.length, 0);
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
