/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var TwitterStrategy = require('passport-twitter').Strategy;

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var TZ = require('oae-util/lib/tz');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');


module.exports = function() {
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias) {
        return AuthenticationConfig.getValue(tenantAlias, AuthenticationConstants.providers.TWITTER, 'enabled');
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant) {
        // We fetch the config values *in* the getPassportStrategy so it can be re-configured at run-time.
        var consumerKey = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.TWITTER, 'key');
        var consumerSecret = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.TWITTER, 'secret');

        var passportStrategy = new TwitterStrategy({
            'consumerKey': consumerKey,
            'consumerSecret': consumerSecret,
            'callbackURL': AuthenticationUtil.constructCallbackUrl(tenant, AuthenticationConstants.providers.TWITTER)
        }, function(token, tokenSecret, profile, done) {

            log().trace({
                'tenant': tenant,
                'profile': profile
            }, 'Received Twitter authentication callback.');

            // Use the Twitter handle to register this user.
            // Unfortunately Twitter doesn't hand out the e-mail address.
            // See: https://dev.twitter.com/discussions/4019
            var username = profile.username;
            var displayName = profile.displayName;
            var opts = {
                // Twitter uses Ruby on Rails timezone names, use a mapper to map them to TZInfo timezones
                timezone: TZ.getTimezoneFromRails(profile._json.time_zone)
            };
            var picture = profile['_json']['profile_image_url_https'];
            if (picture) {
                opts.smallPictureUri = 'remote:' + picture;
                opts.mediumPictureUri = 'remote:' + picture;
            }

            var context = new Context(tenant, null);
            AuthenticationAPI.getOrCreateUser(context, AuthenticationConstants.providers.TWITTER, username, displayName, opts, done);
        });
        return passportStrategy;
    };

    // Register our strategy.
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.TWITTER, strategy);
};
