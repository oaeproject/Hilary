/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var ContentAPI = require('oae-content');
var DiscussionsAPI = require('oae-discussions');
var Signature = require('oae-util/lib/signature');
var Validator = require('oae-util/lib/validator').Validator;

var ActivityAPI = require('./api');

ActivityAPI.registerActivityStreamType('activity', {
    'transient': false,
    'authorizationHandler': function(ctx, resourceId, token, callback) {
        // Tenant admins can see all the streams
        var resource = AuthzUtil.getResourceFromId(resourceId);
        if (ctx.user() && ctx.user().isAdmin(resource.tenantAlias)) {
            return callback();

        // User streams
        } else if (AuthzUtil.isUserId(resourceId)) {
            return _authorizeUserActivityStream(ctx, resourceId, token, callback);

        // Group streams
        } else if (AuthzUtil.isGroupId(resourceId)) {
            return _authorizeGroupActivityStream(ctx, resourceId, token, callback);

        // Content streams
        } else if (resource.resourceType === 'c') {
            return _authorizeContentActivityStream(ctx, resourceId, token, callback);

        // Discussion streams
        } else if (resource.resourceType === 'd') {
            return _authorizeDiscussionActivityStream(ctx, resourceId, token, callback);

        // Folder streams
        } else if (resource.resourceType === 'f') {
            return _authorizeFolderActivityStream(ctx, resourceId, token, callback);

        // Unknown type of resource
        } else {
            return callback({'code': 404, 'msg': 'Unknown type of resource'});
        }
    }
});

ActivityAPI.registerActivityStreamType('message', {
    'transient': true,
    'authorizationHandler': function(ctx, resourceId, token, callback) {
        // Tenant admins can see all the streams
        var resource = AuthzUtil.getResourceFromId(resourceId);
        if (ctx.user() && ctx.user().isAdmin(resource.tenantAlias)) {
            return callback();

        // Content streams
        } else if (resourceId[0] === 'c') {
            return _authorizeContentActivityStream(ctx, resourceId, token, callback);

        // Discussion streams
        } else if (resourceId[0] === 'd') {
            return _authorizeDiscussionActivityStream(ctx, resourceId, token, callback);

        // Unknown type of resource
        } else {
            return callback({'code': 404, 'msg': 'Unknown type of resource'});
        }
    }
});

ActivityAPI.registerActivityStreamType('notification', {
    'transient': false,
    'authorizationHandler': function(ctx, resourceId, token, callback) {
        if (!AuthzUtil.isUserId(resourceId)) {
            return callback({'code': 400, 'msg': 'Only users can have notification streams'});
        }

        if (!ctx.user()) {
            return callback({'code': 401, 'msg': 'Only authenticated users can retrieve a notification stream'});
        } else if (ctx.user().id !== resourceId) {
            return callback({'code': 401, 'msg': 'You can only request your own notification stream'});
        }

        return callback();
    }
});

///////////////////////////////////
// SPECIC AUTHORIZATION HANDLERS //
///////////////////////////////////

/**
 * User authorization handler
 *
 * @see ActivityAPI#registerActivityStream
 * @api private
 */
var _authorizeUserActivityStream = function(ctx, userId, token, callback) {
    if (!ctx.user()) {
        return callback({'code': 401, 'msg': 'Only authenticated users can retrieve a user\'s activity stream'});
    } else if (ctx.user().id !== userId) {
        return callback({'code': 401, 'msg': 'You can only request your own notification stream'});
    }

    return callback();
};

/**
 * Group authorization handler
 *
 * @see ActivityAPI#registerActivityStream
 * @api private
 */
var _authorizeGroupActivityStream = function(ctx, groupId, token, callback) {
    if (!ctx.user()) {
        return callback({'code': 401, 'msg': 'Must be a member of a group to see its activity stream'});
    } else if (_.isObject(token)) {
        if (!Signature.verifyExpiringResourceSignature(ctx, groupId, token.expires, token.signature)) {
            return callback({'code': 401, 'msg': 'Invalid signature'});
        }

        return callback();
    } else {
        AuthzAPI.hasAnyRole(ctx.user().id, groupId, function(err, hasAnyRole) {
            if (err) {
                return callback(err);
            } else if (!hasAnyRole) {
                return callback({'code': 401, 'msg': 'Must be a member of a group to see its activity stream'});
            }

            return callback();
        });
    }
};

/**
 * Content authorization handler
 *
 * @see ActivityAPI#registerActivityStream
 * @api private
 */
var _authorizeContentActivityStream = function(ctx, contentId, token, callback) {
    if (_.isObject(token)) {
        if (!Signature.verifyExpiringResourceSignature(ctx, contentId, token.expires, token.signature)) {
            return callback({'code': 401, 'msg': 'Invalid signature'});
        }

        return callback();
    } else {
        ContentAPI.hasAccess(ctx, contentId, function(err, hasAccess) {
            if (err) {
                return callback(err);
            } else if (!hasAccess) {
                return callback({'code': 401, 'msg': 'You don\'t have access to this piece of content'});
            }

            return callback();
        });
    }
};

/**
 * Discussion authorization handler
 *
 * @see ActivityAPI#registerActivityStream
 * @api private
 */
var _authorizeDiscussionActivityStream = function(ctx, discussionId, token, callback) {
    if (_.isObject(token)) {
        if (!Signature.verifyExpiringResourceSignature(ctx, discussionId, token.expires, token.signature)) {
            return callback({'code': 401, 'msg': 'Invalid signature'});
        }

        return callback();
    } else {
        DiscussionsAPI.Discussions.getDiscussion(ctx, discussionId, function(err, discussion) {
            if (err) {
                return callback(err);
            }

            return callback();
        });
    }
};


/**
 * Folder authorization handler
 *
 * @see ActivityAPI#registerActivityStream
 * @api private
 */
var _authorizeFolderActivityStream = function(ctx, folderId, token, callback) {
    if (_.isObject(token)) {
        if (!Signature.verifyExpiringResourceSignature(ctx, folderId, token.expires, token.signature)) {
            return callback({'code': 401, 'msg': 'Invalid signature'});
        }

        return callback();
    } else {
        FoldersAPI.getFolder(ctx, folderId, function(err, discussion) {
            if (err) {
                return callback(err);
            }

            return callback();
        });
    }
};
