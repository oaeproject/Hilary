/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var MqTestsUtil = require('oae-util/lib/test/mq-util');
var RestAPI = require('oae-rest');

var ActivityAggregator = require('oae-activity/lib/internal/aggregator');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;

/**
 * Get the activity stream by its id, but delay and perform an activity collection first to ensure the stream is
 * updated.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {String}         [activityStreamId]  The id of the activity stream to get. If `null`, will get the stream of the current user
 * @param  {Object}         [opts]              @see RestAPI.Activity#getActivityStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getActivityStream for more information.
 */
var collectAndGetActivityStream = module.exports.collectAndGetActivityStream = function(restCtx, activityStreamId, opts, callback) {
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            if (activityStreamId) {
                RestAPI.Activity.getActivityStream(restCtx, activityStreamId, opts, callback);
            } else {
                RestAPI.Activity.getCurrentUserActivityStream(restCtx, opts, callback);
            }
        });
    });
};

/**
 * Get the notification stream, but delay and perform an activity collection first to ensure the stream is
 * updated.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {Object}         [opts]              @see RestAPI.Activity#getNotificationStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getNotificationStream for more information.
 */
var collectAndGetNotificationStream = module.exports.collectAndGetNotificationStream = function(restCtx, opts, callback) {
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            RestAPI.Activity.getNotificationStream(restCtx, opts, callback);
        });
    });
};

/**
 * Perform basic assertions of an activity and the entities that it contains
 *
 * @param  {Activity}           activity            The activity whose contents to verify
 * @param  {String}             activityType        The activity type that should be associated to the activity
 * @param  {String}             verb                The verb that should be associated to the activity
 * @param  {String|String[]}    actorEntityId       The id of the entity that should be the actor, or an array of expected actor entity ids if the entity is expected to be an oae:collection aggregate
 * @param  {String|String[]}    [objectEntityId]    The id of the entity that should be the object, or an array of expected object entity ids if the entity is expected to be an oae:collection aggregate. If not specified, an assertion will be performed that the object does not exist
 * @param  {String|String[]}    [targetEntityId]    The id of the entity taht should be the target, or an array of expected target entity ids if the entity is expected to be an oae:collection aggregate. If not specified, an assertion will be performed that the target does not exist
 */
var assertActivity = module.exports.assertActivity = function(activity, activityType, verb, actorEntityId, objectEntityId, targetEntityId) {
    assert.ok(activity);
    assert.equal(activity[ActivityConstants.properties.OAE_ACTIVITY_TYPE], activityType);
    assert.equal(activity.verb, verb);
    _assertActivityEntity(activity.actor, actorEntityId);
    _assertActivityEntity(activity.object, objectEntityId);
    _assertActivityEntity(activity.target, targetEntityId);
};

/**
 * Verify the id(s) of the provided activity entity against the provided entity id
 *
 * @param  {ActivityEntity}     [activityEntity]    The activity entity to validate
 * @param  {String|String[]}    [entityId]          The expected id of the entity, or an array of expected entity ids if the entity is expected to be an oae:collection aggregate. If not specified, an assertion will be performed that the entity does not exist (i.e., it's unspecified)
 * @api private
 */
var _assertActivityEntity = function(activityEntity, entityId) {
    if (!entityId) {
        assert.ok(!activityEntity);
    } else if (_.isString(entityId)) {
        assert.ok(activityEntity);
        assert.equal(activityEntity[ActivityConstants.properties.OAE_ID], entityId);
    } else if (_.isArray(entityId)) {
        // The entity id is an array, so we need to make sure every id in this list is on the activity entity collection
        var entityIds = entityId;
        assert.ok(activityEntity);

        // Ensure it is a collection with the same amount of ids as the given list of entity ids
        assert.equal(activityEntity.objectType, 'collection');
        assert.ok(activityEntity[ActivityConstants.properties.OAE_COLLECTION]);
        assert.strictEqual(activityEntity[ActivityConstants.properties.OAE_COLLECTION].length, entityIds.length);

        // Ensure every id in the list is in the entity collection
        _.each(activityEntity[ActivityConstants.properties.OAE_COLLECTION], function(activityEntity) {
            assert.ok(_.contains(entityIds, activityEntity[ActivityConstants.properties.OAE_ID]));
        });
    }
};
