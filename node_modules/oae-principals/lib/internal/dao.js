/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var sanitize = require('validator').sanitize;
var util = require('util');

var AuthzDelete = require('oae-authz/lib/delete');
var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('principals-dao');
var OaeUtil = require('oae-util/lib/util');
var Redis = require('oae-util/lib/redis');
var TZ = require('oae-util/lib/tz');
var Validator = require('oae-authz/lib/validator').Validator;

var Group = require('oae-principals/lib/model').Group;
var PrincipalsConfig = require('oae-config').config('oae-principals');
var PrincipalsUtil = require('oae-principals/lib/util');
var User = require('oae-principals/lib/model').User;

var RESTRICTED_FIELDS = ['acceptedTC', 'admin:tenant', 'admin:global', 'deleted'];

/**
 * Create a user record in the database
 *
 * @param  {User}       user            The user to persist
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var createUser = module.exports.createUser = function(user, callback) {
    var queries = [];

    // Persist the user object
    var values = {
        'tenantAlias': user.tenant.alias,
        'displayName': user.displayName,
        'visibility': user.visibility,
        'email': user.email,
        'emailPreference': user.emailPreference,
        'locale': user.locale,
        'publicAlias': user.publicAlias,
        'smallPictureUri': user.picture.smallUri,
        'mediumPictureUri': user.picture.mediumUri,
        'largePictureUri': user.picture.largeUri,
        'acceptedTC': (user.acceptedTC ? user.acceptedTC.toString() : null)
    };
    queries.push(Cassandra.constructUpsertCQL('Principals', 'principalId', user.id, values));

    // Only map the email address to the user if it's verified
    if (user.email) {
        queries.push({'query': 'INSERT INTO "PrincipalsByEmail" ("email", "principalId") VALUES (?, ?)', 'parameters': [user.email, user.id]});
    }

    return Cassandra.runBatchQuery(queries, callback);
};

/**
 * Create a group record in the database
 *
 * @param  {String}     groupId             The ID of the new group
 * @param  {String}     displayName         The displayName for this group
 * @param  {String}     description         A description for this group
 * @param  {String}     visibility          The visibility that should be set for this group. Should be one of `AuthzConstants.visibility`'s values
 * @param  {String}     joinable            Whether or not this group can be joined by people. Should be one of `AuthzConstants.joinable`'s values
 * @param  {String}     createdBy           The id of the user that created the group
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Group}      callback.group      The created group
 */
var createGroup = module.exports.createGroup = function(groupId, tenantAlias, displayName, description, visibility, joinable, createdBy, callback) {
    var lastModified = Date.now();
    var query = 'INSERT INTO "Principals" ("principalId", "tenantAlias", "displayName", "description", "visibility", "joinable", "lastModified", "createdBy", "created") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
    var parameters = [groupId, tenantAlias, displayName, description, visibility, joinable, lastModified.toString(), createdBy, lastModified.toString()];
    Cassandra.runQuery(query, parameters, function (err) {
        if (err) {
            return callback(err);
        }

        var group = new Group(tenantAlias, groupId, displayName, {
            'description': description,
            'visibility': visibility,
            'joinable': joinable,
            'lastModified': lastModified,
            'created': lastModified,
            'createdBy': createdBy
        });

        return callback(null, group);
    });
};

/**
 * Query a principal row from storage and map it to the appropriate principal object (user or group).
 *
 * @param  {String}        principalId         The id of the principal to query
 * @param  {Function}      callback            Standard callback function
 * @param  {Object}        callback.err        An error that occurred, if any
 * @param  {User|Group}    callback.prinicpal  The principal, either a user or a group, depending on the type of entity to which the id mapped. If the principal does not exist, this will be `null`
 */
var getPrincipal = module.exports.getPrincipal = function(principalId, callback) {
    if (isUser(principalId)) {
        // Try and get the user from the cache first. If they aren't cached, we will fetch them from the DB and it will get cached then
        _getUserFromRedis(principalId, function(err, user) {
            if (err && err.code !== 404) {
                log().error({'err': err}, 'Error occurred when trying to get a user from Redis.');
            } else if (user) {
                // We found a user in the cache, immediately return it
                return callback(null, user);
            }

            // The user wasn't cached, fetch from the DB
            return _getPrincipalFromCassandra(principalId, callback);
        });
    } else {
        // Get groups from the DB
        return _getPrincipalFromCassandra(principalId, callback);
    }
};

/**
 * Query a set of principal rows from the database, ensuring each one exists. Note that this just
 * ensures that the principal has a record in Cassandra. If the user or group is marked as deleted
 * with a `deleted` flag, those users and groups will still be successfully returned from this
 * function
 *
 * @param  {String[]}   principalIds                        The ids of the principals to query
 * @param  {String[]}   [fields]                            The fields to select for the principals. By default, all fields will be fetched
 * @param  {Function}   callback                            Standard callback function
 * @param  {Object}     callback.err                        An error that occurred, if any
 * @param  {Object}     callback.principals                 A hash of principals, keyed by the principal id, and whose value is the principal (either user or group) to which the id mapped
 */
var getExistingPrincipals = module.exports.getExistingPrincipals = function(principalIds, fields, callback) {
    if (_.isEmpty(principalIds)) {
        return callback(null, {});
    }

    getPrincipals(principalIds, fields, function(err, principalsById) {
        if (err) {
            return callback(err);
        } else if (_.keys(principalsById).length !== principalIds.length) {
            return callback({'code': 400, 'msg': 'One or more provided principals did not exist'});
        }

        return callback(null, principalsById);
    });
};

/**
 * Query a set of principal rows from storage and map it to the appropriate principal object (user or group).
 *
 * @param  {String[]}   principalIds                        The ids of the principals to query
 * @param  {String[]}   [fields]                            The fields to select for the principals. By default, all fields will be fetched
 * @param  {Function}   callback                            Standard callback function
 * @param  {Object}     callback.err                        An error that occurred, if any
 * @param  {Object}     callback.principals                 A hash of principals, keyed by the principal id, and whose value is the principal (either user or group) to which the id mapped.
 */
var getPrincipals = module.exports.getPrincipals = function(principalIds, fields, callback) {
    if (_.isEmpty(principalIds)) {
        return callback(null, {});
    }

    // If we're only requesting 1 principal we can hand it off to the getPrincipal method.
    // This will try looking in the cache first, which might be faster
    if (principalIds.length === 1) {
        getPrincipal(principalIds[0], function(err, user) {
            if (err && err.code === 404) {
                // This method never returns an error if any principals in the listing are missing,
                // even if it is just a listing of 1 principal (e.g., a library of 1 item)
                return callback(null, {});
            } else if (err) {
                return callback(err);
            }

            var users = {};
            users[principalIds[0]] = user;
            return callback(null, users);
        });
        return;
    }

    // Build the query and parameters to select just the specified fields
    var query = null;
    var parameters = [];

    // If `fields` was specified, we select only the fields specified. Otherwise we select all (i.e., *)
    if (fields) {
        var columns = [];
        _.map(fields, function(field) {
            columns.push(util.format('"%s"', field));
        });
        query = 'SELECT ' + columns.join(',') + ' FROM "Principals" WHERE "principalId" IN (?)';
    } else {
        query = 'SELECT * FROM "Principals" WHERE "principalId" IN (?)';
    }

    parameters.push(principalIds);

    Cassandra.runQuery(query, parameters, function(err, rows) {
        if (err) {
            return callback(err);
        }

        var principals = _.chain(rows)
            .map(_getPrincipalFromRow)
            .compact()
            .indexBy('id')
            .value();

        return callback(null, principals);
    });
};

/**
 * Update the profile fields of a principal.
 *
 * @param  {String}     principalId     The id of the principal to update
 * @param  {Object}     profileFields   An object containing the profile field updates to apply
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var updatePrincipal = module.exports.updatePrincipal = function(principalId, profileFields, callback) {
    // Ensure the caller is not trying to set an invalid field
    var validator = new Validator();
    var invalidKeys = _.intersection(RESTRICTED_FIELDS, _.keys(profileFields));
    validator.check(invalidKeys.length, {'code': 400, 'msg': 'Attempted to update an invalid property'}).max(0);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Perform the update
    return _updatePrincipal(principalId, profileFields, callback);
};

/**
 * Marks a principal as being deleted. Currently only groups are supported
 *
 * @param  {String}     principalId     The id of the principal to mark as deleted
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var deletePrincipal = module.exports.deletePrincipal = function(principalId, callback) {
    var deleted = Date.now();

    // Determine if the principal was already deleted in the authz index before we set them and flip
    // the principals deleted flag
    AuthzDelete.isDeleted([principalId], function(err, wasDeleted) {
        if (err) {
            return callback(err);
        }

        // Set (or re-Set) the principal as deleted in the authz index
        AuthzDelete.setDeleted(principalId, function(err) {
            if (err) {
                return callback(err);
            }

            _updatePrincipal(principalId, {'deleted': deleted}, function(err) {
                if (err) {
                    // If updating the principal field fails, we want to make sure we try and unset
                    // the principal as being deleted if it wasn't set before
                    if (!wasDeleted[principalId]) {
                        AuthzDelete.unsetDeleted(principalId);
                    }

                    return callback(err);
                }

                return callback();
            });
        });
    });
};

/**
 * Restores a principal from its deleted state. Currently only groups are supported
 *
 * @param  {String}     principalId     The id of the principal to restore from being deleted
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var restorePrincipal = module.exports.restorePrincipal = function(principalId, callback) {
    // Determine if the principal was already deleted in the authz index before we unset them and
    // flip the principals deleted flag
    AuthzDelete.isDeleted([principalId], function(err, wasDeleted) {
        if (err) {
            return callback(err);
        }

        // Unset (or re-Unset) the principal as deleted in the authz index
        AuthzDelete.unsetDeleted(principalId, function(err) {
            if (err) {
                return callback(err);
            }

            _deletePrincipalFields(principalId, ['deleted'], function(err) {
                if (err) {
                    // If updating the principal field fails, we want to make sure we try and re-set
                    // the principal as being deleted if was set before
                    if (wasDeleted[principalId]) {
                        AuthzDelete.setDeleted(principalId);
                    }

                    return callback(err);
                }

                return callback();
            });
        });
    });
};

/**
 * Accepts the Terms and Conditions for a user
 *
 * @param  {String}     userId          The id of the user that accepts the Terms and Conditions
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var acceptTermsAndConditions = module.exports.acceptTermsAndConditions = function(userId, callback) {
    Cassandra.runQuery('UPDATE "Principals" SET "acceptedTC" = ? WHERE "principalId" = ?', [Date.now().toString(), userId], function(err) {
        if (err) {
            return callback(err);
        }

        return invalidateCachedUsers([userId], callback);
    });
};

/**
 * Makes a user either a global admin or tenant admin.
 *
 * @param  {String}         adminType       One of `admin:global` or `admin:tenant` to make the user either a global admin or tenant admin, respectively.
 * @param  {Boolean}        isAdmin         Flag that indicates whether this user should be an admin or not.
 * @param  {String}         userId          The id of the user that needs to be made an admin.
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 */
var setAdmin = module.exports.setAdmin = function(adminType, isAdmin, userId, callback) {
    // Ensure we're using a real principal id. If we weren't, we would be dangerously upserting an invalid row
    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'Attempted to update a principal with a non-principal id'}).isPrincipalId();
    if (validator.hasErrors()) {
        return callback(validator.getError());
    }

    Cassandra.runQuery(util.format('UPDATE "Principals" SET "%s" = ? WHERE "principalId" = ?', adminType), [sanitize(isAdmin).toBooleanStrict().toString(), userId], function(err) {
        if (err) {
            return callback(err);
        }

        return invalidateCachedUsers([userId], callback);
    });
};

/**
 * Get the email token for a user
 *
 * @param  {String}     userId              The id of the user for who to get the email token
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {String}     callback.email      The email that is associated with the token
 * @param  {String}     callback.token      The token that can be used to verify the email with
 */
var getEmailToken = module.exports.getEmailToken = function(userId, callback) {
    Cassandra.runQuery('SELECT * FROM "PrincipalsEmailToken" WHERE "principalId" = ?', [userId], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (_.isEmpty(rows)) {
            return callback({'code': 404, 'msg': 'No email token found for the given user id'});
        }

        var token = _.first(rows).get('token').value;
        var email = _.first(rows).get('email').value;
        return callback(null, email, token);
    });
};

/**
 * Delete a pending email token for a user
 *
 * @param  {String}     userId              The id of the user to for whom to delete the pending email token
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var deleteEmailToken = module.exports.deleteEmailToken = function(userId, callback) {
    Cassandra.runQuery('DELETE FROM "PrincipalsEmailToken" WHERE "principalId" = ?', [userId], callback);
};

/**
 * Get a set of users by their email address
 *
 * @param  {String[]}   emails                      The email addresses with which to look up associated user ids
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error object, if any
 * @param  {Object}     callback.userIdsByEmail     An object keyed by email, whose value are the user ids associated to that email
 */
var getUserIdsByEmails = module.exports.getUserIdsByEmails = function(emails, callback) {
    Cassandra.runQuery('SELECT * FROM "PrincipalsByEmail" WHERE "email" IN (?)', [emails], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var userIdsByEmail = _.chain(rows)
            .map(Cassandra.rowToHash)
            .groupBy('email')
            .mapObject(function(principalIdEmailHashes) {
                return _.pluck(principalIdEmailHashes, 'principalId');
            })
            .value();
        return callback(null, userIdsByEmail);
    });
};

/**
 * Store an email token
 *
 * @param  {String}     userId          The id of the user for whom the token is associated
 * @param  {String}     email           The email address to store the token for
 * @param  {String}     token           The token to store
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var storeEmailToken = module.exports.storeEmailToken = function(userId, email, token, callback) {
    var q = Cassandra.constructUpsertCQL('PrincipalsEmailToken', 'principalId', userId, {'email': email, 'token': token});
    Cassandra.runQuery(q.query, q.parameters, callback);
};

/**
 * Set the email address for a user. This will also map the user to the email address
 *
 * @param  {User}       user            The user to update
 * @param  {String}     email           The new email address of the user
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 * @param  {User}       callback.user   The updated user
 */
var setEmailAddress = module.exports.setEmailAddress = function(user, email, callback) {
    var queries = [];

    // The token is correct, change the email address
    var principalsUpdate = {'email': email};
    queries.push(Cassandra.constructUpsertCQL('Principals', 'principalId', user.id, principalsUpdate));

    // Remove the token
    queries.push({'query': 'DELETE FROM "PrincipalsEmailToken" WHERE "principalId" = ?', 'parameters': [user.id]});

    // Create the mapping for the new email address
    queries.push({'query': 'INSERT INTO "PrincipalsByEmail" ("email", "principalId") VALUES (?, ?)', 'parameters': [email, user.id]});

    // Remove the old mapping, if any
    if (user.email && user.email !== email) {
        queries.push({'query': 'DELETE FROM "PrincipalsByEmail" WHERE "email" = ? AND "principalId" = ?', 'parameters': [user.email, user.id]});
    }

    Cassandra.runBatchQuery(queries, function(err) {
        if (err) {
            return callback(err);
        }

        // Invalidate the cached user object as it has changed
        _updateCachedUser(user.id, principalsUpdate, function(err) {
            if (err) {
                return callback(err);
            }

            // Return the new user
            return getPrincipal(user.id, callback);
        });
    });
};

/**
 * Iterate through all the principals. This will return just the raw principal properties that are specified in the `properties`
 * parameter, and only `batchSize` principals at a time. On each iteration of `batchSize` principals, the `onEach` callback
 * will be invoked, and the next batch will not be fetched until you have invoked the `onEach.done` function parameter. When
 * complete (e.g., there are 0 principals left to iterate through or an error has occurred), the `callback` parameter will be
 * invoked.
 *
 * @param  {String[]}   [properties]            The names of the principal properties to return in the principal objects. If not specified (or is empty array), it returns just the `principalId`s
 * @param  {Number}     [batchSize]             The number of principals to fetch at a time. Defaults to 100
 * @param  {Function}   onEach                  Invoked with each batch of principals that are fetched from storage
 * @param  {Object[]}   onEach.principalRows    An array of objects holding the raw principal rows that were fetched from storage
 * @param  {Function}   onEach.done             The function to invoke when processing of the current batch is complete
 * @param  {Object}     onEach.done.err         An error that occurred, if any, while processing the current batch. If you specify this error, iteration will finish and the completion callback will be invoked
 * @param  {Function}   [callback]              Invoked when all rows have been iterated, or an error has occurred
 * @param  {Object}     [callback.err]          An error that occurred, while iterating rows, if any
 * @see Cassandra#iterateAll
 */
var iterateAll = module.exports.iterateAll = function(properties, batchSize, onEach, callback) {
    if (!properties || !properties.length) {
        properties = ['principalId'];
    }

    /*!
     * Handles each batch from the cassandra iterateAll method.
     *
     * @see Cassandra#iterateAll
     */
    var _iterateAllOnEach = function(rows, done) {
        // Convert the rows to a hash and delegate action to the caller onEach method
        return onEach(_.map(rows, Cassandra.rowToHash), done);
    };

    return Cassandra.iterateAll(properties, 'Principals', 'principalId', {'batchSize': batchSize}, _iterateAllOnEach, callback);
};

/**
 * Determine whether or not the given string represents a group id.
 *
 * @param  {String}  groupId    A string that may or may not be a group id
 * @return {Boolean}            Whether or not the provided identifier is a group identifier.
 */
var isGroup = module.exports.isGroup = function(groupId) {
    return AuthzUtil.isGroupId(groupId);
};

/**
 * Determine whether or not the given string represents a user id.
 *
 * @param  {String}  userId     A string that may or may not be a user id
 * @return {Boolean}            Whether or not the provided identifier is a user identifier
 */
var isUser = module.exports.isUser = function(userId) {
    return AuthzUtil.isUserId(userId);
};

/**
 * Perform a raw update with the given profile fields without any checking if restricted fields are
 * being set, and ensuring the cache remains in a valid state
 *
 * @param  {String}     principalId     The id of the principal to update
 * @param  {Object}     profileFields   An object containing the profile field updates to apply
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 * @api private
 */
var _updatePrincipal = function(principalId, profileFields, callback) {
    // Take out the `principalId` to avoid setting a partial cache entry. Also ensure we have a
    // `lastModified` set for the update
    profileFields = _.chain({})
        .defaults(profileFields, {'lastModified': Date.now().toString()})
        .omit('principalId')
        .value();

    // Ensure we aren't updating a non-principal to avoid upserting invalid rows
    var validator = new Validator();
    validator.check(principalId, {'code': 400, 'msg': 'Attempted to update a principal with a non-principal id'}).isPrincipalId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }


    // If a change is being made to the email address, we need to update the mapping
    _isEmailAddressUpdate(principalId, profileFields, function(err, isEmailAddressUpdate, oldEmail) {
        if (err) {
            return callback(err);
        }

        var queries = [];

        // Update the principal record
        queries.push(Cassandra.constructUpsertCQL('Principals', 'principalId', principalId, profileFields));

        // If the user's email address needs to be updated, we remove the old one from the mapping
        if (isEmailAddressUpdate) {
            queries.push({'query': 'DELETE FROM "PrincipalsByEmail" WHERE "email" = ?', 'parameters': [oldEmail]});
            queries.push({'query': 'INSERT INTO "PrincipalsByEmail" ("email", "principalId") VALUES (?, ?)', 'parameters': [profileFields.email, principalId]});
        }

        // Execute the queries
        Cassandra.runBatchQuery(queries, function(err) {
            if (err) {
                return callback(err);
            }

            // Update the cache, if necessary
            return OaeUtil.invokeIfNecessary(isUser(principalId), _updateCachedUser, principalId, profileFields, callback);
        });
    });
};

/**
 * Remove the specified fields from the principal
 *
 * @param  {String}     principalId     The id of the principal whose fields to delete
 * @param  {String[]}   profileFields   The names of the fields to delete
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var _deletePrincipalFields = function(principalId, profileFields, callback) {
    // Remove the specified fields
    var query = util.format('DELETE "%s" FROM "Principals" where "principalId" = ?', profileFields.join('", "'));
    Cassandra.runQuery(query, [principalId], function(err) {
        if (err) {
            return callback(err);
        }

        // If the principal is a user, invalidate their cache entry. They are being invalidated
        // rather than simply updated in the cache because we have removed fields
        OaeUtil.invokeIfNecessary(isUser(principalId), invalidateCachedUsers, [principalId], function(err) {
            if (err) {
                return callback(err);
            }

            // This is an update, so we also need to touch the principal
            _updatePrincipal(principalId, {}, function(err) {
                if (err) {
                    // We bypass indicating an error to the consumer in this case as we have
                    // successfully removed the fields in both Cassandra and the cache
                    log().warn({
                        'err': err,
                        'principalId': principalId
                    }, 'An unexpected error occurred while trying to touch a principal timestamp');
                }

                return callback();
            });
        });
    });
};

/**
 * Check whether the email address for a user would be updated when updating a set of `profileFields`
 *
 * @param  {String}     principalId                         The id of the principal to update
 * @param  {Object}     profileFields                       An object containing the profile field updates to apply
 * @param  {Function}   callback                            Standard callback function
 * @param  {Object}     callback.err                        An error that occurred, if any
 * @param  {Boolean}    calllback.isEmailAddressUpdate      Whether the email address will be updated
 * @param  {String}     callback.oldEmail                   The user's old email address
 * @api private
 */
var _isEmailAddressUpdate = function(principalId, profileFields, callback) {
    if (!isUser(principalId) || !profileFields.email) {
        return callback(null, false);
    }

    getPrincipal(principalId, function(err, user) {
        if (err) {
            return callback(err);
        }

        if (user.email !== profileFields.email) {
            return callback(null, true, user.email);
        }

        return callback(null, false);
    });
};

/**
 * Get a principal from Cassandra.
 *
 * @param  {String}         principalId         The ID of the principal that should be retrieved.
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Group|User}     callback.principal  The requested principal
 * @api private
 */
var _getPrincipalFromCassandra = function(principalId, callback) {
    Cassandra.runQuery('SELECT * FROM "Principals" WHERE "principalId" = ?', [principalId], function (err, rows) {
        if (err) {
            return callback(err);
        } else if (_.isEmpty(rows)) {
            return callback({'code': 404, 'msg': 'Couldn\'t find principal: ' + principalId});
        }

        if (isUser(principalId)) {
            // Update the cache with the raw cassandra row asynchronously to the response. It is not
            // necessary for this to complete or be successful before we return to the caller. Note
            // that it is storing a full cache entry, not updating an existing one which is why this
            // is safe
            _updateCachedUser(principalId, Cassandra.rowToHash(rows[0]));
        }

        return callback(null, _getPrincipalFromRow(rows[0]));
    });
};

/**
 * Update a user record in the cache. If the user did not exist prior, this will result in an upsert (i.e., a potentially
 * partial record containing only the fields that were updated). In order to detect an incomplete record, the `principalId`
 * is checked for existence. Therefore, if you are upserting a potentially partial match here, ensure that the `principalId`
 * is *not* part of the `fields` object. If you are upserting a FULL copy (e.g., just fetched * from Cassandra), then
 * persist the principalId with the `fields`.
 *
 * @param  {String}     userId          The ID of the user to update in the cache
 * @param  {Object}     fields          The profile fields of the user to update in the cache
 * @param  {Function}   [callback]      Standard callback function
 * @param  {Object}     [callback.err]  An error that occurred, if any
 */
var _updateCachedUser = function(userId, fields, callback) {
    callback = callback || function(err) {
        if (err) {
            log().warn({'err': err}, 'Error updating cached user in Redis');
        }
    };

    _transformUserFieldTypes(fields);

    // Clean out null and undefined values
    _.each(fields, function(value, key) {
        if (OaeUtil.isUnspecified(value)) {
            delete fields[key];
        } else {
            // Ensure we have all strings
            fields[key] = '' + value;
        }
    });

    if (_.isEmpty(fields)) {
        return callback();
    }

    return Redis.getClient().hmset(userId, fields, callback);
};

/**
 * Get a user from Redis. If the user can't be found an error object with code 404 will be returned.
 *
 * @param  {String}     userId              The ID of the user that should be retrieved
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {User}       callback.principal  The requested user
 * @api private
 */
var _getUserFromRedis = function(userId, callback) {
    Redis.getClient().hgetall(userId, function(err, hash) {
        if (err) {
            return callback({'code': 500, 'msg': err});
        // Since we also push updates into redis, use the user id as a slug to ensure that the user doesn't exist in
        // cache by virtue of an upsert
        } else if (!hash || !hash.principalId) {
            return callback({'code': 404, 'msg': 'Principal not found in redis'});
        }

        return callback(null, _hashToUser(hash));
    });
};

/**
 * Creates a User or Group from a cassandra row.
 *
 * @param  {Row}        row     Cassandra Row
 * @return {User|Group}         A user or group object
 * @api private
 */
var _getPrincipalFromRow = function(row) {
    if (row.count <= 1) {
        return null;
    }

    return isGroup(row.get('principalId').value) ? _getGroupFromRow(row) : _getUserFromRow(row);
};

/**
 * Creates a Group from a Cassandra row.
 *
 * @param  {Row}    row     Cassandra Row
 * @return {Group}          A group object
 * @api private
 */
var _getGroupFromRow = function(row) {
    var hash = Cassandra.rowToHash(row);

    // Helenus returns the timestamp data-type as a string. Lets convert them to millis since the
    // epoch
    _timestampToMillis(hash, 'created');
    _timestampToMillis(hash, 'deleted');

    return new Group(hash.tenantAlias, hash.principalId, hash.displayName, hash);
};

/**
 * Creates a User from a Cassandra row.
 *
 * @param  {Row}    row     Cassandra Row
 * @return {User}           A User object
 * @api private
 */
var _getUserFromRow = function(row) {
    var hash = Cassandra.rowToHash(row);

    _transformUserFieldTypes(hash);

    return _hashToUser(hash);
};

/**
 * Given a potentially partial storage hash of a user, fix up the types. This particularly means
 * turn the string timestamp identifiers into a millis-since-the-epoch numeric value
 *
 * @param  {Object}     hash    A partial user storage object
 * @return {Object}             The hash with appropriate field types transformed
 */
var _transformUserFieldTypes = function(hash) {
    _timestampToMillis(hash, 'deleted');
};

/**
 * Creates a User from a hash.
 *
 * @param  {Object}     hash    Hash that has the required keys and values
 * @return {User}               User object representing the created user
 * @api private
 */
var _hashToUser = function(hash) {
    var user = new User(hash.tenantAlias, hash.principalId, hash.displayName, hash.email, {
        'visibility': hash.visibility,
        'deleted': hash.deleted,
        'locale': hash.locale,
        'publicAlias': hash.publicAlias,
        'isGlobalAdmin': sanitize(hash['admin:global']).toBooleanStrict(),
        'isTenantAdmin': sanitize(hash['admin:tenant']).toBooleanStrict(),
        'smallPictureUri': hash.smallPictureUri,
        'mediumPictureUri': hash.mediumPictureUri,
        'largePictureUri': hash.largePictureUri,
        'notificationsUnread': OaeUtil.getNumberParam(hash.notificationsUnread),
        'notificationsLastRead': OaeUtil.getNumberParam(hash.notificationsLastRead),
        'emailPreference': hash.emailPreference || PrincipalsConfig.getValue(hash.tenantAlias, 'user', 'emailPreference'),
        'acceptedTC': OaeUtil.getNumberParam(hash.acceptedTC, 0),
        'lastModified': OaeUtil.getNumberParam(hash.lastModified)
    });
    return user;
};

/**
 * Convenience function to convert a value that is a Cassandra timestamp into millis since the
 * epoch. This updates the specified `key` of the given `obj` object
 *
 * @param  {Object}     obj     Arbitrary object on which to convert the key
 * @param  {String}     key     The name of the property to convert
 * @api private
 */
var _timestampToMillis = function(obj, key) {
    if (obj[key]) {
        obj[key] = new Date(obj[key]).getTime();
    }
};

/**
 * Fields that are not allowed to be set by a call to `updatePrincipal`.
 *
 * @return {String[]}   An array of fields that are not allowed to be set by a call to `updatePrincipal`
 */
var getRestrictedFields = module.exports.getRestrictedFields = function() {
    return RESTRICTED_FIELDS.slice();
};

/**
 * Invalidates a set of users in the cache.
 *
 * @param  {String[]}    userIds         The IDs of the users you wish to invalidate
 * @param  {Function}    callback        Standard callback function
 * @param  {Object}      callback.err    An error that occurred, if any
 */
var invalidateCachedUsers = module.exports.invalidateCachedUsers = function(userIds, callback) {
    Redis.getClient().del(userIds, callback);
};
