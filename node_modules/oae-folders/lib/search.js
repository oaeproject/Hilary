/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _  = require('underscore');
var util = require('util');

var AuthzSearch = require('oae-authz/lib/search');
var AuthzUtil = require('oae-authz/lib/util');
var ContentUtil = require('oae-content/lib/internal/util');
var log = require('oae-logger').logger('folders-search');
var SearchAPI = require('oae-search');
var TenantsAPI = require('oae-tenants');

var FoldersAPI = require('oae-folders');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');

/*!
 * When a folder is created:
 *   -  fire a task to index the folder
 *   -  fire a task to update the memberships search documents of the
 *      members of the folder
 */
FoldersAPI.on(FoldersConstants.events.CREATED_FOLDER, function(ctx, folder, members) {
    // Index the folder. We need to pass the *group id* as the `id` to be indexed as this
    // is what the authz api needs to index the resource members. We also pass in the
    // folder id so we can easily retrieve the full folder object when producing folder documents
    SearchAPI.postIndexTask('folder', [{'id': folder.groupId, 'folderId': folder.id}], {
        'resource': true,
        'children': {
            'resource_members': true
        }
    });

    // Update the membership search documents of the members
    AuthzSearch.fireMembershipUpdateTasks(_.keys(members));
});

/*!
 * When a folder is updated we reindex its metadata
 */
FoldersAPI.on(FoldersConstants.events.UPDATED_FOLDER, function(ctx, oldFolder, updatedFolder) {
    SearchAPI.postIndexTask('folder', [{'id': updatedFolder.groupId, 'folderId': updatedFolder.id}], {
        'resource': true
    });
});

/*!
 * When a folder is deleted we remove it from the index
 */
FoldersAPI.on(FoldersConstants.events.DELETED_FOLDER, function(ctx, folder) {
    SearchAPI.postDeleteTask(folder.groupId);
});

/*!
 * When the previews for a folder are updated we reindex its metadata
 */
FoldersAPI.on(FoldersConstants.events.UPDATED_FOLDER_PREVIEWS, function(folder) {
    SearchAPI.postIndexTask('folder', [{'id': folder.groupId, 'folderId': folder.id}], {
        'resource': true
    });
});

/*!
 * When the members of a folder are updated, fire a task to update the memberships search
 * documents of those whose roles have changed
 */
FoldersAPI.on(FoldersConstants.events.UPDATED_FOLDER_MEMBERS, function(ctx, folder, roleChanges) {
    AuthzSearch.fireMembershipUpdateTasks(_.keys(roleChanges));
});

/**
 * Index the resource members for a set of content items
 *
 * @param  {Context}        ctx             The context of the current request
 * @param  {Folder}         folder          The folder where the content items where added to/removed from
 * @param  {Content[]}      contentItems    The content items that were added or removed
 * @api private
 */
var _indexContentResourceMembers = function(ctx, folder, contentItems) {
    var contentIds = _.map(contentItems, function(contentItem) {
        return _.pick(contentItem, 'id');
    });

    SearchAPI.postIndexTask('content', contentIds, {
        'children': {
            'resource_members': true
        }
    });
};

/*!
 * When content items are added to a folder, fire a task to update the members search document
 * of the content items that were added
 */
FoldersAPI.on(FoldersConstants.events.ADDED_CONTENT_ITEMS, _indexContentResourceMembers);

/*!
 * When content items are removed from a folder, fire a task to update the members search document
 * of the content items that were removed
 */
FoldersAPI.on(FoldersConstants.events.REMOVED_CONTENT_ITEMS, _indexContentResourceMembers);




////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for `folder` resources.
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceFolderSearchDocuments = function(resources, callback) {
    if (_.isEmpty(resources)) {
        return callback(null, []);
    }

    var folderIds = _.map(resources, function(resource) {
        return resource.folderId;
    });

    FoldersDAO.getFoldersByIds(folderIds, function(err, folders) {
        if (err) {
            return callback(err);
        }

        var docs = _.map(folders, _produceFolderSearchDocument);
        return callback(null, docs);
    });
};

/**
 * Convert a folder into a resource search document
 *
 * @param  {Folder}     folder      The folder to convert
 * @return {Object}                 A search document
 * @api private
 */
var _produceFolderSearchDocument = function(folder) {
    // Allow full-text search on name and description, but only if they are specified. We also sort on this text
    var fullText = _.compact([folder.displayName, folder.description]).join(' ');

    // Add all properties for the resource document metadata. Notice that we use
    // the *group id* as the document identifier. This is done because the authz
    // search indexers will add the members of the folder as a child document of
    // the group id. If we were to use the folder id here, that link would be missing
    // and we wouldn't be able to do explicit access searches through ElasticSearch
    var doc = {
        'id': folder.groupId,
        'tenantAlias': folder.tenant.alias,
        'displayName': folder.displayName,
        'visibility': folder.visibility,
        'q_high': folder.displayName,
        'q_low': fullText,
        'sort': folder.displayName,
        '_extra': {
            'folderId': folder.id
        }
    };

    if (folder.previews && folder.previews.thumbnailUri) {
        doc.thumbnailUrl = folder.previews.thumbnailUri;
    }

    if (folder.description) {
        doc.description = folder.description;
    }

    return doc;
};

SearchAPI.registerSearchDocumentProducer('folder', _produceFolderSearchDocuments);


///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

/**
 * Given an array of folder search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param  {Context}   ctx             The current context
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter
 * @api private
 */
var _transformFolderDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    _.each(docs, function(doc, docId) {

        // Remember, the document id is the *group* id
        var result = {'groupId': docId};

        // Extract the extra object from the search document
        // as that's where we stored the folder id in
        var extra = _.first(doc.fields._extra) || {};
        result.id = extra.folderId;

        // Apply the scalar values wrapped in each ElasticSearch document
        // to the transformed search document
        _.each(doc.fields, function(value, name) {
            result[name] = _.first(value);
        });

        // Add the full tenant object and profile path
        _.extend(result, {
            'tenant': TenantsAPI.getTenant(result.tenantAlias).compact(),
            'profilePath': util.format('/folder/%s/%s', result.tenantAlias, AuthzUtil.getResourceFromId(result.id).resourceId)
        });

        // If applicable, sign the thumbnailUrl so the current user can access it
        var thumbnailUrl = _.first(doc.fields.thumbnailUrl);
        if (thumbnailUrl) {
            result.thumbnailUrl = ContentUtil.getSignedDownloadUrl(ctx, thumbnailUrl);
        }

        transformedDocs[docId] = result;
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('folder', _transformFolderDocuments);


/////////////////////////
// REINDEX ALL HANDLER //
/////////////////////////

/*!
 * Binds a reindexAll handler that reindexes all rows from the Folders CF
 */
SearchAPI.registerReindexAllHandler('folder', function(callback) {

    /*!
     * Handles each iteration of the FoldersDAO iterate all method, firing tasks for all folders to
     * be reindexed.
     *
     * @see FoldersDAO#iterateAll
     */
    var _onEach = function(folderRows, done) {
        // Aggregate folder reindexing task resources
        var folderResources = _.map(folderRows, function(row) {
            return {
                'id': row.groupId,
                'folderId': row.id
            };
        });

        log().info('Firing re-indexing task for %s folders', folderResources.length);

        if (!_.isEmpty(folderResources)) {
            SearchAPI.postIndexTask('folder', folderResources, {'resource': true, 'children': true});
        }

        return done();
    };

    FoldersDAO.iterateAll(['id', 'groupId'], 100, _onEach, callback);
});
