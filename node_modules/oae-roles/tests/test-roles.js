/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');

var api = require('oae-roles/lib/api');
var model = require('oae-roles/lib/model');
var util = require('oae-roles/lib/util');
var schema = require('oae-roles/lib/schema');

var PrincipalTypes = { USER: 'u', GROUP: 'g' };
var ResourceTypes = { CONTENT: 'c', GROUP: 'g' };

module.exports.setUp = function(callback) {
    Cassandra.createKeyspace('oae', function() {
        schema.dropSchema(function(err) {
            if (err) {
                throw err;
            }
            schema.ensureSchema(function(err) {
                if (err) {
                    throw err;
                }
                callback();
            });
        });
    });
};

module.exports.tearDown = function(callback) {
    schema.dropSchema(callback);
}

/**
 * Verify that users with the same userid from different tenants maintain distinct role associations
 */
module.exports.testTenantSeparation = function(test) {
    test.expect(8);

    var principalUuidA = util.toUuid(PrincipalTypes.USER, 'testTenantSeparationA', 'mrvisser');
    var principalUuidB = util.toUuid(PrincipalTypes.USER, 'testTenantSeparationB', 'mrvisser');
    var resourceUuid = util.toUuid(ResourceTypes.CONTENT, 'cam', 'testTenantSeparationContent');

    api.setRole(principalUuidA, resourceUuid, 'manager', function(err) {
        test.ok(!err);

        // verify tenant B user does not have a role on that content
        api.getRole(principalUuidB, resourceUuid, function(err, role) {
            test.ok(!err);
            test.ok(!role);

            // add 'viewer' for security context B
            api.setRole(principalUuidB, resourceUuid, 'viewer', function(err) {
                test.ok(!err);

                // ensure user from tenant A is still manager, not viewer
                api.hasRole(principalUuidA, resourceUuid, 'manager', function(err, hasRole) {
                    test.ok(!err);
                    test.ok(hasRole);

                    // ensure user from context B is a viewer, not manager
                    api.hasRole(principalUuidB, resourceUuid, 'viewer', function(err, hasRole) {
                        test.ok(!err);
                        test.ok(hasRole);
                        test.done();
                    });
                });
            });
        });
    });
};

/**
 * Verify the functionality of the api.hasRole function
 */
module.exports.testHasRole = function(test) {
    test.expect(6);

    var principalUuid = util.toUuid(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
    var resourceUuid = util.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent');
    // add the 'manager' role
    api.setRole(principalUuid, resourceUuid, 'manager', function(err) {
        test.ok(!err);

        // verify that hasRole reports that the user has the manager role
        api.hasRole(principalUuid, resourceUuid, 'manager', function(err, hasRole) {
            test.ok(!err);
            test.ok(hasRole);

            // remove the role from the user
            api.removeRole(principalUuid, resourceUuid, function(err) {
                test.ok(!err);

                // verify that the user no longer has the role
                api.hasRole(principalUuid, resourceUuid, 'manager', function(err, hasRole) {
                    test.ok(!err);
                    test.ok(!hasRole);
                    test.done();
                });
            });
        });
    });
};

/**
 * Verify the functionality of the api.setRoles function
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.testSetRoles = function(test) {
    test.expect(31);

    var principalUuid1 = util.toUuid(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
    var principalUuid2 = util.toUuid(PrincipalTypes.USER, 'testHasRole', 'nm417');
    var principalUuid3 = util.toUuid(PrincipalTypes.USER, 'testHasRole', 'simong');
    var principalUuid4 = util.toUuid(PrincipalTypes.USER, 'testHasRole', 'PhysX');
    var resourceUuid1 = util.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent1');
    var resourceUuid2 = util.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent2');
    var resourceUuid3 = util.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent3');

    // Make 1 user a manager
    var roles = {};
    roles[principalUuid1] = 'manager';
    api.setRoles(resourceUuid1, roles, function(err) {
        test.ok(!err);
        api.hasRole(principalUuid1, resourceUuid1, 'manager', function(err, hasRole) {
            test.ok(!err);
            test.ok(hasRole);
            api.hasRole(principalUuid2, resourceUuid1, 'manager', function(err, hasRole) {
                test.ok(!err);
                test.ok(!hasRole);

                // Make 2 users a manager
                roles = {};
                roles[principalUuid1] = 'manager';
                roles[principalUuid2] = 'manager';
                api.setRoles(resourceUuid2, roles, function(err) {
                    test.ok(!err);
                    api.hasRole(principalUuid1, resourceUuid2, 'manager', function(err, hasRole) {
                        test.ok(!err);
                        test.ok(hasRole);
                        api.hasRole(principalUuid2, resourceUuid2, 'manager', function(err, hasRole) {
                            test.ok(!err);
                            test.ok(hasRole);
                            
                            // Make 2 users a manager, 1 a member
                            roles = {};
                            roles[principalUuid1] = 'manager';
                            roles[principalUuid2] = 'manager';
                            roles[principalUuid3] = 'member';
                            api.setRoles(resourceUuid3, roles, function(err) {
                                test.ok(!err);
                                api.hasRole(principalUuid1, resourceUuid3, 'manager', function(err, hasRole) {
                                    test.ok(!err);
                                    test.ok(hasRole);
                                    api.hasRole(principalUuid2, resourceUuid3, 'manager', function(err, hasRole) {
                                        test.ok(!err);
                                        test.ok(hasRole);
                                        api.hasRole(principalUuid3, resourceUuid3, 'member', function(err, hasRole) {
                                            test.ok(!err);
                                            test.ok(hasRole);
                                            api.hasRole(principalUuid4, resourceUuid3, 'member', function(err, hasRole) {
                                                test.ok(!err);
                                                test.ok(!hasRole);
                                                
                                                // Try to remove 1 role
                                                roles = {};
                                                roles[principalUuid3] = false;
                                                api.setRoles(resourceUuid3, roles, function(err) {
                                                    test.ok(!err);
                                                    api.hasRole(principalUuid1, resourceUuid3, 'manager', function(err, hasRole) {
                                                        test.ok(!err);
                                                        test.ok(hasRole);
                                                        api.hasRole(principalUuid3, resourceUuid3, 'member', function(err, hasRole) {
                                                            test.ok(!err);
                                                            test.ok(!hasRole);

                                                            // Try to remove 2 roles and add 1 at the same time
                                                            roles = {};
                                                            roles[principalUuid1] = false;
                                                            roles[principalUuid2] = false;
                                                            roles[principalUuid3] = 'manager';
                                                            api.setRoles(resourceUuid3, roles, function(err) {
                                                                test.ok(!err);
                                                                api.hasRole(principalUuid1, resourceUuid3, 'manager', function(err, hasRole) {
                                                                    test.ok(!err);
                                                                    test.ok(!hasRole);
                                                                    api.hasRole(principalUuid2, resourceUuid3, 'member', function(err, hasRole) {
                                                                        test.ok(!err);
                                                                        test.ok(!hasRole);
                                                                        api.hasRole(principalUuid3, resourceUuid3, 'manager', function(err, hasRole) {
                                                                            test.ok(!err);
                                                                            test.ok(hasRole);
                                                                            test.done();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Verify the functionality of the api.getRolesForResourceType function
 */
module.exports.testGetRolesForResourceType = function(test) {
    test.expect(9);

    var baseViewerContentId = 'contentIView';
    var baseManagerContentId = 'contentIManage';

    var principalUuid = util.toUuid(PrincipalTypes.USER, 'testGetRolesForResourceType', 'mrvisser');

    loadContentRoles(principalUuid, baseViewerContentId, ResourceTypes.CONTENT, 300, 'viewer', function() {
        loadContentRoles(principalUuid, baseManagerContentId, ResourceTypes.CONTENT, 300, 'manager', function() {

            // an aggregate to hold a unique set of all keys. Used to ensure we get all the elements back
            var aggregate = {};

            // grab the first 250
            api.getRolesForResourceType(principalUuid, ResourceTypes.CONTENT, null, 250, function(err, entries250_1) {
                test.ok(!err);
                test.equal(entries250_1.length, 250);
                
                // get the next 250
                api.getRolesForResourceType(principalUuid, ResourceTypes.CONTENT, entries250_1[249].uuid, 250, function(err, entries250_2) {
                    test.ok(!err);
                    test.equal(entries250_2.length, 250);
                    test.notEqual(entries250_1[249].uuid, entries250_2[0].uuid, 'The paging should be exclusive, but this test shows it was inclusive');

                    // get the rest, with overflow
                    api.getRolesForResourceType(principalUuid, ResourceTypes.CONTENT, entries250_2[249].uuid, 250, function(err, entries100) {
                        test.ok(!err);
                        test.equal(entries100.length, 100);
                        test.notEqual(entries250_2[249].uuid, entries100[0].uuid, 'The paging should be exclusive, but this test shows it was inclusive');

                        // now make sure we read 600 unique entries from cassandra
                        for (var i = 0; i < 250; i++) {
                            aggregate[entries250_1[i].uuid] = true;
                            aggregate[entries250_2[i].uuid] = true;

                            if (i < 100) {
                                aggregate[entries100[i].uuid] = true;
                            }
                        }

                        test.equal(Object.keys(aggregate).length, 600);
                        test.done();
                    });
                });

            });
        });
    });
};

/**
 * Verify the functionality of the api.getAssociationsForPrincipalsAndResourceType function
 */
module.exports.testGetAssociationsForPrincipalsAndResourceType = function(test) {
    test.expect(108);

    var baseViewerContentId = 'contentIView';
    var baseManagerContentId = 'contentIManage';
    var principalUuid1 = util.toUuid(PrincipalTypes.USER, 'testGetRolesForResourceType', 'mrvisser');
    var principalUuid2 = util.toUuid(PrincipalTypes.GROUP, 'testGetRolesForResourceType', 'simong');

    // mrvisser has 'viewer' role on a bunch of groups
    loadContentRoles(principalUuid1, baseViewerContentId, ResourceTypes.GROUP, 300, 'viewer', function() {

        // simong has 'manager' role on some of the groups that mrvisser has 'viewer' on. this is to test aggregation of roles
        loadContentRoles(principalUuid2, baseViewerContentId, ResourceTypes.GROUP, 50, 'manager', function() {

            // simong has 'manager' role on a bunch of groups
            loadContentRoles(principalUuid2, baseManagerContentId, ResourceTypes.GROUP, 300, 'manager', function() {

                // make sure they work together
                api.getAssociationsForPrincipalsAndResourceType([principalUuid1, principalUuid2], ResourceTypes.GROUP, 1000, function(err, entries) {
                    test.ok(!err);

                    // simong is a member of 350, mrvisser is a member of 300, but 50 of those overlap, so should be 600 unique entries
                    test.equal(Object.keys(entries).length, 600);

                    // verify that for the 50 overlapping content items, both 'manager' and 'viewer' are present
                    for (var i = 1; i <= 50; i++) {
                        var resourceUuid = 'g:testGetRolesForResourceType:'+baseViewerContentId+'-'+i;
                        test.ok(entries[resourceUuid]['manager'], 'Expected the "manager" role to be available on each overlapping content item.');
                        test.ok(entries[resourceUuid]['viewer'], 'Expected the "viewer" role to be available on each overlapping content item.');
                    }


                    // make sure they work individually
                    api.getAssociationsForPrincipalsAndResourceType([principalUuid1], ResourceTypes.GROUP, 1000, function(err, entries) {
                        test.ok(!err);
                        test.equal(Object.keys(entries).length, 300);

                        api.getAssociationsForPrincipalsAndResourceType([principalUuid2], ResourceTypes.GROUP, 1000, function(err, entries) {
                            test.ok(!err);
                            test.equal(Object.keys(entries).length, 350);

                            // test per-principal limitations
                            api.getAssociationsForPrincipalsAndResourceType([principalUuid1, principalUuid2], ResourceTypes.GROUP, 100, function(err, entries) {
                                test.ok(!err);
                                test.equal(Object.keys(entries).length, 200);
                                test.done();
                            });
                        });
                    });
                });

            });
        });
    });
};

/**
 * Verify the functionality for the use-case of getting full group ancestry using api.getAssociationsForPrincipalsAndResourceType
 */
module.exports.testExplodeGroupHierarchy = function(test) {
    test.expect(1);

    var tenantId = 'testExplodeGroupHierarchy';

    // user 'mrvisser' is part of 30 groups
    joinGroups(tenantId, 'mrvisser', PrincipalTypes.USER, 'member-direct', 30, function() {

        // groups 1-5 are members of other groups
        joinGroups(tenantId, 'member-direct-1', PrincipalTypes.GROUP, 'member-indirect-1', 5, function() {
            joinGroups(tenantId, 'member-direct-2', PrincipalTypes.GROUP, 'member-indirect-2', 5, function() {
                joinGroups(tenantId, 'member-direct-3', PrincipalTypes.GROUP, 'member-indirect-3', 5, function() {
                    joinGroups(tenantId, 'member-direct-4', PrincipalTypes.GROUP, 'member-indirect-4', 5, function() {
                        joinGroups(tenantId, 'member-direct-5', PrincipalTypes.GROUP, 'member-indirect-5', 5, function() {

                            // groups 5-10 have other groups as children
                            addMembers(tenantId, 'member-direct-5', 'notmember-5', 5, function() {
                                addMembers(tenantId, 'member-direct-6', 'notmember-6', 5, function() {
                                    addMembers(tenantId, 'member-direct-7', 'notmember-7', 5, function() {
                                        addMembers(tenantId, 'member-direct-8', 'notmember-8', 5, function() {
                                            addMembers(tenantId, 'member-direct-9', 'notmember-9', 5, function() {
                                                addMembers(tenantId, 'member-direct-10', 'notmember-10', 5, function() {
                                                    var mrvisserUuid = util.toUuid(PrincipalTypes.USER, tenantId, 'mrvisser');

                                                    explodeGroupAncestry(tenantId, [mrvisserUuid], {}, function(results) {

                                                        // groups prefixed with 'member' are groups that mrvisser is indirectly a member of
                                                        // groups prefixed with 'notmember' are groups that mrvisser is NOT indirectly a member of
                                                        // mrvisser should be a member of 30+(5*5) = 55 groups
                                                        // there should be 5*6 = 30 groups that mrvisser is not a member of

                                                        test.equal(Object.keys(results).length, 55);
                                                        test.done();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

function explodeGroupAncestry(tenantId, principalUuids, results, callback) {
    var nextPrincipalBatch = [];
    api.getAssociationsForPrincipalsAndResourceType(principalUuids, ResourceTypes.GROUP, 1000, function(err, entries) {
        if (err) {
            throw err;
        }
        var ancestors = Object.keys(entries);
        for (var i = 0; i < ancestors.length; i++) {
            var ancestorUuid = ancestors[i];
            if (!results[ancestorUuid]) {
                results[ancestorUuid] = true;
                nextPrincipalBatch.push(ancestorUuid);
            }
        }

        if (nextPrincipalBatch.length > 0) {
            explodeGroupAncestry(tenantId, nextPrincipalBatch, results, callback);
        } else {
            callback(results);
        }
    });
}


function joinGroups(tenantId, memberId, memberPrincipalType, groupPrefix, numGroups, callback) {
    if (numGroups === 0) {
        callback();
        return;
    }

    var memberUuid = util.toUuid(memberPrincipalType, tenantId, memberId);
    var resourceUuid = util.toUuid(ResourceTypes.GROUP, tenantId, groupPrefix+'-'+numGroups);
    api.setRole(memberUuid, resourceUuid, 'member', function(err) {
        if (err) {
            throw err;
        }
        joinGroups(tenantId, memberId, memberPrincipalType, groupPrefix, numGroups-1, callback);
    });
}

function addMembers(tenantId, groupId, memberPrefix, numMembers, callback) {
    if (numMembers === 0) {
        callback();
        return;
    }

    var groupUuid = util.toUuid(PrincipalTypes.GROUP, tenantId, memberPrefix+'-'+numMembers);
    var resourceUuid = util.toUuid(ResourceTypes.GROUP, tenantId, groupId);

    api.setRole(groupUuid, resourceUuid, 'member', function(err) {
        if (err) {
            throw err;
        }
        addMembers(tenantId, groupId, memberPrefix, numMembers-1, callback);
    });
}

function loadContentRoles(principalUuid, baseContentId, resourceType, numContentItems, role, callback) {
    if (numContentItems === 0) {
        callback();
        return;
    }

    var tenantId = util.getPrincipalFromUuid(principalUuid).tenantId;
    var resourceUuid = util.toUuid(resourceType, tenantId, baseContentId+'-'+numContentItems);
    api.setRole(principalUuid, resourceUuid, role, function(err) {
        if (err) {
            throw err;
        }
        loadContentRoles(principalUuid, baseContentId, resourceType, numContentItems-1, role, callback);
    });
}
