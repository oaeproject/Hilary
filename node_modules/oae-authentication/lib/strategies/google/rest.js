/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');

var OAE = require('oae-util/lib/oae');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

/*!
 * Redirect the user to Google for authentication. When complete, Google
 * will redirect the user back to the application at
 * /api/auth/google/return
 */
OAE.tenantServer.get('/api/auth/google', function(req, res, next) {
    req.telemetryUrl = '/api/auth/google';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.GOOGLE);
    var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
    passport.authenticate(strategyId)(req, res, errorHandler);
});

/*!
 * Google will redirect the user to this URL after authentication. Finish
 * the process by verifying the assertion. If valid, the user will be
 * logged in. Otherwise, authentication has failed.
 */
OAE.tenantServer.get('/api/auth/google/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/google/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.GOOGLE);
    var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
    passport.authenticate(strategyId, {'failureRedirect': '/'}, function(err, user) {
        AuthenticationUtil.externalSuccessCallback(req, res, user, AuthenticationConstants.providers.GOOGLE, next);
    })(req, res, errorHandler);
});
