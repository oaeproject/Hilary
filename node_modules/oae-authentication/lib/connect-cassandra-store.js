/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var cassandra = require('oae-util/lib/cassandra');
var util = require('util');

module.exports = function (connect) {
    var Store = connect.session.Store;
    var columnFamily = 'Sessions';

    function CassandraStore(options) {
        var self = this;
        Store.call(self, options);
    }

    CassandraStore.prototype.__proto__ = Store.prototype;

    CassandraStore.prototype.get = function (sid, callback) {
        cassandra.runQuery('select * from ? where sid = ?', [columnFamily, sid], function(err, rows) {
            if(err) {
                return callback(err);
            }

            if(!rows || rows.rowCount() !== 1 || !rows[0].colHash.data) {
                return callback();
            }

            return callback(null, JSON.parse(rows[0].colHash.data));
        });
    };

    CassandraStore.prototype.set = function (sid, session, callback) {
        var maxAge = session.cookie.maxAge;
        // Unless otherwise specified, a user is logged in for 14 days.
        var ttl = ('number' == typeof maxAge ? maxAge / 1000 | 0 : 1209600);
        session = JSON.stringify(session);
        cassandra.runQuery('update ? USING TTL ' + ttl + ' set data=? where sid=?', [columnFamily, session, sid], function(err) {
            callback(err);
        });
    };

    CassandraStore.prototype.destroy = function (sid, callback) {
        cassandra.runQuery('delete data from ? where sid=?', [columnFamily, sid], function(err) {
            callback(err);
        });
    };

    return CassandraStore;
};