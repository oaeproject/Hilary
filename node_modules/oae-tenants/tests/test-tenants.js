/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var TenantsAPI = require('oae-tenants');


describe('Tenants', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used for anonymous requests on the global tenant
    var anonymousGlobalRestContext = null;
    // Rest context that can be used every time we need to make a request as a Cambridge tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to use a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and the tenant admin context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createAnonymousRestContext('http://localhost:2000');
        // Fill up Cam tenant admin rest context
        camAdminRestContext = TestsUtil.createAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createAdminRestContext('http://localhost:2000');
        callback();
    });


    describe('Get tenant', function() {
        
        /**
         * Test that verifies that all tenants can be retrieved
         */
        it('verify get all tenants', function(callback) {
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'tenanttest', 2200, 'Tenant Test University', 'http://localhost:2200', function(err) {
                assert.ok(!err);
                RestAPI.Tenant.getAllTenants(globalAdminRestContext, function(err, tenants) {
                    assert.ok(!err);
                    assert.ok(tenants);
                    assert.equal(tenants.length, 3);
                    assert.equal(tenants[0].port, 2001);
                    assert.equal(tenants[0].alias, 'camtest');
                    assert.equal(tenants[1].port, 2002);
                    assert.equal(tenants[1].alias, 'gttest');
                    assert.equal(tenants[2].port, 2200);
                    assert.equal(tenants[2].alias, 'tenanttest');

                    RestAPI.Tenant.getAllTenants(camAdminRestContext, function(err, tenants) {
                        assert.ok(!err);
                        assert.ok(tenants);
                        assert.equal(tenants.length, 3);
                        assert.equal(tenants[0].port, 2001);
                        assert.equal(tenants[0].alias, 'camtest');
                        assert.equal(tenants[1].port, 2002);
                        assert.equal(tenants[1].alias, 'gttest');
                        assert.equal(tenants[2].port, 2200);
                        assert.equal(tenants[2].alias, 'tenanttest');
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that the current tenant's information can be retrieved
         */
        it('verify get tenant', function(callback) {
            RestAPI.Tenant.getTenant(anonymousRestContext, null, function(err, tenant) {
                assert.ok(!err);
                assert.ok(tenant);
                assert.equal(tenant.port, 2001);
                assert.equal(tenant.alias, 'camtest');

                // Verify that the tenant information is available through the global tenant
                RestAPI.Tenant.getTenant(globalAdminRestContext, 'camtest', function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2001);
                    assert.equal(tenant.alias, 'camtest');
                    callback();
                });
            });
        });

        // Test that verifies that getting the global tenant succeeds
        it('verify get global tenant', function(callback) {
            RestAPI.Tenant.getTenant(globalAdminRestContext, null, function(err, tenant) {
                assert.ok(!err);
                assert.equal(tenant.alias, 'global');
                assert.equal(tenant.name, 'Global Administration');
                assert.equal(tenant.baseUrl, 'localhost:2000');
                assert.equal(tenant.port, 2000);
                assert.equal(tenant.active, true);
                assert.equal(tenant.deleted, false);
                callback();
            });
        });

        /**
         * Test that verifies that getting the tenant information through the global server requires a valid ID
         */
        it('verify get tenant through global server requires valid id', function(callback) {
            RestAPI.Tenant.getTenant(globalAdminRestContext, '    ', function(err, tenant) {
                assert.ok(err);
                assert.equal(err.code, 404);
                callback();
            });
        });

        /**
         * Test that verifies that a tenant can be retrieved by its mapped port. This uses the internal
         * API as there is no REST feed available that offers this functionality.
         */
        it('verify get tenant by port', function(callback) {
            // Get the Cambridge tenant
            TenantsAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                assert.equal(tenant.port, 2001);
                assert.equal(tenant.alias, 'camtest');
                assert.equal(tenant.name, 'Cambridge University Test');
                assert.equal(tenant.baseUrl, 'http://localhost:2001');

                // Get the GT tenant
                TenantsAPI.getTenantByPort(2002, function(err, tenant) {
                    assert.ok(!err);
                    assert.equal(tenant.port, 2002);
                    assert.equal(tenant.alias, 'gttest');
                    assert.equal(tenant.name, 'Georgia Tech Test');
                    assert.equal(tenant.baseUrl, 'http://localhost:2002');
                    
                    // Get non-existing tenant
                    TenantsAPI.getTenantByPort(8888, function(err, tenant) {
                        assert.ok(err);
                        assert.ok(!tenant);
                        callback();
                    });
                });
            });
        });
        
        /**
         * Test that verifies that a tenant can be retrieved by its mapped alias. This uses the internal
         * API as there is no REST feed available that offers this functionality.
         */
        it('verify get tenant by alias', function(callback) {
            // Get the Cambridge tenant
            TenantsAPI.getTenantByAlias('camtest', function(err, tenant) {
                assert.ok(!err);
                assert.equal(tenant.port, 2001);
                assert.equal(tenant.alias, 'camtest');
                assert.equal(tenant.name, 'Cambridge University Test');
                assert.equal(tenant.baseUrl, 'http://localhost:2001');

                // Get the GT tenant
                TenantsAPI.getTenantByAlias('gttest', function(err, tenant) {
                    assert.ok(!err);
                    assert.equal(tenant.port, 2002);
                    assert.equal(tenant.alias, 'gttest');
                    assert.equal(tenant.name, 'Georgia Tech Test');
                    assert.equal(tenant.baseUrl, 'http://localhost:2002');
                    
                    // Get non-existing tenant
                    TenantsAPI.getTenantByAlias('non-existing', function(err, tenant) {
                        assert.ok(err);
                        assert.ok(!tenant);
                        callback();
                    });
                });
            });
        });
        
    });


    describe('Tenant actions', function() {

        /**
         * Test that verifies that a tenant can not be deleted by an anonymous user
         */
        it('verify create tenant as anonymous user fails', function(callback) {
            // Try to create a tenant as an anonymous user
            RestAPI.Tenant.createTenant(anonymousGlobalRestContext, 'nyutest', 2100, 'New York University', 'http://localhost:2100', function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                callback();
            });
        });

        /**
         * Test that verifies that it is possible to create a new tenant
         */
        it('verify creating tenant', function(callback) {
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'nyutest', 2100, 'New York University', 'http://localhost:2100', function(err) {
                assert.ok(!err);
                // Get the tenant
                var nyuRestContext = TestsUtil.createAnonymousRestContext('http://localhost:2100');
                RestAPI.Tenant.getTenant(nyuRestContext, null, function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2100);
                    assert.equal(tenant.alias, 'nyutest');
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a port needs, an alias, a name and a baseUrl need to be specified when creating
         * a tenant
         */
        it('verify tenant creation validations', function(callback) {
            // Try creating a tenant with no port
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', null, 'AAR', 'http://localhost:2101', function(err) {
                assert.ok(err);

                // Try creating a tenant with a non-numeric port
                RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', 'not-a-number', 'AAR', 'http://localhost:2101', function(err) {
                    assert.ok(err);

                    // Try creating a tenant with no alias
                    RestAPI.Tenant.createTenant(globalAdminRestContext, null, 2101, 'AAR', 'http://localhost:2101', function(err) {
                        assert.ok(err);

                        // Try creating a tenant with an invalid alias (: in alias)
                        RestAPI.Tenant.createTenant(globalAdminRestContext, 'aar:test', 2101, 'AAR', 'http://localhost:2101', function(err) {
                            assert.ok(err);

                            // Try creating a tenant with no name
                            RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', 2101, null, 'http://localhost:2101', function(err) {
                                assert.ok(err);

                                // Try creating a tenant with no base URL
                                RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', 2101, 'AAR', null, function(err) {
                                    assert.ok(err);

                                    // Verify that the tenant does not exist
                                    var aarRestContext = TestsUtil.createAnonymousRestContext('http://localhost:2101');
                                    RestAPI.Tenant.getTenant(aarRestContext, null, function(err, tenant) {
                                        assert.ok(err);
                                        assert.ok(!tenant);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    
        /**
         * Test that verifies that a tenant cannot be created with a duplicate port
         */
        it('verify create tenant duplicate port', function(callback) {
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', 2001, 'AAR', 'http://localhost:2001', function(err) {
                assert.ok(err);

                // Verify that the existing tenant is still running
                RestAPI.Tenant.getTenant(anonymousRestContext, null, function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2001);
                    assert.equal(tenant.alias, 'camtest');
                    callback();
                });
            });
        });
    
        /**
         * Test that verifies that a tenant cannot be created with a duplicate alias
         */
        it('verify create tenant duplicate alias', function(callback) {
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'camtest', 2102, 'AAR', 'http://localhost:2102', function(err) {
                assert.ok(err);
                
                // Verify that the existing tenant is still running
                RestAPI.Tenant.getTenant(anonymousRestContext, null, function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2001);
                    assert.equal(tenant.alias, 'camtest');
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a tenant can be stopped
         */
        it('verify stop tenant', function(callback) {
            // Create a new tenant
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', 2103, 'AAR', 'http://localhost:2103', function(err, tenant) {
                assert.ok(!err);
                var aarRestContext = TestsUtil.createAnonymousRestContext('http://localhost:2103');

                // Verify that the tenant is running
                RestAPI.Tenant.getTenant(aarRestContext, null, function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2103);
                    assert.equal(tenant.alias, 'aartest');

                    // Stop the tenant
                    RestAPI.Tenant.stopTenant(globalAdminRestContext, 2103, function(err) {
                        assert.ok(!err);

                        // Verify that the tenant is no longer running
                        RestAPI.Tenant.getTenant(aarRestContext, null, function(err, tenant) {
                            assert.ok(err);
                            assert.ok(err.code, 503);
                            assert.ok(!tenant);
                            callback();

                            // Verify that it's still part of the all tenants feed
                            RestAPI.Tenant.getAllTenants(globalAdminRestContext, function(err, tenants) {
                                assert.ok(!err);
                                assert.ok(tenants);
                                // Morph results to hash for easy access.
                                var hash = _.groupBy(tenants, function(tenant) { return tenant.alias; });
                                assert.ok(hash['aartest']);
                                assert.equal(hash['aartest'][0].port, 2103);
                            });
                        });
                    });
                });
            });
       });

        /**
         * Test that verifies that a tenant can not be stopped by an anonymous user
         */
        it('verify stop tenant as anonymous user fails', function(callback) {
            // Try to stop the tenant as an anonymous user
            RestAPI.Tenant.stopTenant(anonymousGlobalRestContext, 2103, function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                callback();
            });
        });

       /**
        * Test that verifes that a non-existing tenant cannot be stopped
        */
       it('verify stop non-existing tenant', function(callback) {
           // Stop tenant with no port
           RestAPI.Tenant.stopTenant(globalAdminRestContext, null, function(err) {
               assert.ok(err);
               callback();
           });
       });
       
       /**
        * Test that verifies that a stopped tenant can be started
        */
       it('verify start tenant', function(callback) {
           // Re-start the tenant from the previous test
           RestAPI.Tenant.startTenant(globalAdminRestContext, 2103, function(err) {
               assert.ok(!err);

               // Verify that the tenant is running again
               var aarRestContext = TestsUtil.createAnonymousRestContext('http://localhost:2103');
               RestAPI.Tenant.getTenant(aarRestContext, null, function(err, tenant) {
                   assert.ok(!err);
                   assert.ok(tenant);
                   assert.equal(tenant.port, 2103);
                   assert.equal(tenant.alias, 'aartest');
                   callback();
               });
           });
       });

        /**
         * Test that verifies that a tenant can not be started by an anonymous user
         */
        it('verify start tenant as anonymous user fails', function(callback) {
            // Try to stop the tenant as an anonymous user
            RestAPI.Tenant.startTenant(anonymousGlobalRestContext, 2103, function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                callback();
            });
        });

       /**
        * Test that verifes that a non-existing tenant cannot be started
        */
       it('verify stop non-existing tenant', function(callback) {
           // Stop tenant with no port
           RestAPI.Tenant.startTenant(globalAdminRestContext, null, function(err) {
               assert.ok(err);
               callback();
           });
       });

        /**
         * Test that verifies that a tenant can not be deleted by an anonymous user
         */
        it('verify delete tenant as anonymous user fails', function(callback) {
            // Try to stop the tenant as an anonymous user
            RestAPI.Tenant.deleteTenant(anonymousGlobalRestContext, 2103, function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                callback();
            });
        });

        /**
         * Test that verifies that a tenant can be deleted
         */
        it('verify delete tenant', function(callback) {
            // Try deleting a non-existing tenant
             RestAPI.Tenant.deleteTenant(globalAdminRestContext, null, function(err) {
                assert.ok(err);
                
                // Delete the tenant from the previous test
                RestAPI.Tenant.deleteTenant(globalAdminRestContext, 2103, function(err) {
                    assert.ok(!err);
                    
                    // Verify that the tenant is no longer running
                    var aarRestContext = TestsUtil.createAnonymousRestContext('http://localhost:2103');
                    RestAPI.Tenant.getTenant(aarRestContext, null, function(err, tenant) {
                        assert.ok(err);
                        assert.ok(!tenant);
    
                        // Verify that it's no longer a part of the all tenants feed
                        RestAPI.Tenant.getAllTenants(globalAdminRestContext, function(err, tenants) {
                            assert.ok(!err);
                            assert.ok(tenants);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(tenants, function(tenant) { return tenant.alias; });
                            assert.ok(!hash['aartest']);
                            callback();
                        });
                    });
                });
            });
       });

       /**
        * Test that verifes that a non-existing tenant cannot be deleted
        */
       it('verify delete non-existing tenant', function(callback) {
           // Stop tenant with no port
           RestAPI.Tenant.deleteTenant(globalAdminRestContext, null, function(err) {
               assert.ok(err);
               callback();
           });
       });

    });


    describe('Update tenant', function() {
        /**
         * Test that verifies that a tenant's name can not be updated by an anonymous user
         */
        it('verify update tenant name as anonymous user fails', function(callback) {
            // Try to stop the tenant as an anonymous user
            RestAPI.Tenant.updateTenant(anonymousGlobalRestContext, 2001, 'Anglia Ruskin University', function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                callback();
            });
        });

        /**
         * Test that verifies that a tenant's name can not be updated without specifying the port and name
         */
        it('verify update tenant name requires a port and name', function(callback) {
            RestAPI.Tenant.updateTenant(camAdminRestContext, null, 'Anglia Ruskin University', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);

                RestAPI.Tenant.updateTenant(camAdminRestContext, 2001, null, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a tenant name can be updated
         */
        it('verify update tenant name', function(callback) {
            // Try updating without port
            RestAPI.Tenant.updateTenant(globalAdminRestContext, null, 'Anglia Ruskin University', function(err) {
                assert.ok(err);

                // Try updating without name
                RestAPI.Tenant.updateTenant(globalAdminRestContext, 2001, null, function(err) {
                    assert.ok(err);

                    // Try a valid update
                    RestAPI.Tenant.updateTenant(globalAdminRestContext, 2001, 'Anglia Ruskin University', function(err) {
                        assert.ok(!err);

                        // Check if the update was successful
                        RestAPI.Tenant.getTenant(camAdminRestContext, null, function(err, tenant) {
                            assert.ok(!err);
                            assert.ok(tenant);
                            assert.equal(tenant.port, 2001);
                            assert.equal(tenant.alias, 'camtest');
                            assert.equal(tenant.name, 'Anglia Ruskin University');

                            // Try an update as the tenant admin
                             RestAPI.Tenant.updateTenant(camAdminRestContext, 2001, 'Queens College', function(err) {
                                assert.ok(!err);

                                // Check if the update was successful
                                RestAPI.Tenant.getTenant(camAdminRestContext, null, function(err, tenant) {
                                    assert.ok(!err);
                                    assert.ok(tenant);
                                    assert.equal(tenant.port, 2001);
                                    assert.equal(tenant.alias, 'camtest');
                                    assert.equal(tenant.name, 'Queens College');
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

    });

});
