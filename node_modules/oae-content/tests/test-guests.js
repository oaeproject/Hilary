/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ContentTestUtil = require('oae-content/lib/test/util');
var EmailAPI = require('oae-email');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Content guests', function() {

    // Rest contexts that can be used to make requests as different types of users
    var camAdminRestContext = null;

    /**
     * Function that will fill up the rest contexts
     */
    before(function(callback) {
        // Fill up the request contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });

    /**
     * Test that verifies that content can be shared with a guest
     */
    it('verify a piece of content can be shared with a guest', function(callback) {
        // Create some content and share it with a guest
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link, email, token) {

            // Sign in as the guest
            PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                // Verify that the link is in the guest's library
                RestAPI.Content.getLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, data) {
                    assert.ok(!err);
                    assert.strictEqual(data.results.length, 1);
                    assert.strictEqual(data.results[0].id, link.id);
                    return callback();
                });
            });
        });
    });

    /**
     * Test that verifies a guest can be made a member of a piece of content
     */
    it('verify a guest can be made a member of a piece of content', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            // Create a content item
            RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'private', 'apereo.org', [], [], [], function(err, link) {
                assert.ok(!err);

                // Make a guest a viewer of the content item through the content permissions API
                var email = TestsUtil.generateTestEmailAddress();
                var roleChanges = {};
                roleChanges[email] = 'viewer';
                RestAPI.Content.updateMembers(simong.restContext, link.id, roleChanges, function(err) {
                    assert.ok(!err);
                });
                
                // An email should've been sent to the guest
                EmailAPI.once('debugSent', function(message) {
                    // Verify we sent an email to the invited user
                    assert.strictEqual(message.to[0].address, email);

                    // Verify a token is passed in the email
                    var token = message.text.match(/\?token=([a-zA-Z0-9]{32})/)[1];
                    assert.ok(token);

                    // Sign in as the guest
                    PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                        // The guest should have access to the piece of content
                        RestAPI.Content.getContent(loggedinGuest.restContext, link.id, function(err, link) {
                            assert.ok(!err);

                            // Verify the guest is in the members list
                            RestAPI.Content.getMembers(simong.restContext, link.id, null, null, function(err, members) {
                                assert.ok(!err);
                                assert.strictEqual(members.results.length, 2);
                                var guest = _.findWhere(members.results, {'role': 'viewer'});
                                assert.ok(guest);

                                // Make the guest a manager
                                var roleChanges = {};
                                roleChanges[email] = 'manager';
                                RestAPI.Content.updateMembers(simong.restContext, link.id, roleChanges, function(err) {
                                    assert.ok(!err);

                                    // Verify the guest is a manager
                                    RestAPI.Content.getContent(loggedinGuest.restContext, link.id, function(err, link) {
                                        assert.ok(!err);
                                        assert.ok(link.isManager);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
