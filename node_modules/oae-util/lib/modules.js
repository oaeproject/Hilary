/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');

var IO = require('./io');
var log = require('oae-logger').logger('oae-modules');

// Variable that will be used to cache the available modules
var cachedAvailableModules = [];

//////////////////////////
// Module bootstrapping //
//////////////////////////

/**
 * Bootstrap all the OAE modules that are present. This will first execute all of the init.js files for all of the modules which will
 * take care of CF creation, etc., next it will execute all of the rest.js files for all of the modules which will register the REST
 * endpoints on the global admin server and the tenant server
 *
 * @param  {Object}     config          JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 * @param  {Function}   callback        The function invoked when bootstrap is complete.
 * @param  {Object}     callback.err    An error that occurred, if any.
 */
var bootstrapModules = module.exports.bootstrapModules = function(config, callback) {
    initAvailableModules(function(err, modules) {
        if (err) {
            return callback(err);
        } else if (modules.length === 0) {
            return callback(new Error('No modules to install, or error aggregating modules.'));
        }

        log().info('Starting modules: %s', modules.join(', '));

        // Initialize all modules
        bootstrapModulesInit(modules, config, function(err) {
            if (err) {
                return callback(err);
            }
            // Register all endpoints
            bootstrapModulesRest(modules);
            callback();
        });
    });
};

/**
 * Initialize all of the modules. This will take care of CF creation, etc. This needs to happen asynchronously as column family creation and
 * refreshing the schema needs to happen asynchronously.
 *
 * @param  {String[]}   modules         An array of modules that should be bootstrapped. These need to be located in the ./node_modules directory
 * @param  {Object}     config          JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 * @param  {Function}   callback        Standard callback function invoked when all modules have initialized
 * @param  {Object}     callback.err    An error that occurred, if any
 * @api private
 */
var bootstrapModulesInit = function(modules, config, callback) {
    var currentModule = 0;
    var initModule = function() {
        if (currentModule === modules.length) {
            callback();
        } else {
            var module = modules[currentModule];
            var path = 'node_modules/' + module + '/lib/init.js';
            var exists = fs.existsSync(path);
            currentModule++;
            if (exists) {
                require(module + '/lib/init')(config, function(err) {
                    if (err) {
                        log().error({err: err}, 'Error initializing module %s', module);
                        return callback(err);
                    }
                    log().info('Initialized module %s', module);
                    initModule();
                });
            } else {
                log().info('Initialized module %s (nothing to do)', module);
                initModule();
            }
        }
    };
    initModule();
};

/**
 * Initialize all of the REST endpoints for all of the modules
 * 
 * @param  {String[]}   modules     An array of modules that should be bootstrapped. These need to be located in the ./node_modules directory
 * @api private
 */
var bootstrapModulesRest = function(modules) {
    for (var m = 0; m < modules.length; m++) {
        var path = 'node_modules/' + modules[m] + '/lib/rest.js';
        var exists = fs.existsSync(path);
        if (exists) {
            log().info('REST services for %s have been registered', modules[m]);
            require(modules[m] + '/lib/rest');
        }
    }
};

///////////////////////
// Available modules //
///////////////////////

/**
 * Get a list of all of the available modules, ordered by priority, and cache them
 *
 * @param   {Function}   callback                Function executed when the modules have been retrieved
 * @param   {String[]}   callback.finalModules   Array of strings representing the names of the available modules
 */
var initAvailableModules = module.exports.initAvailableModules = function(callback) {
    IO.getFileListForFolder('node_modules', function(err, modules) {
        if (err) {
            return callback(err);
        }

        var finalModules = [];
        var modulePriority = {};

        // aggregate the oae- modules
        for (var i = 0; i < modules.length; i++) {
            var module = modules[i];
            if (module.substring(0, 4) === 'oae-') {
                // determine module priority
                var filename = module + '/package.json';
                var pkg = require(filename);
                if (pkg.oae && pkg.oae.priority) {
                    // found a priority in package.json at oae.priority
                    modulePriority[module] = pkg.oae.priority;
                } else {
                    // no priority found, it goes in last
                    modulePriority[module] = Number.MAX_VALUE;
                }

                finalModules.push(module);
            }
        }

        // order by the startup priority
        finalModules.sort(function(a, b) {
            return modulePriority[a] - modulePriority[b];
        });

        // Cache the available modules
        cachedAvailableModules = finalModules;

        callback(null, finalModules);
    });
};

/**
 * Returns the available modules from cache
 *
 * @return   {String[]}   Returns an Array of strings representing the names of the available modules
 */
var getAvailableModules = module.exports.getAvailableModules = function() {
    return cachedAvailableModules.slice(0);
};
