/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var MQ = require('oae-util/lib/mq');
var PreviewProcessorAPI = require('oae-preview-processor');
var OaeUtil = require('oae-util/lib/util');

var FoldersAPI = require('./api');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');

/*!
 * If a content item gets added to a folder we need to generate previews for the folder
 */
FoldersAPI.on(FoldersConstants.events.ADDED_CONTENT_ITEMS, function(ctx, folder, contentItems) {
    PreviewProcessorAPI.submitFolderForProcessing(folder.id);
});

/*!
 * If a content item gets removed from a folder, we need to regenerate the previews for the folder
 */
FoldersAPI.on(FoldersConstants.events.REMOVED_CONTENT_ITEMS, function(ctx, folder, contentIds) {
    PreviewProcessorAPI.submitFolderForProcessing(folder.id);
});

/*!
 * If a content item's preview images are updated we need to generate previews for the folder
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_PREVIEW, function(ctx, contentId) {
    // Get all the folders this content item was part of
    AuthzAPI.getAuthzMembers(contentId, null, 10000, function(err, members) {
        if (err) {
            log().error({'err': err, 'contentId': contentId}, 'Unable to get the members of a piece of content');
            return;
        }

        // Folders are masked as groups in AuthZ
        var groupIds = _.chain(members)
            .filter(function(member) {
                return AuthzUtil.isGroupId(member.id);
            })
            .pluck('id')
            .value();

        // Get the actual folders
        FoldersDAO.getFoldersByGroupIds(groupIds, function(err, folders) {
            if (err) {
                log().error({'err': err, 'contentId': contentId}, 'Unable to get the folders for the given group ids');
            }

            // Submit each folder for processing
            _.each(folders, function(folder) {
                PreviewProcessorAPI.submitFolderForProcessing(folder.id);
            });
        });
    });
});
