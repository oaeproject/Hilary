/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var activityTypes = {};
var activityRouters = {};
var activityEntityProducers = {};
var activityEntityTransformers = {};

/**
 * Register special activity behaviour.
 *
 * @see ActivityAPI#registerActivityType
 */
var registerActivityType = module.exports.registerActivityType = function(activityType, options) {
    if (activityTypes[activityType]) {
        throw new Error('Attempted to register duplicate activity type');
    }
    activityTypes[activityType] = options;
};

/**
 * Get all the registered activity types in the system
 *
 * @return  {Object}    All the registered activity types in the system
 * @see #registerActivityType
 */
var getRegisteredActivityTypes = module.exports.getRegisteredActivityTypes = function() {
    return activityTypes;
};

/**
 * Register an activity router.
 *
 * @see ActivityAPI#registerActivityRouter
 */
var registerActivityRouter = module.exports.registerActivityRouter = function(resourceType, router) {
    if (activityRouters[resourceType]) {
        throw new Error('Attempted to register duplicate activity router');
    }
    activityRouters[resourceType] = router;
};

/**
 * Get all the registered activity routers in the system
 *
 * @return  {Object}    All the registered activity routers in the system
 * @see ActivityAPI#registerActivityRouter
 */
var getRegisteredActivityRouters = module.exports.getRegisteredActivityRouters = function() {
    return activityRouters;
};

/**
 * Register an activity entity producer.
 *
 * @see ActivityAPI#registerActivityEntityProducer
 */
var registerActivityEntityProducer = module.exports.registerActivityEntityProducer = function(resourceType, producer) {
    if (activityEntityProducers[resourceType]) {
        throw new Error('Attempted to register duplicate activity producer');
    }
    activityEntityProducers[resourceType] = producer;
};

/**
 * Get all the registered activity entity producers in the system
 *
 * @return  {Object}    All the registered activity entity producers in the system
 * @see ActivityAPI#registerActivityEntityProducer
 */
var getRegisteredActivityEntityProducers = module.exports.getRegisteredActivityEntityProducers = function() {
    return activityEntityProducers;
};

/**
 * Register an activity transformer.
 *
 * @see ActivityAPI#registerActivityTransformer
 */
var registerActivityEntityTransformer = module.exports.registerActivityEntityTransformer = function(resourceType, transformer) {
    if (activityEntityTransformers[resourceType]) {
        throw new Error('Attempted to register duplicate activity transformer');
    }
    activityEntityTransformers[resourceType] = transformer;
};

/**
 * Get all the registered activity entity transformers in the system
 *
 * @return  {Object}    All the registered activity entity transformers in the system
 * @see ActivityAPI#registerActivityEntityTransformer
 */
var getRegisteredActivityEntityTransformers = module.exports.getRegisteredActivityEntityTransformers = function() {
    return activityEntityTransformers;
};
