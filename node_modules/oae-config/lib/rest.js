/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var OAE = require('oae-util/lib/oae');

var ConfigAPI = require('oae-config');


/**
 * Convenience method to handle the general specification of clearing configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body.configFields]     One or more config keys to be cleared
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleClearConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    var configFields = req.body.configFields || null;

    // If the config fields is a single element, we're just clearing one field. Since the
    // API only takes an array we wrap the string into an array
    if (_.isString(configFields)) {
        configFields = [configFields];
    }

    ConfigAPI.clearConfig(req.ctx, tenantAlias, configFields, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * Convenience method to handle the general specification of updating configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body]                  The request body parameter keys are the configuration keys, and the value is the value to set
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleUpdateConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    ConfigAPI.updateConfig(req.ctx, tenantAlias, req.body, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * Convenience method to handle the general specification of getting configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body.configFields]     One or more config keys to be cleared
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleGetConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    ConfigAPI.getTenantConfig(req.ctx, tenantAlias, function(err, config) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, config);
    });
};

/**
 * Convenience method to handle getting the configuration schema for the current tenant
 *
 * @param  {Request}    req     The Express Request object of the current request
 * @param  {Response}   res     The Express Response object to which to send the response
 * @api private
 */
var _handleGetSchema = function(req, res) {
    ConfigAPI.getSchema(req.ctx, function(err, schema) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, schema);
    });
};


/*!
 * Get configuration schemas for the global admin tenant and user tenants
 */
OAE.globalAdminRouter.on('get', '/api/config/schema', _handleGetSchema);
OAE.tenantRouter.on('get', '/api/config/schema', _handleGetSchema);

/*!
 * Clear specified configuration values for the current tenant
 */
OAE.globalAdminRouter.on('post', '/api/config/clear', _handleClearConfig);
OAE.tenantRouter.on('post', '/api/config/clear', _handleClearConfig);

/*!
 * Clear specified configuration values for a particular tenant
 */
OAE.globalAdminRouter.on('post', '/api/config/:tenantAlias/clear', _handleClearConfig);

/*!
 * Get the configuration of the current tenant
 */
OAE.globalAdminRouter.on('get', '/api/config', _handleGetConfig);
OAE.tenantRouter.on('get', '/api/config', _handleGetConfig);

/*!
 * Get the configuration of a particular tenant
 */
OAE.globalAdminRouter.on('get', '/api/config/:tenantAlias', _handleGetConfig);

/*!
 * Update specified configuration values for the current tenant
 */
OAE.globalAdminRouter.on('post', '/api/config', _handleUpdateConfig);
OAE.tenantRouter.on('post', '/api/config', _handleUpdateConfig);

/*!
 * Update specified configuration values for the specified tenant
 */
OAE.globalAdminRouter.on('post', '/api/config/:tenantAlias', _handleUpdateConfig);

