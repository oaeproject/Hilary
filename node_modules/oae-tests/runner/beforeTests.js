/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var argv = require('optimist')
    .usage('Run the Hilary tests.\nUsage: $0')
    .alias('m', 'module')
    .describe('m', 'Only run a specific module. Just specify the module name.')
    .argv;

var fs = require('fs');

// Set our bootstrapping log level before loading other modules that will use logging
process.env['OAE_BOOTSTRAP_LOG_LEVEL'] = 'trace';
process.env['OAE_BOOTSTRAP_LOG_FILE'] = './tests.log';

var Cassandra = require('oae-util/lib/cassandra');
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');
var MQ = require('oae-util/lib/mq');
var PreviewAPI = require('oae-preview-processor/lib/api');
var Redis = require('oae-util/lib/redis');
var RestAPI = require('oae-rest');
var RestUtil = require('oae-rest/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsTestUtil = require('oae-tenants/lib/test/util');

var TestsUtil = require('oae-tests/lib/util');

var config = require('../../../config').config;
var log = require('oae-logger').logger('before-tests');

// The Cassandra connection config that should be used for unit tests, using
// a custom keyspace for just the tests
config.cassandra.keyspace = 'oaeTest';

// We'll stick all our redis data in a separate DB index.
config.redis.dbIndex = 1;

// log everything (except mocha output) to tests.log
config.log.streams = [{
    'level': 'trace',
    'path': './tests.log'
}];

// Unit test will purge the rabbit mq queues when they're connected
config.mq.purgeQueuesOnStartup = true;

// In order to speed up some of the tests and to avoid mocha timeouts, we reduce the default time outs
config.previews.office.timeout = 30000;
config.previews.pdftk.timeout = 10000;
config.previews.pdf2htmlEX.timeout = 10000;
config.previews.link.renderDelay = 200;
config.previews.link.renderTimeout = 15000;
config.previews.link.embeddableCheckTimeout = 5000;

config.search.index.name = 'oaetest';
config.search.index.settings.number_of_shards = 1;
config.search.index.settings.number_of_replicas = 0;
config.search.index.settings.store = {'type': 'memory'};
config.search.index.destroyOnStartup = true;

// Disable the poller so it only collects manually
config.activity.collectionPollingFrequency = -1;
config.activity.numberOfProcessingBuckets = 1;
config.activity.mail.gracePeriod = 0;

// Reset the internal address for tests so we can be sure
// that we are running against the local app server
config.servers.serverInternalAddress = null;
config.servers.globalAdminHost = 'localhost:2000';

// Force emails into debug mode
config.email.debug = true;

// Disable telemetry
config.telemetry.enabled = false;

// Determine whether or not we should drop the keyspace before the test. In cases
// where we want to set up the schema by another means (e.g., to test unit tests
// over migrations), it is handy to use a schema that was pre-arranged for the
// test
var dropKeyspaceBeforeTest = (process.env.OAE_TEST_DROP_KEYSPACE_BEFORE !== 'false');

// First set up the keyspace and all of the column families required for all of the different OAE modules
before(function(callback) {
    this.timeout(60000);

    Cassandra.init(config.cassandra, function(err) {
        if (err) {
            return callback(new Error(err.msg || err.message));
        }

        // Drop the keyspace before starting if specified to do so
        if (dropKeyspaceBeforeTest) {
            log().info('Dropping keyspace "%s" to clean up before tests', config.cassandra.keyspace);
        }

        OaeUtil.invokeIfNecessary(dropKeyspaceBeforeTest, Cassandra.dropKeyspace, config.cassandra.keyspace, function(err) {
            if (err) {
                return callback(new Error(err.msg));
            }

            Cassandra.close(function() {
                Redis.init(config.redis);

                log().info('Flushing redis DB index "%d" to clean up before tests', config.redis.dbIndex);
                Redis.flush(function(err) {
                    if (err) {
                        return callback(new Error(err.msg));
                    }

                    // Initialize the application modules
                    OAE.init(config, function(err) {
                        if (err) {
                            return callback(new Error(err.msg));
                        }
                        _bindRequestLogger();
                    });

                    // Defer the test setup until after the task handlers are successfully bound and all the queues are drained.
                    // This will always be fired after OAE.init has successfully finished
                    MQ.on('ready', function(err) {
                        if (err) {
                            return callback(new Error(err.msg));
                        }

                        // Set up a couple of test tenants
                        TestsUtil.setUpTenants(function(err) {
                            if (err) {
                                return callback(new Error(err.msg));
                            }

                            log().info('Disabling the preview processor during tests');
                            PreviewAPI.disable(function(err) {
                                if (err) {
                                    return callback(new Error(err.msg));
                                }

                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});

beforeEach(function(callback) {
    log().info('Beginning test "%s"', this.currentTest.title);
    return callback();
});

afterEach(function(callback) {
    log().info('Finishing test "%s"', this.currentTest.title);
    return callback();
});

// Executed once all of the tests for all of the different modules have finished running or
// when one of the tests has caused an error. Drop the keyspace after all the tests are done
after(function(callback) {
    // Clean up after ourselves
    Redis.flush(function(err) {
        if (err) {
           log().error({err: err}, 'Error flushing Redis data after test completion');
        }

        // Purge all the task queues
        MQ.purgeAll(function(err) {
            if (err) {
                log().error({err: err}, 'Error purging the RabbitMQ queues');
            }

            return callback();
        });
    });
});

/**
 * Bind request logging for oae-rest unit test debugging.
 *
 * @api private
 */
var _bindRequestLogger = function() {
    var requestLog = require('oae-logger').logger('request-log');

    RestUtil.on('request', function(restCtx, url, method, data) {
        requestLog().trace({
            'restCtx': restCtx,
            'url': url,
            'method': method,
            'data': data
        }, 'Performing REST request');
    });

    RestUtil.on('response', function(body, res) {
        requestLog().trace({ 'res': res, 'body': body }, 'REST Request complete');
    });

    RestUtil.on('error', function(err, body, res) {
        requestLog().error({
            'err': err,
            'res': res,
            'body': body
        }, 'An error occurred sending a REST request');
    });
};
