/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var LibraryAPI = require('oae-library');

var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');

/*!
 * Register a library indexer that can provide resources to reindex the content library
 */
LibraryAPI.Index.registerLibraryIndex(ContentConstants.library.CONTENT_LIBRARY_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the content ids ('c') to which the library owner is directly associated in this batch of paged resources
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, 'c', start, limit, function(err, roles, nextToken) {
            if (err) {
                return callback(err);
            }

            // We just need the ids, not the roles
            var ids = _.pluck(roles, 'id');

            // Get the properties of the content items in the library that are relevant to building the library
            ContentDAO.Content.getMultipleContentItems(ids, ['contentId', 'tenantAlias', 'visibility', 'lastModified'], function(err, contentItems) {
                if (err) {
                    return callback(err);
                }

                // Map the content items to light-weight resources with just the properties needed to populate the library index
                var resources = _.map(contentItems, function(content) {
                    return {
                        'id': content.id,
                        'rank': content.lastModified,
                        'tenant': content.tenant,
                        'visibility': content.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});

/*!
 * Configure the content library search endpoing
 */
LibraryAPI.Search.registerLibrarySearch('content-library', ['content']);
