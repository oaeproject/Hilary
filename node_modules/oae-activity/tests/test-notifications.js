/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var OaeUtil = require('oae-util/lib/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var ActivityTestsUtil = require('oae-activity/lib/test/util');


describe('Notifications', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;

    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    /*!
     * Create a default activity configuration object, overridden with the given `overlay` object.
     *
     * @param   {Object}    overlay     Configuration properties with which to overide the default.
     * @return  {Object}                An object that represents the default configuration for unit tests, overridden by the overlay.
     */
    var createDefaultConfig = function(overlay) {
        return _.extend({'collectionPollingFrequency': -1}, overlay);
    };

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        callback();
    });

    describe('Notification Stream', function() {

        /**
         * Test that verifies notifications are not sent to the actor of an activity.
         */
        it('verifies a notification is never sent to the actor of an activity', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, createdUsers) {
                assert.ok(!err);
                var mrvisser = createdUsers[_.keys(createdUsers)[0]];
                var simong = createdUsers[_.keys(createdUsers)[1]];

                // Create content with simong as a user
                RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'private', 'http://www.google.ca', [], [simong.user.id], function(err, content) {
                    assert.ok(!err);

                    // Sanity check that the content is in simong's notification stream
                    ActivityTestsUtil.collectAndGetNotificationStream(simong.restContext, null, function(err, notificationStream) {
                        assert.ok(!err);
                        assert.equal(notificationStream.items.length, 1);
                        assert.equal(notificationStream.items[0].actor['oae:id'], mrvisser.user.id);
                        assert.equal(notificationStream.items[0].object['oae:id'], content.id);

                        // Verify that no notification was routed to mrvisser, as they performed the action and this would be super annoying
                        ActivityTestsUtil.collectAndGetNotificationStream(mrvisser.restContext, null, function(err, notificationStream) {
                            assert.ok(!err);
                            assert.equal(notificationStream.items.length, 0);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a notification is sent to users when a content item is created with them as a member
         */
        it('verifies a notification is sent when creating content with a user member', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, createdUsers) {
                assert.ok(!err);
                var mrvisser = createdUsers[_.keys(createdUsers)[0]];
                var simong = createdUsers[_.keys(createdUsers)[1]];

                // Create content with simong as a user and verify it winds up in the notification stream
                RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'private', 'http://www.google.ca', [], [simong.user.id], function(err, content) {
                    assert.ok(!err);

                    ActivityTestsUtil.collectAndGetNotificationStream(simong.restContext, null, function(err, notificationStream) {
                        assert.ok(!err);
                        assert.equal(notificationStream.items.length, 1);
                        assert.equal(notificationStream.items[0].actor['oae:id'], mrvisser.user.id);
                        assert.equal(notificationStream.items[0].object['oae:id'], content.id);
                        callback();
                    });
                });
            });
        });
    });

    describe('Mark Notifications Read', function() {

        /**
         * Test that verifies marking notifications as read and counts work.
         */
        it('verifies toggling of notifications read', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, createdUsers) {
                assert.ok(!err);
                var mrvisser = createdUsers[_.keys(createdUsers)[0]];
                var simong = createdUsers[_.keys(createdUsers)[1]];

                RestAPI.User.getMe(simong.restContext, function(err, me) {
                    assert.ok(!err);
                    assert.ok(!me.notificationsUnread);
                    assert.ok(!me.notificationsLastRead);

                    // Create content with simong as a member
                    RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'private', 'http://www.google.ca', [], [simong.user.id], function(err, content) {
                        assert.ok(!err);

                        // Ensure the notification gets delivered
                        ActivityTestsUtil.collectAndGetNotificationStream(simong.restContext, null, function(err, notificationStream) {
                            assert.ok(!err);
                            assert.equal(notificationStream.items.length, 1);
                            assert.equal(notificationStream.items[0].actor['oae:id'], mrvisser.user.id);
                            assert.equal(notificationStream.items[0].object['oae:id'], content.id);

                            // Verify the notificationsUnread status
                            RestAPI.User.getMe(simong.restContext, function(err, me) {
                                assert.ok(!err);

                                // We now have unread notifications, but still no "lastRead" status
                                assert.strictEqual(me.notificationsUnread, 1);
                                assert.strictEqual(me.notificationsLastRead, undefined);

                                RestAPI.Activity.markNotificationsRead(simong.restContext, function(err, result) {
                                    var lastReadTime = result.lastReadTime;

                                    assert.strictEqual(lastReadTime, OaeUtil.getNumberParam(lastReadTime));

                                    // Verify the notificationsLastRead status
                                    RestAPI.User.getMe(simong.restContext, function(err, me) {
                                        assert.ok(!err);

                                        // We now have no unread notifications, and a lastRead status
                                        assert.strictEqual(me.notificationsUnread, 0);
                                        assert.strictEqual(me.notificationsLastRead, lastReadTime);

                                        // Create 2 content items again with simong as a member
                                        RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'private', 'http://www.google.ca', [], [simong.user.id], function(err, content) {
                                            assert.ok(!err);

                                            RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'private', 'http://www.google.ca', [], [simong.user.id], function(err, content) {
                                                assert.ok(!err);

                                                // Ensure the notification gets delivered and aggregated
                                                ActivityTestsUtil.collectAndGetNotificationStream(simong.restContext, null, function(err, notificationStream) {
                                                    assert.ok(!err);
                                                    assert.equal(notificationStream.items.length, 1);
                                                    assert.equal(notificationStream.items[0].actor['oae:id'], mrvisser.user.id);
                                                    assert.equal(notificationStream.items[0].object['oae:collection'].length, 3);

                                                    // Verify the notificationsUnread is incremented and notificationsLastRead status
                                                    RestAPI.User.getMe(simong.restContext, function(err, me) {
                                                        assert.ok(!err);

                                                        // We now have unread notifications, and a lastRead status
                                                        assert.strictEqual(me.notificationsUnread, 2);
                                                        assert.equal(me.notificationsLastRead, lastReadTime);

                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
