/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var log = require('oae-logger').logger('search');
var ElasticSearch = require('./internal/elasticsearch');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

module.exports = function(config, callback) {
    config.search.schemaExtension = config.search.schemaExtension || {};

    var hosts = config.search.hosts;
    var index = config.search.index;
    var processIndexJobs = config.search.processIndexJobs !== false;
    var destroy = config.search.index.destroyOnStartup === true;

    SearchAPI.registerSearch('general', require('./searches/general'));    
    SearchAPI.refreshSearchConfiguration(index.name, { hosts: hosts }, index.allowAnonRefresh === true, processIndexJobs, function(err) {
        if (err) {
            return callback(err);
        }

        ensureIndex(index.name, index.settings, destroy, function(err) {
            if (err) {
                return callback(err);
            }

            ensureSearchSchema(config, callback);
        });
    });
};

/*!
 * Ensure that the index identified by the index name exists.
 * 
 * @param   {String}        indexName           The name of the index
 * @param   {Object}        indexSettings       The settings of the index
 * @param   {Object[]}      indexSettings.hosts An array of hosts (e.g., `[{ "host": "localhost", "port": 9200 }]`) to use
 * @param   {Boolean}       destroy             If true, the index will be destroyed if it exists, then recreated.
 * @param   {Function}      callback            Invoked when the process completes
 * @param   {Object}        callback.err        An error that occurred, if any
 * @api private
 */
var ensureIndex = function(indexName, indexSettings, destroy, callback) {
    if (destroy) {
        log().info('Destroying index "%s" on initialization.', indexName);
        ElasticSearch.deleteIndex(indexName, function(err) {
            if (err) {
                return callback(err);
            }

            ElasticSearch.createIndex(indexName, indexSettings, function(err) {
                if (err) {
                    log().error({'err': err}, 'Error recreating index "%s" after deletion.', indexName);
                    return callback(err);
                }

                log().info('Recreated index "%s" after deletion.', indexName);
                return callback();
            });
        });
    } else {
        ElasticSearch.createIndex(indexName, indexSettings, function(err) {
            if (err) {
                log().error({'err': err}, 'Error creating index "%s".', indexName)
                return callback(err);
            }

            return callback();
        });
    }
};

/*!
 * Create the central resource search schema if it isn't already created.
 *
 * @param   {Object}    config          The search configuration object.
 * @param   {Function}  callback        Invoked when the process completes
 * @param   {Object}    callback.err    An error that occurred, if any
 * @api private
 */
var ensureSearchSchema = function(config, callback) {
    // extend the base schema with the configured extensions
    var resourceSchema = _.extend(createResourceSchema(), config.schemaExtension);
    var resourceMembersSchema = createResourceMembersSchema();
    var resourceMembershipsSchema = createResourceMembershipsSchema();

    // The below elastic search options mean:
    //
    //  * `_source: false` indicates that the _source field is disabled for the mapping, saving disk space as it is not needed
    //  * `_parent: ...` establishes a parent-child relationship from the resource document to its child documents.
    //
    // For more information, please see the elasticsearch mapping documentation:
    // http://www.elasticsearch.org/guide/reference/mapping/

    ElasticSearch.putMapping(SearchConstants.resourceMappingName, resourceSchema, {'_source': false}, function(err) {
        if (err) {
            return callback(err);
        }

        // Members and memberships mappings are children to the parent resource.
        childOpts = {
            '_source': false,
            '_parent': SearchConstants.resourceMappingName
        };

        ElasticSearch.putMapping(SearchConstants.resourceMembersMappingName, resourceMembersSchema, childOpts, function(err) {
            if (err) {
                return callback(err);
            }

            ElasticSearch.putMapping(SearchConstants.resourceMembershipsMappingName, resourceMembershipsSchema, childOpts, callback);
        });
    });
};

/*!
 * Create the schema for a document that indexes resource members information. This document is intended to be a child document,
 * whose parent is the central resource document. This relationship allows for a resource's members to be updated without having
 * to re-index the memberships (if any) as well as the central resource document.
 *
 * @return  {Object}        schema                  The resource members schema object
 *          {String[]}      schema.direct_members   A multi-value field that holds the direct member ids of the parent resource
 */
var createResourceMembersSchema = function() {
    return {
        'direct_members': {
            'type': 'string',
            'store': 'no',
            'index': 'not_analyzed'
        }
    };
};

/*!
 * Create the schema for a document that indexes resource membership information (i.e., the groups to which a principal resource
 * belongs). This document is intended to be a child document, whose parent is the central resource document. This relationship
 * allows for a resource's members to be updated without having to re-index the memberships (if any) as well as the central resource
 * document.
 *
 * @return  {Object}        schema                      The resource memberships schema object
 *          {String[]}      schema.direct_memberships   A multi-value field that holds the direct parent group ids to which the resource is a member
 */
var createResourceMembershipsSchema = function() {
    return {
        'direct_memberships': {
            'type': 'string',
            'store': 'no',
            'index': 'not_analyzed'
        }
    };
};

/*!
 * Create the central resource schema object. This is the standard document indexed and returned in searches.
 *
 * @return  {Object}        schema                      The resource document schema
 *          {String}        schema.id                   The ID of the document. This should always be the internal id of the resource
 *          {String}        schema.tenantAlias          The alias of the tenant to which the resource belongs
 *          {String}        schema.resourceType         The type of the resource (e.g., user, group, content)
 *          {String}        schema.resourceSubType      A resource-specific subtype. e.g., a mime-type of content; perhaps a special classification of group
 *          {String}        schema.thumbnailUrl         The URL to the thumbnail depiction of the resource
 *          {String}        schema.displayName          The display name of the resource to display
 *          {Object}        schema._extra               A blob of JSON that can be stored (and not indexed) for this resource. This _extra field will *never* be sent to the UI, it is up to the document transformer to extract the information and store elsewhere on the document, where appropriate.
 *          {String}        schema.visibility           The visibility of the resource. One of public, loggedin or private
 *          {String}        schema.joinable             The joinable nature of the resource. One of yes, no or request
 *          {String}        schema.general              Used solely for indexing a blob of text for full-text search. Append as much data here as you would like to match in the `q` search parameter. This is not stored, only indexed
 *          {String}        schema.sort                 The sort field to determine how the documents will be sorted in a result set. This is not stored, only indexed
 */
var createResourceSchema = function() {
    return {
        'id': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },
        'tenantAlias': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },
        'resourceType': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },
        'resourceSubType': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },
        'thumbnailUrl': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },
        'displayName': {
            'type': 'string',
            'store': 'yes',
            'index': 'analyzed',
            'analyzer': 'general'
        },
        '_extra': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },
        'visibility': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },
        'joinable': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },
        'general': {
            'type': 'string',
            'store': 'no',
            'index': 'analyzed',
            'analyzer': 'general'
        },
        'sort': {
            'type': 'string',
            'store': 'no',
            'index': 'not_analyzed'
        }
    };
};

