/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * The interface that each Storage Backend should implement.
 */

/**
 * Stores a file body on the storage backend.
 * This method will return a uri that can be used to retrieve the file body.
 * The implementer will ensure that the temporary file will be removed.
 * It's up to the caller to store this uri appropriately.
 *
 * @param  {Context}     ctx                     The current execution context.
 * @param  {Object}      file                    An object that holds 4 data keys (`filename`, `path`, `mime` and `size`). This file should be removed once the file is stored or in case something goes wrong.
 * @param  {Object}      [options]               Set of options that might change how the backend should store the file.
 * @param  {Stirng}      [options.resourceId]    When specified, the backend should only use this string to determine where (pathwise) the file should be stored. This allows the caller to overwrite certain files. (Profile pictures is an example of this.)
 * @param  {Function}    callback                A callback method
 * @param  {Object}      callback.err            An error object (if any)
 * @param  {String}      callback.uri            A URI that can be used to retrieve the filebody.
 */
var store = module.exports.store = function(ctx, file, options, callback) {};

/**
 * Retrieves a file and stores it under a temporary file.
 * It's the caller's responsibility to remove this file.
 * Note that this should *NOT* be used when an HTTP download request is being served.
 *
 * @param  {Context}     ctx                 The current execution context.
 * @param  {String}      uri                 The uri to retrieve
 * @param  {Function}    callback            A callback method
 * @param  {Object}      callback.err        An error object (if any)
 * @param  {TempFile}    callback.file       A tempfile that holds the data of the requested file. It's up to the callers to remove this file!
 */
var get = module.exports.get = function(ctx, uri, callback) {};

/**
 * Remove a file that is stored on the storage backend.
 *
 * @param  {Context}     ctx                 The current execution context.
 * @param  {String}      uri                 The uri to retrieve
 * @param  {Function}    callback            A callback method
 * @param  {Object}      callback.err        An error object (if any)
 * @param  {TempFile}    callback.file       A tempfile that holds the data of the requested file. It's up to the callers to remove this file!
 */
var remove = module.exports.remove = function(ctx, uri, callback) {};

/**
 * In case the storage backend is not hosted on this app server,
 * the user will need to be redirected to a URL that gets generated by this method.
 *
 * @param  {Context}     ctx                   The current execution context.
 * @param  {Content}     uri                   A URI that identifies the filebody.
 * @return {Object}                            An object that holds a `code` key and a `url` key. If the code is `204` it's assumed that this should be an X-Accel-Redirect via nginx, if it's a 301 or 302 the provided url is a complete url to an outside source.
 */
var getDownloadLink = module.exports.getDownloadLink = function(ctx, uri) {};
