/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');
var OaeUtil = require('oae-util/lib/util');

/**
 * Get the list of followers of the specified user
 *
 * @param  {String}     userId                  The id of the user whose followers to fetch
 * @param  {String}     start                   The id of the user from which to start listing followers
 * @param  {Number}     limit                   The maximum number of followers to fetch
 * @param  {Function}   callback                Invoked when the list has been fetched
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {String[]}   callback.followerIds    The list of user ids of users who follow the specified user
 * @param  {String}     [callback.nextToken]    The value to provide as the `start` parameter when fetching the next page of followers. If unspecified, there are no more followers to fetch
 */
var getFollowers = module.exports.getFollowers = function(userId, start, limit, callback) {
    Cassandra.runPagedColumnQuery('FollowingUsersFollowers', 'userId', userId, start, limit, null, function(err, columns, nextToken) {
        if (err) {
            return callback(err);
        }

        var followers = _.pluck(columns, 'name');
        return callback(null, followers, nextToken);
    });
};

/**
 * Get the list of users the specified user follows
 *
 * @param  {String}     userId                      The id of the user whose following list to fetch
 * @param  {String}     start                       The id of the user from which to start listing followed users
 * @param  {Number}     limit                       The maximum number of followed user ids to fetch
 * @param  {Function}   callback                    Invoked when the followed user ids have been fetched
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {String[]}   callback.followedUserIds    The user ids of users that are followed by the specified user
 * @param  {String}     [callback.nextToken]        The value to provide as the `start` parameter when fetching the next page of followed users. If unspecified, there are no more users to fetch
 */
var getFollowing = module.exports.getFollowing = function(userId, start, limit, callback) {
    Cassandra.runPagedColumnQuery('FollowingUsersFollowing', 'userId', userId, start, limit, null, function(err, columns, nextToken) {
        if (err)  {
            return callback(err);
        }

        var following = _.pluck(columns, 'name');
        return callback(null, following, nextToken);
    });
};

/**
 * Given a list of potential followed user ids, determine which of them are being followed by the provided user
 *
 * @param  {String}     followingUserId     The id of the user to test against
 * @param  {String[]}   followedUserIds     The ids of the users who the following user may be following
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Object}     callback.following  An object whose key is the user id from followedUserIds and value is `true` or falsey, indicating whether or not the following user is following them
 */
var isFollowing = module.exports.isFollowing = function(followingUserId, followedUserIds, callback) {
    if (!_.isArray(followedUserIds) || followedUserIds.length === 0) {
        return callback(null, {});
    }

    var paramValues = [];
    var paramFollowingPlaceholders = [];

    _.each(followedUserIds, function(followedUserId) {
        paramValues.push(followedUserId);
        paramFollowingPlaceholders.push('?');
    });

    paramValues.push(followingUserId);

    Cassandra.runQuery('SELECT' + paramFollowingPlaceholders.join(',') + ' FROM FollowingUsersFollowing USING CONSISTENCY QUORUM WHERE userId = ?', paramValues, function(err, rows) {
        if (err) {
            return callback(err);
        }

        var row = rows[0];
        if (!row) {
            return callback(null, {});
        }

        var following = {};
        row.forEach(function(name, value) {
            if (value === '1') {
                following[name] = true;
            }
        });

        return callback(null, following);
    });
};

/**
 * Save the followed users for the specified follower user id
 *
 * @param  {String}     followerUserId      The id of the user who will follow the list of followed user ids
 * @param  {String[]}   followedUserIds     The id of the users who will be followed by the follower user id
 * @param  {Function}   callback            Invoked when the follows have been saved
 * @param  {Object}     callback.err        An error that occured, if any
 */
var saveFollows = module.exports.saveFollows = function(followerUserId, followedUserIds, callback) {
    followedUserIds = followedUserIds || [];
    followedUserIds = _.compact(followedUserIds);
    if (followedUserIds.length === 0) {
        return callback();
    }

    // Aggregate the placeholders (? = 1) to build the following user index. Each column's name is the id of
    // the user being followed, where the value is just the value 1
    var placeholders = [];
    _.each(followedUserIds, function(followedUserId) {
        placeholders.push('? = \'1\'');
    });

    var queries = [{
        'query': 'UPDATE FollowingUsersFollowing SET ' + placeholders.join(', ') + ' WHERE userId = ?',
        'parameters': followedUserIds.concat(followerUserId)
    }];

    _.each(followedUserIds, function(followedUserId) {
        queries.push({
            'query': 'UPDATE FollowingUsersFollowers SET ? = \'1\' WHERE userId = ?',
            'parameters': [followerUserId, followedUserId]
        });
    });

    Cassandra.runBatchQuery(queries, 'QUORUM', callback);
};

/**
 * Perform the queries necessary to ensure that the user identified by `followerUserid` no longer follows
 * the users identified by `followedUserIds`.
 *
 * @param  {String}     followerUserId      The id of the user who will unfollow the given followed users
 * @param  {String[]}   followedUserIds     The id of the users who will become unfollowed
 * @param  {Function}   callback            Invoked when the process completes
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var deleteFollows = module.exports.deleteFollows = function(followerUserId, followedUserIds, callback) {
    followedUserIds = followedUserIds || [];
    followedUserIds = _.compact(followedUserIds);
    if (followedUserIds.length === 0) {
        return callback();
    }

    // Build the query that will delete all the `followedUserIds` from the follower's "Following" index
    var placeholders = _.map(followedUserIds, function(followedUserId) { return '?'; }).join(', ');
    var queries = [{
        'query': 'DELETE ' + placeholders + ' FROM FollowingUsersFollowing WHERE userId = ?',
        'parameters': followedUserIds.concat(followerUserId)
    }];

    // Build the queries that will delete the `followerUserIds` from each followed user's "Followers" index
    _.each(followedUserIds, function(followedUserId) {
        queries.push({
            'query': 'DELETE ? FROM FollowingUsersFollowers WHERE userId = ?',
            'parameters': [followerUserId, followedUserId]
        });
    });

    Cassandra.runBatchQuery(queries, 'QUORUM', callback);
};
