/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var passport = require('passport');

var log = require('oae-logger').logger('oae-authentication');
var OAE = require('oae-util/lib/oae');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');


/**
 * Logs out of the current session.
 *
 * @param  {Request}    req     The express request object
 * @param  {Response}   res     The express response object
 * @api private
 */
var _handleLogout = function(req, res) {
    req.logOut();
    res.send(200);
};

/**
 * Performs local authentication.
 *
 * @param  {Request}    req     The express request object
 * @param  {Response}   res     The express response object
 * @api private
 */
var _handleLocalAuthentication = function(req, res, next) {
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.LOCAL);
    var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
    passport.authenticate(strategyId)(req, res, errorHandler);
};

//////////////////
// Global admin //
//////////////////

OAE.globalAdminRouter.on('post', '/api/auth/login', [_handleLocalAuthentication, function(req, res, next) {
    // This callback only gets called when we log in succesfully.
    return res.send(200, req.user);
}]);

OAE.globalAdminRouter.on('post', '/api/auth/logout', _handleLogout);

/*!
 * Change the password of the currently authenticated user in the global tenant
 */
OAE.globalAdminRouter.on('post', '/api/user/:id/password', function(req, res) {
    AuthenticationAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/////////////
// Tenants //
/////////////

OAE.tenantRouter.on('post', '/api/auth/login', [_handleLocalAuthentication, function(req, res, next) {
    // This callback only gets called when we log in succesfully.
    return res.send(200, req.user);
}]);

OAE.tenantRouter.on('post', '/api/auth/logout', _handleLogout);

/*!
 * Change the password of the currently authenticated user in the tenant server
 */
OAE.tenantRouter.on('post', '/api/user/:id/password', function(req, res) {
    AuthenticationAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/*!
 * Checks whether or not a user id exists
 */
OAE.tenantRouter.on('get', '/api/auth/exists/:username', function(req, res) {
    AuthenticationAPI.localUsernameExists(req.ctx, req.params.username, function(err, exists) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // If the login id doesn't exist yet, we send back a 404
        if (exists) {
            res.send(200);
        } else {
            res.send(404);
        }
    });
});
