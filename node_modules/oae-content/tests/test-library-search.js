/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Library Search', function() {

    // REST contexts we can use to do REST requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    before(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    describe('User Libraries', function() {

        /**
         * Test that verifies all users can search public user library items.
         */
        it('verify all users see public user library item', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        RestAPI.Content.createLink(camAdminRestContext, 'Apereo Website', 'The website of the Apereo Foundation', 'public', 'http://www.apereofoundation.org', [], [], function(err, content) {
                            assert.ok(!err);

                            RestAPI.Content.shareContent(camAdminRestContext, content.contentId, [ jack.id ], function(err) {
                                assert.ok(!err);

                                // Verify anonymous can see the content item
                                RestAPI.Search.search(anonymousRestContext, 'library', [ jack.id ], null, function(err, results) {
                                    assert.ok(!err);
                                    assert.equal(results.total, 1);
                                    assert.equal(results.results[0].id, content.contentId);

                                    // Verify tenant admin can see the content item
                                    RestAPI.Search.search(camAdminRestContext, 'library', [ jack.id ], null, function(err, results) {
                                        assert.ok(!err);
                                        assert.equal(results.total, 1);
                                        assert.equal(results.results[0].id, content.contentId);

                                        // Verify the target user can see the content item
                                        RestAPI.Search.search(jackRestContext, 'library', [ jack.id ], null, function(err, results) {
                                            assert.ok(!err);
                                            assert.equal(results.total, 1);
                                            assert.equal(results.results[0].id, content.contentId);

                                            // Verify a different loggedin user can see the content item
                                            RestAPI.Search.search(janeRestContext, 'library', [ jack.id ], null, function(err, results) {
                                                assert.ok(!err);
                                                assert.equal(results.total, 1);
                                                assert.equal(results.results[0].id, content.contentId);

                                                // Verify the cross-tenant user can see the content item
                                                RestAPI.Search.search(darthVaderRestContext, 'library', [ jack.id ], null, function(err, results) {
                                                    assert.ok(!err);
                                                    assert.equal(results.total, 1);
                                                    assert.equal(results.results[0].id, content.contentId);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });                
                });
            });
        });

        /**
         * Test that verifies that anonymous and cross-tenant users cannot search loggedin user library items.
         */
        it('verify anonymous and cross-tenant user cannot see loggedin user library items', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // Create the content item as 'loggedin'
                        RestAPI.Content.createLink(camAdminRestContext, 'Apereo Website', 'The website of the Apereo Foundation', 'loggedin', 'http://www.apereofoundation.org', [], [], function(err, content) {
                            assert.ok(!err);

                            RestAPI.Content.shareContent(camAdminRestContext, content.contentId, [ jack.id ], function(err) {
                                assert.ok(!err);

                                // Verify anonymous cannot see it
                                RestAPI.Search.search(anonymousRestContext, 'library', [ jack.id ], null, function(err, results) {
                                    assert.ok(!err);
                                    assert.equal(results.total, 0);
                                    assert.ok(!results.results[0]);

                                    // Verify tenant admin can see it
                                    RestAPI.Search.search(camAdminRestContext, 'library', [ jack.id ], null, function(err, results) {
                                        assert.ok(!err);
                                        assert.equal(results.total, 1);
                                        assert.equal(results.results[0].id, content.contentId);

                                        // Verify the target user can see it
                                        RestAPI.Search.search(jackRestContext, 'library', [ jack.id ], null, function(err, results) {
                                            assert.ok(!err);
                                            assert.equal(results.total, 1);
                                            assert.equal(results.results[0].id, content.contentId);

                                            // Verify another loggedin user can see it
                                            RestAPI.Search.search(janeRestContext, 'library', [ jack.id ], null, function(err, results) {
                                                assert.ok(!err);
                                                assert.equal(results.total, 1);
                                                assert.equal(results.results[0].id, content.contentId);

                                                // Verify the cross-tenant user cannot see it
                                                RestAPI.Search.search(darthVaderRestContext, 'library', [ jack.id ], null, function(err, results) {
                                                    assert.ok(!err);
                                                    assert.equal(results.total, 0);
                                                    assert.ok(!results.results[0]);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });                
                });
            });
        });

        /**
         * Test that verifies only admin and the user themselves can search private user library items.
         */
        it('verify only self and admin can see private user library items', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // Create the private content item
                        RestAPI.Content.createLink(camAdminRestContext, 'Apereo Website', 'The website of the Apereo Foundation', 'private', 'http://www.apereofoundation.org', [], [], function(err, content) {
                            assert.ok(!err);

                            RestAPI.Content.shareContent(camAdminRestContext, content.contentId, [ jack.id ], function(err) {
                                assert.ok(!err);

                                // Verify anonymous cannot search it
                                RestAPI.Search.search(anonymousRestContext, 'library', [ jack.id ], null, function(err, results) {
                                    assert.ok(!err);
                                    assert.equal(results.total, 0);
                                    assert.ok(!results.results[0]);

                                    // Verify tenant admin can search it
                                    RestAPI.Search.search(camAdminRestContext, 'library', [ jack.id ], null, function(err, results) {
                                        assert.ok(!err);
                                        assert.equal(results.total, 1);
                                        assert.equal(results.results[0].id, content.contentId);

                                        // Verify the target user can search it
                                        RestAPI.Search.search(jackRestContext, 'library', [ jack.id ], null, function(err, results) {
                                            assert.ok(!err);
                                            assert.equal(results.total, 1);
                                            assert.equal(results.results[0].id, content.contentId);

                                            // Verify another loggedin user cannot search it
                                            RestAPI.Search.search(janeRestContext, 'library', [ jack.id ], null, function(err, results) {
                                                assert.ok(!err);
                                                assert.equal(results.total, 0);
                                                assert.ok(!results.results[0]);

                                                // Verify the cross-tenant user cannot search it
                                                RestAPI.Search.search(darthVaderRestContext, 'library', [ jack.id ], null, function(err, results) {
                                                    assert.ok(!err);
                                                    assert.equal(results.total, 0);
                                                    assert.ok(!results.results[0]);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });                
                });
            });
        });
    });
    
    describe('Group Libraries', function() {

        /**
         * Test that verifies all users can see public group library items.
         */
        it('verify all users see public group library items', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var groupAlias = TestsUtil.generateTestUserId('group');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'no', [], [], function(err, group) {
                    assert.ok(!err);

                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        var membership = {};
                        membership[jack.id] = 'member';
                        RestAPI.Group.setGroupMembers(camAdminRestContext, group.id, membership, function(err) {
                            assert.ok(!err);

                            RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                                assert.ok(!err);
                                var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                                // Create the public content item and share it with the group
                                RestAPI.Content.createLink(camAdminRestContext, 'Apereo Website', 'The website of the Apereo Foundation', 'public', 'http://www.apereofoundation.org', [], [], function(err, content) {
                                    assert.ok(!err);

                                    RestAPI.Content.shareContent(camAdminRestContext, content.contentId, [ group.id ], function(err) {
                                        assert.ok(!err);

                                        // Verify anonymous can see it
                                        RestAPI.Search.search(anonymousRestContext, 'library', [ group.id ], null, function(err, results) {
                                            assert.ok(!err);
                                            assert.equal(results.total, 1);
                                            assert.equal(results.results[0].id, content.contentId);

                                            // Verify tenant admin can see it
                                            RestAPI.Search.search(camAdminRestContext, 'library', [ group.id ], null, function(err, results) {
                                                assert.ok(!err);
                                                assert.equal(results.total, 1);
                                                assert.equal(results.results[0].id, content.contentId);

                                                // Verify a member can see it
                                                RestAPI.Search.search(jackRestContext, 'library', [ group.id ], null, function(err, results) {
                                                    assert.ok(!err);
                                                    assert.equal(results.total, 1);
                                                    assert.equal(results.results[0].id, content.contentId);

                                                    // Verify a loggedin non-member can see it
                                                    RestAPI.Search.search(janeRestContext, 'library', [ group.id ], null, function(err, results) {
                                                        assert.ok(!err);
                                                        assert.equal(results.total, 1);
                                                        assert.equal(results.results[0].id, content.contentId);

                                                        // Verify a cross-tenant user can see it
                                                        RestAPI.Search.search(darthVaderRestContext, 'library', [ group.id ], null, function(err, results) {
                                                            assert.ok(!err);
                                                            assert.equal(results.total, 1);
                                                            assert.equal(results.results[0].id, content.contentId);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });                
                    });
                });
            });
        });

        /**
         * Test that verifies that anonymous and cross-tenant users cannot search loggedin group library items.
         */
        it('verify anonymous and cross-tenant users cannot see loggedin group library items', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var groupAlias = TestsUtil.generateTestUserId('group');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'no', [], [], function(err, group) {
                    assert.ok(!err);

                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        var membership = {};
                        membership[jack.id] = 'member';
                        RestAPI.Group.setGroupMembers(camAdminRestContext, group.id, membership, function(err) {
                            assert.ok(!err);

                            RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                                assert.ok(!err);
                                var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                                // Create the loggedin content item and share it with the group
                                RestAPI.Content.createLink(camAdminRestContext, 'Apereo Website', 'The website of the Apereo Foundation', 'loggedin', 'http://www.apereofoundation.org', [], [], function(err, content) {
                                    assert.ok(!err);

                                    RestAPI.Content.shareContent(camAdminRestContext, content.contentId, [ group.id ], function(err) {
                                        assert.ok(!err);

                                        // Verify anonymous cannot see it
                                        RestAPI.Search.search(anonymousRestContext, 'library', [ group.id ], null, function(err, results) {
                                            assert.ok(!err);
                                            assert.equal(results.total, 0);
                                            assert.ok(!results.results[0]);

                                            // Verify tenant admin can see it
                                            RestAPI.Search.search(camAdminRestContext, 'library', [ group.id ], null, function(err, results) {
                                                assert.ok(!err);
                                                assert.equal(results.total, 1);
                                                assert.equal(results.results[0].id, content.contentId);

                                                // Verify member user can see it
                                                RestAPI.Search.search(jackRestContext, 'library', [ group.id ], null, function(err, results) {
                                                    assert.ok(!err);
                                                    assert.equal(results.total, 1);
                                                    assert.equal(results.results[0].id, content.contentId);

                                                    // Verify a loggedin non-member can see it
                                                    RestAPI.Search.search(janeRestContext, 'library', [ group.id ], null, function(err, results) {
                                                        assert.ok(!err);
                                                        assert.equal(results.total, 1);
                                                        assert.equal(results.results[0].id, content.contentId);

                                                        // Verify a cross-tenant user cannot see it
                                                        RestAPI.Search.search(darthVaderRestContext, 'library', [ group.id ], null, function(err, results) {
                                                            assert.ok(!err);
                                                            assert.equal(results.total, 0);
                                                            assert.ok(!results.results[0]);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });                
                    });
                });
            });
        });

        /**
         * Test that verifies only members and admin users can search private group library items. This includes members of the group that
         * belong to a different tenant.
         */
        it('verify only member and admin users can see private group library items', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var groupAlias = TestsUtil.generateTestUserId('group');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');
            var sithUsername = TestsUtil.generateTestUserId('sith');

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.User.createUser(gtAdminRestContext, sithUsername, 'password', 'Sithy McSithypants', null, function(err, sith) {
                    assert.ok(!err);
                    var sithRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, sithUsername, 'password');

                    // create group with sith as a member
                    RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'no', [], [sith.id], function(err, group) {
                        assert.ok(!err);

                        RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                            assert.ok(!err);
                            var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                            var membership = {};
                            membership[jack.id] = 'member';
                            RestAPI.Group.setGroupMembers(camAdminRestContext, group.id, membership, function(err) {
                                assert.ok(!err);

                                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                                    assert.ok(!err);
                                    var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                                    // Create the private content item and share it with the group
                                    RestAPI.Content.createLink(camAdminRestContext, 'Apereo Website', 'The website of the Apereo Foundation', 'private', 'http://www.apereofoundation.org', [], [], function(err, content) {
                                        assert.ok(!err);

                                        RestAPI.Content.shareContent(camAdminRestContext, content.contentId, [ group.id ], function(err) {
                                            assert.ok(!err);

                                            // Verify anonymous cannot see the private content item
                                            RestAPI.Search.search(anonymousRestContext, 'library', [ group.id ], null, function(err, results) {
                                                assert.ok(!err);
                                                assert.equal(results.total, 0);
                                                assert.ok(!results.results[0]);

                                                // Verify cam admin can see the private content item
                                                RestAPI.Search.search(camAdminRestContext, 'library', [ group.id ], null, function(err, results) {
                                                    assert.ok(!err);
                                                    assert.equal(results.total, 1);
                                                    assert.equal(results.results[0].id, content.contentId);

                                                    // Verify the same-tenant member can see the private content item
                                                    RestAPI.Search.search(jackRestContext, 'library', [ group.id ], null, function(err, results) {
                                                        assert.ok(!err);
                                                        assert.equal(results.total, 1);
                                                        assert.equal(results.results[0].id, content.contentId);

                                                        // Verify the cross-tenant member can see the private content item
                                                        RestAPI.Search.search(sithRestContext, 'library', [ group.id ], null, function(err, results) {
                                                            assert.ok(!err);
                                                            assert.equal(results.total, 1);
                                                            assert.equal(results.results[0].id, content.contentId);

                                                            // Verify another loggedin user cannot see the private content item
                                                            RestAPI.Search.search(janeRestContext, 'library', [ group.id ], null, function(err, results) {
                                                                assert.ok(!err);
                                                                assert.equal(results.total, 0);
                                                                assert.ok(!results.results[0]);

                                                                // Verify cross-tenant non-member user cannot see the private content item
                                                                RestAPI.Search.search(darthVaderRestContext, 'library', [ group.id ], null, function(err, results) {
                                                                    assert.ok(!err);
                                                                    assert.equal(results.total, 0);
                                                                    assert.ok(!results.results[0]);
                                                                    callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });                
                        });
                    });
                });
            });
        });
    });
});
