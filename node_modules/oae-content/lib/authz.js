/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');

var ContentConstants = require('oae-content/lib/constants').ContentConstants;

/**
 * Determine if the user invoking the current request is allowed to manage a given content item
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {Content}        content                 The content object we want to check
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {Boolean}        callback.canManage      Whether or not the user can manage the content item
 */
var canManageContent = module.exports.canManageContent = function(ctx, content, callback) {
    if (!ctx.user()) {
        return callback(null, false);
    } else if (ctx.user().isAdmin(content.tenant.alias)) {
        return callback(null, true);
    }

    return AuthzAPI.hasRole(ctx.user().id, content.id, ContentConstants.roles.MANAGER, callback);
};

/**
 * Determine if the user invoking the current request is allowed to edit a given content item
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {Content}        content                 The content object we want to check
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {Boolean}        callback.canManage      Whether or not the user can edit the content item
 */
var canEditContent = module.exports.canEditContent = function(ctx, content, callback) {
    if (!ctx.user()) {
        return callback(null, false);
    } else if (ctx.user().isAdmin(content.tenant.alias)) {
        return callback(null, true);
    }

    return AuthzAPI.getAllRoles(ctx.user().id, content.id, function(err, roles) {
        if (err) {
            callback(err);
        }
        return callback(null, _.some(roles, function(role) {
            return _.contains([ContentConstants.roles.EDITOR, ContentConstants.roles.MANAGER], role);
        }));
    });
};

/**
 * Determine if the current user has access to a piece of content. This function assumes that
 * the piece of content passed in actually exists
 *
 * @param  {Context}        ctx                 Standard context object containing the current user and the current tenant
 * @param  {Content}        contentObj          The content object representing the content item we're checking access for
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {Boolean}        callback.canView    Whether or not the user has access to the content
 */
var canViewContent = module.exports.canViewContent = function(ctx, contentObj, callback) {
    var user = ctx.user();
    AuthzAPI.resolveImplicitRole(ctx, contentObj.id, contentObj.tenant.alias, contentObj.visibility, ContentConstants.roles.ALL_PRIORITY, function(err, implicitRole, canInteract) {
        if (err) {
            return callback(err);
        } else if (implicitRole) {
            // We have implicit access, no reason to try and find explicit access because we can at least view the item
            return callback(null, true);
        } else if (!user) {
            // Anonymous user with no implicit access cannot view
            return callback(null, false);
        }

        // By this point, we only have access to view if we have a role on the item
        return AuthzAPI.hasAnyRole(user.id, contentObj.id, callback);
    });
};

/**
 * Determine if the current user has access to all the given content items.
 *
 * @param  {Context}        ctx                         Standard context object containing the current user and the current tenant
 * @param  {Content[]}      contentItems                The content objects we're checking access for
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {Boolean}        callback.canViewAll         Whether or not the user has access to the content
 * @param  {Content[]}      callback.illegalContent     The content items the user does not have access to
 */
var canViewAllContent = module.exports.canViewAllContent = function(ctx, contentItems, callback, _illegalContentItems) {
    _illegalContentItems = _illegalContentItems || [];
    if (_.isEmpty(contentItems)) {
        return callback(null, _.isEmpty(_illegalContentItems), _illegalContentItems);
    }

    var contentItem = contentItems.pop();
    canViewContent(ctx, contentItem, function(err, canView) {
        if (err) {
            return callback(err);
        } else if (!canView) {
            _illegalContentItems.push(contentItem.id);
        }

        canViewAllContent(ctx, contentItems, callback, _illegalContentItems);
    });
};
