/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var reCaptcha = require('recaptcha-async').reCaptcha;

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var LoginId = require('oae-authentication/lib/model').LoginId;
var OAE = require('oae-util/lib/oae');
var PrincipalsConfig = require('oae-config').config('oae-principals');

var PrincipalsAPI = require('./api');

//////////////////
// Global admin //
//////////////////

OAE.globalAdminServer.get('/api/me', function(req, res) {
    req.telemetryUrl = '/api/me';
    PrincipalsAPI.getMe(req.ctx, function(err, meData) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, meData);
    });
});

OAE.globalAdminServer.post('/api/user/:id/admin', function(req, res) {
    req.telemetryUrl = '/api/user/id/admin';
    PrincipalsAPI.setTenantAdmin(req.ctx, req.params.id, req.body.admin, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/////////////
// Tenants //
/////////////

OAE.tenantServer.get('/api/me', function(req, res) {
    req.telemetryUrl = '/api/me';
    PrincipalsAPI.getMe(req.ctx, function(err, meData) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, meData);
    });
});

OAE.tenantServer.post('/api/user/create', function(req, res) {
    req.telemetryUrl = '/api/user/create';
    var ctx = req.ctx;
    var tenant = ctx.tenant();
    var user = ctx.user();

    var createUser = function() {
        var loginId = new LoginId(tenant.alias, AuthenticationConstants.providers.LOCAL, req.body.username, { password: req.body.password });
        var opts = {
            'visibility': req.body.visibility,
            'email': req.body.email,
            'locale': req.body.locale,
            'timezone': req.body.timezone,
            'publicAlias': req.body.publicAlias
        };

        AuthenticationAPI.createUser(ctx, loginId, req.body.displayName, opts, function(err, newUser) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            res.send(201, newUser);
        });
    };

    if (user) {
        if (user.isAdmin(tenant.alias)) {
            // If the current user is an admin,
            // don't bother with reCaptcha.
            return createUser();
        } else {
            // Non-admin users cannot create accounts.
            return res.send(401);
        }
    }

    // Check if we need to validate with reCaptcha.
    var needsReCaptcha = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'enabled');

    if (!needsReCaptcha) {
        return createUser();
    }

    // An anonymous user, do the recaptcha check.
    var recaptcha = new reCaptcha();
    recaptcha.on('data', function (reCaptchaResponse) {
        if (reCaptchaResponse.is_valid) {
            createUser();
        } else {
            return res.send(400, {'msg': 'Invalid reCaptcha token.'});
        }
    });

    recaptcha.checkAnswer(PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'privateKey'), req.connection.remoteAddress, req.body.recaptchaChallenge, req.body.recaptchaResponse);
});

OAE.tenantServer.get('/api/user/:id', function(req, res) {
    req.telemetryUrl = '/api/user/id';
    PrincipalsAPI.getUser(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, user);
    });
});

OAE.tenantServer.post('/api/user/:id', function(req, res) {
    req.telemetryUrl = '/api/user/id';
    PrincipalsAPI.updateUser(req.ctx, req.params.id, req.body, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

OAE.tenantServer.post('/api/user/:id/picture', function(req, res) {
    req.telemetryUrl = '/api/user/id/picture';
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.id, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, principal);
    });
});

OAE.tenantServer.get('/api/user/:id/memberships', function(req, res) {
    req.telemetryUrl = '/api/user/id/memberships';
    var limit = parseInt(req.query.limit || 10, 10);
    PrincipalsAPI.memberOf(req.ctx, req.params.id, req.query.start, limit, function(err, memberships) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, {'results': memberships});
    });
});

OAE.tenantServer.post('/api/user/:id/admin', function(req, res) {
    req.telemetryUrl = '/api/user/id/admin';
    PrincipalsAPI.setTenantAdmin(req.ctx, req.params.id, req.body.admin, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});
