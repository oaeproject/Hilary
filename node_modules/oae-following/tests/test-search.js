/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests/lib/util');

var FollowingTestsUtil = require('oae-following/lib/test/util');

var globalAdminOnTenantRestContext = null;
var camAnonymousRestContext = null;
var camAdminRestContext = null;
var gtAdminRestContext = null;

/**
 * Function that will fill up the anonymous and admin REST context
 */
before(function(callback) {
    camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
    camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

    // Authenticate the global admin into a tenant so we can perform user-tenant requests with a global admin to test their access
    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
        assert.ok(!err);
        globalAdminOnTenantRestContext = ctx;
        return callback();
    });
});

describe('Following Search', function() {

    /**
     * Test that verifies searching the following and followers lists results in a correct empty search result
     */
    it('verify search with no followers or following', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, testUsers) {
            assert.ok(!err);
            var user = _.values(testUsers)[0];

            RestAPI.Search.search(user.restContext, 'following', [user.user.id], null, function(err, response) {
                assert.ok(response);
                assert.strictEqual(response.total, 0);
                assert.ok(response.results);
                assert.strictEqual(response.results.length, 0);

                RestAPI.Search.search(user.restContext, 'followers', [user.user.id], null, function(err, response) {
                    assert.ok(response);
                    assert.strictEqual(response.total, 0);
                    assert.ok(response.results);
                    assert.strictEqual(response.results.length, 0);
                    return callback();
                });
            });
        });
    });

    /**
     * Test that verifies validation of the following search
     */
    it('verify validation of following search', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, testUsers) {
            assert.ok(!err);
            var user = _.values(testUsers)[0];

            // Ensure failure with a non-valid resource id
            RestAPI.Search.search(user.restContext, 'following', ['not-a-valid-id'], null, function(err, response) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!response);

                // Ensure failure with group id instead of user id
                RestAPI.Search.search(user.restContext, 'following', ['g:not-a:user-id'], null, function(err, response) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.ok(!response);

                    // Ensure failure with non-existent user id
                    RestAPI.Search.search(user.restContext, 'following', ['u:cam:nonExistentUserId'], null, function(err, response) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        assert.ok(!response);

                        // Sanity check a valid search
                        RestAPI.Search.search(user.restContext, 'following', [user.user.id], null, function(err, response) {
                            assert.ok(response);
                            assert.strictEqual(response.total, 0);
                            assert.ok(response.results);
                            assert.strictEqual(response.results.length, 0);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies validation of the followers search
     */
    it('verify validation of followers search', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, testUsers) {
            assert.ok(!err);
            var user = _.values(testUsers)[0];

            // Ensure failure with a non-valid resource id
            RestAPI.Search.search(user.restContext, 'followers', ['not-a-valid-id'], null, function(err, response) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!response);

                // Ensure failure with group id instead of user id
                RestAPI.Search.search(user.restContext, 'followers', ['g:not-a:user-id'], null, function(err, response) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.ok(!response);

                    // Ensure failure with non-existent user id
                    RestAPI.Search.search(user.restContext, 'followers', ['u:cam:nonExistentUserId'], null, function(err, response) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        assert.ok(!response);

                        // Sanity check a valid search
                        RestAPI.Search.search(user.restContext, 'followers', [user.user.id], null, function(err, response) {
                            assert.ok(response);
                            assert.strictEqual(response.total, 0);
                            assert.ok(response.results);
                            assert.strictEqual(response.results.length, 0);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies when someone follows someone, they appear in both the following and followers search of the respective users
     */
    it('verify followers and following searches reflect follows and unfollows', function(callback) {
        // Create 2 users, one following the other
        FollowingTestsUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {

            // Search the following feed of the follower and the followers feed of the followed user and ensure that the users appear in the respective results
            FollowingTestsUtil.searchFollowerAndFollowing(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function(followerUserDoc, followedUserDoc) {
                assert.ok(followerUserDoc);
                assert.ok(followedUserDoc);

                // Unfollow the user and ensure that neither appears in the feeds now
                RestAPI.Following.unfollow(follower.restContext, followed.user.id, function(err) {
                    assert.ok(!err);

                    // Perform the search on the follower and following feeds and ensure that the users no longer appear
                    FollowingTestsUtil.searchFollowerAndFollowing(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function(followerUserDoc, followedUserDoc) {
                        assert.ok(!followerUserDoc);
                        assert.ok(!followedUserDoc);
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the followers and following search privacy doesn't leak sensitive information
     */
    it('verify follow search privacy', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, testUsers) {
            var privateUser = _.values(testUsers)[0];
            var loggedinUser = _.values(testUsers)[1];
            var publicUser = _.values(testUsers)[2];
            var bert = _.values(testUsers)[3];

            RestAPI.User.updateUser(privateUser.restContext, privateUser.user.id, {'visibility': 'private'}, function(err) {
                assert.ok(!err);

                RestAPI.User.updateUser(loggedinUser.restContext, loggedinUser.user.id, {'visibility': 'loggedin'}, function(err) {
                    assert.ok(!err);

                    // Verify anonymous can only see public follow searches
                    FollowingTestsUtil.assertNoSearchFeedAccess(camAnonymousRestContext, [privateUser.user.id, loggedinUser.user.id], function() {
                        FollowingTestsUtil.assertHasFollowFeedAccess(camAnonymousRestContext, [publicUser.user.id], function() {

                            // Verify gt admin can only see public follow searches
                            FollowingTestsUtil.assertNoSearchFeedAccess(gtAdminRestContext, [privateUser.user.id, loggedinUser.user.id], function() {
                                FollowingTestsUtil.assertHasSearchFeedAccess(gtAdminRestContext, [publicUser.user.id], function() {

                                    // Verify bert can see only public and loggedin follow searches
                                    FollowingTestsUtil.assertNoSearchFeedAccess(bert.restContext, [privateUser.user.id], function() {
                                        FollowingTestsUtil.assertHasSearchFeedAccess(bert.restContext, [publicUser.user.id, loggedinUser.user.id], function() {

                                            // Verify private user can see follow searches
                                            FollowingTestsUtil.assertHasSearchFeedAccess(privateUser.restContext, [publicUser.user.id, loggedinUser.user.id, privateUser.user.id], function() {

                                                // Verify cam admin can see follow searches
                                                FollowingTestsUtil.assertHasSearchFeedAccess(camAdminRestContext, [publicUser.user.id, loggedinUser.user.id, privateUser.user.id], function() {

                                                    // Verify global admin can see follow searches
                                                    FollowingTestsUtil.assertHasSearchFeedAccess(globalAdminOnTenantRestContext, [publicUser.user.id, loggedinUser.user.id, privateUser.user.id], callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that followers are reindexed when the search index is built with reindexAll
     */
    it('verify following search reindexes with reindex all', function(callback) {
        // Create 2 users, one following the other
        FollowingTestsUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {

            // Search the following feed of the follower and the followers feed of the followed user and ensure that the users appear in the respective results
            FollowingTestsUtil.searchFollowerAndFollowing(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function(followerUserDoc, followedUserDoc) {
                assert.ok(followerUserDoc);
                assert.ok(followedUserDoc);

                // Delete the search index
                SearchTestsUtil.deleteAll(function() {

                    // Ensure the following relationship can no longer be found when searching them
                    FollowingTestsUtil.searchFollowerAndFollowing(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function(followerUserDoc, followedUserDoc) {
                        assert.ok(!followerUserDoc);
                        assert.ok(!followedUserDoc);

                        // Reindex all resources
                        SearchTestsUtil.reindexAll(TestsUtil.createGlobalAdminRestContext(), function() {

                            // Ensure the follower and following search index are searchable again
                            FollowingTestsUtil.searchFollowerAndFollowing(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function(followerUserDoc, followedUserDoc) {
                                assert.ok(followerUserDoc);
                                assert.ok(followedUserDoc);

                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});