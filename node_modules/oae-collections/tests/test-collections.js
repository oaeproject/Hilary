/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var CollectionsTestUtil = require('../lib/test/util');

describe('Collections', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*!
     * Before each test, set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    beforeEach(function(callback) {
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    /*!
     * After each test, ensure the default collection visibility is the default value
     */
    afterEach(function(callback) {
        // Ensure the default collection visibility always starts fresh
        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, null, ['oae-collections/visibility/collection'], function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    /*!
     * Create a member update object whose key is the provided principal id and the value is the
     * role change. This is simply a convenience for performing individual role updates on
     * collections
     *
     * @param  {String}             principalId     The id of the principal whose role to change
     * @param  {String|Boolean}     roleChange      The change to make to the principal's role. Should either be a role (`manager` or `viewer`, or `false` to remove them)
     */
    var _memberUpdate = function(principalId, roleChange) {
        var memberUpdate = {};
        memberUpdate[principalId] = (roleChange || roleChange === false) ? roleChange : 'viewer';
        return memberUpdate;
    };

    describe('Create Collection', function() {

        /**
         * Test that verifies creation of a collection
         */
        it('verify collection creation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, sathomas) {
                assert.ok(!err);

                CollectionsTestUtil.assertCreateCollectionSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'private', [stuartf.user.id], [sathomas.user.id], function(createdCollection) {
                    // Ensure the returned collection model is accurate
                    assert.ok(createdCollection);
                    assert.ok(createdCollection.tenant);
                    assert.equal(createdCollection.tenant.alias, global.oaeTests.tenants.cam.alias);
                    assert.equal(createdCollection.tenant.displayName, global.oaeTests.tenants.cam.displayName);
                    assert.ok(createdCollection.id);
                    assert.ok(createdCollection.groupId);
                    assert.equal(createdCollection.displayName, 'test displayName');
                    assert.equal(createdCollection.description, 'test description');
                    assert.equal(createdCollection.visibility, 'private');
                    assert.ok(createdCollection.created);
                    assert.strictEqual(createdCollection.lastModified, createdCollection.created);
                    assert.equal(createdCollection.profilePath, util.format('/collection/%s/%s', global.oaeTests.tenants.cam.alias, createdCollection.id.split(':').pop()));
                    assert.equal(createdCollection.resourceType, 'collection');

                    // Sanity check that the collection was created
                    CollectionsTestUtil.assertGetCollectionSucceeds(mrvisser.restContext, createdCollection.id, function(fetchedCollection) {
                        // Ensure the fetched collection model is consistent with the created one
                        assert.ok(fetchedCollection);
                        assert.ok(fetchedCollection.tenant);
                        assert.equal(fetchedCollection.tenant.alias, createdCollection.tenant.alias);
                        assert.equal(fetchedCollection.tenant.displayName, createdCollection.tenant.displayName);
                        assert.equal(fetchedCollection.id, createdCollection.id);
                        assert.equal(fetchedCollection.groupId, createdCollection.groupId);
                        assert.equal(fetchedCollection.displayName, createdCollection.displayName);
                        assert.equal(fetchedCollection.description, createdCollection.description);
                        assert.equal(fetchedCollection.visibility, createdCollection.visibility);
                        assert.strictEqual(fetchedCollection.created, createdCollection.created);
                        assert.strictEqual(fetchedCollection.lastModified, createdCollection.lastModified);
                        assert.equal(fetchedCollection.profilePath, createdCollection.profilePath);
                        assert.equal(fetchedCollection.resourceType, createdCollection.resourceType);

                        // Ensure createdBy user model is consistent with the user who created it
                        assert.ok(fetchedCollection.createdBy);
                        assert.equal(fetchedCollection.createdBy.tenant.alias, mrvisser.user.tenant.alias);
                        assert.equal(fetchedCollection.createdBy.tenant.displayName, mrvisser.user.tenant.displayName);
                        assert.equal(fetchedCollection.createdBy.id, mrvisser.user.id);
                        assert.equal(fetchedCollection.createdBy.displayName, mrvisser.user.displayName);
                        assert.equal(fetchedCollection.createdBy.visibility, mrvisser.user.visibility);
                        assert.equal(fetchedCollection.createdBy.email, mrvisser.user.email);
                        assert.equal(fetchedCollection.createdBy.locale, mrvisser.user.locale);
                        assert.equal(fetchedCollection.createdBy.timezone, mrvisser.user.timezone);
                        assert.equal(fetchedCollection.createdBy.publicAlias, mrvisser.user.publicAlias);
                        assert.equal(fetchedCollection.createdBy.profilePath, mrvisser.user.profilePath);
                        assert.equal(fetchedCollection.createdBy.resourceType, mrvisser.user.resourceType);
                        assert.equal(fetchedCollection.createdBy.acceptedTC, mrvisser.user.acceptedTC);

                        // Ensure the initial roles are accurate, including the creator being a manager
                        var expectedRoles = {};
                        expectedRoles[stuartf.user.id] = 'manager';
                        expectedRoles[sathomas.user.id] = 'viewer';
                        expectedRoles[mrvisser.user.id] = 'manager';
                        return CollectionsTestUtil.assertFullCollectionMembersEquals(mrvisser.restContext, createdCollection.id, expectedRoles, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies the validation of creating a collection
         */
        it('verify collection creation validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, sathomas) {
                assert.ok(!err);

                // Ensure displayName is required
                CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, '', 'test description', 'private', [stuartf.user.id], [sathomas.user.id], 400, function() {
                    var longDisplayName = TestsUtil.generateRandomText(83);
                    assert.ok(longDisplayName.length > 1000);

                    // Ensure displayName must be less than 1000 characters
                    CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, longDisplayName, 'test description', 'private', [stuartf.user.id], [sathomas.user.id], 400, function() {
                        var longDescription = TestsUtil.generateRandomText(833);
                        assert.ok(longDescription.length > 10000);

                        // Ensure description must be less than 10000 characters
                        CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', longDescription, 'private', [stuartf.user.id], [sathomas.user.id], 400, function() {

                            // Ensure visibility must be valid
                            CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'notvalid', [stuartf.user.id], [sathomas.user.id], 400, function() {

                                // Ensure manager id must be a valid resource id
                                CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', ['notaresourceid'], [sathomas.user.id], 400, function() {

                                    // Ensure manager id must be a principal id
                                    CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', ['c:oaetest:contentid'], [sathomas.user.id], 400, function() {

                                        // Ensure manager id must be an existing principal id
                                        CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', ['u:oaetest:nonexistinguserid'], [sathomas.user.id], 400, function() {
                                            CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', ['g:oaetest:nonexistinggroupid'], [sathomas.user.id], 400, function() {

                                                // Ensure viewer id must be a valid resource id
                                                CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', [stuartf.user.id], ['notaresourceid'], 400, function() {

                                                    // Ensure viewer id must be a principal id
                                                    CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', [stuartf.user.id], ['c:oaetest:contentid'], 400, function() {

                                                        // Ensure viewer id must be an existing principal id
                                                        CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', [stuartf.user.id], ['u:oaetest:nonexistinguserid'], 400, function() {
                                                            CollectionsTestUtil.assertCreateCollectionFails(mrvisser.restContext, 'test displayName', 'test description', 'private', [stuartf.user.id], ['g:oaetest:nonexistinggroupid'], 400, function() {

                                                                // Sanity check that creating a collection works with base input
                                                                CollectionsTestUtil.assertCreateCollectionSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'private', [stuartf.user.id], [sathomas.user.id], function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization of creating a collection and associating it with users
         */
        it('verify collection creation authorization', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Ensure an anonymous user cannot create a collection
                CollectionsTestUtil.assertCreateCollectionFails(camAnonymousRestContext, 'test', 'test', 'private', null, null, 401, function() {

                    // Ensure a user cannot create a collection with a private user from the same tenant as a viewer
                    CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.loggedinUser.restContext, 'test', 'test', 'private', [publicTenant.publicUser.user.id], null, function() {
                        CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant.loggedinUser.user.id], null, function() {
                            CollectionsTestUtil.assertCreateCollectionFails(publicTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant.privateUser.user.id], null, 400, function() {

                                // Ensure a user cannot create a collection with a loggedin or private user from another tenant as a viewer
                                CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant1.publicUser.user.id], null, function() {
                                    CollectionsTestUtil.assertCreateCollectionFails(publicTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant1.loggedinUser.user.id], null, 400, function() {
                                        CollectionsTestUtil.assertCreateCollectionFails(publicTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant1.privateUser.user.id], null, 400, function() {

                                            // Ensure a user cannot create a collection with any user from a private tenant as a viewer
                                            CollectionsTestUtil.assertCreateCollectionFails(publicTenant.publicUser.restContext, 'test', 'test', 'private', [privateTenant.publicUser.user.id], null, 400, function() {
                                                CollectionsTestUtil.assertCreateCollectionFails(publicTenant.publicUser.restContext, 'test', 'test', 'private', [privateTenant.loggedinUser.user.id], null, 400, function() {
                                                    CollectionsTestUtil.assertCreateCollectionFails(publicTenant.publicUser.restContext, 'test', 'test', 'private', [privateTenant.privateUser.user.id], null, 400, function() {

                                                        // Ensure a user from a private tenant cannot create a collection with any outside user
                                                        CollectionsTestUtil.assertCreateCollectionFails(privateTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant.publicUser.user.id], null, 400, function() {
                                                            CollectionsTestUtil.assertCreateCollectionFails(privateTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant.loggedinUser.user.id], null, 400, function() {
                                                                CollectionsTestUtil.assertCreateCollectionFails(privateTenant.publicUser.restContext, 'test', 'test', 'private', [publicTenant.privateUser.user.id], null, 400, function() {

                                                                    // Ensure an admin can create a collection with a private user from the same tenant as a viewer
                                                                    CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.adminRestContext, 'test', 'test', 'private', [publicTenant.publicUser.user.id], null, function() {
                                                                        CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.adminRestContext, 'test', 'test', 'private', [publicTenant.loggedinUser.user.id], null, function() {
                                                                            CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.adminRestContext, 'test', 'test', 'private', [publicTenant.privateUser.user.id], null, function() {

                                                                                // Ensure an admin cannot createa  collection with a loggedin or private user from another tenant as a viewer
                                                                                CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.adminRestContext, 'test', 'test', 'private', [publicTenant1.publicUser.user.id], null, function() {
                                                                                    CollectionsTestUtil.assertCreateCollectionFails(publicTenant.adminRestContext, 'test', 'test', 'private', [publicTenant1.loggedinUser.user.id], null, 400, function() {
                                                                                        CollectionsTestUtil.assertCreateCollectionFails(publicTenant.adminRestContext, 'test', 'test', 'private', [publicTenant1.privateUser.user.id], null, 400, function() {

                                                                                            // Ensure an admin cannot create a collection with any user from a private tenant as a viewer
                                                                                            CollectionsTestUtil.assertCreateCollectionFails(publicTenant.adminRestContext, 'test', 'test', 'private', [privateTenant.publicUser.user.id], null, 400, function() {
                                                                                                CollectionsTestUtil.assertCreateCollectionFails(publicTenant.adminRestContext, 'test', 'test', 'private', [privateTenant.loggedinUser.user.id], null, 400, function() {
                                                                                                    CollectionsTestUtil.assertCreateCollectionFails(publicTenant.adminRestContext, 'test', 'test', 'private', [privateTenant.privateUser.user.id], null, 400, function() {

                                                                                                        // Ensure an admin from a private tenant cannot create a collection with any outside user
                                                                                                        CollectionsTestUtil.assertCreateCollectionFails(privateTenant.adminRestContext, 'test', 'test', 'private', [publicTenant.publicUser.user.id], null, 400, function() {
                                                                                                            CollectionsTestUtil.assertCreateCollectionFails(privateTenant.adminRestContext, 'test', 'test', 'private', [publicTenant.loggedinUser.user.id], null, 400, function() {
                                                                                                                return CollectionsTestUtil.assertCreateCollectionFails(privateTenant.adminRestContext, 'test', 'test', 'private', [publicTenant.privateUser.user.id], null, 400, callback);
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the visibility of a collection defaults to the tenant configuration
         */
        it('verify collection visibility defaults to the configured tenant default', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);

                // Ensure a collection created without a visibility defaults to public
                RestAPI.Collections.createCollection(mrvisser.restContext, 'test', 'test', null, null, null, function(err, createdCollection) {
                    assert.ok(!err);
                    assert.equal(createdCollection.visibility, 'public');

                    // Set the default privacy to private
                    ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-collections/visibility/collection': 'private'}, function(err) {
                        assert.ok(!err);

                        // Ensure a collection created without a visibility now defaults to private
                        RestAPI.Collections.createCollection(mrvisser.restContext, 'test', 'test', null, null, null, function(err, createdCollection) {
                            assert.ok(!err);
                            assert.equal(createdCollection.visibility, 'private');
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Get Collection', function() {

        /**
         * Test that verifies validation of getting a collection
         */
        it('verify get collection validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {

                    // Ensure fetching using an invalid id results in an error
                    CollectionsTestUtil.assertGetCollectionFails(mrvisser.restContext, 'invalidid', 400, function() {

                        // Ensure fetching using a non-existing id results in a 404
                        CollectionsTestUtil.assertGetCollectionFails(mrvisser.restContext, 'x:oaetest:nonexistingid', 404, function() {

                            // Sanity check getting an existing collection
                            CollectionsTestUtil.assertGetCollectionSucceeds(mrvisser.restContext, collection.id, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of getting a collection
         */
        it('verify get collection authorization', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {

                // Make the private user from a tenant a member of the private collection
                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.privateUser.user.id], function(err) {

                    // Make the public user from a different tenant a member of a loggedin and private collection
                    CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant1.adminRestContext, publicTenant1.loggedinCollection.id, [publicTenant.publicUser.user.id], function(err) {
                        CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant1.adminRestContext, publicTenant1.privateCollection.id, [publicTenant.publicUser.user.id], function(err) {

                            // Ensure user from same tenant can see public, loggedin but only private collections to which they have explicit access
                            CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, function() {
                                CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, function() {
                                    CollectionsTestUtil.assertGetCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, 401, function() {
                                        CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.privateUser.restContext, publicTenant.privateCollection.id, function() {

                                            // Ensure user from different tenant can see public, but only loggedin and private to which they have explicit access
                                            CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.loggedinUser.restContext, publicTenant1.publicCollection.id, function() {
                                                CollectionsTestUtil.assertGetCollectionFails(publicTenant.loggedinUser.restContext, publicTenant1.loggedinCollection.id, 401, function() {
                                                    CollectionsTestUtil.assertGetCollectionFails(publicTenant.loggedinUser.restContext, publicTenant1.privateCollection.id, 401, function() {
                                                        CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant1.loggedinCollection.id, function() {
                                                            CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant1.privateCollection.id, function() {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies getting a full collection profile will scrub the creator of the collection appropriately
         */
        it('verify get collection scrubs creator user', function(callback) {
            // Setup multi-tenant privacy entities without collections or content. We only need
            // multi-tenant privacy users for this test
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {

                // Create a public collection as the private user
                CollectionsTestUtil.assertCreateCollectionSucceeds(publicTenant.privateUser.restContext, 'test', 'test', 'public', null, null, function(createdCollection) {

                    // Ensure the user themself gets the full creator profile when they get the collection
                    CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.privateUser.restContext, createdCollection.id, function(fetchedCollection) {
                        assert.ok(fetchedCollection.createdBy);
                        assert.equal(fetchedCollection.createdBy.tenant.alias, publicTenant.privateUser.user.tenant.alias);
                        assert.equal(fetchedCollection.createdBy.tenant.displayName, publicTenant.privateUser.user.tenant.displayName);
                        assert.equal(fetchedCollection.createdBy.id, publicTenant.privateUser.user.id);
                        assert.equal(fetchedCollection.createdBy.displayName, publicTenant.privateUser.user.displayName);
                        assert.equal(fetchedCollection.createdBy.visibility, publicTenant.privateUser.user.visibility);
                        assert.equal(fetchedCollection.createdBy.email, publicTenant.privateUser.user.email);
                        assert.equal(fetchedCollection.createdBy.locale, publicTenant.privateUser.user.locale);
                        assert.equal(fetchedCollection.createdBy.timezone, publicTenant.privateUser.user.timezone);
                        assert.equal(fetchedCollection.createdBy.publicAlias, publicTenant.privateUser.user.publicAlias);
                        assert.equal(fetchedCollection.createdBy.profilePath, publicTenant.privateUser.user.profilePath);
                        assert.equal(fetchedCollection.createdBy.resourceType, publicTenant.privateUser.user.resourceType);
                        assert.equal(fetchedCollection.createdBy.acceptedTC, publicTenant.privateUser.user.acceptedTC);

                        // Ensure an admin user gets the full creator profile when they get the collection
                        CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.adminRestContext, createdCollection.id, function(fetchedCollection) {
                            assert.ok(fetchedCollection.createdBy);
                            assert.equal(fetchedCollection.createdBy.tenant.alias, publicTenant.privateUser.user.tenant.alias);
                            assert.equal(fetchedCollection.createdBy.tenant.displayName, publicTenant.privateUser.user.tenant.displayName);
                            assert.equal(fetchedCollection.createdBy.id, publicTenant.privateUser.user.id);
                            assert.equal(fetchedCollection.createdBy.displayName, publicTenant.privateUser.user.displayName);
                            assert.equal(fetchedCollection.createdBy.visibility, publicTenant.privateUser.user.visibility);
                            assert.equal(fetchedCollection.createdBy.email, publicTenant.privateUser.user.email);
                            assert.equal(fetchedCollection.createdBy.locale, publicTenant.privateUser.user.locale);
                            assert.equal(fetchedCollection.createdBy.timezone, publicTenant.privateUser.user.timezone);
                            assert.equal(fetchedCollection.createdBy.publicAlias, publicTenant.privateUser.user.publicAlias);
                            assert.equal(fetchedCollection.createdBy.profilePath, publicTenant.privateUser.user.profilePath);
                            assert.equal(fetchedCollection.createdBy.resourceType, publicTenant.privateUser.user.resourceType);
                            assert.equal(fetchedCollection.createdBy.acceptedTC, publicTenant.privateUser.user.acceptedTC);

                            // Ensure another user from the tenant gets a scrubbed creator profile when they get the collection
                            CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.loggedinUser.restContext, createdCollection.id, function(fetchedCollection) {
                                assert.ok(fetchedCollection.createdBy);
                                assert.equal(fetchedCollection.createdBy.tenant.alias, publicTenant.privateUser.user.tenant.alias);
                                assert.equal(fetchedCollection.createdBy.tenant.displayName, publicTenant.privateUser.user.tenant.displayName);
                                assert.equal(fetchedCollection.createdBy.id, publicTenant.privateUser.user.id);
                                assert.equal(fetchedCollection.createdBy.displayName, publicTenant.privateUser.user.publicAlias);
                                assert.equal(fetchedCollection.createdBy.visibility, publicTenant.privateUser.user.visibility);
                                assert.ok(!fetchedCollection.createdBy.email);
                                assert.ok(!fetchedCollection.createdBy.locale);
                                assert.ok(!fetchedCollection.createdBy.timezone);
                                assert.ok(!fetchedCollection.createdBy.publicAlias);
                                assert.ok(!fetchedCollection.createdBy.profilePath);
                                assert.equal(fetchedCollection.createdBy.resourceType, publicTenant.privateUser.user.resourceType);
                                assert.strictEqual(fetchedCollection.createdBy.acceptedTC, undefined);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the permission flags (e.g., `canShare`, `canAddItem`) of a full collection profile
         */
        it('verify get collection profile permission flags', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {

                // Create one more collection as the public user
                CollectionsTestUtil.generateTestCollections(publicTenant.publicUser.restContext, 1, function(createdCollection) {

                    // Ensure permission flags for admin
                    CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, function(fetchedCollection) {
                        assert.strictEqual(fetchedCollection.canManage, true);
                        assert.strictEqual(fetchedCollection.canShare, true);
                        assert.strictEqual(fetchedCollection.canAddItem, true);

                        // Ensure permission flags for manager of a collection
                        CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, createdCollection.id, function(fetchedCollection) {
                            assert.strictEqual(fetchedCollection.canManage, true);
                            assert.strictEqual(fetchedCollection.canShare, true);
                            assert.strictEqual(fetchedCollection.canAddItem, true);

                            // Ensure permission flags for non-manager user on non-private collection
                            CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, function(fetchedCollection) {
                                assert.strictEqual(fetchedCollection.canManage, false);
                                assert.strictEqual(fetchedCollection.canShare, true);
                                assert.strictEqual(fetchedCollection.canAddItem, false);

                                // Ensure permission flags for non-manager user on private collection
                                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.publicUser.user.id], function() {
                                    CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, function(fetchedCollection) {
                                        assert.strictEqual(fetchedCollection.canManage, false);
                                        assert.strictEqual(fetchedCollection.canShare, false);
                                        assert.strictEqual(fetchedCollection.canAddItem, false);

                                        // Ensure permission flags for non-manager user in another public tenant
                                        CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant1.publicUser.restContext, publicTenant.publicCollection.id, function(fetchedCollection) {
                                            assert.strictEqual(fetchedCollection.canManage, false);
                                            assert.strictEqual(fetchedCollection.canShare, true);
                                            assert.strictEqual(fetchedCollection.canAddItem, false);

                                            // Ensure permission flags for non-manager user in another private tenant
                                            CollectionsTestUtil.assertGetCollectionSucceeds(privateTenant.publicUser.restContext, publicTenant.publicCollection.id, function(fetchedCollection) {
                                                assert.strictEqual(fetchedCollection.canManage, false);
                                                assert.strictEqual(fetchedCollection.canShare, false);
                                                assert.strictEqual(fetchedCollection.canAddItem, false);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Share Collection', function() {

        /**
         * Test that verifies sharing with multiple users gives all users access to the collection
         */
        it('verify sharing with multiple users gives all access to a collection', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant) {

                var userIdsToShare = [
                    publicTenant.publicUser.user.id,
                    publicTenant.loggedinUser.user.id,
                    publicTenant.privateUser.user.id
                ];

                // Give access to the private collection to a user
                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, userIdsToShare, function() {

                    // Ensure the users can access the private collection
                    CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, function() {
                        CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.loggedinUser.restContext, publicTenant.privateCollection.id, function() {
                            CollectionsTestUtil.assertGetCollectionSucceeds(publicTenant.privateUser.restContext, publicTenant.privateCollection.id, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies sharing a collection with a manager does not demote them to viewer
         */
        it('verify sharing does not demote a member from manager to viewer', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {

                    // Simon shares the collection with a manager
                    CollectionsTestUtil.assertShareCollectionSucceeds(simong.restContext, collection.id, [mrvisser.user.id], function() {

                        // Ensure mrvisser is still a manager
                        CollectionsTestUtil.assertGetCollectionSucceeds(mrvisser.restContext, collection.id, function(collection) {
                            assert.strictEqual(collection.canManage, true);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of sharing a collection
         */
        it('verify sharing validation', function(callback) {
            // Generate a user and a collection to test sharing with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(camAdminRestContext, 1, function(collection) {

                    // Ensure a valid collection id must be provided
                    CollectionsTestUtil.assertShareCollectionFails(camAdminRestContext, 'notavalidid', [mrvisser.user.id], 400, function() {

                        // Ensure an existing collection id must be provided
                        CollectionsTestUtil.assertShareCollectionFails(camAdminRestContext, 'x:oaetest:nonexistingid', [mrvisser.user.id], 404, function() {

                            // Ensure a valid target principal id must be provided
                            CollectionsTestUtil.assertShareCollectionFails(camAdminRestContext, collection.id, ['notavalidid'], 400, function() {
                                CollectionsTestUtil.assertShareCollectionFails(camAdminRestContext, collection.id, ['c:oaetest:notaprincipalid'], 400, function() {

                                    // Ensure an existing target principal id must be provided
                                    CollectionsTestUtil.assertShareCollectionFails(camAdminRestContext, collection.id, ['u:oaetest:nonexistingid'], 400, function() {
                                        CollectionsTestUtil.assertShareCollectionFails(camAdminRestContext, collection.id, ['g:oaetest:nonexistingid'], 400, function() {

                                            // Sanity check we can share with the base input
                                            return CollectionsTestUtil.assertShareCollectionSucceeds(camAdminRestContext, collection.id, [mrvisser.user.id], callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies an anonymous user cannot share a collection
         */
        it('verify anonymous user cannot share', function(callback) {
            // Generate a user and collection to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(camAdminRestContext, 1, function(collection) {

                    // Ensure anonymous cannot share with Simong
                    CollectionsTestUtil.assertShareCollectionFails(camAnonymousRestContext, collection.id, [simong.user.id], 401, function() {

                        // Sanity check mrvisser can share with Simong
                        return CollectionsTestUtil.assertShareCollectionSucceeds(mrvisser.restContext, collection.id, [simong.user.id], callback);
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of sharing a collection for a regular (non-member) user of the same tenant
         */
        it('verify sharing authorization for a regular user', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {

                // Ensure regular user can only share public and loggedin collections
                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, [publicTenant.loggedinUser.user.id], function() {
                    CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [publicTenant.loggedinUser.user.id], function() {
                        CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [publicTenant.loggedinUser.user.id], 401, function() {

                            // Ensure regular user cannot share with user profiles to which they cannot interact
                            CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [publicTenant.privateUser.user.id], 400, function() {
                                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [publicTenant1.publicUser.user.id], function() {
                                    CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [publicTenant1.loggedinUser.user.id], 400, function() {
                                        CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [publicTenant1.privateUser.user.id], 400, function() {
                                            CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [privateTenant.publicUser.user.id], 400, function() {
                                                CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [privateTenant.loggedinUser.user.id], 400, function() {
                                                    return CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [privateTenant.privateUser.user.id], 400, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of sharing a collection for a regular (non-member) user of a different tenant
         */
        it('verify sharing authorization for a cross-tenant user', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {

                // Ensure regular cross-tenant user can only share public collections of another tenant
                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant1.publicUser.restContext, publicTenant.publicCollection.id, [publicTenant.publicUser.user.id], function() {
                    CollectionsTestUtil.assertShareCollectionFails(publicTenant1.publicUser.restContext, publicTenant.loggedinCollection.id, [publicTenant.publicUser.user.id], 401, function() {
                        return CollectionsTestUtil.assertShareCollectionFails(publicTenant1.publicUser.restContext, publicTenant.privateCollection.id, [publicTenant.publicUser.user.id], 401, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of sharing a collection for a manager user
         */
        it('verify sharing authorization for a manager user', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {
                // Make the public user a manager of the private collection
                CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, _memberUpdate(publicTenant.publicUser.user.id, 'manager'), function() {

                    // Ensure manager user can share all items in own tenant
                    CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, [publicTenant.loggedinUser.user.id], function() {
                        CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, [publicTenant.loggedinUser.user.id], function() {
                            CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [publicTenant.loggedinUser.user.id], function() {

                                // Ensure manager user cannot share with user profiles to which they cannot interact
                                CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [publicTenant.privateUser.user.id], 400, function() {
                                    CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [publicTenant1.publicUser.user.id], function() {
                                        CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [publicTenant1.loggedinUser.user.id], 400, function() {
                                            CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [publicTenant1.privateUser.user.id], 400, function() {
                                                CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [privateTenant.publicUser.user.id], 400, function() {
                                                    CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [privateTenant.loggedinUser.user.id], 400, function() {
                                                        return CollectionsTestUtil.assertShareCollectionFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, [privateTenant.privateUser.user.id], 400, callback);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of sharing a collection for an administrative user
         */
        it('verify sharing authorization for an admin user', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {

                // Ensure admin user can share all items in own tenant
                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.loggedinUser.user.id], function() {
                    CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant.loggedinUser.user.id], function() {
                        CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.loggedinUser.user.id], function() {

                            // Ensure admin user cannot share with user profiles to which they cannot interact
                            CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.privateUser.user.id], function() {
                                CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant1.publicUser.user.id], function() {
                                    CollectionsTestUtil.assertShareCollectionFails(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant1.loggedinUser.user.id], 400, function() {
                                        CollectionsTestUtil.assertShareCollectionFails(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant1.privateUser.user.id], 400, function() {
                                            CollectionsTestUtil.assertShareCollectionFails(publicTenant.adminRestContext, publicTenant.privateCollection.id, [privateTenant.publicUser.user.id], 400, function() {
                                                CollectionsTestUtil.assertShareCollectionFails(publicTenant.adminRestContext, publicTenant.privateCollection.id, [privateTenant.loggedinUser.user.id], 400, function() {
                                                    return CollectionsTestUtil.assertShareCollectionFails(publicTenant.adminRestContext, publicTenant.privateCollection.id, [privateTenant.privateUser.user.id], 400, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Get Collection Members', function() {

        /**
         * Test that verifies getting the members of a collection will return all viewers and managers of the collection
         */
        it('verify get collection members gets all viewers and managers', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 16, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {
                    users = _.values(users);

                    var managerUsers = users.slice(0, 8);
                    var viewerUsers = users.slice(8);

                    var memberUpdates = {};
                    _.each(managerUsers, function(managerUser) {
                        memberUpdates[managerUser.user.id] = 'manager';
                    });

                    var viewerMemberUpdates = {};
                    _.each(viewerUsers, function(viewerUser) {
                        memberUpdates[viewerUser.user.id] = 'viewer';
                    });

                    // Apply the roles
                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(camAdminRestContext, collection.id, memberUpdates, function() {

                        // Ensure all the users have been set
                        return CollectionsTestUtil.assertFullCollectionMembersEquals(mrvisser.restContext, collection.id, memberUpdates, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies validation of getting collection members
         */
        it('verify get collection members validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 16, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(camAdminRestContext, 1, function(collection) {
                    var memberUpdates = {};
                    _.each(users, function(user, userId) {
                        memberUpdates[userId] = 'viewer';
                    });

                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(camAdminRestContext, collection.id, memberUpdates, function() {

                        // Ensure the collection id must be a valid resource id
                        CollectionsTestUtil.assertGetCollectionMembersFails(mrvisser.restContext, 'notavalidid', null, null, 400, function() {

                            // Ensure the collection must exist
                            CollectionsTestUtil.assertGetCollectionMembersFails(mrvisser.restContext, 'x:oaetest:nonexistingid', null, null, 404, function() {

                                // Ensure limit has a minimum of 1
                                CollectionsTestUtil.assertGetCollectionMembersSucceeds(mrvisser.restContext, collection.id, null, 0, function(result) {
                                    assert.strictEqual(result.results.length, 1);

                                    // Ensure limit defaults to 10
                                    CollectionsTestUtil.assertGetCollectionMembersSucceeds(mrvisser.restContext, collection.id, null, null, function(result) {
                                        assert.strictEqual(result.results.length, 10);

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of getting collection members
         */
        it('verify get collection members authorization', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {

                // Ensure access for anonymous user
                CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant.anonymousRestContext, publicTenant.publicCollection.id, null, null, function() {
                    CollectionsTestUtil.assertGetCollectionMembersFails(publicTenant.anonymousRestContext, publicTenant.loggedinCollection.id, null, null, 401, function() {
                        CollectionsTestUtil.assertGetCollectionMembersFails(publicTenant.anonymousRestContext, publicTenant.privateCollection.id, null, null, 401, function() {

                            // Ensure access for authenticated user
                            CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, null, null, function() {
                                CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinCollection.id, null, null, function() {
                                    CollectionsTestUtil.assertGetCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, null, null, 401, function() {

                                        // Ensure access for admin user
                                        CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, null, null, function() {
                                            CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, null, null, function() {
                                                CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, null, null, function() {

                                                    // Ensure access for cross-tenant user
                                                    CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant1.publicUser.restContext, publicTenant.publicCollection.id, null, null, function() {
                                                        CollectionsTestUtil.assertGetCollectionMembersFails(publicTenant1.publicUser.restContext, publicTenant.loggedinCollection.id, null, null, 401, function() {
                                                            CollectionsTestUtil.assertGetCollectionMembersFails(publicTenant1.publicUser.restContext, publicTenant.privateCollection.id, null, null, 401, function() {

                                                                // Ensure access for cross-tenant admin user
                                                                CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant1.adminRestContext, publicTenant.publicCollection.id, null, null, function() {
                                                                    CollectionsTestUtil.assertGetCollectionMembersFails(publicTenant1.adminRestContext, publicTenant.loggedinCollection.id, null, null, 401, function() {
                                                                        CollectionsTestUtil.assertGetCollectionMembersFails(publicTenant1.adminRestContext, publicTenant.privateCollection.id, null, null, 401, function() {

                                                                            // Give a same-tenant user access to the private collection
                                                                            CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.publicUser.user.id], function() {

                                                                                // Ensure same-tenant user with access can now view the private collection members
                                                                                CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant.publicUser.restContext, publicTenant.privateCollection.id, null, null, function() {

                                                                                    // Give a cross-tenant user access to the loggedin and private collections
                                                                                    CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant1.publicUser.user.id], function() {
                                                                                        CollectionsTestUtil.assertShareCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant1.publicUser.user.id], function() {

                                                                                            // Ensure the cross-tenant user can now see the loggedin and private collections with explicit access
                                                                                            CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant1.publicUser.restContext, publicTenant.loggedinCollection.id, null, null, function() {
                                                                                                CollectionsTestUtil.assertGetCollectionMembersSucceeds(publicTenant1.publicUser.restContext, publicTenant.privateCollection.id, null, null, function() {
                                                                                                    return callback();
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verififes paging through the list of collection members
         */
        it('verify get collection members paging', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 16, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {
                    // Make all 16 users (except mrvisser, of course) a viewer
                    var memberUpdates = {};
                    _.each(users, function(user, userId) {
                        if (userId !== mrvisser.user.id) {
                            memberUpdates[userId] = 'viewer';
                        }
                    });

                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, memberUpdates, function() {

                        // Fetch batches of 1 and ensure we get them all
                        CollectionsTestUtil.getAllCollectionMembers(mrvisser.restContext, collection.id, {'batchSize': 1}, function(members, responses) {
                            assert.strictEqual(members.length, 16);

                            // Ensure all members came from the users collection and that they all have the proper role
                            _.each(members, function(member) {
                                assert.ok(users[member.profile.id]);
                                if (member.profile.id === mrvisser.user.id) {
                                    assert.strictEqual(member.role, 'manager');
                                } else {
                                    assert.strictEqual(member.role, 'viewer');
                                }
                            });

                            // Ensure we made 17 requests to get the users and they all had exactly 1 member (the 17th request
                            // is an empty one since `nextToken` does not use any look-ahead)
                            assert.strictEqual(responses.length, 17);
                            _.each(responses.slice(0, -1), function(response) {
                                assert.strictEqual(response.results.length, 1);
                            });
                            assert.strictEqual(_.last(responses).results.length, 0);
                            assert.strictEqual(_.last(responses).nextToken, null);

                            // Fetch batches of 3 and ensure we get them all
                            CollectionsTestUtil.getAllCollectionMembers(mrvisser.restContext, collection.id, {'batchSize': 3}, function(members, responses) {
                                assert.strictEqual(members.length, 16);

                                // Ensure all members came from the users collection and that they all have the proper role
                                _.each(members, function(member) {
                                    assert.ok(users[member.profile.id]);
                                    if (member.profile.id === mrvisser.user.id) {
                                        assert.strictEqual(member.role, 'manager');
                                    } else {
                                        assert.strictEqual(member.role, 'viewer');
                                    }
                                });

                                // Ensure we made 6 requests to get the users and they all had the proper amount
                                // of users
                                assert.strictEqual(responses.length, 6);

                                // All but the last have 3
                                _.each(responses.slice(0, -1), function(response) {
                                    assert.strictEqual(response.results.length, 3);
                                });

                                // The last has 1 member and a null `nextToken`
                                assert.strictEqual(_.last(responses).results.length, 1);
                                assert.strictEqual(_.last(responses).nextToken, null);

                                // Fetch a batch of 16 and ensure we get them all
                                CollectionsTestUtil.getAllCollectionMembers(mrvisser.restContext, collection.id, {'batchSize': 16}, function(members, responses) {
                                    assert.strictEqual(members.length, 16);

                                    // Ensure all members came from the users collection and that they all have the proper role
                                    _.each(members, function(member) {
                                        assert.ok(users[member.profile.id]);
                                        if (member.profile.id === mrvisser.user.id) {
                                            assert.strictEqual(member.role, 'manager');
                                        } else {
                                            assert.strictEqual(member.role, 'viewer');
                                        }
                                    });

                                    // Ensure we made 1 request to get the users and it had 16. The second request is an empty
                                    // one since `nextToken` does not use any look-ahead
                                    assert.strictEqual(responses.length, 2);
                                    assert.strictEqual(responses[0].results.length, 16);
                                    assert.strictEqual(responses[1].results.length, 0);
                                    assert.strictEqual(responses[1].nextToken, null);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Set Collection Members', function() {

        /**
         * Test that verifies viewers and managers can be set on and removed from a collection
         */
        it('verify viewers and managers can be set on and removed from a collection', function(callback) {
            // Create test users and a collection to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, bert) {
                assert.ok(!err);
                CollectionsTestUtil.assertCreateCollectionSucceeds(mrvisser.restContext, 'test', 'test', 'private', null, null, function(collection) {

                    // Ensure Bert can be made a viewer
                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, _memberUpdate(bert.user.id), function() {

                        // Ensure Bert can view the collection
                        CollectionsTestUtil.assertGetCollectionSucceeds(bert.restContext, collection.id, function() {

                            // Ensure Bert can be removed from the members list
                            CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, _memberUpdate(bert.user.id, false), function() {

                                // Ensure Bert can no longer view the collection
                                CollectionsTestUtil.assertGetCollectionFails(bert.restContext, collection.id, 401, function() {

                                    // Ensure Bert can be made a manager
                                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, _memberUpdate(bert.user.id, 'manager'), function() {

                                        // Ensure Bert can view the collection once again
                                        CollectionsTestUtil.assertGetCollectionSucceeds(bert.restContext, collection.id, function() {

                                            // Ensure Bert can now demote mrvisser to viewer, O noez!
                                            CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(bert.restContext, collection.id, _memberUpdate(mrvisser.user.id), function() {

                                                // Ensure mrvisser can no longer update the permissions
                                                return CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, collection.id, _memberUpdate(bert.user.id, 'manager'), 401, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a collection cannot be left without a manager
         */
        it('verify a collection cannot be left with no managers', function(callback) {
            // Create test users and a collection to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 5, function(err, users, mrvisser, bert) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {

                    // Try and make all the users viewer, including the creator mrvisser
                    var memberUpdates = {};
                    _.each(users, function(user, userId) {
                        memberUpdates[userId] = 'viewer';
                    });

                    CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, collection.id, memberUpdates, 400, function() {
                        memberUpdates[bert.user.id] = 'manager';

                        // Ensure mrvisser can still update the members, and changing bert to manager while demoting himself is fair game
                        CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, memberUpdates, function() {

                            // Ensure bert cannot remove himself as that would now result in no manager
                            return CollectionsTestUtil.assertUpdateCollectionMembersFails(bert.restContext, collection.id, _memberUpdate(bert.user.id, false), 400, callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a viewer cannot promote themselves to manager
         */
        it('verify a viewer cannot promote themselves to manager', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, bert) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {

                    // Make Bert a member
                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, _memberUpdate(bert.user.id), function() {

                        // Ensure Bert can't promote himself to manager
                        return CollectionsTestUtil.assertUpdateCollectionMembersFails(bert.restContext, collection.id, _memberUpdate(bert.user.id, 'manager'), 401, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies validation of setting collection members
         */
        it('verify set collection members validation', function(callback) {
            // Generate a test user and collection for testing validation
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, bert) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {
                    // Ensure collection id must be a valid resource id
                    CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, 'notavalidid', _memberUpdate(bert.user.id), 400, function() {

                        // Ensure collection id must exist
                        CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, 'x:oaetest:nonexistingid', _memberUpdate(bert.user.id), 404, function() {

                            // Ensure one member update must be specified
                            CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, collection.id, {}, 400, function() {

                                // Ensure members must be valid principal ids
                                CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, collection.id, {'notavalidid': 'viewer'}, 400, function() {
                                    CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, collection.id, {'c:oaetest:notaprincipalid': 'viewer'}, 400, function() {

                                        // Ensure members must be existing principal ids
                                        CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, collection.id, {'u:oaetest:nonexistingid': 'viewer'}, 400, function() {
                                            CollectionsTestUtil.assertUpdateCollectionMembersFails(mrvisser.restContext, collection.id, {'g:oaetest:nonexistingid': 'viewer'}, 400, function() {

                                                // Sanity check the base input works
                                                return CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, _memberUpdate(bert.user.id), callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies anonymous users cannot set members on a collection
         */
        it('verify an anonymous user cannot set collection members', function(callback) {
            // Generate a test user and collection to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, bert) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {

                    // Ensure anonymous cannot set the members
                    CollectionsTestUtil.assertUpdateCollectionMembersFails(camAnonymousRestContext, collection.id, _memberUpdate(bert.user.id), 401, function() {

                        // Sanity check mrvisser can perform the same share
                        return CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(mrvisser.restContext, collection.id, _memberUpdate(bert.user.id), callback);
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of setting collection members as an administrative user
         */
        it('verify set collection members authorization for an admin user', function(callback) {
            // Setup collections and users for different visibilities and tenants
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {
                // Create an extra collection that is not managed by an admin user
                CollectionsTestUtil.generateTestCollections(publicTenant.publicUser.restContext, 1, function(collection) {

                    // Ensure admin can set members a collection they don't explicitly manage
                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, collection.id, _memberUpdate(publicTenant.loggedinUser.user.id, 'manager'), function() {

                        // Ensure admin cannot set members for user profiles with which they cannot interact
                        CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, _memberUpdate(publicTenant.privateUser.user.id), function() {
                            CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, _memberUpdate(publicTenant1.publicUser.user.id), function() {
                                CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, _memberUpdate(publicTenant1.loggedinUser.user.id), 400, function() {
                                    CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, _memberUpdate(publicTenant1.privateUser.user.id), 400, function() {
                                        CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, _memberUpdate(privateTenant.publicUser.user.id), 400, function() {
                                            CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, _memberUpdate(privateTenant.loggedinUser.user.id), 400, function() {
                                                return CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, _memberUpdate(privateTenant.privateUser.user.id), 400, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of setting members on a collection as a regular user
         */
        it('verify set collection members authorization for a regular user', function(callback) {
            // Setup collections and users for different visibilities and tenants
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {

                // Ensure the user cannot set members a collection they don't explicitly manage
                CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant.loggedinUser.user.id), 401, function() {

                    // Make the user a viewer and ensure they still can't set permissions
                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant.publicUser.user.id), function() {
                        CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant.loggedinUser.user.id), 401, function() {

                            // Make the user a manager so they can update permissions
                            CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant.publicUser.user.id, 'manager'), function() {

                                // Ensure the manager user cannot set members for user profiles with which they cannot interact
                                CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant.privateUser.user.id), 400, function() {
                                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant1.publicUser.user.id), function() {
                                        CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant1.loggedinUser.user.id), 400, function() {
                                            CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(publicTenant1.privateUser.user.id), 400, function() {
                                                CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(privateTenant.publicUser.user.id), 400, function() {
                                                    CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(privateTenant.loggedinUser.user.id), 400, function() {
                                                        return CollectionsTestUtil.assertUpdateCollectionMembersFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, _memberUpdate(privateTenant.privateUser.user.id), 400, callback);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Get Collections Library', function() {

        /**
         * Test that verifies getting a collections library returns the proper library visibility
         */
        it('verify users get the appropriate collections library visibility', function(callback) {
            // Generate users from a variety of tenants, as well as a library of public, loggedin and private collections for a user
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {
                CollectionsTestUtil.generateTestCollectionsWithVisibility(publicTenant.publicUser.restContext, 3, 'public', function(publicCollection1, publicCollection2, publicCollection3) {
                    CollectionsTestUtil.generateTestCollectionsWithVisibility(publicTenant.publicUser.restContext, 3, 'loggedin', function(loggedinCollection1, loggedinCollection2, loggedinCollection3) {
                        CollectionsTestUtil.generateTestCollectionsWithVisibility(publicTenant.publicUser.restContext, 3, 'private', function(privateCollection1, privateCollection2, privateCollection3) {
                            var publicCollectionIds = _.pluck([publicCollection1, publicCollection2, publicCollection3], 'id');
                            var loggedinCollectionIds = _.pluck([loggedinCollection1, loggedinCollection2, loggedinCollection3], 'id');
                            var privateCollectionIds = _.pluck([privateCollection1, privateCollection2, privateCollection3], 'id');

                            var expectedPublicCollectionsLibraryIds = publicCollectionIds.slice();
                            var expectedLoggedinCollectionsLibraryIds = _.union(publicCollectionIds, loggedinCollectionIds);
                            var expectedPrivateCollectionsLibraryIds = _.chain(publicCollectionIds).union(loggedinCollectionIds).union(privateCollectionIds).value();

                            // Ensure the user themself gets the private library
                            CollectionsTestUtil.assertFullCollectionsLibraryEquals(publicTenant.publicUser.restContext, publicTenant.publicUser.user.id, expectedPrivateCollectionsLibraryIds, false, function() {

                                // Ensure admin gets the private library as well
                                CollectionsTestUtil.assertFullCollectionsLibraryEquals(publicTenant.adminRestContext, publicTenant.publicUser.user.id, expectedPrivateCollectionsLibraryIds, false, function() {

                                    // Ensure authenticated user gets the loggedin library
                                    CollectionsTestUtil.assertFullCollectionsLibraryEquals(publicTenant.loggedinUser.restContext, publicTenant.publicUser.user.id, expectedLoggedinCollectionsLibraryIds, false, function() {

                                        // Ensure admin from another tenant gets the public library
                                        CollectionsTestUtil.assertFullCollectionsLibraryEquals(publicTenant1.adminRestContext, publicTenant.publicUser.user.id, expectedPublicCollectionsLibraryIds, false, function() {

                                            // Ensure authenticated user from another tenant gets the public library
                                            CollectionsTestUtil.assertFullCollectionsLibraryEquals(publicTenant1.publicUser.restContext, publicTenant.publicUser.user.id, expectedPublicCollectionsLibraryIds, false, function() {

                                                // Ensure anonymous user gets the public library
                                                return CollectionsTestUtil.assertFullCollectionsLibraryEquals(publicTenant.anonymousRestContext, publicTenant.publicUser.user.id, expectedPublicCollectionsLibraryIds, false, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of getting a public user library
         */
        it('verify get collections library authorization for public user library', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {

                // Ensure authorization of public user library
                CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.anonymousRestContext, publicTenant.publicUser.user.id, null, null, function() {
                    CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.adminRestContext, publicTenant.publicUser.user.id, null, null, function() {
                        CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.publicUser.restContext, publicTenant.publicUser.user.id, null, null, function() {
                            CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.loggedinUser.restContext, publicTenant.publicUser.user.id, null, null, function() {
                                CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant1.publicUser.restContext, publicTenant.publicUser.user.id, null, null, function() {
                                    CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant1.adminRestContext, publicTenant.publicUser.user.id, null, null, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of getting a loggedin user library
         */
        it('verify get collections library authorization for loggedin user library', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {

                // Ensure authorization of public user library
                CollectionsTestUtil.assertGetCollectionsLibraryFails(publicTenant.anonymousRestContext, publicTenant.loggedinUser.user.id, null, null, 401, function() {
                    CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.adminRestContext, publicTenant.loggedinUser.user.id, null, null, function() {
                        CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.publicUser.restContext, publicTenant.loggedinUser.user.id, null, null, function() {
                            CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.loggedinUser.restContext, publicTenant.loggedinUser.user.id, null, null, function() {
                                CollectionsTestUtil.assertGetCollectionsLibraryFails(publicTenant1.publicUser.restContext, publicTenant.loggedinUser.user.id, null, null, 401, function() {
                                    CollectionsTestUtil.assertGetCollectionsLibraryFails(publicTenant1.adminRestContext, publicTenant.loggedinUser.user.id, null, null, 401, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of getting a private user library
         */
        it('verify get collections library authorization for private user library', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {

                // Ensure authorization of public user library
                CollectionsTestUtil.assertGetCollectionsLibraryFails(publicTenant.anonymousRestContext, publicTenant.privateUser.user.id, null, null, 401, function() {
                    CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.adminRestContext, publicTenant.privateUser.user.id, null, null, function() {
                        CollectionsTestUtil.assertGetCollectionsLibraryFails(publicTenant.publicUser.restContext, publicTenant.privateUser.user.id, null, null, 401, function() {
                            CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(publicTenant.privateUser.restContext, publicTenant.privateUser.user.id, null, null, function() {
                                CollectionsTestUtil.assertGetCollectionsLibraryFails(publicTenant1.publicUser.restContext, publicTenant.privateUser.user.id, null, null, 401, function() {
                                    CollectionsTestUtil.assertGetCollectionsLibraryFails(publicTenant1.adminRestContext, publicTenant.privateUser.user.id, null, null, 401, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of getting a collections library
         */
        it('verify get collections library validation', function(callback) {
            // Generate a user and give them more than 25 collections in their collections library
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 30, function() {

                    // Ensure we must provide a valid and existing principal id
                    CollectionsTestUtil.assertGetCollectionsLibraryFails(mrvisser.restContext, 'notavalidid', null, 15, 400, function() {
                        CollectionsTestUtil.assertGetCollectionsLibraryFails(mrvisser.restContext, 'c:oaetest:notaprincipalid', null, 15, 400, function() {
                            CollectionsTestUtil.assertGetCollectionsLibraryFails(mrvisser.restContext, 'g:oaetest:nonexistingid', null, 15, 404, function() {
                                CollectionsTestUtil.assertGetCollectionsLibraryFails(mrvisser.restContext, 'u:oaetest:nonexistingid', null, 15, 404, function() {

                                    // Ensure limit is greater than or equal to 1, less than or equal to 25, and defaults to 10
                                    CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(mrvisser.restContext, mrvisser.user.id, null, 0, function(result) {
                                        assert.strictEqual(result.results.length, 1);
                                        CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(mrvisser.restContext, mrvisser.user.id, null, null, function(result) {
                                            assert.strictEqual(result.results.length, 12);
                                            CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(mrvisser.restContext, mrvisser.user.id, null, 100, function(result) {
                                                assert.strictEqual(result.results.length, 25);

                                                // Ensure the base input provides the expected results
                                                CollectionsTestUtil.assertGetCollectionsLibrarySucceeds(mrvisser.restContext, mrvisser.user.id, null, 15, function(result) {
                                                    assert.strictEqual(result.results.length, 15);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies paging of the collections library
         */
        it('verify get collections library paging', function(callback) {
            // Generate a user and give them enough collections in their library to page through
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 16, function() {

                    // Page items by 1 and ensure we get them all with the correct number of requests
                    CollectionsTestUtil.getAllCollectionsInLibrary(mrvisser.restContext, mrvisser.user.id, {'batchSize': 1}, function(collections, responses) {
                        assert.strictEqual(collections.length, 16);

                        // Ensure there are 16 responses for each request, plus 1 empty one to
                        // indicate that the library items are exhausted
                        assert.strictEqual(responses.length, 17);
                        assert.strictEqual(_.last(responses).results.length, 0);
                        assert.strictEqual(_.last(responses).nextToken, null);

                        // Page items by 3 and ensure we get them all with the correct number of requests
                        CollectionsTestUtil.getAllCollectionsInLibrary(mrvisser.restContext, mrvisser.user.id, {'batchSize': 3}, function(collections, responses) {
                            assert.strictEqual(collections.length, 16);

                            // Ensure there are 6 responses for each request, where the final one
                            // has only 1 element and indicates the list is exhausted
                            assert.strictEqual(responses.length, 6);
                            assert.strictEqual(_.last(responses).results.length, 1);
                            assert.strictEqual(_.last(responses).nextToken, null);

                            // Page items by the full amount and ensure we get them all with the correct number of requests
                            CollectionsTestUtil.getAllCollectionsInLibrary(mrvisser.restContext, mrvisser.user.id, {'batchSize': 16}, function(collections, responses) {
                                assert.strictEqual(collections.length, 16);

                                // Ensure there is 1 response for the request to get all, plus 1
                                // empty one that indicates the list is exhausted
                                assert.strictEqual(responses.length, 2);
                                assert.strictEqual(_.last(responses).results.length, 0);
                                assert.strictEqual(_.last(responses).nextToken, null);

                                // Page items by greater than the full amount and ensure we get them all with the correct number of requests
                                CollectionsTestUtil.getAllCollectionsInLibrary(mrvisser.restContext, mrvisser.user.id, {'batchSize': 17}, function(collections, responses) {
                                    assert.strictEqual(collections.length, 16);

                                    // Ensure there is 1 response with all the collections
                                    assert.strictEqual(responses.length, 1);
                                    assert.strictEqual(_.last(responses).results.length, 16);
                                    assert.strictEqual(_.last(responses).nextToken, null);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Add Items to Collection', function() {

        /**
         * Test that verifies adding a single item to a collection succeeds
         */
        it('verify adding a single item to a collection', function(callback) {
            // Generate a user and give them a collection
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {

                    // Create a content item that mrvisser will add to his collection
                    RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link) {
                        assert.ok(!err);

                        // Ensure Mrvisser can add the item to his collection
                        return CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(mrvisser.restContext, collection.id, [link.id], callback);
                    });
                });
            });
        });

        /**
         * Test that verifies adding multiple content items to a collection succeeds
         */
        it('verify adding multiple items to a collection', function(callback) {
            // Generate a user and give them a collection
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {

                    // Create 5 content items to add to the collection
                    RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link1) {
                        assert.ok(!err);
                        RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link2) {
                            assert.ok(!err);
                            RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link3) {
                                assert.ok(!err);
                                RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link4) {
                                    assert.ok(!err);
                                    RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link5) {
                                        assert.ok(!err);

                                        // Ensure Mrvisser can add all the items to his collection
                                        return CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(mrvisser.restContext, collection.id, [link1.id, link2.id, link3.id, link4.id, link5.id], callback);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies both managers and administrators can add content items to a collection
         */
        it('verify only administrators and managers of collections can add content items to them', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1) {
                RestAPI.User.getMe(publicTenant.adminRestContext, function(err, publicTenantAdminMe) {
                    assert.ok(!err);

                    // Ensure anonymous, regular user, admin from another tenant all cannot add a content item to the collection
                    CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.anonymousRestContext, publicTenant.publicCollection.id, [publicTenant.publicContent.id], 401, function() {
                        CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, [publicTenant.publicContent.id], 401, function() {
                            CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant1.adminRestContext, publicTenant.publicCollection.id, [publicTenant.publicContent.id], 401, function() {

                                // Ensure the collection still has no items
                                CollectionsTestUtil.getAllCollectionContentItems(publicTenant.adminRestContext, publicTenant.publicCollection.id, null, function(contentItems) {
                                    assert.ok(_.isEmpty(contentItems));

                                    // Add public user as a manager of the collection and remove admin as a manager
                                    var memberUpdates = {};
                                    memberUpdates[publicTenantAdminMe.id] = false;
                                    memberUpdates[publicTenant.publicUser.user.id] = 'manager';
                                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, memberUpdates, function() {

                                        // Ensure public user and admin can both add an item to the collection
                                        CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, [publicTenant.publicContent.id], function() {
                                            CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.loggedinContent.id], function() {

                                                // Ensure the collection now has 2 items
                                                CollectionsTestUtil.getAllCollectionContentItems(publicTenant.publicUser.restContext, publicTenant.publicCollection.id, null, function(contentItems) {
                                                    assert.strictEqual(contentItems.length, 2);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for an administrator adding a content item to a collection
         */
        it('verify add items to collection authorization for an administrator', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {
                RestAPI.User.getMe(publicTenant.adminRestContext, function(err, publicTenantAdminMe) {
                    assert.ok(!err);

                    // Admin removes themself from managing each collection while adding a user. This is
                    // to ensure the test is accurate by admin having no explicit manage access
                    var memberUpdates = {};
                    memberUpdates[publicTenantAdminMe.id] = false;
                    memberUpdates[publicTenant.publicUser.user.id] = 'manager';
                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, memberUpdates, function() {
                        CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, memberUpdates, function() {
                            CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, memberUpdates, function() {

                                // Ensure admin can add the public, loggedin and private content items of their tenant to all the collections in their tenant
                                CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.publicContent.id], function() {
                                    CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.loggedinContent.id], function() {
                                        CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.privateContent.id], function() {
                                            CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant.publicContent.id], function() {
                                                CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant.loggedinContent.id], function() {
                                                    CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant.privateContent.id], function() {
                                                        CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.publicContent.id], function() {
                                                            CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.loggedinContent.id], function() {
                                                                CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.privateContent.id], function() {

                                                                    // Ensure admin can add only the public content item from another public tenant to a collection
                                                                    CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant1.publicContent.id], function() {
                                                                        CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant1.loggedinContent.id], 400, function() {
                                                                            CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant1.privateContent.id], 400, function() {

                                                                                // Ensure admin cannot add any content item from another private tenant to a collection
                                                                                CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [privateTenant.publicContent.id], 400, function() {
                                                                                    CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [privateTenant.loggedinContent.id], 400, function() {
                                                                                        CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [privateTenant.privateContent.id], 400, function() {
                                                                                            return callback();
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for an authenticated user adding a content item to a collection
         */
        it('verify add items to collection authorization for an authenticated user', function(callback) {
            CollectionsTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant) {

                // Ensure a user can add the public and loggedin content items of their tenant to the collection
                CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.publicContent.id], function() {
                    CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.loggedinContent.id], function() {
                        CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant.privateContent.id], function() {
                            CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant.publicContent.id], function() {
                                CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant.loggedinContent.id], function() {
                                    CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.loggedinCollection.id, [publicTenant.privateContent.id], function() {
                                        CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.publicContent.id], function() {
                                            CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.loggedinContent.id], function() {
                                                CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.privateCollection.id, [publicTenant.privateContent.id], function() {

                                                    // Ensure admin can add only the public content item from another public tenant to a collection
                                                    CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant1.publicContent.id], function() {
                                                        CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant1.loggedinContent.id], 400, function() {
                                                            CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [publicTenant1.privateContent.id], 400, function() {

                                                                // Ensure admin cannot add any content item from another private tenant to a collection
                                                                CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [privateTenant.publicContent.id], 400, function() {
                                                                    CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [privateTenant.loggedinContent.id], 400, function() {
                                                                        CollectionsTestUtil.assertAddContentItemsToCollectionFails(publicTenant.adminRestContext, publicTenant.publicCollection.id, [privateTenant.privateContent.id], 400, function() {
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies adding a content item to a collection allows permissions to propagate to the content
         * item from the collection's members
         */
        it('verify collections propagate user permission to content items that belong to them', function(callback) {
            // Create mrvisser, a collection that he manages, and a private content item that he does not have access to
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(mrvisser.restContext, 1, function(collection) {
                    RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'private', 'http://www.google.ca', null, null, function(err, link) {
                        assert.ok(!err);

                        // Sanity check that mrvisser has no access to the content item
                        RestAPI.Content.getContent(mrvisser.restContext, link.id, function(err) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 401);

                            // Add the link to the collection
                            CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(camAdminRestContext, collection.id, [link.id], function() {

                                // Ensure that Mrvisser now has access to view the link
                                RestAPI.Content.getContent(mrvisser.restContext, link.id, function(err) {
                                    assert.ok(!err);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies collections propagate group permission to content items that belong to them
         */
        it('verify collections propagate group permission to content items that belong to them', function(callback) {
            // Generate 2 test users and collection. mrvisser will be given access to the private link via a group and collection permissions chain
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);
                CollectionsTestUtil.generateTestCollections(camAdminRestContext, 1, function(collection) {

                    // Create the private link to which will give mrvisser access VIA group and collection permissions chain
                    RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'private', 'http://www.google.ca', null, null, function(err, link) {
                        assert.ok(!err);

                        // Generate an hierarchy of groups through which access will be propagated down to the user
                        TestsUtil.generateTestGroups(camAdminRestContext, 3, function(err, groups, group1, group2, group3) {
                            assert.ok(!err);
                            TestsUtil.generateGroupHierarchy(camAdminRestContext, [group1.id, group2.id, group3.id, mrvisser.user.id], 'member', function(err) {
                                assert.ok(!err);

                                // Add simong to the parent group to sanity check permissions will not propagate the wrong way through groups
                                RestAPI.Group.setGroupMembers(camAdminRestContext, group1.id, _memberUpdate(simong.user.id), function(err) {
                                    assert.ok(!err);

                                    // Add group2 as a member of the collection. This implies that group1 and it's members (the parent of group2) will not receive
                                    // access when the link is added to the collection
                                    CollectionsTestUtil.assertUpdateCollectionMembersSucceeds(camAdminRestContext, collection.id, _memberUpdate(group2.id), function() {

                                        // Sanity check that mrvisser and simong both have no access to the content item because it has not yet been added to the
                                        // collection to complete the permission chain
                                        RestAPI.Content.getContent(mrvisser.restContext, link.id, function(err) {
                                            assert.ok(err);
                                            assert.strictEqual(err.code, 401);
                                            RestAPI.Content.getContent(simong.restContext, link.id, function(err) {
                                                assert.ok(err);
                                                assert.strictEqual(err.code, 401);

                                                // Finally add the link to the collection
                                                CollectionsTestUtil.assertAddContentItemsToCollectionSucceeds(camAdminRestContext, collection.id, [link.id], function() {

                                                    // Ensure mrvisser now has access by permission chain: link -> collection -> group1 -> group2 -> group3 -> mrvisser
                                                    RestAPI.Content.getContent(mrvisser.restContext, link.id, function(err) {
                                                        assert.ok(!err);

                                                        // Sanity check that the reverse chain did not propagate access to simong
                                                        RestAPI.Content.getContent(simong.restContext, link.id, function(err) {
                                                            assert.ok(err);
                                                            assert.strictEqual(err.code, 401);
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
