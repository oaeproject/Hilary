/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('UI', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used for anonymous requests on the global tenant
    var anonymousGlobalRestContext = null;

    /**
     * Function that will fill up the anonymous tenant and global REST context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        callback();
    });

    describe('Widget config aggregation', function() {

        /**
         * Test that verifies that the aggregated widget configs can be retrieved
         */
        it('verify widget configs', function(callback) {
            // Get the widget configs on the global admin server
            RestAPI.UI.getWidgetManifests(anonymousGlobalRestContext, function(err, data) {
                assert.ok(!err);
                assert.ok(data['topnavigation']);
                assert.equal(data['topnavigation'].id, 'topnavigation');
                assert.equal(data['topnavigation'].path, 'oae-core/topnavigation/');
                assert.ok(data['topnavigation']['i18n']);

                // Get the widget configs on the tenant server
                RestAPI.UI.getWidgetManifests(anonymousRestContext, function(err, data) {
                    assert.ok(!err);
                    assert.ok(data['topnavigation']);
                    assert.equal(data['topnavigation'].id, 'topnavigation');
                    assert.equal(data['topnavigation'].path, 'oae-core/topnavigation/');
                    assert.ok(data['topnavigation']['i18n']);
                    callback();
                });
            });
        });
    });

    describe('Batch static files', function() {

        /**
         * Test that verifies that static files can be batch requested
         */
        it('verify batch static get', function(callback) {
            var files = ['/ui/index.html', '/node_modules/oae-core/entity/javascript/entity.js', '/nonexisting'];
            // Get these files on the global admin server
            RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, files, function(err, batch1) {
                assert.ok(!err);
                assert.equal(_.keys(batch1).length, 3);
                // Verify that the /ui/index.html file is present
                assert.ok(batch1[files[0]]);
                assert.equal(typeof batch1[files[0]], 'string');
                // Verify that the /node_modules/oae-core/entity/javascript/entity.js file is present
                assert.ok(batch1[files[1]]);
                assert.equal(typeof batch1[files[1]], 'string');
                // Verify that the /nonexisting file is not present
                assert.equal(batch1[files[2]], null);

                // Get these files on the tenant server
                RestAPI.UI.getStaticBatch(anonymousRestContext, files, function(err, batch2) {
                    assert.ok(!err);
                    assert.equal(_.keys(batch2).length, 3);
                    // Verify that the /ui/index.html file is present
                    assert.ok(batch2[files[0]]);
                    assert.equal(typeof batch2[files[0]], 'string');
                    // Verify that the /node_modules/oae-core/entity/javascript/entity.js file is present
                    assert.ok(batch2[files[1]]);
                    assert.equal(typeof batch2[files[1]], 'string');
                    // Verify that the /nonexisting file is not present
                    assert.equal(batch2[files[2]], null);
                    // Make sure that the files from batch1 and batch2 are the same
                    assert.equal(batch1[files[0]], batch2[files[0]]);
                    assert.equal(batch1[files[1]], batch2[files[1]]);

                    // Do another set of batch requests with some of the same files, to make sure they are being server from cache
                    files = ['/node_modules/oae-core/entity/css/entity.css', '/ui/index.html'];
                    // Get these files on the global admin server
                    RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, files, function(err, batch3) {
                        assert.ok(!err);
                        assert.equal(_.keys(batch3).length, 2);
                        // Verify that the /ui/index.html file is present
                        assert.ok(batch3[files[0]]);
                        assert.equal(typeof batch3[files[0]], 'string');
                        // Verify that the /node_modules/oae-core/entity/javascript/entity.js file is present
                        assert.ok(batch3[files[1]]);
                        assert.equal(typeof batch3[files[1]], 'string');
                        // Make sure that /ui/index.html has the same content in both batches
                        assert.equal(batch3['/ui/index.html'], batch1['/ui/index.html']);

                        // Get these files on the tenant server
                        RestAPI.UI.getStaticBatch(anonymousRestContext, files, function(err, batch4) {
                            assert.ok(!err);
                            assert.equal(_.keys(batch4).length, 2);
                            // Verify that the /ui/index.html file is present
                            assert.ok(batch4[files[0]]);
                            assert.equal(typeof batch4[files[0]], 'string');
                            // Verify that the /node_modules/oae-core/entity/javascript/entity.js file is present
                            assert.ok(batch4[files[1]]);
                            assert.equal(typeof batch4[files[1]], 'string');
                            // Make sure that /ui/index.html has the same content in both batches
                            assert.equal(batch4['/ui/index.html'], batch2['/ui/index.html']);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a single file can be retrieved through a batch request
         */
        it('verify batch single file', function(callback) {
            var file = '/ui/index.html';
            // Test this on the global admin server
            RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, file, function(err, data) {
                assert.ok(!err);
                assert.ok(_.keys(data).length, 1);
                assert.ok(data[file]);
                assert.equal(typeof data[file], 'string');

                // Test this on the tenant server
                RestAPI.UI.getStaticBatch(anonymousRestContext, file, function(err, data) {
                    assert.ok(!err);
                    assert.ok(_.keys(data).length, 1);
                    assert.ok(data[file]);
                    assert.equal(typeof data[file], 'string');
                    callback();
                });
            });
        });

        /**
         * Test that verifies that requesting an empty set of static files fails
         */
        it('verify validation', function(callback) {
            // Test on the global admin server
            RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, null, function(err, data) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!data);
                RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, [], function(err, data) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.ok(!data);
                    // Verify that only absolute paths can be used, and no private
                    // server files can be retrieved
                    var file = '/../Hilary/config.js';
                    RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, file, function(err, data) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!data);
                    
                        // Test on the tenant server
                        RestAPI.UI.getStaticBatch(anonymousRestContext, null, function(err, data) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            assert.ok(!data);
                            RestAPI.UI.getStaticBatch(anonymousRestContext, [], function(err, data) {
                                assert.ok(err);
                                assert.equal(err.code, 400);
                                assert.ok(!data);
                                // Verify that only absolute paths can be used, and no private
                                // server files can be retrieved
                                RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, file, function(err, data) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);
                                    assert.ok(!data);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});