/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var Counter = require('oae-util/lib/counter');
var ContentDAO = require('oae-content/lib/internal/dao');
var LibraryAPI = require('oae-library');

var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersContentLibrary = require('oae-folders/lib/internal/contentLibrary');
var FoldersDAO = require('oae-folders/lib/internal/dao');


// Keeps track of libraries that are being purged. This is helpful to
// synchronize things like tests so we know when all libraries are purged
var purgeCounter = new Counter();


/**
 * Invoke the handler the next time all libraries are purged. If there
 * are currently no activity delivery events being handled when this is
 * invoked, the handler is invoked immediately
 *
 * @param  {Function}   handler     The handler to invoke when all libraries have been purged
 */
var whenAllPurged = module.exports.whenAllPurged = function(handler) {
    purgeCounter.whenZero(handler);
};

/*!
 * Register a library indexer that can provide resources to reindex the folders library
 */
LibraryAPI.Index.registerLibraryIndex(FoldersConstants.library.FOLDERS_LIBRARY_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the group ids ('g') to which the principal is directly associated in this
        // batch of paged resources. Since the group can be a member of both user groups and
        // folder groups, we filter down to just the folder groups for folder libraries
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, 'g', start, limit, function(err, roles, nextToken) {
            if (err) {
                return callback(err);
            }

            // We just need the ids, not the roles
            var ids = _.pluck(roles, 'id');
            FoldersDAO.getFoldersByGroupIds(ids, function(err, folders) {
                if (err) {
                    return callback(err);
                }

                // Remove empty items, which indicates they mapped to user groups and not folder
                // groups
                folders = _.compact(folders);

                // Convert all the folders into the light-weight library items that describe how
                // they are placed in a library index
                var resources = _.map(folders, function(folder) {
                    return {
                        'id': folder.id,
                        'rank': folder.lastModified,
                        'tenant': folder.tenant,
                        'visibility': folder.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});

/*!
 * Register a library indexer that can provide resources to reindex the folder content library
 */
LibraryAPI.Index.registerLibraryIndex(FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the content ids ('c') to which the folder is directly associated in this
        // batch of paged resources. Since the group can be a member of both user groups and
        // folder groups, we filter down to just the folder groups for folder libraries
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, 'c', start, limit, function(err, roles, nextToken) {
            if (err) {
                return callback(err);
            }

            // We just need the ids, not the roles
            var ids = _.pluck(roles, 'id');

            ContentDAO.Content.getMultipleContentItems(ids, ['contentId', 'tenantAlias', 'visibility', 'lastModified'], function(err, contentItems) {
                if (err) {
                    return callback(err);
                }

                // Convert all the content into the light-weight library items that describe how
                // they are placed in a library index
                var resources = _.map(contentItems, function(contentItem) {
                    return {
                        'id': contentItem.id,
                        'rank': contentItem.lastModified,
                        'tenant': contentItem.tenant,
                        'visibility': contentItem.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});

/**
 * Purge all the folder libraries this content item is part of
 *
 * @param  {Context}    ctx             Standard context object, representing the currently logged in user and its tenant
 * @param  {Content}    contentObj      The content object that was updated
 * @api private
 */
var _onContentUpdate = function(ctx, contentObj) {
    // Retrieve all the principals that are a member of this content item. Folders
    // are represented as groups
    AuthzAPI.getAuthzMembers(contentObj.id, null, 10000, function(err, members) {
        if (err) {
            log().error({'err': err, 'contentId': contentObj.id}, 'Unable to get the members of a piece of content');
            return;
        }

        _.chain(members)
            // Filter down to only groups
            .filter(function(member) {
                return AuthzUtil.isGroupId(member.id);
            })

            // Purge each group's folder content library. This will also try to purge real groups
            // their folder content libraries (which don't exist) but is considered to be harmless
            .each(function(group) {
                LibraryAPI.Index.purge(FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME, group.id, function(err) {
                    if (err) {
                        log().error({'err': err, 'contentId': contentObj.id, 'groupId': group.id}, 'Unable to purge folder library');
                    }

                    purgeCounter.decr();
                });

                purgeCounter.incr();
            });
    });
};

/**
 * Remove the content item from all the folders it was a member of
 *
 * @param  {Context}    ctx                 Standard context object, representing the currently logged in user and its tenant
 * @param  {Content}    contentObj          The content object that was deleted
 * @param  {String[]}   removedMemberIds    The principals who were a member of the content item
 * @api private
 */
var _onContentDelete = function(ctx, contentObj, removedMemberIds) {
    _.chain(removedMemberIds)
        // We only need the groups
        .filter(function(principalId) {
            return AuthzUtil.isGroupId(principalId);
        })

        // Fake a folder
        .map(function(principalId) {
            return {'id': principalId, 'groupId': principalId};
        })

        // Remove the content item from each folder it was found in
        .each(function(folder) {
            FoldersContentLibrary.remove(folder, [contentObj], function(err) {
                if (err) {
                    log().error({'err': err, 'contentId': contentObj.id, 'groupId': folder.groupId}, 'Unable to purge folder library');
                }

                purgeCounter.decr();
            });

            purgeCounter.incr();
        });
};

/*!
 * When a content item's `lastModified` timestamp is updated we need to rebuild all the folders
 * that contain it. This is to ensure that when a content item is updated, it comes out on top
 * of the folder library
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, _onContentUpdate);
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, _onContentUpdate);
ContentAPI.on(ContentConstants.events.RESTORED_REVISION, _onContentUpdate);
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, _onContentUpdate);

/*!
 * When a content item is deleted, we remove it from all the folders it's located in
 */
ContentAPI.on(ContentConstants.events.DELETED_CONTENT, _onContentDelete);
