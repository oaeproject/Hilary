/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzUtil = require('oae-authz/lib/util');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-content');
var MessageBoxAPI = require('oae-messagebox');
var MessageBoxUtil = require('oae-messagebox/lib/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsGroupAPI = require('oae-principals/lib/api.group');
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('./internal/dao');
var ContentInternalUtil = require('oae-content/lib/internal/util');
var ContentUtil = require('./internal/util');
var Etherpad = require('./internal/etherpad');


////////////////////
// CONTENT-CREATE //
////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_CREATE, {
    'groupBy': [{'actor': true, 'target': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self', 'followers'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['members']
            }
        },
        'email': {
            'router': {
                'object': ['members']
            }
        }
    }
});

/*!
 * Post a content-create activity when a user creates a content item.
 */
ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, revision, memberChangeInfo, folderIds) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var targetResource = null;

    // Get the extra members
    var extraMembers = _.chain(memberChangeInfo.changes)
        .keys()
        .filter(function(member) {
            return (member !== ctx.user().id);
        })
        .value();

    // If we only added 1 extra user or group, we set the target to that entity
    if (_.isEmpty(folderIds) && extraMembers.length === 1) {
        var targetResourceType = (PrincipalsUtil.isGroup(extraMembers[0])) ? 'group' : 'user';
        targetResource = new ActivityModel.ActivitySeedResource(targetResourceType, extraMembers[0]);

    // If we added the file to just 1 folder, we set it as a target
    } else if (_.isEmpty(extraMembers) && folderIds.length === 1) {
        targetResource = new ActivityModel.ActivitySeedResource('folder', folderIds[0]);
    }

    // Generate the activity seed and post it to the queue
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource, targetResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////////////////////////////////
// CONTENT-UPDATE and CONTENT-UPDATE-VISIBILITY //
//////////////////////////////////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE, {
    'groupBy': [{'object': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['managers']
            }
        },
        'email': {
            'router': {
                'object': ['managers']
            }
        }
    }
});

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_VISIBILITY, {
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['managers']
            }
        }
    }
});

/*!
 * Post either a content-update or content-update-visibility activity when a user updates a content item's metadata.
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent, revision) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContent.id, {'content': newContent});

    // We discriminate between general updates and visibility changes. If the visibility has changed, we fire a visibility changed activity *instead* of an update activity
    var activityType = null;
    if (newContent.visibility === oldContent.visibility) {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE;
    } else {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////
// CONTENT-REVISION //
//////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, {
    'groupBy': [{'object': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['members', '^online-authors']
            }
        },
        'email': {
            'router': {
                'object': ['members', '^online-authors']
            }
        }
    }
});

/*!
 * Post a content-revision activity when a user uploads a new file body
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, newContentObj, oldContentObj, revision) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContentObj.id, {'content': newContentObj});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

/*!
 * Post a content-revision activity when a user has made an edit to a collaborative document (even though there is technically no new revision)
 */
ContentAPI.on(ContentConstants.events.EDITED_COLLABDOC, function(ctx, contentObj) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', contentObj.id, {'content': contentObj});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


///////////////////////////////
// CONTENT-RESTORED-REVISION //
///////////////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_RESTORED_REVISION, {
    'groupBy': [{'object': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['managers']
            }
        },
        'email': {
            'router': {
                'object': ['managers']
            }
        }
    }
});

/*!
 * Post a content-restored-revision activity when a user restores an old revision.
 */
ContentAPI.on(ContentConstants.events.RESTORED_REVISION, function(ctx, newContentObj, oldContentObj, restoredRevision) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContentObj.id, {'content': newContentObj});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_RESTORED_REVISION, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


/////////////////////
// CONTENT-COMMENT //
/////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_COMMENT, {
    'groupBy': [{'target': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'target': ['message-contributors', 'members']
            }
        },
        'notification': {
            'router': {
                'target': ['message-contributors', 'members']
            },
        },
        'email': {
            'router': {
                'target': ['message-contributors', 'members']
            }
        },
        'message': {
            'transient': true,
            'router': {

                // Route the activity to the piece of content
                'target': ['self']
            }
        }
    }
});

/*!
 * Post a content-comment activity when a user comments on a content item
 */
ContentAPI.on(ContentConstants.events.CREATED_COMMENT, function(ctx, message, content) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content-comment', message.id, {'contentId': content.id, 'message': message});
    var targetResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_COMMENT, millis, ActivityConstants.verbs.POST, actorResource, objectResource, targetResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////////////////////////////////////////////////////////
// CONTENT-SHARE, CONTENT-ADD-TO-LIBRARY and CONTENT-UPDATE-MEMBER-ROLE //
//////////////////////////////////////////////////////////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY, {
    // "Branden Visser added 5 items to his library"
    'groupBy': [{'actor': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self', 'followers'],
                'object': ['managers']
            }
        }
    }
});

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_SHARE, {
    'groupBy': [
        // "Branden Visser shared Content Item with 5 users and groups"
        {'actor': true, 'object': true},

        // "Branden Visser shared 8 files with OAE Team"
        {'actor': true, 'target': true}
    ],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['managers'],
                'target': ['self', 'members', 'followers']
            }
        },
        'notification': {
            'router': {
                'target': ['self']
            }
        },
        'email': {
            'router': {
                'target': ['self']
            }
        }
    }
});

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_MEMBER_ROLE, {
    'groupBy': [{'actor': true, 'target': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members'],
                'target': ['managers']
            }
        }
    }
});

/*!
 * Post a content-share or content-add-to-library activity based on content sharing
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content, memberChangeInfo, opts) {
    if (opts.invitation) {
        // If this member update came from an invitation, we bypass adding activity as there is a
        // dedicated activity for that
        return;
    }

    var addedMemberIds = _.pluck(memberChangeInfo.members.added, 'id');
    var updatedMemberIds = _.pluck(memberChangeInfo.members.updated, 'id');

    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var contentResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});

    // When a user is added, it is considered either a content-share or a content-add-to-library activity, depending on if the
    // added user is the current user in context
    _.each(addedMemberIds, function(memberId) {
        if (memberId === ctx.user().id) {
            // Users can't "share" with themselves, they actually "add it to their library"
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY, millis, ActivityConstants.verbs.ADD, actorResource, contentResource));
        } else {
            // A user shared content with some other user, fire the content share activity
            var principalResourceType = (PrincipalsUtil.isGroup(memberId)) ? 'group' : 'user';
            var principalResource = new ActivityModel.ActivitySeedResource(principalResourceType, memberId);
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_SHARE, millis, ActivityConstants.verbs.SHARE, actorResource, contentResource, principalResource));
        }
    });

    // When a user's role is updated, we fire a "content-update-member-role" activity
    _.each(updatedMemberIds, function(memberId) {
        var principalResourceType = (PrincipalsUtil.isGroup(memberId)) ? 'group' : 'user';
        var principalResource = new ActivityModel.ActivitySeedResource(principalResourceType, memberId);
        ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_MEMBER_ROLE, millis, ActivityConstants.verbs.UPDATE, actorResource, principalResource, contentResource));
    });
});


///////////////////////////
// ACTIVITY ENTITY TYPES //
///////////////////////////

/*!
 * Produces a persistent 'content' activity entity
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentProducer = function(resource, callback) {
    var content = (resource.resourceData && resource.resourceData.content) ? resource.resourceData.content : null;

    // If the content item was fired with the resource, use it instead of fetching
    if (content) {
        return callback(null, ContentUtil.createPersistentContentActivityEntity(content));
    }

    ContentDAO.Content.getContent(resource.resourceId, function(err, content) {
        if (err) {
            return callback(err);
        }

        return callback(null, ContentUtil.createPersistentContentActivityEntity(content));
    });
};

/*!
 * Produces an persistent activity entity that represents a comment that was posted
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentCommentProducer = function(resource, callback) {
    var contentId = resource.resourceData.contentId;
    var message = resource.resourceData.message;
    ContentDAO.Content.getContent(contentId, function(err, content) {
        if (err) {
            return callback(err);
        }

        MessageBoxUtil.createPersistentMessageActivityEntity(message, function(err, entity) {
            if (err) {
                return callback(err);
            }

            // Store the content id and visibility on the entity as these are required for routing the activities.
            entity.objectType = 'content-comment';
            entity.contentId = content.id;
            entity.contentVisibility = content.visibility;
            return callback(null, entity);
        });
    });
};

/*!
 * Transform the content persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};

    // Collect all the revision ids so we can fetch their preview data
    var allRevisionIds = [];
    _.each(activityEntities, function(entities, activityId) {
        _.each(entities, function(entity, entityId) {
            allRevisionIds.push(entity.content.latestRevisionId);
        });
    });

    // No need to retrieve the same revision twice
    allRevisionIds = _.uniq(allRevisionIds);

    // Fetch the previews and attach them to the transformed entities
    ContentDAO.Previews.getPreviewUris(allRevisionIds, function(err, previews) {
        if (err) {
            return callback(err);
        }

        _.each(activityEntities, function(entities, activityId) {
            transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
            _.each(entities, function(entity, entityId) {
                // Transform the persistent entity with its up-to-date preview status
                transformedActivityEntities[activityId][entityId] = ContentUtil.transformPersistentContentActivityEntity(ctx, entity, previews[entity.content.latestRevisionId]);
            });
        });

        return callback(null, transformedActivityEntities);
    });
};

/*!
 * Transform the content persistent activity entities into their OAE profiles
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentInternalTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};

    // Collect all the revision ids so we can fetch their preview data
    var allRevisionIds = [];
    _.each(activityEntities, function(entities, activityId) {
        _.each(entities, function(entity, entityId) {
            allRevisionIds.push(entity.content.latestRevisionId);
        });
    });

    // No need to retrieve the same revision twice
    allRevisionIds = _.uniq(allRevisionIds);

    // We need the full previews object for the internal content object
    ContentDAO.Revisions.getMultipleRevisions(allRevisionIds, {'fields': ['revisionId', 'previews']}, function(err, revisions) {
        if (err) {
            return callback(err);
        }

        var previews = {};
        _.each(revisions, function(revision) {
            previews[revision.revisionId] = revision.previews;
        });

        _.each(activityEntities, function(entities, activityId) {
            transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
            _.each(entities, function(entity, entityId) {
                // Transform the persistent entity with its up-to-date preview status
                transformedActivityEntities[activityId][entityId] = ContentUtil.transformPersistentContentActivityEntityToInternal(ctx, entity, previews[entity.content.latestRevisionId]);
            });
        });

        return callback(null, transformedActivityEntities);
    });
};

/*!
 * Transform the comment persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentCommentTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            var contentId = entity.message.messageBoxId;
            var contentResource = AuthzUtil.getResourceFromId(contentId);
            var profilePath = '/content/' + contentResource.tenantAlias + '/' + contentResource.resourceId;
            var urlFormat = '/api/content/' + contentId + '/messages/%s';
            transformedActivityEntities[activityId][entityId] = MessageBoxUtil.transformPersistentMessageActivityEntity(ctx, entity, profilePath, urlFormat);
        });
    });

    return callback(null, transformedActivityEntities);
};
/*!
 * Transform the comment persistent activity entities into OAE profiles
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentCommentInternalTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            transformedActivityEntities[activityId][entityId] = MessageBoxUtil.transformPersistentMessageActivityEntityToInternal(ctx, entity.message);
        });
    });

    return callback(null, transformedActivityEntities);
};

ActivityAPI.registerActivityEntityType('content', {
    'producer': _contentProducer,
    'transformer': {
        'activitystreams': _contentTransformer,
        'internal': _contentInternalTransformer
    },
    'propagation': function(associationsCtx, entity, callback) {
        ActivityUtil.getStandardResourcePropagation(entity.content.visibility, AuthzConstants.joinable.NO, callback);
    }
});

ActivityAPI.registerActivityEntityType('content-comment', {
    'producer': _contentCommentProducer,
    'transformer': {
        'activitystreams': _contentCommentTransformer,
        'internal': _contentCommentInternalTransformer
    },
    'propagation': function(associationsCtx, entity, callback) {
        return callback(null, [{'type': ActivityConstants.entityPropagation.ALL}]);
    }
});


//////////////////////////////////
// ACTIVITY ENTITY ASSOCIATIONS //
//////////////////////////////////

/*!
 * Register an association that presents the content item
 */
ActivityAPI.registerActivityEntityAssociation('content', 'self', function(associationsCtx, entity, callback) {
    return callback(null, [entity[ActivityConstants.properties.OAE_ID]]);
});

/*!
 * Register an association that presents the members of a content item categorized by role
 */
ActivityAPI.registerActivityEntityAssociation('content', 'members-by-role', function(associationsCtx, entity, callback) {
    ActivityUtil.getAllAuthzMembersByRole(entity[ActivityConstants.properties.OAE_ID], callback);
});

/*!
 * Register an association that presents all the indirect members of a content item
 */
ActivityAPI.registerActivityEntityAssociation('content', 'members', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, _.flatten(_.values(membersByRole)));
    });
});

/*!
 * Register an association that presents all the managers of a content item
 */
ActivityAPI.registerActivityEntityAssociation('content', 'managers', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, membersByRole[AuthzConstants.role.MANAGER]);
    });
});

/*!
 * Register an association that presents those users who are active on a collaborative document right now
 */
ActivityAPI.registerActivityEntityAssociation('content', 'online-authors', function(associationsCtx, entity, callback) {
    // Ignore content items that aren't collaborative documents
    if (entity.content.resourceSubType !== 'collabdoc') {
        return callback(null, []);
    }

    // Grab the authors who are currently in the collaborative document
    Etherpad.getOnlineAuthors(entity.content.id, entity.content.etherpadPadId, function(err, onlineAuthorIds) {
        if (err) {
            return callback(err);
        }

        ContentDAO.Etherpad.getUserIds(onlineAuthorIds, function(err, userIds) {
            if (err) {
                return callback(err);
            }

            return callback(null, _.values(userIds));
        });
    });
});

/*!
 * Register an assocation that presents all the commenting contributors of a content item
 */
ActivityAPI.registerActivityEntityAssociation('content', 'message-contributors', function(associationsCtx, entity, callback) {
    MessageBoxAPI.getRecentContributions(entity[ActivityConstants.properties.OAE_ID], null, 100, callback);
});

/*!
 * Register an association that presents the content item for a content-comment entity
 */
ActivityAPI.registerActivityEntityAssociation('content-comment', 'self', function(associationsCtx, entity, callback) {
    return callback(null, [entity.contentId]);
});
