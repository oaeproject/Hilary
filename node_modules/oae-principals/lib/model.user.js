/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var util = require('util');

/**
 * The User model.
 * If this user has a profile picture associated to it, this object will have the following keys:
 * `user.smallPicture`      : A download link to the small picture
 * `user.smallPictureUri`   : A content storage URI to the small picture.
 * `user.mediumPicture`     : A download link to the medium picture
 * `user.mediumPictureUri`  : A content storage URI to the medium picture.
 * `user.largePicture`      : A download link to the large picture
 * `user.largePictureUri`   : A content storage URI to the large picture.
 *
 * @param  {String}     tenant                  The tenant this user belongs to.
 * @param  {String}     id                      The globally unique userId for this user. ie: u:cam:johndoe
 * @param  {String}     displayName             The display name of the user
 * @param  {String}     [opts]                  Optional additional user properties
 * @param  {String}     [opts.visibility]       The visibility of this user account. ie: loggedin
 * @param  {String}     [opts.locale]           The user's locale
 * @param  {String}     [opts.timezone]         The user's timezone
 * @param  {String}     [opts.publicAlias]      The name of the user which is displayed to a user who does not have access to view the user
 * @param  {Boolean}    [opts.isGlobalAdmin]    Whether or not the user is a global admin
 * @param  {Boolean}    [opts.isTenantAdmin]    Whether or not the user is admin of their tenant.
 */
module.exports.User = function(tenant, id, displayName, opts) {
    opts = opts || {};

    // Explicit checks on true for admin.
    var _isGlobalAdmin = (opts.isGlobalAdmin === true);
    var _isTenantAdmin = (opts.isTenantAdmin === true);

    var that = {};

    that.tenant = tenant;
    that.id = id;
    that.displayName = displayName;
    that.visibility = opts.visibility;
    that.locale = opts.locale;
    that.timezone = opts.timezone;
    that.publicAlias = opts.publicAlias;

    /**
     * Check if a user is a global admin
     *
     * @return {Boolean} Whether or not this user is a global admin.
     */
    that.isGlobalAdmin = function() {
        return _isGlobalAdmin;
    };

    /**
     * Whether or not this user is a tenant admin for the provided tenant.
     *
     * @param  {String}  tenantAlias    The tenant this user is supposed to be an admin of.
     * @return {Boolean}                Whether or not the user is a tenant admin.
     */
    that.isTenantAdmin = function(tenantAlias) {
        return (_isTenantAdmin && tenantAlias === that.tenant);
    };

    /**
     * Checks for both tenant admin as global admin.
     *
     * @param  {Object}  tenantAlias    The tenant this user could a tenant admin of.
     * @return {Boolean}                Whether this user is a tenant or global admin.
     */
    that.isAdmin = function(tenantAlias) {
        return (that.isTenantAdmin(tenantAlias) || that.isGlobalAdmin());
    };

    return that;
};
