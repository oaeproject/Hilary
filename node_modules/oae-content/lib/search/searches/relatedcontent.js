/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var OaeUtil = require('oae-util/lib/util');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');
var TenantsUtil = require('oae-tenants/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

var ContentDAO = require('oae-content/lib/internal/dao');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;

// The boosting factors that will be used in the filters.
// See http://www.elasticsearch.org/guide/reference/query-dsl/custom-filters-score-query.html for more information
var BOOST_FACTORS = {
    'THUMBNAIL': '1.5',
    'DESCRIPTION': '1.1',
    'CREATED_BY': '1.1'
};

/**
 * A search that searches for related content items to a specified content item by using the
 * specified content item's display name. By default, this feed will return 5 items.
 *
 * @param  {Context}        ctx                 The context of the current request
 * @param  {Object}         opts                General search options
 * @param  {String[]}       opts.pathParams     The query path parameters
 * @param  {String[]}       opts.pathParams[0]  The id of the content item that will act as the base content item
 * @param  {String}         [opts.scope]        The scope of the query (One of `SearchConstants.general.SCOPE_*`)
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {SearchResult}   callback.results    An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // Sanitize custom search options
    opts = opts || {};
    opts.limit = OaeUtil.getNumberParam(opts.limit, 5, 1, 25);
    var contentId = _.first(opts.pathParams);

    var validator = new Validator();
    validator.check(contentId, {'code': 400, 'msg': 'A content id must be provided'}).isResourceId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Retrieve the piece of content
    ContentDAO.Content.getContent(contentId, function(err, contentObj) {
        if (err) {
            return callback(err);
        }

        // Create the filter that will apply the search scope and the user's access
        SearchUtil.filterScopeAndAccess(ctx, opts.scope, false, null, function(err, filterScopeAndAccess) {
            if (err) {
                return callback(err);
            }

            // The query object for the Query DSL
            var query = _createRelatedQuery(contentObj);
            return callback(null, SearchUtil.createQuery(query, filterScopeAndAccess, opts));
        });
    });
};

/**
 * Creates a query where documents must be similar to the passed in piece of content.
 * Documents who have a description and/or thumbnail are boosted.
 * Documents who are created by the same creator will also be boosted.
 *
 * @param  {Object} content     The content object
 * @return {Object}             The appropriate ElasticSearch query.
 * @api private
 */
var _createRelatedQuery = function(content) {
    return {
        'custom_filters_score': {
            'query': {
                'bool': {
                    'must': SearchUtil.createMoreLikeThisQuery(content.displayName),
                    'must_not': SearchUtil.filterIds([content.id]),
                    'boost': 500
                }
            },
            'filters': [{
                'filter': SearchUtil.filterExists('description'),
                'boost': BOOST_FACTORS.DESCRIPTION
            }, {
                'filter': SearchUtil.filterExists('thumbnailUrl'),
                'boost': BOOST_FACTORS.THUMBNAIL
            }, {
                'filter': SearchUtil.createHasChildQuery(AuthzConstants.search.MAPPING_RESOURCE_MEMBERS, SearchUtil.filterTerms('direct_members', [content.createdBy])),
                'boost': BOOST_FACTORS.CREATED_BY
            }],
            'score_mode': 'total'
        }
    };
};
