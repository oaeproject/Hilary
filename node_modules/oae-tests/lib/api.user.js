/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;


/**
 * @return {Context} A Context that holds a User with global administrator rights.
 */
var getGlobalAdminContext = module.exports.getGlobalAdminContext = function() {
    var globalTenant = new Tenant('global', 'Global tenant', 'A fake tenant that can be used for global administration', 2000, 'localhost');
    var globalAdminUser = new User(globalTenant, 'u:global:administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', true, false);
    return new Context(globalTenant, globalAdminUser);
};

/**
 * Invalidates a Context by refreshing it's tenant and user object.
 * @param {Context}                 oldContext          The old context that needs refreshing
 * @param {Function(err, context)}  callback            A callback method.
 * @param {Object}                  callback.err An     error object if any
 * @param {Context}                 callback.context    The new context.
 */
var invalidateContext = module.exports.invalidateContext = function(oldContext, callback) {
    TenantAPI.getTenantByPort(oldContext.tenant().port, function(err, tenant) {
        if (err) {
            return callback(err);
        }
        PrincipalsAPI.getUser(oldContext, oldContext.user().id, function(err, user) {
            if (err) {
                return callback(err);
            }
            var newContext = new Context(tenant, user);
            callback(false, newContext);
        });
    });
};