/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var ent = require('ent');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-preview-processor');
var RestAPI = require('oae-rest');

var PreviewConstants = require('oae-preview-processor/lib/constants');
var PreviewUtil = require('oae-preview-processor/lib/util');

/**
 * Resizes an image generated by one of the link processors in the appropriate sizes and updates
 * the content item with metadata if it has been provided.
 *
 * @param  {Context}    ctx                 The preview context associated to this file. This context should have an authenticated global administrator against it.
 * @param  {String}     path                The path where the image has been stored.
 * @param  {Object}     [opts]              Optional metadata that should be stored on the content item. Useful to give a link a title. The content item will only be updated if there is no metadata present yet.
 * @param  {String}     [opts.displayName]  The new display name for this piece of content. This will be passed trough a decoding function.
 * @param  {String}     [opts.description]  The new description for this piece of content. This will be passed trough a decoding function.
 * @param  {Function}   callback            Standard callback method.
 * @param  {Object}     callback.err        Standard error object (if any).
 */
var generatePreviewsFromImage = module.exports.generatePreviewsFromImage = function(ctx, path, opts, callback) {
    // Crop the screenshot.
    PreviewUtil.generatePreviewsFromImage(ctx, path, {}, function(err) {
        if (err) {
            return callback(err);
        }

        // Check if we can update the main content metadata (displayName, description, ..)
        var params = {};
        opts = opts || {};
        if (opts.displayName && ctx.content.displayName === ctx.content.link && typeof opts.displayName === 'string') {
            ctx.addContentMetadata('displayName', ent.decode(opts.displayName));
            log().trace({'contentId': ctx.contentId}, 'Updating the content displayName.');
        }
        if (opts.description && !ctx.content.description && typeof opts.description === 'string') {
            ctx.addContentMetadata('description', ent.decode(opts.description));
            log().trace({'contentId': ctx.contentId}, 'Updating the content description.');
        }
        callback();
    });
};
