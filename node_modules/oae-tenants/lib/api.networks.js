/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var Validator = require('oae-util/lib/validator').Validator;

var TenantNetworksDAO = require('./internal/dao.networks');
var TenantsAPI = require('./api');

/**
 * Create a tenant network
 *
 * @param  {Context}        ctx                     The context of the current request
 * @param  {String}         displayName             The display name of the tenant network
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {TenantNetwork}  callback.tenantNetwork  The tenant network that was created
 */
var createTenantNetwork = module.exports.createTenantNetwork = function(ctx, displayName, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Must be a global administrator user to create a tenant network'}).isGlobalAdministratorUser(ctx);
    validator.check(displayName, {'code': 400, 'msg': 'A tenant network must contain a display name'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return TenantNetworksDAO.createTenantNetwork(displayName, callback);
};

/**
 * Get all tenant networks and their associated tenants
 *
 * @param  {Context}    ctx                         The context of the current request
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Object}     callback.tenantNetworks     All tenant networks in the system, keyed by their tenant network id
 */
var getTenantNetworks = module.exports.getTenantNetworks = function(ctx, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Must be a global administrator user to view tenant networks'}).isGlobalAdministratorUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    TenantNetworksDAO.getAllTenantNetworks(function(err, tenantNetworks) {
        if (err) {
            return callback(err);
        }

        TenantNetworksDAO.getAllTenantNetworkTenantAliases(function(err, tenantNetworkTenantAliases) {
            if (err) {
                return callback(err);
            }

            _.each(tenantNetworks, function(tenantNetwork, tenantNetworkId) {
                // Expand the tenant network aliases for each tenant network into full tenant objects
                // and apply them to the tenantNetwork object
                tenantNetwork.tenants = _.chain(tenantNetworkTenantAliases[tenantNetworkId])
                    .map(TenantsAPI.getTenant)
                    .compact()
                    .value();
            });

            return callback(null, tenantNetworks);
        });
    });
};

/**
 * Update a tenant network
 *
 * @param  {Context}        ctx                     The context of the current request
 * @param  {String}         id                      The id of the tenant network to update
 * @param  {String}         displayName             The new display name of the tenant network
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {TenantNetwork}  callback.tenantNetwork  The updated tenant network
 */
var updateTenantNetwork = module.exports.updateTenantNetwork = function(ctx, id, displayName, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Must be a global administrator user to update a tenant network'}).isGlobalAdministratorUser(ctx);
    validator.check(id, {'code': 400, 'msg': 'Must specify a tenant network id'}).notEmpty();
    validator.check(displayName, {'code': 400, 'msg': 'A tenant network must contain a display name'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return TenantNetworksDAO.updateTenantNetwork(id, displayName, callback);
};

/**
 * Delete a tenant network
 *
 * @param  {Context}    ctx             The context of the current request
 * @param  {String}     id              The id of the tenant network to delete
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var deleteTenantNetwork = module.exports.deleteTenantNetwork = function(ctx, id, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Must be a global administrator user to delete a tenant network'}).isGlobalAdministratorUser(ctx);
    validator.check(id, {'code': 400, 'msg': 'Must specify a tenant network id'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return TenantNetworksDAO.deleteTenantNetwork(id, callback);
};

/**
 * Add the provided tenant(s) to a tenant network
 *
 * @param  {Context}    ctx                 The context of the current request
 * @param  {String}     tenantNetworkId     The id of the tenant network to which to add the provided tenant aliases
 * @param  {String[]}   tenantAlises        The tenant aliases to add to the tenant network
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var addTenantAliases = module.exports.addTenantAliases = function(ctx, tenantNetworkId, tenantAliases, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Must be a global administrator user to update a tenant network'}).isGlobalAdministratorUser(ctx);
    validator.check(tenantNetworkId, {'code': 400, 'msg': 'Must specify a tenant network id'}).notEmpty();
    validator.check(tenantAliases, {'code': 400, 'msg': 'Must specify a list of tenant aliases to add'}).notNull();
    validator.check(tenantAliases.length, {'code': 400, 'msg': 'Must specify at least one tenant alias to add'}).notNull();
    _.each(tenantAliases, function(tenantAlias) {
        validator.check(TenantsAPI.getTenant(tenantAlias), {'code': 400, 'msg': util.format('Tenant with alias "%s" does not exist', tenantAlias)}).notEmpty();
    });
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return TenantNetworksDAO.addTenantAliases(tenantNetworkId, tenantAliases, callback);
};

/**
 * Remove the provided tenant(s) from a tenant network
 *
 * @param  {Context}    ctx                 The context of the current request
 * @param  {String}     tenantNetworkId     The id of the tenant network from which to remove the provided tenant aliases
 * @param  {String[]}   tenantAlises        The tenant alias(es) to remove from the tenant network
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var removeTenantAliases = module.exports.removeTenantAliases = function(ctx, tenantNetworkId, tenantAliases, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Must be a global administrator user to update a tenant network'}).isGlobalAdministratorUser(ctx);
    validator.check(tenantNetworkId, {'code': 400, 'msg': 'Must specify a tenant network id'}).notEmpty();
    validator.check(tenantAliases, {'code': 400, 'msg': 'Must specify a list of tenant aliases to remove'}).notNull();
    validator.check(tenantAliases.length, {'code': 400, 'msg': 'Must specify at least one tenant alias to remove'}).notNull();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return TenantNetworksDAO.removeTenantAliases(tenantNetworkId, tenantAliases, callback);
};
