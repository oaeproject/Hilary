/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var assert = require('assert');

var AuthzUtil = require('oae-authz/lib/util');
var Context = require('oae-context').Context;
var TenantAPI = require('oae-tenants');
var Tenant = require('oae-tenants/lib/model').Tenant;

var User = require('oae-principals/lib/model.user').User;
var PrincipalsAPI = require('oae-principals');
var PrincipalsUtil = require('oae-principals/lib/util');


describe('Principals', function() {

    describe('Utilities', function() {

        var _tenant = null;
        before(function(callback) {
            TenantAPI.getTenantByPort(2001, function(err, ten) {
                assert.ok(!err);
                _tenant = ten;
                callback();
            });
        });


        /**
         * Create a number of users that will be used inside of the tests
         * @param  {Test}                test               Standard nodeunit test object
         * @param  {Function(userIds)}   callback           Standard callback function
         * @param  {Array<String>}       callback.userIds   Array of user ids for the created users
         */
        var createUsers = function(ctx, callback) {
            var r = Math.round(Math.random() * 1000000);
            var userIds = [];
            PrincipalsAPI.createUser(ctx, 'nm417-' + r, 'password' + r, 'public', 'en_GB', 'Europe/London', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs', function(err, id) {
                assert.ok(!err);
                userIds.push(id);
                PrincipalsAPI.createUser(ctx, 'simong-' + r, 'password' + r, 'loggedin', 'en_GB', 'Europe/London', 'Simon', 'Gaeremynck', 'Simon Gaeremynck', function(err, id) {
                    assert.ok(!err);
                    userIds.push(id);
                    PrincipalsAPI.createUser(ctx, 'branden-' + r, 'password' + r, 'private', 'en_CA', 'Canada/Central', 'Branden', 'Visser', 'Branden Visser', function(err, id) {
                        assert.ok(!err);
                        userIds.push(id);
                        PrincipalsAPI.createUser(ctx, 'physx-' + r, 'password' + r, 'public', 'en_GB', 'Europe/London', 'Bert', 'Pareyn', 'Bert Pareyn', function(err, id) {
                            assert.ok(!err);
                            userIds.push(id);
                            callback(userIds);
                        });
                    });
                });
            });
        };

        /**
         * Create a number of groups that will be used inside of the tests
         * @param  {Test}                test               Standard nodeunit test object
         * @param  {Array<String>}       userIds            Array of userIds for the available users in the test
         * @param  {Function(groupids)}  callback           Standard callback function
         * @param  {Array<String>}       callback.groupids  Array of group ids for the created groupids
         */
        var createGroups = function(ctx, userIds, callback) {
            var r = Math.round(Math.random() * 1000000);
            var groupids = [];
            PrincipalsAPI.createGroup(ctx, 'oae-team-' + r, 'OAE Team', 'The OAE Team', 'public', 'yes', [], {}, function(err, groupId) {
                assert.ok(!err);
                groupids.push(groupId);
                PrincipalsAPI.createGroup(ctx, 'backend-team-' + r, 'Back-end Team', 'The Back-end Team', 'public', 'yes', [], {}, function(err, groupId) {
                    assert.ok(!err);
                    groupids.push(groupId);
                    PrincipalsAPI.createGroup(ctx, 'ui-team-' + r, 'The UI Team', 'UI Team', 'public', 'yes', [], {}, function(err, groupId) {
                        assert.ok(!err);
                        groupids.push(groupId);
                        callback(groupids);
                    });
                });
            });
        };


        /**
         * Test the getPrincipal utility function
         */
        it('Test get principal', function(callback) {
            var ctx = new Context(_tenant, null);
            createUsers(ctx, function(userIds) {
                ctx = new Context(_tenant, new User(_tenant.alias, userIds[0]));
                createGroups(ctx, userIds, function(groupids) {
                    // Get an existing user
                    PrincipalsUtil.getPrincipal(ctx, userIds[0], function(err, user) {
                        assert.ok(!err);
                        assert.ok(user);
                        assert.equal(user.id, userIds[0]);
                        assert.equal(user.firstName, 'Nicolaas');
                        // Get a non-existing user
                        PrincipalsUtil.getPrincipal(ctx, 'non-existing-user', function(err, user) {
                            assert.ok(err);
                            assert.ok(!user);
                            // Get an existing group
                            PrincipalsUtil.getPrincipal(ctx, groupids[0], function(err, group) {
                                assert.ok(!err);
                                assert.ok(group);
                                assert.equal(group.id, groupids[0]);
                                // Get a non-existing group
                                PrincipalsUtil.getPrincipal(ctx, 'non-existing-group', function(err, group) {
                                    assert.ok(err);
                                    assert.ok(!group);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test the getPrincipals utility function
         */
        it('Test get principals', function(callback) {
            var ctx = new Context(_tenant, null);
            createUsers(ctx, function(userIds) {
                ctx = new Context(_tenant, new User(_tenant.alias, userIds[0]));
                createGroups(ctx, userIds, function(groupids) {
                    // Get existing users
                    PrincipalsUtil.getPrincipals(ctx, [userIds[0], userIds[1], userIds[2]], function(err, users) {
                        assert.ok(!err);
                        assert.ok(users);
                        assert.equal(_.keys(users).length, 3);
                        // Get existing groups
                        PrincipalsUtil.getPrincipals(ctx, [groupids[0], groupids[1]], function(err, groups) {
                            assert.ok(!err);
                            assert.ok(groups);
                            assert.equal(_.keys(groups).length, 2);
                            // Get existing users/groups
                            PrincipalsUtil.getPrincipals(ctx, [groupids[0], userIds[0], userIds[1], groupids[1], userIds[3]], function(err, principals) {
                                assert.ok(!err);
                                assert.ok(principals);
                                assert.equal(_.keys(principals).length, 5);
                                // Get existing users, of which some don't exist
                                PrincipalsUtil.getPrincipals(ctx, [userIds[0], 'non-existing-user', userIds[2]], function(err, users) {
                                    assert.ok(err);
                                    assert.ok(!users);
                                    // Get existing groups, of which some don't exist
                                    PrincipalsUtil.getPrincipals(ctx, [groupids[0], 'non-existing-group'], function(err, groups) {
                                        assert.ok(err);
                                        assert.ok(!groups);
                                        // Get existing users/groups, of which some don't exist
                                        PrincipalsUtil.getPrincipals(ctx, [groupids[0], userIds[0], 'non-existing-user', userIds[1], 'non-existing-group'], function(err, principals) {
                                            assert.ok(err);
                                            assert.ok(!principals)
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test the function that's used to create a cross-tenant unique principal id
         */
        it('Test identifiers', function() {
            var id = AuthzUtil.toUuid("g", "cam", "oae-team");
            assert.ok(PrincipalsUtil.isGroup(id));

            id = AuthzUtil.toUuid("u", "cam", "simong");
            assert.ok(PrincipalsUtil.isUser(id));

            id = AuthzUtil.toUuid("c", "cam", "foo.doc");
            assert.ok(!PrincipalsUtil.isUser(id));
            assert.ok(!PrincipalsUtil.isUser(id));
        });

    });
});
