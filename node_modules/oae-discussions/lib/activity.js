/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-discussion');
var MessageBoxAPI = require('oae-messagebox');
var MessageBoxUtil = require('oae-messagebox/lib/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var TenantsUtil = require('oae-tenants/lib/util');
var User = require('oae-principals/lib/model').User;

var DiscussionsAPI = require('./api');
var DiscussionsConstants = require('./constants').DiscussionsConstants;
var DiscussionsDAO = require('./internal/dao');

/////////////////////
/////////////////////
// POST ACTIVITIES //
/////////////////////
/////////////////////

///////////////////////
// DISCUSSION-CREATE //
///////////////////////

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_CREATE,
    {
        'groupBy': [{'actor': true}],
        'notifications': {
            'email': true,
            'emailTemplateModule': 'oae-discussion',
            'emailTemplateId': 'notify-discussion-share'
        }
    }
);

/*!
 * Post a discussion-create activity when a user creates a discussion.
 */
DiscussionsAPI.on(DiscussionsConstants.events.CREATED_DISCUSSION, function(ctx, discussion, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('discussion', discussion.id, {'discussion': discussion});
    var activitySeed = new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

////////////////////////////////////////////////////////
// DISCUSSION-UPDATE and DISCUSSION-UPDATE-VISIBILITY //
////////////////////////////////////////////////////////

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE, {
    'groupBy': [
        // "Discussion Item was updated by 5 users"
        {'object': true}
    ],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-discussion',
        'emailTemplateId': 'notify-discussion-update'
    }
});

/*!
 * Post either a discussion-update or discussion-update-visibility activity when a user updates a discussion's metadata.
 */
DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION, function(ctx, oldDiscussion, newDiscussion) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('discussion', newDiscussion.id, {'discussion': newDiscussion});

    // We discriminate between general updates and visibility changes.
    // If the visibility has changed, we fire a visibility changed activity *instead* of an update activity
    var activityType = null;
    if (newDiscussion.visibility === oldDiscussion.visibility) {
        activityType = DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE;
    } else {
        activityType = DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

////////////////////////
// DISCUSSION-MESSAGE //
////////////////////////

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_MESSAGE,
    {
        'groupBy': [{'target': true}],
        'notifications': {
            'email': true,
            'emailTemplateModule': 'oae-discussion',
            'emailTemplateId': 'notify-discussion-message'
        }
    }
);

/*!
 * Post a discussion-message activity when a user comments on a discussion
 */
DiscussionsAPI.on(DiscussionsConstants.events.CREATED_DISCUSSION_MESSAGE, function(ctx, discussion, message) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('discussion-message', message.id, {'discussionId': discussion.id, 'message': message});
    var targetResource = new ActivityModel.ActivitySeedResource('discussion', discussion.id, {'discussion': discussion});
    var activitySeed = new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_MESSAGE, millis, ActivityConstants.verbs.POST, actorResource, objectResource, targetResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

////////////////////////////////////////////////////
// DISCUSSION-SHARE and DISCUSSION-ADD-TO-LIBRARY //
////////////////////////////////////////////////////

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_ADD_TO_LIBRARY, {'groupBy': [
    // "Branden Visser added 5 items to his library"
    {'actor': true}
]});

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_SHARE,
    {
        'groupBy': [
            // "Branden Visser shared a discussion with 5 users and groups"
            {'actor': true, 'object': true},

            // "Branden Visser shared 8 discussions with OAE Team"
            {'actor': true, 'target': true}
        ],
        'notifications': {
            'email': true,
            'emailTemplateModule': 'oae-discussion',
            'emailTemplateId': 'notify-discussion-share'
        }
    }
);

/*!
 * Post a discussion-share or discussion-add-to-library activity based on discussion sharing
 */
DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION_MEMBERS, function(ctx, discussion, updatedPrincipalIds) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('discussion', discussion.id, {'discussion': discussion});
    var activitySeeds = [];

    // Post an activity for each user / group the discussion was shared with. Each is a discussion-share activity where
    // the object is the discussion item and the target is the user or group with which it was shared.
    _.each(updatedPrincipalIds, function(principalId) {
        var targetResourceType = (PrincipalsUtil.isGroup(principalId)) ? 'group' : 'user';
        var targetResource = new ActivityModel.ActivitySeedResource(targetResourceType, principalId);
        if (targetResource.resourceId === actorResource.resourceId) {
            // Users can't "share" with themselves, they actually "add it to their library"
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_ADD_TO_LIBRARY, millis, ActivityConstants.verbs.ADD, actorResource, objectResource));
        } else {
            // A user shared discussion with some other user, fire the discussion share activity
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_SHARE, millis, ActivityConstants.verbs.SHARE, actorResource, objectResource, targetResource));
        }
    });
});



////////////////////////
// ACTIVITY PRODUCERS //
////////////////////////

/*!
 * Produces a persistent 'discussion' activity entity
 */
ActivityAPI.registerActivityEntityProducer('discussion', function(activityType, entityType, resource, callback) {
    var discussion = (resource.resourceData && resource.resourceData.discussion) ? resource.resourceData.discussion : null;

    // If the discussion item was fired with the resource, use it instead of fetching
    if (discussion) {
        return callback(null, _createPersistentDiscussionActivityEntity(discussion));
    }

    DiscussionsDAO.getDiscussion(resource.resourceId, function(err, discussion) {
        if (err) {
            return callback(err);
        }

        return callback(null, _createPersistentDiscussionActivityEntity(discussion));
    });
});

/**
 * Create the persistent discussion entity that can be transformed into an activity entity for the UI.
 *
 * @param  {Discussion}     discussion      The discussion that provides the data for the entity.
 * @return {Object}                         An object containing the entity data that can be transformed into a UI discussion activity entity
 * @api private
 */
var _createPersistentDiscussionActivityEntity = function(discussion) {
    var persistentEntity = {'objectType': 'discussion', 'discussion': discussion};
    persistentEntity[ActivityConstants.properties.OAE_ID] = discussion.id;
    return persistentEntity;
};

/*!
 * Produces an persistent activity entity that represents a message that was posted
 */
ActivityAPI.registerActivityEntityProducer('discussion-message', function(activityType, entityType, resource, callback) {
    var discussionId = resource.resourceData.discussionId;
    var message = resource.resourceData.message;
    DiscussionsDAO.getDiscussion(discussionId, function(err, discussion) {
        if (err) {
            return callback(err);
        }

        MessageBoxUtil.createPersistentMessageActivityEntity(message, function(err, entity) {
            if (err) {
                return callback(err);
            }

            // Store the discussion id and visibility on the entity
            // as these are required for routing the activities.
            entity.discussionId = discussion.id;
            entity.discussionVisibility = discussion.visibility;
            return callback(null, entity);
        });
    });
});



//////////////////////
// ACTIVITY ROUTERS //
//////////////////////

/*!
 * Routes an activity that occurred for a discussion activity entity
 */
ActivityAPI.registerActivityRouter('discussion', function(activityType, entityType, entity, callback) {
    // Extract the OAE ID from the activity object to get the discussion id
    return _routeDiscussion(activityType, entityType, entity[ActivityConstants.properties.OAE_ID], entity.discussion.visibility, callback);
});

/*!
 * Routes an activity that occurred for a message activity entity
 */
ActivityAPI.registerActivityRouter('discussion-message', function(activityType, entityType, entity, callback) {
    // First collect the routes for the parent discussion item
    _routeDiscussion(activityType, entityType, entity.discussionId, entity.discussionVisibility, function(err, routes, propagation) {
        if (err) {
            return callback(err);
        }

        // In addition to the discussion routes, a message routes to recent contributors of a discussion
        MessageBoxAPI.getRecentContributions(entity.message.messageBoxId, null, null, function(err, contributorIds) {
            if (err) {
                return callback(err);
            } else if (contributorIds.length === 0) {
                return callback(null, routes, propagation);
            }

            // Push the contributorIds into both the activity and notification routes
            routes.activity = routes.activity || [];
            routes.activity = _.union(routes.activity, contributorIds);

            routes.notification = routes.notification || [];
            routes.notification = _.union(routes.notification, contributorIds);

            return callback(null, routes, propagation);
        });
    });
});

/**
 * Produce routes for the given discussion.
 *
 * @param  {String}    activityType            The type of activity for which the routes are being produced
 * @param  {String}    entityType              The type of entity the discussion is (e.g., actor, object, target)
 * @param  {String}    discussionId            The ID of the discussion for which to produce routes
 * @param  {String}    visibility              The visibility of the discussion
 * @param  {Function}  callback                Invoked when the process completes
 * @param  {Object}    callback.err            An error that occurred, if any
 * @param  {String[]}  callback.routes         The routes for the given discussion
 * @param  {Object}    callback.propagation    How the entity data should be propagated among activity routes
 * @api private
 */
var _routeDiscussion = function(activityType, entityType, discussionId, visibility, callback) {
    // Get lists of all the direct and indirect members of this discussion, keyed by their role
    ActivityUtil.getAllAuthzMembersByRole(discussionId, function(err, specify) {
        if (err) {
            return callback(err);
        }

        // Resolve the routes of the discussion item
        var activityRoutes = _.extend({}, specify);
        var notificationRoutes = null;
        var isDiscussionCreateActivity = (activityType === DiscussionsConstants.activity.ACTIVITY_DISCUSSION_CREATE);
        var isShareActivity = (activityType === DiscussionsConstants.activity.ACTIVITY_DISCUSSION_SHARE || activityType === DiscussionsConstants.activity.ACTIVITY_DISCUSSION_ADD_TO_LIBRARY);
        var isCommentActivity = (activityType === DiscussionsConstants.activity.ACTIVITY_DISCUSSION_MESSAGE);
        var isUpdateActivity = (activityType === DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE);
        if (isShareActivity && entityType === ActivityConstants.entityTypes.OBJECT) {
            // When a discussion is shared with another user (or a user adds it to their library), the 'members' of that discussion object are not interested
            delete activityRoutes[DiscussionsConstants.roles.MEMBER];
        } else if (isCommentActivity || isUpdateActivity) {
            // When a mesage is posted or a discussion is updated,
            // we must notify all the manager users of the discussion
            notificationRoutes = specify[DiscussionsConstants.roles.MANAGER];
        } else if (isDiscussionCreateActivity) {
            // When creating a discussion with a members list, we should notify those who were on the members list of the discussion
            notificationRoutes = _.uniq(_.flatten(_.values(specify)));
        }

        // Filter out non-user members, as only users receive notifications
        if (notificationRoutes) {
            notificationRoutes = _.filter(notificationRoutes, function(route) {
                return PrincipalsUtil.isUser(route);
            });
        }

        activityRoutes = _.uniq(_.flatten(_.values(activityRoutes)));

        // Resolve the propagation of the discussion. If the discussion is public or loggedin, we propagate to all users
        specify = _.uniq(_.flatten(_.values(specify)));
        var propagation = {'type': ActivityConstants.entityPropagation.ALL};
        if (visibility !== 'public' && visibility !== 'loggedin') {
            propagation = {'type': ActivityConstants.entityPropagation.SPECIFY, 'specify': specify};
        }

        return callback(null, {'activity': activityRoutes, 'notification': notificationRoutes}, propagation);
    });
};



///////////////////////////
// ACTIVITY TRANSFORMERS //
///////////////////////////

/*!
 * Transform the discussion persistent activity entities into UI-friendly ones
 */
ActivityAPI.registerActivityEntityTransformer('discussion', function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};

    var allRevisionIds = [];
    _.each(activityEntities, function(entities, activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.each(entities, function(entity, entityId) {
            // Transform the persistent entity with its up-to-date preview status
            transformedActivityEntities[activityId][entityId] = _transformPersistentDiscussionActivityEntity(ctx, entity);
        });
    });
    return callback(null, transformedActivityEntities);
});

/**
 * Transform a discussion object into an activity entity suitable to be displayed in an activity stream.
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityTransformer
 *
 * @param  {Context}           ctx         The context of the current request
 * @param  {Object}            entity      The persisted activity entity to transform.
 * @param  {Object}            previews    An object that holds the thumbnailUri and wideUri if they are present on the revision.
 * @return {ActivityEntity}                The activity entity that represents the given discussion item
 */
var _transformPersistentDiscussionActivityEntity = function(ctx, entity) {
    var discussion = entity.discussion;

    // Generate URLs for this activity
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var globalId = baseUrl + '/api/discussion/' + discussion.id;
    var resource = AuthzUtil.getResourceFromId(discussion.id);
    var profileUrl = baseUrl + '/discussion/' + resource.tenantAlias + '/' + resource.resourceId;

    var opts = {};
    opts.url = profileUrl;
    opts.displayName = discussion.displayName;
    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = discussion.id;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = discussion.visibility;
    opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = discussion.profilePath;
    return new ActivityModel.ActivityEntity('discussion', globalId, opts);
};

/*!
 * Transform the persisted message activity entities into UI-friendly ones
 */
ActivityAPI.registerActivityEntityTransformer('discussion-message', function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            var discussionId = entity.message.messageBoxId;
            var resource = AuthzUtil.getResourceFromId(discussionId);
            var profilePath = '/discussion/' + resource.tenantAlias + '/' + resource.resourceId;
            var urlFormat = '/api/discussion/' + discussionId + '/messages/%s';
            transformedActivityEntities[activityId][entityId] = MessageBoxUtil.transformPersistentMessageActivityEntity(ctx, entity.message, entity.messageContext, profilePath, urlFormat);
        });
    });
    return callback(null, transformedActivityEntities);
});
