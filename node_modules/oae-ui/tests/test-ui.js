/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var UIAPI = require('oae-ui');
var UIConstants = require('oae-ui/lib/constants').UIConstants;
var UITestUtil = require('oae-ui/lib/test/util');

describe('UI', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user to the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user to the gt tenant
    var anonymousGTRestContext = null;
    // Rest context that can be used for anonymous requests on the global tenant
    var anonymousGlobalRestContext = null;
    // Rest context that can be used for authenticated requests on the global tenant
    var globalAdminRestContext = null;

    // Even though the UI uses capitals for color declarations, we have to use lower case
    // here as LESS will convert all RGB codes to lower case.
    var DEFAULT_BODY_BACKGROUND_COLOR = 'eceae5';

    /**
     * Function that will fill up the anonymous tenant and global REST context
     */
    before(function(callback) {
        // Fill up anonymous rest contexts
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        anonymousGTRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        // Fill up the authenticated global rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the cambridge administrator rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    describe('Widget config aggregation', function() {

        /**
         * Test that verifies that the aggregated widget configs can be retrieved
         */
        it('verify widget configs', function(callback) {
            // Get the widget configs on the global admin server
            RestAPI.UI.getWidgetManifests(anonymousGlobalRestContext, function(err, data) {
                assert.ok(!err);
                assert.ok(data['topnavigation']);
                assert.equal(data['topnavigation'].id, 'topnavigation');
                assert.equal(data['topnavigation'].path, 'oae-core/topnavigation/');
                assert.ok(data['topnavigation']['i18n']);

                // Get the widget configs on the tenant server
                RestAPI.UI.getWidgetManifests(anonymousCamRestContext, function(err, data) {
                    assert.ok(!err);
                    assert.ok(data['topnavigation']);
                    assert.equal(data['topnavigation'].id, 'topnavigation');
                    assert.equal(data['topnavigation'].path, 'oae-core/topnavigation/');
                    assert.ok(data['topnavigation']['i18n']);
                    callback();
                });
            });
        });
    });

    describe('Batch static files', function() {

        /**
         * Test that verifies that static files can be batch requested
         */
        it('verify batch static get', function(callback) {
            var files = ['/ui/index.html', '/node_modules/oae-core/footer/js/footer.js', '/nonexisting'];
            // Get these files on the global admin server
            RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, files, function(err, batch1) {
                assert.ok(!err);
                assert.equal(_.keys(batch1).length, 3);
                // Verify that the /ui/index.html file is present
                assert.ok(batch1[files[0]]);
                assert.equal(typeof batch1[files[0]], 'string');
                // Verify that the /node_modules/oae-core/footer/js/footer.js file is present
                assert.ok(batch1[files[1]]);
                assert.equal(typeof batch1[files[1]], 'string');
                // Verify that the /nonexisting file is not present
                assert.equal(batch1[files[2]], null);

                // Get these files on the tenant server
                RestAPI.UI.getStaticBatch(anonymousCamRestContext, files, function(err, batch2) {
                    assert.ok(!err);
                    assert.equal(_.keys(batch2).length, 3);
                    // Verify that the /ui/index.html file is present
                    assert.ok(batch2[files[0]]);
                    assert.equal(typeof batch2[files[0]], 'string');
                    // Verify that the /node_modules/oae-core/footer/js/footer.js file is present
                    assert.ok(batch2[files[1]]);
                    assert.equal(typeof batch2[files[1]], 'string');
                    // Verify that the /nonexisting file is not present
                    assert.equal(batch2[files[2]], null);
                    // Make sure that the files from batch1 and batch2 are the same
                    assert.equal(batch1[files[0]], batch2[files[0]]);
                    assert.equal(batch1[files[1]], batch2[files[1]]);

                    // Do another set of batch requests with some of the same files, to make sure they are being server from cache
                    files = ['/node_modules/oae-core/footer/css/footer.css', '/ui/index.html'];
                    // Get these files on the global admin server
                    RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, files, function(err, batch3) {
                        assert.ok(!err);
                        assert.equal(_.keys(batch3).length, 2);
                        // Verify that the /ui/index.html file is present
                        assert.ok(batch3[files[0]]);
                        assert.equal(typeof batch3[files[0]], 'string');
                        // Verify that the /node_modules/oae-core/footer/js/footer.js file is present
                        assert.ok(batch3[files[1]]);
                        assert.equal(typeof batch3[files[1]], 'string');
                        // Make sure that /ui/index.html has the same content in both batches
                        assert.equal(batch3['/ui/index.html'], batch1['/ui/index.html']);

                        // Get these files on the tenant server
                        RestAPI.UI.getStaticBatch(anonymousCamRestContext, files, function(err, batch4) {
                            assert.ok(!err);
                            assert.equal(_.keys(batch4).length, 2);
                            // Verify that the /ui/index.html file is present
                            assert.ok(batch4[files[0]]);
                            assert.equal(typeof batch4[files[0]], 'string');
                            // Verify that the /node_modules/oae-core/footer/js/footer.js file is present
                            assert.ok(batch4[files[1]]);
                            assert.equal(typeof batch4[files[1]], 'string');
                            // Make sure that /ui/index.html has the same content in both batches
                            assert.equal(batch4['/ui/index.html'], batch2['/ui/index.html']);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a single file can be retrieved through a batch request
         */
        it('verify batch single file', function(callback) {
            var file = '/ui/index.html';
            // Test this on the global admin server
            RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, file, function(err, data) {
                assert.ok(!err);
                assert.equal(_.keys(data).length, 1);
                assert.ok(data[file]);
                assert.equal(typeof data[file], 'string');

                // Test this on the tenant server
                RestAPI.UI.getStaticBatch(anonymousCamRestContext, file, function(err, data) {
                    assert.ok(!err);
                    assert.equal(_.keys(data).length, 1);
                    assert.ok(data[file]);
                    assert.equal(typeof data[file], 'string');
                    callback();
                });
            });
        });

        /**
         * Test that verifies that requesting an empty set of static files fails
         */
        it('verify validation', function(callback) {
            // Test on the global admin server
            RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, null, function(err, data) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!data);
                RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, [], function(err, data) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.ok(!data);
                    // Verify that only absolute paths can be used, and no private
                    // server files can be retrieved
                    var file = '/../Hilary/config.js';
                    RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, file, function(err, data) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!data);

                        // Test on the tenant server
                        RestAPI.UI.getStaticBatch(anonymousCamRestContext, null, function(err, data) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            assert.ok(!data);
                            RestAPI.UI.getStaticBatch(anonymousCamRestContext, [], function(err, data) {
                                assert.ok(err);
                                assert.equal(err.code, 400);
                                assert.ok(!data);
                                // Verify that only absolute paths can be used, and no private
                                // server files can be retrieved
                                RestAPI.UI.getStaticBatch(anonymousGlobalRestContext, file, function(err, data) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);
                                    assert.ok(!data);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Skinning', function() {

        /**
         * Reset any modifications we do to the skin.
         */
        beforeEach(function(callback) {
            var skinConfig = {
                'body-background-color': '#' + DEFAULT_BODY_BACKGROUND_COLOR
            };
            UITestUtil.updateSkinAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, skinConfig, function(err) {
                assert.ok(!err);
                callback();
            });
        });

        /**
         * Gets the variable value from the output of `RestAPI.UI.getSkinVariables`.
         *
         * @param  {String}    name        The name of the variable to get
         * @param  {Object}    variables   The variables metadata to search for the variable value
         * @return {String}                 The value of the variable. `null` if it could not be found
         */
        var _getSkinVariableValue = function(name, variables) {
            var value = null;
            _.each(variables.results, function(section) {
                _.each(section.subsections, function(subsection) {
                    _.each(subsection.variables, function(variableMetadata) {
                        if (variableMetadata.name === name) {
                            value = variableMetadata.value || variableMetadata.defaultValue;
                        }
                    });
                });
            });

            return value;
        };

        /**
         * Checks if the output from the skin api is correct.
         * It verifies:
         *  * a 200
         *  * text/css header
         *  * minified css
         *  * The value for the body background color
         *
         * @param  {RestContext}    restCtx                 The RestContext to use.
         * @param  {String}         expectedBackgroundColor The background color we expect in the skin file for the body selector.
         * @param  {Function}       callback                Standard callback method.
         * @api private
         */
        var checkSkin = function(restCtx, expectedBackgroundColor, callback) {
            RestAPI.UI.getSkin(restCtx, function(err, css, response) {
                assert.ok(!err);
                // We should get back some CSS.
                assert.ok(css);
                assert.equal(response.headers['content-type'], 'text/css');

                // Should be minified, so no comments or linebreaks
                assert.equal(css.indexOf('\n'), -1);
                assert.equal(css.indexOf('/*'), -1);

                // Check the background color.
                var bodyBackgroundColorRegex = new RegExp('body\{background-color:#([0-9a-zA-Z]+)\}');
                var match = css.match(bodyBackgroundColorRegex);
                assert.ok(match);
                assert.equal(match[1], expectedBackgroundColor);
                callback();
            });
        };

        /**
         * Updates the skin for the cambridge tenant with the `skinConfig` value and check the skin.
         * The global admin and GT skin will be checked for no changes.
         *
         * @param  {RestContext}    restCtx                     The RestContext to use.
         * @param  {Object}         skinConfig                  The value that should be posted to the admin config.
         * @param  {String}         expectedOldBackgroundColor  The background color we expect in the skin file for the body selector before we do the update.
         * @param  {String}         expectedNewBackgroundColor  The background color we expect in the skin file for the body selector after we do the update.
         * @param  {Function}       callback                    Standard callback method.
         * @api private
         */
        var updateSkinAndCheck = function(restCtx, skinConfig, expectedOldBackgroundColor, expectedNewBackgroundColor, callback) {
            // Sanity-check correct parsing
            checkSkin(anonymousCamRestContext, expectedOldBackgroundColor, function() {

                // Update the cambridge skin.
                UITestUtil.updateSkinAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, skinConfig, function(err) {
                    assert.ok(!err);

                    // Check the skin for the new value.
                    checkSkin(anonymousCamRestContext, expectedNewBackgroundColor, function() {

                        // Check the global admin skin is unchanged.
                        checkSkin(globalAdminRestContext, DEFAULT_BODY_BACKGROUND_COLOR, function() {

                            // Check the GT skin is unchanged.
                            checkSkin(anonymousGTRestContext, DEFAULT_BODY_BACKGROUND_COLOR, callback);
                        });
                    });
                });
            });
        };

        /**
         * Gets the skin variables for a tenant and checks the structure.
         *
         * @param  {String}   tenantAlias               The alias of the tenant for which the skin variables should be checked.
         * @param  {String}   expectedBackgroundColor   The expected value for the body background color variable.
         * @param  {Function} callback                  Standard callback method.
         * @api private
         */
        var checkVariables = function(tenantAlias, expectedBackgroundColor, callback) {
            RestAPI.UI.getSkinVariables(globalAdminRestContext, tenantAlias, function(err, data) {
                assert.ok(!err);

                // Verify the sections
                assert.ok(data.results);
                assert.ok(data.results.length > 0);
                assert.equal(data.results[0].name, 'Branding');
                assert.equal(data.results[1].name, 'Text colors');

                // Verify the subsection for the `Branding` section
                assert.ok(data.results[0].subsections.length > 0);
                assert.equal(data.results[0].subsections[0].name, 'main');

                // Verify the subsection for the `Colors` section, as this should
                // have an additional subsection
                assert.ok(data.results[1].subsections.length > 0);
                assert.equal(data.results[1].subsections[0].name, 'main');
                assert.equal(data.results[1].subsections[1].name, 'Link colors');

                // Verify the body background color for the `Branding` section
                assert.ok(data.results[0].subsections[0].variables.length > 0);
                assert.equal(data.results[0].subsections[0].variables[0].type, UIConstants.variables.types.COLOR);
                assert.equal(data.results[0].subsections[0].variables[0].value, expectedBackgroundColor);
                callback();
            });
        };

        /*
         * Updating the config should result in a change in the skin.
         */
        it('verify updating the skin', function(callback) {
            updateSkinAndCheck(anonymousCamRestContext, {'body-background-color': '#123456'}, DEFAULT_BODY_BACKGROUND_COLOR, '123456', callback);
        });

        /*
         * Submitting incorrect CSS values should not break the CSS skin generation.
         */
        it('verify that submitting incorrect CSS values does not break skinning', function(callback) {
            updateSkinAndCheck(anonymousCamRestContext, {'body-background-color': '}'}, DEFAULT_BODY_BACKGROUND_COLOR, DEFAULT_BODY_BACKGROUND_COLOR, callback);
        });

        /**
         * As it's possible for an admin to submit whatever they want,
         * the skin generation should not break if the submitted value is not JSON.
         */
        it('verify that submitting incorrect JSON does not break skinning', function(callback) {
            updateSkinAndCheck(anonymousCamRestContext, 'totally not JSON', DEFAULT_BODY_BACKGROUND_COLOR, DEFAULT_BODY_BACKGROUND_COLOR, callback);
        });

        /*
         * When submitting skin values with keys that are not used,
         * this should not break skin generation.
         */
        it('verify that submitting unused key does not break skinning', function(callback) {
            updateSkinAndCheck(anonymousCamRestContext, {'not-used': 'foo'}, DEFAULT_BODY_BACKGROUND_COLOR, DEFAULT_BODY_BACKGROUND_COLOR, callback);
        });

        /*
         * Submitting incorrect JSON, should not result in improper variables retrieval
         */
        it('verify that submitting incorrect JSON does not break variables retrieval', function(callback) {
            updateSkinAndCheck(anonymousCamRestContext, 'totally not JSON', DEFAULT_BODY_BACKGROUND_COLOR, DEFAULT_BODY_BACKGROUND_COLOR, function() {
                // Check the variables.
                checkVariables(global.oaeTests.tenants.cam.alias, undefined, callback);
            });
        });

        /*
         * When you update the config with new skin values,
         * these should be returned in the variables endpoint.
         */
        it('verify that variables get updated with values from the config', function(callback) {
            // Sanity check the default value.
            checkVariables(global.oaeTests.tenants.cam.alias, '#eceae5', function() {
                // Update the skin.
                updateSkinAndCheck(anonymousCamRestContext, {'body-background-color': '#123456'}, DEFAULT_BODY_BACKGROUND_COLOR, '123456', function() {
                    // Check if the value is updated in the variables feed.
                    checkVariables(global.oaeTests.tenants.cam.alias, '#123456', callback);
                });
            });
        });

        /*
         * Only admins should be able to retrieve skin variables.
         */
        it('verify only administrators can retrieve skin variabes', function(callback) {
            RestAPI.UI.getSkinVariables(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, function(err, data) {
                assert.equal(err.code, 401);
                RestAPI.UI.getSkinVariables(anonymousCamRestContext, global.oaeTests.tenants.cam.alias, function(err, data) {
                    assert.equal(err.code, 401);
                    RestAPI.UI.getSkinVariables(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, data) {
                        assert.ok(!err);
                        RestAPI.UI.getSkinVariables(camAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, data) {
                            assert.ok(!err);
                            RestAPI.UI.getSkinVariables(camAdminRestContext, global.oaeTests.tenants.gt.alias, function(err, data) {
                                assert.equal(err.code, 401);
                                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                                    assert.ok(!err);

                                    var user = _.values(users)[0];
                                    RestAPI.UI.getSkinVariables(user.restContext, global.oaeTests.tenants.gt.alias, function(err, data) {
                                        assert.equal(err.code, 401);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies when a URL variable is found in a skin, it is replaced by the hash file mapping
         */
        it('verify skin url variables are overridden by hash file mappings', function(callback) {
            // Create a fresh tenant to test against so we can ensure there are no skin variable overrides yet
            var testTenantAlias = TestsUtil.generateTestUserId();
            TestsUtil.createTenantWithAdmin(testTenantAlias, testTenantAlias, function(err, testTenant, testTenantAdminRestContext) {
                assert.ok(!err);

                RestAPI.UI.getSkinVariables(globalAdminRestContext, testTenantAlias, function(err, variables) {
                    assert.ok(!err);

                    // Get the default logo url, parsing out the single quotes
                    var defaultLogoUrl = _getSkinVariableValue('institutional-logo-url', variables).slice(1, -1);

                    // Create some mock hash mappings to test with
                    var hashes = {
                        '/test/directory': '/test/target/directory',
                        '/test/color': '/test/target/color'
                    };

                    // Applying a mapping for the default logo url to some optimized path
                    hashes[defaultLogoUrl] = '/optimized/logo/path';

                    // Configure the optimized path mapping into the UI module
                    UIAPI.init(fs.realpathSync('../3akai-ux'), hashes, function(err) {
                        assert.ok(!err);

                        // Verify that if the tenant has NO variable overrides, the default values are run through the optimized path hash
                        RestAPI.UI.getSkin(testTenantAdminRestContext, function(err, css, response) {
                            assert.ok(!err);

                            // Verify that the default logoUrl was replaced
                            assert.equal(css.indexOf(defaultLogoUrl), -1, 'Expected the default logo url to be replaced');
                            assert.notEqual(css.indexOf('\'/optimized/logo/path\''), -1, 'Expected the default logo url to be replaced');

                            // Now we update the skin configuration to ensure overridden values get replaced
                            var skinConfig = {
                                'institutional-logo-url': '\'/test/directory\'',            // This should be replaced as it matches the test directory
                                'branding-image-url': '\'http://www.google.ca/haha.png\'',  // This should not be replaced because it doesn't have a mapping
                                'body-background-color': '\'/test/color\''                  // This should not be replaced because it is not a url
                            };

                            // Set the skin configuration so that only the institutional logo should be substituted by the hashed files
                            UITestUtil.updateSkinAndWait(globalAdminRestContext, testTenantAlias, skinConfig, function(err) {
                                assert.ok(!err);

                                RestAPI.UI.getSkin(testTenantAdminRestContext, function(err, css, response) {
                                    assert.ok(!err);

                                    // Verify /test/directory was replaced
                                    assert.equal(css.indexOf('/test/directory'), -1, 'Expected the generated skin to have "/test/directory" replaced by the mapping');
                                    assert.notEqual(css.indexOf('\'/test/target/directory\''), -1, 'Expected the generated skin to have "/test/directory" replaced by the mapping');

                                    // Verify google.ca was not replaced
                                    assert.notEqual(css.indexOf('\'http://www.google.ca/haha.png\''), -1, 'Expected the generated skin to not have "http://www.google.ca/haha.png" replaced by anything');

                                    // Verify /test/color was not replaced
                                    assert.notEqual(css.indexOf('\'/test/color\''), -1, 'Did not expected the generated skin to replace "/test/color"');
                                    assert.equal(css.indexOf('/test/target/color'), -1, 'Did not expected the generated skin to replace "/test/color"');

                                    // Mingle with the spacing to make sure we're somewhat robust for user input
                                    skinConfig = {'institutional-logo-url': '  \'  /test/directory  \'  '};
                                    UITestUtil.updateSkinAndWait(globalAdminRestContext, testTenantAlias, skinConfig, function(err) {
                                        assert.ok(!err);

                                        RestAPI.UI.getSkin(testTenantAdminRestContext, function(err, css, response) {
                                            assert.ok(!err);

                                            // Verify /test/directory was replaced, it is ok if we lost the excessive space
                                            assert.equal(css.indexOf('/test/directory'), -1, 'Expected the generated skin to have "/test/directory" replaced by the mapping');
                                            assert.notEqual(css.indexOf('\'/test/target/directory\''), -1, 'Expected the generated skin to have "/test/directory" replaced by the mapping');
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
