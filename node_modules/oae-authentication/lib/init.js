
/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var AuthenticationAPI = require('oae-authentication');
var Cassandra = require('oae-util/lib/cassandra');
var LocalStrategy = require('passport-local');
var OAE = require('oae-util/lib/oae');

module.exports = function(app, callback) {
    registerConfigAdminRestEndpoints(app);
    ensureSchema(callback);
}

/**
 * Ensure that the session table gets created. If they already exist, this method will not
 * do anything
 * @param {Function(err)}    callback       A function(err), specifying whether or not there was an error creating the schema.
 * @param {Object}           callback.err   Error object, containing the error message
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamily('Sessions', "CREATE COLUMNFAMILY Sessions(sid text PRIMARY KEY, data text);", callback);
};

/**
 * Register all the endpoints required for interacting with the configuration admin interface.
 */
var registerConfigAdminRestEndpoints = function(app) {
    var LocalStrategy = new AuthenticationAPI.LocalStrategyWrapper(OAE.serverTenant);
    app.server.passport.use(LocalStrategy);

    app.server.post('/api/auth/login', app.server.passport.authenticate(LocalStrategy.name), function(req, res) {
        // This callback only gets called when we log in succesfully.
        return res.send(200, req.user);
    });

    app.server.post('/api/auth/logout', function(req, res) {
        req.logOut();
        res.send(200, {'loggedout': 'true'});
    });
};
