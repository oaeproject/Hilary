/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var TenantsUtil = require('oae-tenants/lib/util');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

var CasStrategy = require('./strategy');

module.exports = function() {
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias) {
        return AuthenticationConfig.getValue(tenantAlias, AuthenticationConstants.providers.CAS, 'enabled');
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant) {
        // We fetch the config values *in* the getPassportStrategy so it can be re-configured at run-time.
        var casHost = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'url');
        var basePath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'basepath');
        var loginPath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'loginpath');
        var logoutPath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'logoutpath');
        var validatePath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'validatepath');
        var mapDisplayName = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'mapDisplayName');
        var mapEmail = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'mapEmail');
        var mapLocale = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'mapLocale');
        var mapTimezone = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'mapTimezone');

        var serverBase = TenantsUtil.getBaseUrl(tenant);

        var passportStrategy = new CasStrategy({
            'allow': '',
            'appLogoutPath': '/api/auth/logout',
            'casBasePath': basePath,
            'casHost': casHost,
            'loginPath': loginPath,
            'logoutPath': logoutPath,
            'serverBase': serverBase,
            'service': AuthenticationUtil.constructCallbackUrl(tenant, AuthenticationConstants.providers.CAS),
            'validatePath': validatePath
        }, function(casResponse, done) {
            log().trace({
                'tenant': tenant,
                'casResponse': casResponse
            }, 'Received CAS authentication callback.');

            var username = casResponse.user;
            var displayName = casResponse.user;
            var opts = {};

            // If the CAS server returned attributes we try to map them to OAE profile parameters
            if (casResponse.attributes) {
                // Try to use a mapped displayname rather than the default CAS id
                var mappedDisplayName = _renderTemplate(mapDisplayName, casResponse.attributes);
                if (mappedDisplayName) {
                    displayName = mappedDisplayName;
                }

                // Set the optional profile parameters
                _setProfileParameter(opts, 'email', mapEmail, casResponse.attributes);
                _setProfileParameter(opts, 'locale', mapLocale, casResponse.attributes);
                _setProfileParameter(opts, 'timezone', mapTimezone, casResponse.attributes);
            }

            var context = new Context(tenant, null);
            AuthenticationAPI.getOrCreateUser(context, AuthenticationConstants.providers.CAS, username, displayName, opts, done);
        });
        return passportStrategy;
    };

    // Register our strategy.
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.CAS, strategy);
};

/**
 * Set one of the optional user profile parameters.
 * If the template or the result of the rendered template returns an empty string,
 * the profile parameter will not be set.
 *
 * @param  {Object}     profileParameters       The object where the profile parameter should be filled in
 * @param  {String}     profileParameterName    The name of the parameter. ex: `locale`, `email`, etc
 * @param  {String}     template                The underscore template that can be used to generate the value for this profile parameter
 * @param  {Object}     attributes              A set of CAS attributes that can be used in the template
 * @api private
 */
var _setProfileParameter = function(profileParameters, profileParameterName, template, attributes) {
    var renderedString = _renderTemplate(template, attributes);
    if (renderedString) {
        profileParameters[profileParameterName] = renderedString;
    }
};

/**
 * Render an underscore template.
 * In case the template was empty or an error occurred when rendering the template,
 * null will be returned.
 *
 * @param  {String}     template    The underscore template that should be ran
 * @param  {Object}     attributes  A set of CAS attributes that can be used in the template
 * @return {String}                 The rendered template or null
 * @api private
 */
var _renderTemplate = function(template, attributes) {
    if (template) {
        try {
            var renderedString = _.template(template)(attributes);
            if (renderedString) {
                return renderedString;
            }
        } catch (err) {
            log().warn({
                'err': err,
                'template': template,
                'attributes': attributes
            }, 'Could not map a CAS attribute to an OAE profile parameter');
        }
    }

    return null;
};
