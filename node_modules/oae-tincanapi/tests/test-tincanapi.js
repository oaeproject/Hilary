/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * visibilitys and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var express = require('express');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var ActivityTestsUtil = require('oae-activity/lib/test/util');
var TinCanConfig = require('oae-config').config('oae-tincanapi');

describe('TinCanAPI', function() {

    // Will be set as a function that is executed when sending requests to the API
    var onRequest = null;

    // Rest context that can be used every time we need to make a request as a cam tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a gt tenant admin
    var gtAdminRestContext = null;

    /**
    * Initializes the admin REST contexts
    */
    before(function(callback) {

        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the gt admin rest context
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

        // Create a new express application to mock an LRS
        var app = express();
        app.use(express.bodyParser({}));

        app.post('/', function(req, res) {
            onRequest(req);
            res.send(200);
        });

        // Listen to a specific port
        var server = app.listen(3000);

        // Set the endpoint for LRS
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-tincanapi/lrs/endpoint', 'http://localhost:3000', function(err) {
            assert.ok(!err);
            callback();
        });
    });

    /**
    * Disables the LRS for the tenant after each test
    */
    afterEach(function(callback){
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-tincanapi/lrs/enabled', false, function(err) {
            assert.ok(!err);
            callback();
        });
    });

    /**
     * Test that verifies that TinCan API statements are sent to a configurable LRS.
     */
    it('Verify post TinCan statements', function(callback) {

        // First enable LRS since the default value is false
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-tincanapi/lrs/enabled', true, function(err) {
            assert.ok(!err);

            // Create a test user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                _.each(users, function(user, id) {
                    var userCtx = user.restContext;

                    var activitiesCollected = false;
                    var testLinks = [];
                    var testUser = user;

                    onRequest = function(req) {

                        // Check each activity if it matches the original
                        _.each(req.body, function(val, key) {
                            assert.equal(val.actor.name, testUser.user.displayName);
                            assert.equal(val.object.id, testLinks[key].id);
                            assert.equal(val.object.definition.name['en-US'], testLinks[key].displayName);
                            assert.equal(val.object.definition.description['en-US'], testLinks[key].description);
                        });

                        if (activitiesCollected) {
                            callback();
                        }
                    };

                    // Create a new link
                    RestAPI.Content.createLink(userCtx, 'Link1', 'The first link', 'public', 'http://www.google.be', [], [], function(err, link) {
                        assert.ok(!err);

                        // Store the created link
                        testLinks.push(link);

                        // Create a new link
                        RestAPI.Content.createLink(userCtx, 'Link2', 'The second link', 'private', 'http://www.google.fr', [], [], function(err, link) {
                            assert.ok(!err);

                            // Store the created link
                            testLinks.push(link);

                            // Create a new link
                            RestAPI.Content.createLink(userCtx, 'Link3', 'The third link', 'public', 'http://www.google.nl', [], [], function(err, link) {
                                assert.ok(!err);

                                // Store the created link
                                testLinks.push(link);

                                // Force an activity collection cycle
                                ActivityTestsUtil.collectAndGetActivityStream(userCtx, null, null, function(err, activityStream) {
                                    assert.ok(!err);

                                    activitiesCollected = true;
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that no statements are posted when the LRS is disabled
     */
    it('Verify if TinCan integration is enabled for the tenant', function(callback) {

        // First enable LRS since the default value is false
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-tincanapi/lrs/enabled', false, function(err) {
            assert.ok(!err);

            // Create a test user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                _.each(users, function(user, id) {
                    var userCtx = user.restContext;

                    onRequest = function(req) {
                        assert.fail(null, null, 'No statements should be sent when LRS integration is disabled');
                    };

                    // Create a new link
                    RestAPI.Content.createLink(userCtx, 'Link1', 'The first link', 'public', 'http://www.google.be', [], [], function(err, link) {
                        assert.ok(!err);

                        // Force the activities
                        ActivityTestsUtil.collectAndGetActivityStream(userCtx, null, null, function(err, activityStream) {
                            assert.ok(!err);
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies if statements are (not) sent when activities are received from multiple tenants with different LRS-enabled values
     */
    it('Verify if statements are (not) sent when having multiple tenants with different enabled values', function(callback) {

        // First enable LRS for the camTenant since the default value is false
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-tincanapi/lrs/enabled', true, function(err) {
            assert.ok(!err);

            // Create a new user for the CamTenant
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, camUsers) {
                assert.ok(!err);

                // Store the camUser
                var camUser = camUsers[Object.keys(camUsers)[0]];
                var camUserCtx = camUser.restContext;

                var activitiesCollected = false;
                var tincanSent = false;

                onRequest = function(req) {

                    // Check each activity if it matches the original
                    _.each(req.body, function(val, key) {
                        assert.equal(val.actor.name, camUser.user.displayName);
                        assert.equal(val.actor.account.name, camUser.user.publicAlias);
                    });

                    if (activitiesCollected) {
                        callback();
                    }
                };

                // Create a new link for the CamTenant
                RestAPI.Content.createLink(camUserCtx, 'Link1', 'The first link', 'public', 'http://www.google.be', [], [], function(err, link) {
                    assert.ok(!err);

                    // Create a new user for the GTTenant
                    TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, gtUsers) {
                        assert.ok(!err);

                        // Store the gtUser
                        var gtUser = gtUsers[Object.keys(gtUsers)[0]];
                        var gtUserCtx = gtUser.restContext;

                        // Create a new link for the GTTenant
                        RestAPI.Content.createLink(gtUserCtx, 'Link2', 'The second link', 'private', 'http://www.google.nl', [], [], function(err, link) {
                            assert.ok(!err);

                            // Force the activities for the camUser                     
                            ActivityTestsUtil.collectAndGetActivityStream(camUserCtx, null, null, function(err, activityStream) {
                                assert.ok(!err);

                                // Force the activities for the gtUser
                                ActivityTestsUtil.collectAndGetActivityStream(gtUserCtx, null, null, function(err, activityStream) {
                                    assert.ok(!err);

                                    activitiesCollected = true;
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
