/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var querystring = require('querystring');
var request = require('request');
var urlAPI = require('url');
var youtube = require('youtube-feeds');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-preview-processor');

var LinkProcessorUtil = require('oae-preview-processor/lib/processors/link/util');
var PreviewUtil = require('oae-preview-processor/lib/util');

var YOUTUBE_REGEX = /^http(s)?:\/\/(www\.)?youtube\.com\/watch/;

/**
 * @borrows Interface.test as YoutubeProcessor.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    // Don't bother with non-link content items.
    if (contentObj.resourceSubType !== 'link') {
        return callback(null, -1);
    }

    // Check if it's a Youtube URL.
    if (YOUTUBE_REGEX.test(contentObj.link)) {
        return callback(null, 10);
    } else {
        return callback(null, -1);
    }
};

/**
 * @borrows Interface.generatePreviews as YoutubeProcessor.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {
    // Get the movie identifier.
    var id = _getId(contentObj.link);

    // Get the metadata for this video.
    youtube.video(id, function(err, data) {
        if (err) {
            log().error({'err': err}, 'Could not talk to the youtube api.');
            return callback({'code': 500, 'msg': err.message});
        }


        if (data && data.thumbnail && data.thumbnail.hqDefault) {
            var opts = {
                'displayName': data.title,
                'description': data.description
            };

            // Download it.
            var imageUrl = data.thumbnail.hqDefault;
            var path = ctx.baseDir + '/youtube.jpg';
            PreviewUtil.downloadRemoteFile(imageUrl, path, function(err, path) {
                if (err) {
                    return callback(err);
                }

                LinkProcessorUtil.generatePreviewsFromImage(ctx, path, opts, callback);
            });
        } else {
            return callback(false, true);
        }
    });
};

/**
 * Gets a YouTube movie identifier out of a url.
 * If the url is 'http://www.youtube.com/watch?v=bXdb3fvDOMI', 'bXdb3fvDOMI' will be returned.
 *
 * @param  {String} url The YouTube URL.
 * @return {String}     The movie identifier (or null.)
 * @api private
 */
var _getId = function(url) {
    try {
        var parsedUrl = urlAPI.parse(url);
        if (!/youtube\.com/.test(parsedUrl.hostname)) {
            return null;
        }
        var qs = querystring.parse(parsedUrl.query);
        return qs.v;
    } catch (err) {
        return null;
    }
};
