/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var fs = require('fs');

var IO = require('oae-util/lib/io');

var datadir = __dirname + '/data/';

describe('IO', function() {

    describe('#copyFile()', function(callback) {

        /**
         * Test that verifies that copyFiles creates a new file with the same contents as the original
         */
        it('verify a new file is created with duplicate content', function(callback) {
            var sourceFile = datadir + 'banditos.txt';
            var destFile = datadir + 'refreshments.txt';

            // Verify that the dest file doesn't already exist
            fs.stat(destFile, function(err) {
                assert.ok(err);
                assert.equal(err.code, 'ENOENT');
            });

            IO.copyFile(sourceFile, destFile, function(err) {
                assert.ok(!err);
                // Verify that the source and dest files contain the same data
                IO.readFile(sourceFile, function(err, sourceText) {
                    assert.ok(!err);
                    IO.readFile(destFile, function(err, destText){
                        assert.ok(!err);
                        assert.equal(sourceText, destText);
                        callback();
                    });
                });
            });
        });
    });

    describe('#moveFile()', function(callback) {

        /**
         * Test that verifies that moveFile renames a file
         */
        it('verify a file is renamed', function(callback) {
            var sourceFile = datadir + 'refreshments.txt';
            var destFile = datadir + 'refreshments-banditos.txt';
            IO.moveFile(sourceFile, destFile, function(err) {
                assert.ok(!err);

                // Verify that the source file is removed
                fs.stat(sourceFile, function(err){
                    assert.equal(err.code, 'ENOENT');
                });

                // Verify that the source and dest files contain the same data
                IO.readFile(datadir + 'banditos.txt', function(err, sourceText) {
                    assert.ok(!err);
                    IO.readFile(destFile, function(err, destText){
                        assert.ok(!err);
                        assert.equal(sourceText, destText);
                        fs.unlink(destFile, callback);
                    });
                });
            });
        });
    });

    describe('#destroyStream()', function() {

        /**
         * Test that verifies that a stream is fully destroyed.
         */
        it('verify a stream is properly destroyed.', function() {
            var stream = fs.createReadStream('.');

            // Register our pre-destroy listener.
            stream.on('error', function(err) {
                assert.fail('This listener should have been removed.');
            });
            stream.on('close', function() {
                assert.fail('This listener should have been removed.');
            });

            // Destroy the stream, the above listeners should NOT be called.
            IO.destroyStream(stream);

            // Register a new error listener as the the test would otherwise fail.
            stream.on('error', function(err) {});
            stream.emit('error');
            stream.emit('close');
        });
    });
});
