/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var util = require('util');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var AuthzUtil = require('oae-authz/lib/util');
var ContentConfig = require('oae-config').config('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PrincipalsUtil = require('oae-principals/lib/util');
var Signature = require('oae-util/lib/signature');
var TenantsUtil = require('oae-tenants/lib/util');

/**
 * If a URI is known a download link can be generated which doesn't go trough to Cassandra.
 *
 * @param  {String}     principalId     The principal that will be using this url
 * @param  {String}     tenantAlias     The alias of the tenant where the content that the uri points to originated from.
 * @param  {String}     uri             The content uri
 * @return {String}                     The url that can be used in a browser to download the file.
 */
var getDownloadUrlForUri = module.exports.getDownloadUrlForUri = function(principalId, tenantAlias, uri) {
    principalId = principalId || '';
    var body = principalId + ':' + uri;
    var settings = _getPreviewsExpireSettings(tenantAlias);
    var sig = Signature.createRollingSignature(tenantAlias, settings.duration, settings.offset, body);
    return util.format('/api/download/signed?uri=%s&signature=%s&expires=%s', uri, sig.signature, sig.expires);
};

/**
 * Creates the appropriate signature for a piece of content.
 *
 * @param  {Context}    ctx             Standard context object, representing the currently logged in user and its tenant
 * @param  {String}     contentId       The ID of the piece of content that needs to be signed.
 * @param  {Number}     lastModified    The timestamp when the content was last modified. This will ensure that the signature changes if a new version is uploaded.
 * @return {Object}                     A signature.
 */
var signContent = module.exports.signContent = function(ctx, contentId, lastModified) {
    var tenantAlias = (contentId) ? AuthzUtil.getResourceFromId(contentId).tenantAlias : '';
    var principalId = (ctx && ctx.user()) ? ctx.user().id : '';
    var settings = _getPreviewsExpireSettings(tenantAlias);
    var body = principalId + ':' + contentId + ':' + lastModified;
    var signature = Signature.createRollingSignature(tenantAlias, settings.duration, settings.offset, body);
    signature.lastModified = lastModified;
    return signature;
};

/**
 * Get the id for the comment messagebox that holds comments for this content item.
 *
 * @param  {String} contentId   The id of the content item for which to create the messagebox id
 * @return {String}             The messagebox id for the messagebox that will hold this content items comments
 */
var getContentCommentMessageBoxId = module.exports.getContentCommentMessageBoxId = function(contentId) {
    return util.format('%s#comments', contentId);
};

/**
 * Create the persistent content entity that can be transformed into an activity entity for the UI.
 *
 * @param  {Content}   content      The content item that provides the data for the entity.
 * @return {Object}                 An object containing the entity data that can be transformed into a UI content activity entity
 */
var createPersistentContentActivityEntity = module.exports.createPersistentContentActivityEntity = function(content) {
    var persistentEntity = {'objectType': 'content', 'content': content};
    persistentEntity[ActivityConstants.properties.OAE_ID] = content.id;
    return persistentEntity;
};

/**
 * Transform a content object into an activity entity suitable to be displayed in an activity stream.
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityTransformer
 *
 * @param   {Context}           ctx         The context of the current request
 * @param   {Object}            entity      The persisted activity entity to transform.
 * @param   {Object}            previews    An object that holds the thumbnailUri and wideUri if they are present on the revision.
 * @return  {ActivityEntity}                The activity entity that represents the given content item
 */
var transformPersistentContentActivityEntity = module.exports.transformPersistentContentActivityEntity = function(ctx, entity, previews) {
    var content = entity.content;

    var tenant = ctx.tenant();
    var principalId = (ctx.user() ? ctx.user().id : null);

    // The tenant alias for this piece of content.
    var tenantAlias = AuthzUtil.getResourceFromId(content.id).tenantAlias;
    var baseUrl = TenantsUtil.getBaseUrl(tenant);

    var globalId = baseUrl + '/api/content/' + content.id;
    var profileUrl = baseUrl + '/content/' + content.id;

    var opts = {};

    // The `content.displayName` is the displayName of the piece of content *at the time when the activity was generated*.
    // Some content items get their displayName updated via the preview processor (ex: youtube links).
    // We use the updated displayName (if it's available) as it looks nicer to the user.
    opts.displayName = content.displayName;
    opts.url = profileUrl;

    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = content.id;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = content.visibility;
    opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = content.profilePath;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_TYPE] = content.resourceSubType;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_MIMETYPE] = content.mime;
    opts.ext[ContentConstants.activity.PROP_OAE_REVISION_ID] = content.latestRevisionId;
    if (previews.thumbnailUri) {
        var width = PreviewConstants.SIZES.IMAGE.THUMBNAIL;
        var thumbnailUrl = getDownloadUrlForUri(principalId, tenantAlias, previews.thumbnailUri);
        opts.image = new ActivityModel.ActivityMediaLink(thumbnailUrl, width, width);
    }
    if (previews.wideUri) {
        var wideUrl = getDownloadUrlForUri(principalId, tenantAlias, previews.wideUri);
        opts.ext[ContentConstants.activity.PROP_OAE_WIDE_IMAGE] = new ActivityModel.ActivityMediaLink(wideUrl, PreviewConstants.SIZES.IMAGE.WIDE_WIDTH, PreviewConstants.SIZES.IMAGE.WIDE_HEIGHT);
    }

    return new ActivityModel.ActivityEntity('content', globalId, opts);
};

/**
 * Create the persistent comment entity that can be transformed into an activity entity for the UI.
 *
 * @param   {Content}   content     The content item for which the comment was posted
 * @param   {Comment}   comment     The comment that was posted
 * @param   {Object}    [context]   Some context of the comment, such as the parent if the comment is a reply.
 * @return  {Object}                An object containing the entity data that can be transformed into a UI comment activity entity
 */
var createPersistentCommentActivityEntity = module.exports.createPersistentCommentActivityEntity = function(content, comment, context) {
    comment.visibility = content.visibility;
    var persistentEntity = {
        'objectType': 'content-comment',
        'contentId': content.id,
        'comment': comment,
        'commentContext': context
    };
    persistentEntity[ActivityConstants.properties.OAE_ID] = comment.id;
    return persistentEntity;
};

/**
 * Create a comment activity entity that can be used in an activity stream.
 *
 * @param  {Context}        ctx                 The context of the current request
 * @param  {String}         contentId           The content id this comment is associated to
 * @param  {Comment}        comment             The comment object that was posted
 * @param  {Object}         [context]           Some context about the comment
 * @param  {Comment}        [context.parent]    The parent of the comment, if it is a reply
 * @return {ActivityEntity}                        The activity entity that represents the given comment data
 */
var transformPersistentCommentActivityEntity = module.exports.transformPersistentCommentActivityEntity = function(ctx, contentId, comment, context) {
    var tenant = ctx.tenant();
    var entity = _transformCommentActivityEntity(ctx, contentId, comment);

    // Transform the parent if there is one
    if (context.parent) {
        entity[ContentConstants.activity.PROP_OAE_COMMENT_REPLY_TO] = _transformCommentActivityEntity(ctx, contentId, context.parent);
    }

    return entity;
};

/**
 * Transforms the given comment object into an activity entity for an activity stream.
 *
 * @param  {Context}        ctx         The context of the current request
 * @param  {String}         contentId   The content id this comment is associated to
 * @param  {Comment}        comment     The comment object to transform
 * @return {ActivityEntity}             The transformed activity entity that represents the given comment object
 */
var _transformCommentActivityEntity = function(ctx, contentId, comment) {
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var commentUrl = baseUrl + '/content/' + contentId;
    var profilePath = '/content/' + contentId;

    // Note that the globalId is used as a canonical reference and should not depend on whether or not
    // the tenant is using http or https.
    var globalId = 'http//' + tenant.host + '/api/content/' + contentId + '/comments/' + comment.created;

    var opts = {};
    opts.url = commentUrl;
    opts.content = comment.body;

    opts.author = PrincipalsUtil.transformPersistentUserActivityEntity(ctx, comment.createdBy.id, comment.createdBy);
    opts.published = comment.created;

    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = comment.id;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = comment.visibility;
    opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = profilePath;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_ID] = contentId;
    opts.ext[ContentConstants.activity.PROP_OAE_COMMENT_THREAD_KEY] = comment.threadKey;

    return new ActivityModel.ActivityEntity('content-comment', globalId, opts);
};

/**
 * Retrieves the expire settings from the config.
 *
 * @param  {String} tenantAlias The alias of the tenant for which we should retrieve the preview expire settings.
 * @return {Object}             An object that holds a duration and offset to generate a rolling expiring signature.
 * @api private
 */
var _getPreviewsExpireSettings = function(tenantAlias) {
    // These settings will be used to generate rolling signatures,
    // A rolling signature always has a minimum value (the offset) which we set to the `expiration_minimum` config value.
    // A value that is situated in the interval [0, duration] then gets added to calculate the expiration time for the signature.
    // In order to obtain a signature that is valid for an `expiration_maximum` time, we subtract the minimum from the maximum.
    var min = parseInt(ContentConfig.getValue(tenantAlias, 'previews', 'expiration_minimum'), 10);
    var max = parseInt(ContentConfig.getValue(tenantAlias, 'previews', 'expiration_maximum'), 10);
    var offset = min;
    var duration = max - min;

    // In case the expiration settings are misconfigured,
    // we'll fall back to some hardcoded defaults
    // TODO: This is really a validation issue in the global admin UI
    // and should not happen here.
    if (duration < 0 || offset < 0) {
        duration = 15*60;
        offset = 15*60;
    }
    return {
        'duration': duration,
        'offset': offset
    };
};

