/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var mkdirp = require('mkdirp');
var Path = require('path');
var ShortId = require('shortid');
var util = require('util');

var Cassandra = require('oae-util/lib/cassandra');
var Config = require('oae-config').config('oae-content');
var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('local-storage');
var Revision = require('oae-content/lib/model').Revision;
var Validator = require('oae-util/lib/validator').Validator;



/**
 * An implementation that will store files on a local directory.
 * Unless the directory you're writing to is a mounted NFS/Samba share,
 * you probably don't want to use this in production as it would restrict
 * you from scaling your app servers horizontally.
 */


//////////////////////
// Storage methods. //
//////////////////////

/**
 * @borrows Interface.store as Local.store
 */
var store = module.exports.store = function(ctx, file, callback) {
    var rootDir = _getRootDir(ctx);
    var date = new Date();
    var id = ShortId.generate();
    var dir = util.format('%d/%d/%d/%d/%d/%s', date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), id);
    var localDir = util.format('%s/%s', rootDir, dir);

    // Create the required directories.
    _ensureDirectoryExists(localDir, function(err) {
        if (err) {
            return callback(err);
        }

        // Something that this storage backend can re-locate the file with later on.
        var uri = util.format('%s/%s', dir, file.filename);

        // Move the file.
        var newPath = util.format('%s/%s', localDir, file.filename);
        log().trace('Moving %s to %s.', file.path, newPath);
        IO.moveFile(file.path, newPath, function(err) {
            if (err) {
                return callback(err);
            }
            callback(null, 'local:' + uri);
        });
    });
};

/**
 * @borrows Interface.getDownloadLink as Local.getDownloadLink
 */
var getDownloadLink = module.exports.getDownloadLink = function(ctx, uri) {
    return {'code':204, 'url': '/files/' + uri.split(':')[1]};
};

/////////////////////
// Private methods //
/////////////////////

/**
 * @param  {Context}    ctx     The current execution context.
 * @return {String}             The absolute path to the directory where files should be stored.
 * @api private
 */
var _getRootDir = function(ctx) {
    return Config.getValue(ctx.tenant().alias, 'storage', 'local-dir');
};

/**
 * Creates the directory structure and applies the correct file mode.
 * @param {String}   dir            The absolute path to the directory that needs to exist.
 * @param {Function} callback       A callback method.
 * @param {Object}   callback.err   An error object (if any)
 * @api private
 */
var _ensureDirectoryExists = function(dir, callback) {
    mkdirp(dir, function(err, made) {
        if (err) {
            return callback({'code': 500, 'msg': err});
        }
        callback();
    });
};
