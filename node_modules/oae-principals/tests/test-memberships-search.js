/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

describe('Memberships Search', function() {

    /*!
     * Get the document with the specified id from the search results.
     *
     * @param   {SearchResult}  results     The search results object
     * @param   {String}        docId       The id of the document to search
     * @returns {Object}                    The search document. `null` if it didn't exist
     */
    var _getDocById = function(results, docId) {
        for (var i = 0; i < results.results.length; i++) {
            var doc = results.results[i];
            if (doc.id === docId) {
                return doc;
            }
        }
        return null;
    };

    // REST contexts we can use to do REST requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    before(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    /**
     * Test that verifies group membership search returns groups, and that unlinking group members results in those results no longer
     * returning in searches.
     */
    it('verify user memberships search', function(callback) {
        var jackUsername = TestsUtil.generateTestUserId('jack');
        var groupParentAlias = TestsUtil.generateTestUserId('groupParent');
        var groupChildAlias = TestsUtil.generateTestUserId('groupChild');

        var doerUsername = TestsUtil.generateTestUserId('doer');
        RestAPI.User.createUser(camAdminRestContext, doerUsername, 'password', 'Doer', null, function(err, doer) {
            var doerRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, doerUsername, 'password');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);

                // Create a group hierarchy to ensure they all show up in 'jack's group membership search
                RestAPI.Group.createGroup(doerRestContext, groupParentAlias, groupParentAlias, groupParentAlias, 'public', 'no', [], [], function(err, groupParent) {
                    assert.ok(!err);

                    RestAPI.Group.createGroup(doerRestContext, groupChildAlias, groupChildAlias, groupChildAlias, 'public', 'no', [], [], function(err, groupChild) {
                        assert.ok(!err);

                        TestsUtil.generateGroupHierarchy(doerRestContext, [groupParent.id, groupChild.id, jack.id], 'member', function(err) {
                            assert.ok(!err);

                            // Search all and ensure all the groups in the hierarchy are in the results
                            SearchTestsUtil.searchAll(doerRestContext, 'memberships', [jack.id], null, function(err, results) {
                                assert.ok(!err);
                                assert.ok(_getDocById(results, groupChild.id));
                                assert.ok(_getDocById(results, groupParent.id));

                                // Unlink the hierarchy by removing jack from the 'bottom' group
                                var changes = {};
                                changes[jack.id] = false;
                                RestAPI.Group.setGroupMembers(doerRestContext, groupChild.id, changes, function(err) {
                                    assert.ok(!err);

                                    // Verify the same memberships search is now empty
                                    SearchTestsUtil.searchAll(doerRestContext, 'memberships', [jack.id], null, function(err, results) {
                                        assert.ok(!err);
                                        assert.equal(results.total, 0);
                                        assert.equal(results.results.length, 0);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies paging works correctly in memberships search.
     */
    it('verify paging works correctly in memberships search', function(callback) {
        var jackUsername = TestsUtil.generateTestUserId('jack');
        var groupParentAlias = TestsUtil.generateTestUserId('groupParent');
        var groupChildAlias = TestsUtil.generateTestUserId('groupChild');

        // Create the user with which we'll set up the data
        var doerUsername = TestsUtil.generateTestUserId('doer');
        RestAPI.User.createUser(camAdminRestContext, doerUsername, 'password', 'Doer', null, function(err, doer) {
            var doerRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, doerUsername, 'password');

            // Create the user whose memberships to check
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);

                // Create a group hierarchy to ensure we have memberships
                RestAPI.Group.createGroup(doerRestContext, groupParentAlias, groupParentAlias, groupParentAlias, 'public', 'no', [], [], function(err, groupParent) {
                    assert.ok(!err);

                    RestAPI.Group.createGroup(doerRestContext, groupChildAlias, groupChildAlias, groupChildAlias, 'public', 'no', [], [], function(err, groupChild) {
                        assert.ok(!err);

                        TestsUtil.generateGroupHierarchy(doerRestContext, [groupParent.id, groupChild.id, jack.id], 'member', function(err) {
                            assert.ok(!err);

                            // Search only 2 documents to get the expected ids for paging afterward
                            SearchTestsUtil.searchRefreshed(doerRestContext, 'memberships', [jack.id], {'limit': 2, 'start': 0}, function(err, results) {
                                assert.ok(!err);
                                assert.ok(results.results);
                                assert.ok(results.results.length, 2);

                                // Get the ids of the first 2 expected results.
                                var firstId = results.results[0].id;
                                var secondId = results.results[1].id;

                                assert.ok(firstId);
                                assert.ok(secondId);

                                // Verify page 1 gives the first id. We don't need to refresh since we haven't updated anything since the first refresh.
                                RestAPI.Search.search(doerRestContext, 'memberships', [jack.id], {'limit': 1, 'start': 0}, function(err, results) {
                                    assert.ok(!err);
                                    assert.ok(results.results);
                                    assert.ok(results.results.length, 1);
                                    assert.equal(results.results[0].id, firstId);
                                    assert.equal(results.results[0].resourceType, 'group');
                                    assert.equal(results.results[0].profilePath, '/group/' + results.results[0].id);

                                    // Verify page 2 gives the second id
                                    RestAPI.Search.search(doerRestContext, 'memberships', [jack.id], {'limit': 1, 'start': 1}, function(err, results) {
                                        assert.ok(!err);
                                        assert.ok(results.results);
                                        assert.ok(results.results.length, 1);
                                        assert.equal(results.results[0].id, secondId);
                                        assert.equal(results.results[0].resourceType, 'group');
                                        assert.equal(results.results[0].profilePath, '/group/' + results.results[0].id);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});

