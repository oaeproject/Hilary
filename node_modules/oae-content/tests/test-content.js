/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var User = require('oae-principals/lib/model.user').User;
var PrincipalAPI = require('oae-principals');
var Context = require('oae-context').Context;

var ContentAPI = require('oae-content');
var Content = require('oae-content/lib/model').Content;
var RolesAPI = require('oae-roles');


describe('Content', function() {


    // Data used inside of the tests
    var tenant1 = new Tenant('cam', 'Cambridge University', 'Cambridge University description', 2001);
    var tenant2 = new Tenant('gt', 'Georgia Tech', 'Georgia Tech description', 2002);

    /**
     * Create a number of contexts and users that will be used inside of a test
     * @param  {Function(contexts)}  callback           Standard callback function
     * @param  {Array<Context>}      callback.contexts  Array of context objects that represent a request cycle and contain
     *                                                  the current user and the current tenant
     */
    var setUpUsers = function(callback) {
        var r = Math.floor(Math.random() * 10000);
        var contexts = [new Context(tenant1, new User(tenant1, 'u:cam:nm417-' + r, 'nm417-' + r, 'public', 'en_GB', 'BST', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs')),
                        new Context(tenant1, new User(tenant1, 'u:cam:simong-' + r, 'simong-' + r, 'loggedin', 'en_GB', 'BST', 'Simon', 'Gaeremynck', 'Simon Gaeremynck')),
                        new Context(tenant1, new User(tenant1, 'u:cam:bp323-' + r, 'bp323-' + r, 'private', 'en_GB', 'BST', 'Bert', 'Pareyn', 'Bert Pareyn')),
                        new Context(tenant1, new User(tenant1, 'u:cam:branden-' + r, 'branden-' + r, 'private', 'en_GB', 'BST', 'Branden', 'Visser', 'Branden Visser')),
                        new Context(tenant1, new User(tenant1, 'u:cam:arwhyte-' + r, 'arwhyte-' + r, 'public', 'en_GB', 'BST', 'Anthony', 'Whyte', 'Anthony Whyte')),
                        new Context(tenant2, new User(tenant2, 'u:gt:stuart-' + r, 'stuart-' + r, 'public', 'en_GB', 'BST', 'Stuart', 'Freeman', 'Stuart Freeman'))];
        var done = 0;
        var createUserDone = function(err) {
            if (err) {
                throw err;
            }
            done++;
            if (done === contexts.length) {
                callback(contexts);
            }
        };
        // Create users
        for (var u = 0; u < contexts.length; u++) {
            var user = contexts[u].user();
            PrincipalAPI.createUser(contexts[u], user.username, 'password' + u, user.visibility, null, null, user.firstName, user.lastName, user.displayName, createUserDone);
        }
    };

    /**
     * Run a number of asserts on a piece of content. This function checks whether a user has access to the content and
     * whether or not it can be seen in the library of the creator
     * @param  {Test}               test                Standard nodeunit test object
     * @param  {Context}            ctx                 Standard context object, representing the currently logged user and its tenant
     * @param  {String}             creator             The user id for which we want to check the library
     * @param  {Content}            contentObj          The content object we'll be running checks for
     * @param  {Boolean}            expectAccess        Whether or not we expect the current user to have access to the piece of content
     * @param  {Boolean}            expectManage        Whether or not we expect the current user to be able to manage the piece of content
     * @param  {Boolean}            expectInLibrary     Whether or not we expect the current user to see the item in the creator's library
     * @param  {Function}           callback            Standard callback function executed when all checks have finished
     */
    var checkPieceOfContent = function(ctx, libraryToCheck, contentObj, expectAccess, expectManage, expectInLibrary, callback) {
        // Check whether the content can be retrieved
        ContentAPI.getContent(ctx, contentObj.contentId, function(err, retrievedContent) {
            if (expectAccess) {
                assert.ok(!err);
                assert.ok(retrievedContent.contentId);
                assert.equal(retrievedContent.tenant, contentObj.tenant);
                assert.equal(retrievedContent.visibility, contentObj.visibility);
                assert.equal(retrievedContent.title, contentObj.title);
                assert.equal(retrievedContent.description, contentObj.description);
                assert.equal(retrievedContent.contentType, contentObj.contentType);
                assert.ok(retrievedContent.lastModified);
            } else {
                assert.ok(err);
                assert.ok(!retrievedContent);
            }
            // Use the hasAccess to check for access to the content
            ContentAPI.hasAccess(ctx, contentObj.contentId, function(err, hasAccess) {
                if (expectAccess) {
                    assert.ok(!err);
                    assert.ok(hasAccess);
                } else {
                    assert.ok(!hasAccess);
                }
                // Use the canManage to check for management of the content
                ContentAPI.canManage(ctx, contentObj.contentId, function(err, canManage) {
                    if (expectManage) {
                        assert.ok(!err);
                        assert.ok(canManage);
                    } else {
                        assert.ok(!canManage);
                    }
                    // Check if the item comes back in the library
                    ContentAPI.getLibraryItems(ctx, libraryToCheck, null, 10, function(err, contentItems) {
                        // If no logged in user is provided, we expect an error
                        if (!libraryToCheck) {
                            assert.ok(err);
                        } else {
                            assert.ok(!err);
                            if (expectInLibrary) {
                                assert.equal(contentItems.length, 1);
                                assert.equal(contentItems[0].contentId, contentObj.contentId);
                            } else {
                                assert.equal(contentItems.length, 0);
                            }
                        }
                        callback();
                    });
                });
            });
        });
    };

    //////////////////////
    // Creating content //
    //////////////////////

    it('will attempt to create new content items with various parameter combinations', function(callback) {
        setUpUsers(function(contexts) {
            // Create one as anon user
            ContentAPI.createContent(new Context(), 'public', 'Test Content 1', 'Test content description 1', 'link', function(err, contentObj) {
                assert.ok(err);
                assert.ok(!contentObj);
                // Create one with all required fields
                ContentAPI.createContent(contexts[0], 'public', 'Test Content 2', 'Test content description 2', 'link', function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);
                    // Create one without description
                    ContentAPI.createContent(contexts[0], 'public', 'Test Content 3', null, 'link', function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj.contentId);
                        // Create one without type
                        ContentAPI.createContent(contexts[0], 'public', 'Test Content 4', 'Test content description 4', null, function(err, contentObj) {
                            assert.ok(err);
                            assert.ok(!contentObj);
                             // Create one with an invalid content type
                            ContentAPI.createContent(contexts[0], 'public', 'Test Content 4', 'Test content description 4', 'GoogleDoc', function(err, contentObj) {
                                assert.ok(err);
                                assert.ok(!contentObj);
                                // Create one without title
                                ContentAPI.createContent(contexts[0], 'public', null, 'Test content description 5', 'link', function(err, contentObj) {
                                    assert.ok(err);
                                    assert.ok(!contentObj);
                                    // Create one without permission
                                    ContentAPI.createContent(contexts[0], null, 'Test Content 6', 'Test content description 6', 'link', function(err, contentObj) {
                                        assert.ok(!err);
                                        assert.ok(contentObj.contentId);
                                        // Check if the permission has been set to public (default)
                                        ContentAPI.getContent(contexts[0], contentObj.contentId, function(err, contentObj) {
                                            assert.ok(!err);
                                            assert.equal(contentObj.visibility, 'public');
                                            // Create one without tenant
                                            ContentAPI.createContent(new Context(null, contexts[0].user()), 'public', 'Test Content 7', 'Test content description 7', 'link', function(err, contentObj) {
                                                assert.ok(err);
                                                assert.ok(!contentObj);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    it('will attempt to create a public content item and will verify direct and library access', function(callback) {
        setUpUsers(function(contexts) {
            // Create a public content item
            var contentObj = new Content(contexts[0].tenant().alias, null, 'public', 'Test Content 1', 'Test content description 1', 'link');
            ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
                assert.ok(!err);
                assert.ok(content.contentId);
                contentObj.contentId = content.contentId;
                // Get the piece of content as the person who created the content
                checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                    // Get the piece of content as a different logged in user
                    checkPieceOfContent(contexts[1], contexts[0].user().id, contentObj, true, false, true, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(new Context(), contexts[0].user().id, contentObj, true, false, true, function() {
                            callback();
                        });
                    });
                });
            });
        });
    });

    it('will attempt to create a loggedin content item and will verify direct and library access', function(callback) {
        setUpUsers(function(contexts) {
            // Create a logged in content item
            var contentObj = new Content(contexts[0].tenant().alias, null, 'loggedin', 'Test Content 1', 'Test content description 1', 'link');
            ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
                assert.ok(!err);
                assert.ok(content.contentId);
                contentObj.contentId = content.contentId;
                // Get the piece of content as the person who created the content
                checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                    // Get the piece of content as a different logged in user
                    checkPieceOfContent(contexts[1], contexts[0].user().id, contentObj, true, false, true, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                            callback();
                        });
                    });
                });
            });
        });
    });

    it('will attempt to create a private content item and will verify direct and library access', function(callback) {
        setUpUsers(function(contexts) {
            // Create a private content item
            var contentObj = new Content(contexts[0].tenant().alias, null, 'private', 'Test Content 1', 'Test content description 1', 'link');
            ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
                assert.ok(!err);
                assert.ok(content.contentId);
                contentObj.contentId = content.contentId;
                // Get the piece of content as the person who created the content
                checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                    // Get the piece of content as a different logged in user
                    checkPieceOfContent(contexts[1], contexts[0].user().id, contentObj, false, false, false, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                            callback();
                        });
                    });
                });
            });
        });
    });

    /////////////////////////
    // Content permissions //
    /////////////////////////

    /**
     * Create a piece of content, make a user a manager, make a user a viewer and test access for all of these as well as library
     * content and the membership list of the content
     * @param  {Test}               test                Standard nodeunit test object
     * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
     *                                                  the current user and the current tenant
     * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
     * @param  {Function(content)}  callback            Standard callback function
     * @param  {Content}            callback.content    Content object that has been created as part of this test
     */
    var setUpContentPermissions = function(contexts, privacy, callback) {
        // Create a public content item
        var contentObj = new Content(contexts[0].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            assert.ok(!err);
            assert.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the person who created the content
            checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                // Check the list of content members
                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                    assert.ok(!err);
                    assert.equal(_.keys(members).length, 1);
                    assert.equal(members[contexts[0].user().id], 'manager');
                    // Make another user manager of the content
                    var permissions = {};
                    permissions[contexts[1].user().id] = 'manager';
                    ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                        assert.ok(!err);
                        // Get the piece of content as the newly added manager
                        checkPieceOfContent(contexts[1], contexts[1].user().id, contentObj, true, true, true, function() {
                            ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                assert.ok(!err);
                                assert.equal(_.keys(members).length, 2);
                                assert.equal(members[contexts[0].user().id], 'manager');
                                assert.equal(members[contexts[1].user().id], 'manager');
                                // Make another user member of the content
                                permissions = {};
                                permissions[contexts[2].user().id] = 'viewer';
                                ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                    assert.ok(!err);
                                    // Get the piece of content as the added member
                                    checkPieceOfContent(contexts[2], contexts[2].user().id, contentObj, true, false, true, function() {
                                        ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                            assert.ok(!err);
                                            assert.equal(_.keys(members).length, 3);
                                            assert.equal(members[contexts[0].user().id], 'manager');
                                            assert.equal(members[contexts[1].user().id], 'manager');
                                            assert.equal(members[contexts[2].user().id], 'viewer');
                                            // Try to add an existing and non-existing user
                                            permissions = {};
                                            permissions[contexts[4].user().id] = 'viewer';
                                            permissions['nonExistingUser'] = 'viewer';
                                            ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                                assert.ok(err);
                                                // Get the piece of content as the member that was part of the invalid setPermissions
                                                checkPieceOfContent(contexts[4], contexts[4].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                    ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                                        assert.ok(!err);
                                                        assert.equal(_.keys(members).length, 3);
                                                        assert.equal(members[contexts[0].user().id], 'manager');
                                                        assert.equal(members[contexts[1].user().id], 'manager');
                                                        assert.equal(members[contexts[2].user().id], 'viewer');
                                                        callback(contentObj);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };

    it('will attempt to set permissions on a public piece of content', function(callback) {
        setUpUsers(function(contexts) {
            setUpContentPermissions(contexts, 'public', function(contentObj) {
                // Get the piece of content as a non-associated user
                checkPieceOfContent(contexts[3], contexts[3].user().id, contentObj, true, false, false, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(new Context(), contexts[0].user().id, contentObj, true, false, true, function() {
                        callback();
                    });
                });
            });
        });
    });

    it('will attempt to set permissions on a loggedin piece of content', function(callback) {
        setUpUsers(function(contexts) {
            setUpContentPermissions(contexts, 'loggedin', function(contentObj) {
                // Get the piece of content as a non-associated user
                checkPieceOfContent(contexts[3], contexts[3].user().id, contentObj, true, false, false, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                        callback();
                    });
                });
            });
        });
    });

    it('will attempt to set permissions on a private piece of content', function(callback) {
        setUpUsers(function(contexts) {
            setUpContentPermissions(contexts, 'private', function(contentObj) {
                // Get the piece of content as a non-associated user
                checkPieceOfContent(contexts[3], contexts[3].user().id, contentObj, false, false, false, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                        callback();
                    });
                });
            });
        });
    });

    //////////////////////
    // Content sharing //
    /////////////////////

    /**
     * Utility function for the sharing tests that will create a new content item, check for successful creation and check that
     * the right set of content members are retrieved
     * @param  {Test}               test                Standard nodeunit test object
     * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
     *                                                  the current user and the current tenant
     * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
     * @param  {Function(content)}  callback            Standard callback function
     * @param  {Content}            callback.content    Content object that has been created as part of this test
     */
    var prepareSharing = function(contexts, privacy, callback) {
        // Create a content item
        var contentObj = new Content(contexts[0].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            assert.ok(!err);
            assert.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the creator
            checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                    assert.ok(!err);
                    assert.equal(_.keys(members).length, 1);
                    assert.equal(members[contexts[0].user().id], 'manager');
                    callback(contentObj);
                 });
            });
        });
    };

    /**
     * Utility function for the sharing tests that will try to share content, will then check for access to the content by the person
     * the content was shared with. Then the test will check whether that person can see the content's membership list and sees the
     * correct list of members in there
     * @param  {Test}       test                Standard nodeunit test object
     * @param  {Content}    contentObj          Content object that will be shared
     * @param  {Context}    sharerContext       Standard context object that represents the user that will share the content
     * @param  {Context}    shareWithContext    Standard context object that represents the user the context will be shared with. Content access,
     *                                          library presence and membership checks will be run on this user
     * @param  {Boolean}    expectShare         Whether or not we expect that user 1 will be able to share the content with user 2
     * @param  {Boolean}    expectAccess        Whether or not we expect that user 2 will have access to the content after it's been shared with him
     * @param  {Boolean}    expectManage        Whether or not we expect that user 2 will be able to manage the content after it's been shared with him
     * @param  {Boolean}    expectInLibrary     Whether or not we expect user 2 to be able to see the content in his library after it's been shared with him
     * @param  {Function}   callback            Standard callback function
     */
    var testSharing = function(contentObj, sharerContext, shareWithContext, expectShare, expectAccess, expectManage, expectInLibrary, expectedMembers, callback) {
        ContentAPI.shareContent(sharerContext, contentObj.contentId, [shareWithContext.user().id], function(err) {
            if (expectShare) {
                assert.ok(!err);
            } else {
                assert.ok(err);
            }
            checkPieceOfContent(shareWithContext, shareWithContext.user() ? shareWithContext.user().id : null, contentObj, expectAccess, expectManage, expectInLibrary, function() {
                ContentAPI.getContentMembers(shareWithContext, contentObj.contentId, function(err, members) {
                    if (expectedMembers) {
                        assert.ok(!err);
                        assert.equal(_.keys(members).length, _.keys(expectedMembers).length);
                        for (var member in members) {
                            assert.ok(members[member], expectedMembers[member]);
                        }
                    } else {
                        assert.ok(err);
                    }
                    callback();
                });
            });
        });
    };

    it('Test that will attempt to create a public piece of content, share it as the manager, share it as a member, share it as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library resence and the correct content membership list ', function(callback) {
        setUpUsers(function(contexts) {
            // Create a public content item
            prepareSharing(contexts, 'public', function(contentObj) {
                // Share as content owner
                var expectedMembers = {};
                expectedMembers[contexts[0].user().id] = 'manager';
                expectedMembers[contexts[1].user().id] = 'viewer';
                testSharing(contentObj, contexts[0], contexts[1], true, true, false, true, expectedMembers, function() {
                    // Share as content member
                    expectedMembers[contexts[2].user().id] = 'viewer';
                    testSharing(contentObj, contexts[1], contexts[2], true, true, false, true, expectedMembers, function() {
                        // Share as other user, add to own library
                        expectedMembers[contexts[3].user().id] = 'viewer';
                        testSharing(contentObj, contexts[2], contexts[3], true, true, false, true, expectedMembers, function() {
                            // Share as anonymous
                            testSharing(contentObj, new Context(), contexts[4], false, true, false, false, expectedMembers, function() {
                                callback();
                            });
                        }); 
                    });
                });
            });
        });
    });

    it('Test that will attempt to create a loggedin piece of content, share it as the manager, share it as a member, share it as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library presence and the correct content membership list ', function(callback) {
        setUpUsers(function(contexts) {
            // Create a loggedin content item
            prepareSharing(contexts, 'loggedin', function(contentObj) {
                // Share as content owner
                var expectedMembers = {};
                expectedMembers[contexts[0].user().id] = 'manager';
                expectedMembers[contexts[1].user().id] = 'viewer';
                testSharing(contentObj, contexts[0], contexts[1], true, true, false, true, expectedMembers, function() {
                    // Share as content member
                    expectedMembers[contexts[2].user().id] = 'viewer';
                    testSharing(contentObj, contexts[1], contexts[2], true, true, false, true, expectedMembers, function() {
                        // Share as other user, add to own library
                        expectedMembers[contexts[3].user().id] = 'viewer';
                        testSharing(contentObj, contexts[3], contexts[3], true, true, false, true, expectedMembers, function() {
                            // Share as anonymous
                            testSharing(contentObj, new Context(), contexts[4], false, true, false, false, expectedMembers, function() {
                                callback();
                            });
                        }); 
                    });
                });
            });
        });
    });

    it('will attempt to create a private piece of content, share it as the manager, share it as a member, share it as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library presence and the correct content membership list ', function(callback) {
        setUpUsers(function(contexts) {
            // Create a private content item
            prepareSharing(contexts, 'private', function(contentObj) {
                // Share as content owner
                var expectedMembers = {};
                expectedMembers[contexts[0].user().id] = 'manager';
                expectedMembers[contexts[1].user().id] = 'viewer';
                testSharing(contentObj, contexts[0], contexts[1], true, true, false, true, expectedMembers, function() {
                    // Share as content member
                    testSharing(contentObj, contexts[1], contexts[2], false, false, false, false, null, function() {
                        // Share as other user, add to own library
                        testSharing(contentObj, contexts[3], contexts[3], false, false, false, false, null, function() {
                            // Share as anonymous
                            testSharing(contentObj, new Context(), contexts[4], false, false, false, false, null, function() {
                                callback();
                            });
                        }); 
                    });
                });
            });
        });
    });


    //////////////////////////////////////////////////////
    // Content permissions on multiple at the same time //
    //////////////////////////////////////////////////////

    // TODO: Test setPermissions on multiple at the same time

    ////////////////////////////////////////////////////
    // Content sharing with multiple at the same time //
    ////////////////////////////////////////////////////

    // TODO: Test share on multiple at the same time
    it('Multiple sharing', function(callback) {
        setUpUsers(function(contexts) {
            // Create a piece of content
            prepareSharing(contexts, 'private', function(contentObj) {
                // Share with multiple people at the same time
                ContentAPI.shareContent(contexts[0], contentObj.contentId, [contexts[1].user().id, contexts[2].user().id, contexts[3].user().id], function(err) {
                    assert.ok(!err);
                    // Check that these people have access
                    checkPieceOfContent(contexts[1], contexts[1].user().id, contentObj, true, false, true, function() {
                        checkPieceOfContent(contexts[2], contexts[2].user().id, contentObj, true, false, true, function() {
                            checkPieceOfContent(contexts[3], contexts[3].user().id, contentObj, true, false, true, function() {
                                checkPieceOfContent(contexts[4], contexts[4].user().id, contentObj, false, false, false, function() {
                                    // Share with multiple people, of which some are invalid users
                                    ContentAPI.shareContent(contexts[0], contentObj.contentId, [contexts[4].user().id, 'nonExistingUser'], function(err) {
                                        assert.ok(err);
                                        checkPieceOfContent(contexts[4], contexts[4].user().id, contentObj, false, false, false, function() {
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    //////////////////////////////////
    // Group related content access //
    //////////////////////////////////

    // TODO: Test groups-related content access (sharing and setPermissions)

    ///////////////
    // Libraries //
    ///////////////

    // TODO: Tests around libraries

    //////////////////////
    // Deleting content //
    //////////////////////

    /**
     * Utitility function for the content delete assert. This function will create a piece of content, add a manager and a viewer using the setPermissions function,
     * share the content with an additional user. After each of these, the expected access will be checked. After that, the test will attempt to delete the content
     * as an anonymous user, a logged in user, a content member and a content manager. After that, the tests check if each of those can still access the content,
     * whether or not all roles have deleted, whether or not all libraries have been updated and whether or not the content members list is no longer available
     * @param  {Test}               test                Standard nodeunit test object
     * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
     *                                                  the current user and the current tenant
     * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
     * @param  {Function(content)}  callback            Standard callback function
     */
    var prepareDelete = function(contexts, privacy, callback) {
        // Create a content item
        var contentObj = new Content(contexts[0].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            assert.ok(!err);
            assert.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the creator
            checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                // Make a user a manager and make a user a member
                var permissions = {};
                permissions[contexts[1].user().id] = 'manager';
                permissions[contexts[2].user().id] = 'viewer';
                ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                    assert.ok(!err);
                    checkPieceOfContent(contexts[1], contexts[1].user().id, contentObj, true, true, true, function() {
                        checkPieceOfContent(contexts[2], contexts[2].user().id, contentObj, true, false, true, function() {
                            // Share the content with another user
                            ContentAPI.shareContent(contexts[1], contentObj.contentId, [contexts[3].user().id], function(err) {
                                assert.ok(!err);
                                checkPieceOfContent(contexts[3], contexts[3].user().id, contentObj, true, false, true, function() {
                                    // Try to delete the content as an anonymous user
                                    ContentAPI.deleteContent(new Context(), contentObj.contentId, function(err) {
                                        assert.ok(err);
                                        // Check that it is still around
                                        checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                                            // Try to delete the content as a logged in user
                                            ContentAPI.deleteContent(contexts[4], contentObj.contentId, function(err) {
                                                assert.ok(err);
                                                // Check that it is still around
                                                checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                                                    // Try to delete the content as a content member
                                                    ContentAPI.deleteContent(contexts[3], contentObj.contentId, function(err) {
                                                        assert.ok(err);
                                                        // Check that it is still around
                                                        checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                                                            // Try to delete the content as a content manager
                                                            ContentAPI.deleteContent(contexts[0], contentObj.contentId, function(err) {
                                                                assert.ok(!err);
                                                                // Check to see if the manager, a member, a logged in user and the anonymous user still have access
                                                                checkPieceOfContent(contexts[0], contexts[0].user().id, contentObj, false, false, false, function() {
                                                                    checkPieceOfContent(contexts[2], contexts[2].user().id, contentObj, false, false, false, function() {
                                                                        checkPieceOfContent(contexts[4], contexts[4].user().id, contentObj, false, false, false, function() {
                                                                            checkPieceOfContent(new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                                                                                // Check roles api for the role on the content for a manager, a member and a logged in user
                                                                                RolesAPI.getRole(contexts[0].user().id, contentObj.contentId, function(err, role) {
                                                                                    assert.ok(!role);
                                                                                    RolesAPI.getRole(contexts[2].user().id, contentObj.contentId, function(err, role) {
                                                                                        assert.ok(!role);
                                                                                        RolesAPI.getRole(contexts[4].user().id, contentObj.contentId, function(err, role) {
                                                                                            assert.ok(!role);
                                                                                            // Check whether the list of members is no longer accessible
                                                                                            ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err) {
                                                                                                assert.ok(err);
                                                                                                callback();
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };

    it('Test that will attempt to create a public piece of content and delete it', function(callback) {
        setUpUsers(function(contexts) {
            prepareDelete(contexts, 'public', function() {
                callback();
            });
        });
    });

    it('Test that will attempt to create a logged in piece of content and delete it', function(callback) {
        setUpUsers(function(contexts) {
            prepareDelete(contexts, 'loggedin', function() {
                callback();
            });
        });
    });

    it('Test that will attempt to create a private piece of content and delete it', function(callback) {
        setUpUsers(function(contexts) {
            prepareDelete(contexts, 'private', function() {
                callback();
            });
        });
    });

    /////////////////////////////
    // Update content metadata //
    /////////////////////////////

    // TODO: Tests around updating metadata


});