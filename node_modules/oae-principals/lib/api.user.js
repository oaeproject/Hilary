/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Bcrypt = require('bcrypt');
var RolesAPI = require('oae-roles');
var Resource = require('oae-roles/lib/model').Resource;
var RolesUtil = require('oae-roles/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var model = require('./model');
var utils = require('./utils');


/**
 * Creates a new user under this tenant.
 *
 * @param  {Context}                    context             The current context
 * @param  {String}                     username            The username this user can login with.
 * @param  {String}                     password            The password for this user.
 * @param  {String}                     visibility          This user his visibility setting. (One of VISIBILITY_OPTIONS)
 * @param  {String}                     locale              The user his locale
 * @param  {String}                     timezone            The user his timezone
 * @param  {String}                     firstName           This user his first name.
 * @param  {String}                     lastName            This user his last name,
 * @param  {String}                     displayName         A display name, if this is left undefined the first and last name will be concatenated.
 * @param  {Function(err, user_id)}     callback            Callback method.
 * @param  {Object}                     callback.err        Error object if something goes wrong.
 * @param  {String}                     callback.user_id    The user ID.
 */
module.exports.createUser = function(context, username, password, visibility, locale, timezone, firstName, lastName, displayName, callback) {
    callback = callback || function() {};
    locale = locale || 'en_GB';
    timezone = timezone || 'BST';
    visibility = visibility || 'public';
    // Check required fields.
    if (!username || !password) {
        return callback({'code': 400, 'msg': 'Not all required parameters were provided.'});
    }
    // Do some basic validation.
    var usernameValidation = utils.validateUserName(username);
    if (usernameValidation !== true) {
        return callback({'code': 400, 'msg': usernameValidation});
    }
    if (password.length < 6) {
        return callback({'code': 400, 'msg': 'Your password is too short (this is the only requirement.)'});
    }
    if (!model.VISIBILITY_OPTIONS[visibility]) {
        return callback({'code': 400, 'msg': 'The specified visibility setting is unknown.'});
    }

    // hash the password and store everything in the DB.
    var id = RolesUtil.toUuid('u', context.tenant().alias, username);
    module.exports.getUser(context, id, function(err, user) {
        if (!err && user) {
            return callback({'code': 400, 'msg': 'A user with this username already exists.'});
        }

        utils.hashPassword(password, function(hash) {
            displayName = displayName || firstName + " " + lastName;
            // Create the user
            Cassandra.runQuery('INSERT INTO Principals (principal_id, tenant, visibility, locale, timezone, user_username, user_password, user_first_name, user_last_name, user_display_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', 
                                [id, context.tenant().alias, visibility, locale, timezone, username, hash, firstName, lastName, displayName], function (err) {
                if (err) {
                    callback({'code': 500, 'msg': err});
                } else {
                    callback(false, id);
                }
            });
        });
    });
};

/**
 * Update a user
 *
 * @param  {Context}        context         The current context.
 * @param  {String}         user_id         The userid of the user you wish to update.
 * @param  {String}         visibility      The new visibility (optional)
 * @param  {String}         locale          The new locale (optional)
 * @param  {String}         timezone        The new timezone (optional)
 * @param  {String}         firstName       The new first name (optional)
 * @param  {String}         lastName        The new last name (optional)
 * @param  {String}         displayName     The new displayname (optional)
 * @param  {Function(err)}  callback        Callback method.
 * @param  {Object}         callback.err    Error object if something goes wrong.
 */
module.exports.updateUser = function(context, user_id, visibility, locale, timezone, firstName, lastName, displayName, callback) {
    callback = callback || function() {};
    // Only update existing users.
    module.exports.getUser(context, user_id, function(err, user) {
        if (err) {
            return callback(err);
        }

        var parameters = [];
        if (visibility && model.VISIBILITY_OPTIONS[visibility]) {
            parameters = parameters.concat(['visibility', visibility]);
        }
        if (firstName) {
            parameters = parameters.concat(['user_first_name', firstName]);
        }
        if (lastName) {
            parameters = parameters.concat(['user_last_name', lastName]);
        }
        if (displayName) {
            parameters = parameters.concat(['user_display_name', displayName]);
        }
        if (locale) {
            parameters = parameters.concat(['locale', locale]);
        }
        if (timezone) {
            parameters = parameters.concat(['timezone', timezone]);
        }

        if (parameters.length) {
            var q = [];
            for (var i =0; i < parameters.length;i+=2) {
                q.push("?=?");
            }
            parameters.push(user_id);
            Cassandra.runQuery('UPDATE Principals SET ' +  q.join(', ') + ' WHERE principal_id = ?', parameters, function (err) {
                if (err) {
                    callback({'code': 500, 'msg': err});
                } else {
                    callback(false);
                }
            });
        } else {
            callback({'code': 400, 'msg': 'There was nothing to be updated.'});
        }
    });
};

/**
 * Get the user within a tenant (determined from the context)
 *
 * @param  {Context}                context         The current context
 * @param  {String}                 username        The username to look on
 * @param  {Function(err, user)}    callback        Callback method
 * @param  {Object}                 callback.err    Error object if something goes wrong.
 * @param  {Object}                 callback.user   The user object.
 */
module.exports.getTenantUser = function(context, username, callback) {
    var user_id = RolesUtil.toUuid('u', context.tenant().alias, username);
    module.exports.getUser(context, user_id, callback);
};

/**
 * Get a user from the DB
 *
 * @param  {Context}                context         The current context
 * @param  {String}                 user_id         The userid for the user you wish to retrieve.
 * @param  {Function(err, user)}    callback        Callback method.
 * @param  {Object}                 callback.err    Error object if something goes wrong.
 * @param  {Object}                 callback.user   The user objct.
 */
module.exports.getUser = function(context, user_id, callback) {
    if (!utils.isUser(user_id)) {
        return callback({'code': 400, 'msg': 'The provided user_id is not a valid user identifier.'});
    }

    context.isGlobalAdmin(function(globalErr, isGlobalAdmin) {
        context.isTenantAdmin(function(tenantErr, isTenantAdmin) {
            if (tenantErr || globalErr) {
                return callback(tenantErr || globalErr);
            }
            utils.getPrincipal(user_id, function(err, user) {
                // Check visibility.
                if (user && !isTenantAdmin && !isGlobalAdmin && (
                        (user.visibility === 'loggedin' && context.user() === null) ||
                        (user.visibility === 'private' && (context.user() === null || context.user().id !== user.id))
                    )) {
                    user.hide();
                }

                callback(err, user);
            });
        });
    });
};

/**
 * Gets the basic profile for a user.
 * The user's visibility setting determines what the profile hash will contain.
 * {
 *   'profilePath': '/person/simong',
 *   'userId': 'u:cam:simong',
 *   'isFollowing': true,
 *   'accountPermissions': 'public',
 *   'proﬁle': {
 *       'ﬁrstName': 'Simon',
 *       'lastName': 'Gaeremynck',
 *       'displayName': 'Simon "simong" Gaeremynck'
 *       'picture': 'pathToCroppedProﬁlePicture'
 *   }
 * };
 *
 * @param  {Context}  context       The current context
 * @param  {String}   user_id       The id of the user for which the profile should be retrieved.
 * @param  {Object}   callback.err  Error object if something goes wrong.
 * @param  {Object}   callback.user The user.
 */
module.exports.getBasicProfile = function(context, user_id, callback) {
    // Anonymous is a bit of a special case.
    module.exports.getUser(context, user_id, function(err, user) {
        if (err) {
            return callback(err);
        }
        var data = {
            'profilePath': '/person/' + user_id,
            'userId': user.id,
            'isFollowing': false, //@todo
            'visibility': user.visibility,
            'profile': {}
        };

        var keys = ['firstName', 'lastName', 'displayName', 'picture'];
        for (var i = 0; i < keys.length; i++) {
            if (user.hasOwnProperty(keys[i])) {
                data.profile[keys[i]] = user[keys[i]];
            }
        }

        callback(null, data);
    });
};

/**
 * Sets the visibility of a user.
 *
 * @param {Context}         context         A user object representing the current user.
 * @param {String}          user_id         The ID of the user that needs the visibility change.
 * @param {String}          visibility      The desired visibility. Valid options are defined in @see model.VISIBILITY_OPTIONS
 * @param {Function(err)}   callback        Callback method.
 * @param {String}          callback.err    Error object.
 */
module.exports.setUserVisibility = function(context, user_id, visibility, callback) {
    callback = callback || function() {};
    context.isAdmin(function(err, isAdmin) {
        if (err) {
            return callback(err);
        }

        if (!isAdmin && context.user().id !== user_id) {
            return callback({'code': 401, 'msg': 'You\'re not authorized to change someone else their profile!'});
        }
        if (!model.VISIBILITY_OPTIONS[visibility]) {
            return callback({'code': 400, 'msg': 'Please provide a valid visibility option'});
        }

        module.exports.getUser(context, user_id, function(err, user) {
            if (err) {
                return callback(err);
            }
            Cassandra.runQuery('UPDATE Principals SET visibility=? WHERE principal_id = ?', [visibility, user_id], function (err) {
                if (err) {
                    return callback({'code': 500, 'msg': err}, null);
                } else {
                    return callback(false);
                }
            });
        });
    });
};

/**
 * Checks if a password matches a username within a tenant.
 *
 * @param  {Object}                 tenant          The current tenant
 * @param  {String}                 username        The username that a user uses to login. (NOT the id.)
 * @param  {String}                 password        The plain-text password.
 * @param  {Function(err, user)}    callback        Callback method.
 * @param  {Object}                 callback.err    Error object.
 * @param  {Object}                 callback.user   An object that has a key 'id' that holds the full user id.
 *                                                  This object will be null if the user was not found or the password didn't match.
 */
module.exports.checkPassword = function(tenant, username, password, callback) {
    var user_id = RolesUtil.toUuid('u', tenant.alias, username);
    checkPasswordForUserId(user_id, password, callback);
};

/**
 * Changes the password of a user.
 *
 * @param  {Context}  context     The current context.
 * @param  {String}   user_id     The user id of the user whose password that needs to be changed.
 * @param  {String}   oldPassword The old password that can be used to authenticate this change request.
 * @param  {String}   newPassword The new password.
 * @param  {Function} callback    [description]
 */
module.exports.changePassword = function(context, user_id, oldPassword, newPassword, callback) {

    var changePassword = function() {
        // Hash and store it.
        utils.hashPassword(newPassword, function(hash) {
            Cassandra.runQuery("UPDATE Principals SET user_password=? WHERE principal_id = ?", [hash, user_id], function(err, rows) {
                if (err) {
                    return callback(err, false);
                }

                callback(null, true);
            });
        });
    };

    // Global admins can change passwords.
    context.isAdmin(function(err, isAdmin) {
        if (!err && isAdmin) {
            return changePassword();
        }

        checkPasswordForUserId(user_id, oldPassword, function(err, user) {
            if (!err && user) {
                return changePassword();
            }

            // By this point this user shouldn't be allowed to do anything.
            return callback({'code': 401, 'msg': 'You\'re not authorized to change this user\'s password.'}, false);
        });
    });
};

/**
 * Checks the password for a specified user id.
 *
 * @param  {String}             user_id     The id of the user whose password should be checked.
 * @param  {String}             password    The password that can be used to compare with the one in the DB.
 * @param  {Function(err, id)}  callback    Callback method
 * @param  {Object}             err         Error object
 * @param  {object}             id          The ID of the user if the passwords match. Otherwise false.
 */
var checkPasswordForUserId = function(user_id, password, callback) {
    Cassandra.runQuery("SELECT user_password FROM Principals WHERE principal_id = ?", [user_id], function(err, rows) {
        if (err) {
            return callback(err);
        }

        if (rows.rowCount() === 0 || !rows[0].colHash.user_password) {
            // No user found with that username.
            return callback(false, false);
        }

        Bcrypt.compare(password, rows[0].colHash.user_password, function(err, res) {
            if (!res) {
                callback(false, false);
            } else {
                callback(false, {'id': user_id});
            }
        });
    });
};

/**
 * Checks if a user is a tenant admin.
 *
 * @param   {String}                 tenantAlias         The tenantalias
 * @param   {User}                   user                The user object that needs to be checked.
 * @param   {Function(err, isAdmin)} callback            Callback method
 * @param   {Object}                 callback.err        Error object.
 * @param   {Boolean}                callback.isAdmin    true if the passed in user is a tenant admin.
 */
module.exports.isTenantAdmin = function(tenantAlias, user, callback) {
    var tenantAdminResource = new Resource('r', tenantAlias, 'system');
    RolesAPI.hasRole(user.id, tenantAdminResource.toUuid(), 'admin', callback);
};

/**
 * Promotes an existing user to a tenant admin.
 *
 * @param  {Context}        context         Context that holds the tenant.
 * @param  {User}           user            The user that needs promoting
 * @param  {Function(err)}  callback        Callback method
 * @param  {Object}         callback.err    Error object.
 */
module.exports.makeUserTenantAdmin = function(context, user, callback) {
    var tenantAdminResource = new Resource('r', context.tenant().alias, 'system');
    RolesAPI.setRole(user.id, tenantAdminResource.toUuid(), 'admin', callback)
};


/**
 * Checks if a user is a global admin.
 *
 * @param   {String}                 user                The user object that needs to be checked.
 * @param   {Function(err, isAdmin)} callback            Callback method
 * @param   {Object}                 callback.err        Error object.
 * @param   {Boolean}                callback.isAdmin    true if the passed in user is a global admin.
 */
module.exports.isGlobalAdmin = function(user, callback) {
    var globalAdminResource = new Resource('r', 'global', 'system');
    RolesAPI.hasRole(user.id, globalAdminResource.toUuid(), 'admin', callback);
};