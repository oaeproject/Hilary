/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var AuthzUtil = require('oae-authz/lib/util');
var Validator = module.exports.Validator = require('oae-util/lib/validator').Validator;

/**
 * Checks whether or not the string in context is a valid id.
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(id, error).isValidId();
 * ```
 */
Validator.prototype.isValidId = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty id was provided');
    } else if (this.str.split(':').length < 3) {
        this.error(this.msg || 'A principal or resource id must be of the format: "<type>:<tenant>:<instanceId>". "' + this.str + '" does not satisfy that.');
    }
};

/**
 * Checks whether or not the string in context is a valid principal id
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(principalId, error).isPrincipalId();
 * ```
 */
Validator.prototype.isPrincipalId = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty principal id was provided');
    } else if (!(AuthzUtil.isGroupId(this.str) || AuthzUtil.isUserId(this.str))) {
        this.error(this.msg || 'An invalid principal id was provided');
    }
};

/**
 * Checks whether or not the string in context is a valid group principal id
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(groupId, error).isGroupId();
 * ```
 */
Validator.prototype.isGroupId = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty group id was provided');
    } else if (!AuthzUtil.isGroupId(this.str)) {
        this.error(this.msg || 'Invalid group id: ' + this.str);
    }
};

/**
 * Checks whether or not the string in context is a valid user principal id
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(userId, error).isUserId();
 * ```
 */
Validator.prototype.isUserId = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty user id was provided');
    } else if (!AuthzUtil.isUserId(this.str)) {
        this.error(this.msg || 'Invalid user id: ' + this.str);
    }
};

/**
 * Checks whether or not the string in context is a valid resource id
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(resourceId, error).isResourceId();
 * ```
 */
Validator.prototype.isResourceId = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty resource id was provided');
    } else if (this.str.split(':').length < 3) {
        this.error(this.msg || 'A resource id must be of the format: "<type>:<tenant>:<instanceId>". "' + this.str + '" does not satisfy that.');
    } else if (AuthzUtil.isUserId(this.str)) {
        this.error(this.msg || 'A user id is not a valid resource id: ' + this.str);
    }
};

/**
 * Checks whether or not the string in context is a valid role name
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(role, error).isValidRole();
 * ```
 */
Validator.prototype.isValidRole = function() {
    if (!this.str) {
        this.error(this.msg || 'Role must be a valid non-empty string');
    } else if (!this.str.trim || this.str.trim().length === 0) {
        this.error(this.msg || 'Role must be a valid non-empty string');
    }
};

/**
 * Checks whether or not a set of principals and their new role is formatted correctly.
 * The difference with isValidRole is that this allows a false value as well, in case
 * of a role removal.
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(newRole, error).isValidRoleChange();
 * ```
 */
Validator.prototype.isValidRoleChange = function() {
    if (this.str === false) {
        // 'false' is valid, it represents a role change
        return;
    }

    if (!this.str || !this.str.trim || this.str.trim().length === 0) {
        this.error(this.msg || 'Role change must either be a removal, or a non-blank string');
    }
};
