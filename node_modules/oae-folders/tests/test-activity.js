/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityTestsUtil = require('oae-activity/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');
var FoldersLibrary = require('oae-folders/lib/library');
var FoldersTestUtil = require('oae-folders/lib/test/util');

describe('Folders - Activity', function() {

    var camAdminRestContext = null;

    /*!
     * Before each test, set up admin REST context
     */
    beforeEach(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });

    /**
     * Set up some users and groups. One of the users will follow another user
     *
     * @param  {Function}   callback            Standard callback function
     * @param  {Object}     callback.user1      The first user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.user2      The second user as returned by `TestsUtil.generateTestUsers`. This user will follow user1
     * @param  {Object}     callback.user3      The third user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.user4      The fourth user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.user5      The fifth user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.group1     The first group as returned by `TestsUtil.generateTestGroups`
     * @param  {Object}     callback.group2     The second group as returned by `TestsUtil.generateTestGroups`
     */
    var _setup = function(callback) {
        // Generate some users
        TestsUtil.generateTestUsers(camAdminRestContext, 5, function(err, users, simong, nico, bert, stuart, stephen) {
            assert.ok(!err);

            // Generate some groups
            TestsUtil.generateTestGroups(simong.restContext, 2, function(groupA, groupB) {

                // Nico follows simong
                RestAPI.Following.follow(nico.restContext, simong.user.id, function(err) {
                    assert.ok(!err);

                    return callback(simong, nico, bert, stuart, stephen, groupA, groupB);
                });
            });
        });
    };

    /**
     * Test that verifies the create activity is generated and propagated to the correct users
     */
    it('verify the create activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupA, groupB) {

            // Simon creates a folder that Bert co-manages and Stuart and groupA can view
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [bert], [stuart, groupA], function(folder) {

                // Simon, Nico, Bert, Stuart and groupA should've received a folder create activity
                ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {
                    ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {
                        ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {
                            ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {
                                ActivityTestsUtil.assertFeedContainsActivity(groupA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                                    // Assert the remaining users and/or groups did not get the activity
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(groupB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {

                                            // All members should get a notification
                                            ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {
                                                ActivityTestsUtil.assertNotificationStreamContainsActivity(stuart.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                                                    // Non members get nothing
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                        ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stephen.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, callback);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the update activity is generated and propagated to the correct users
     */
    it('verify the update activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupA, groupB) {

            // Simon creates a folder that Bert co-manages and Stuart and groupA can view
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [bert], [stuart, groupA], function(folder) {

                // Simon updates the group's name
                var updates = {'displayName': 'blabla'};
                RestAPI.Folders.updateFolder(simong.restContext, folder.id, updates, function(err, data) {
                    assert.ok(!err);

                    // Simon, Nico, Bert, Stuart and groupA should've received a folder update activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                        ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                            ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                                ActivityTestsUtil.assertFeedContainsActivity(groupA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                    // Assert the remaining users and/or groups did not get the activity
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, function() {

                                                // Only managers should receive a notification
                                                ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                                    // Non members get nothing
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the update-visibility activity is generated and propagated to the correct users
     */
    it('verify the update visibility activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupA, groupB) {

            // Simon creates a folder that Bert co-manages and Stuart and groupA can view
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [bert], [stuart, groupA], function(folder) {

                // Simon updates the group's name
                var updates = {'visibility': 'loggedin', 'applyVisibilityOn': 'folder'};
                RestAPI.Folders.updateFolder(simong.restContext, folder.id, updates, function(err, data) {
                    assert.ok(!err);

                    // Simon, Nico, Bert, Stuart and groupA should've received a folder update activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                        ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                            ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                                ActivityTestsUtil.assertFeedContainsActivity(groupA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                    // Assert the remaining users and/or groups did not get the activity
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, function() {

                                                // Only managers should receive a notification
                                                ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                                    // Non members get nothing
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the share and add-to-library activities are generated and propagated to the correct users
     */
    it('verify the share and add-to-library activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupA, groupB) {

            // Simon creates a folder
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                // Nico shares it with himself and Bert
                FoldersTestUtil.assertShareFolderSucceeds(nico.restContext, folder.id, [nico.user.id, bert.user.id, groupA.group.id], function() {
                    
                    // Nico should have an `add-to-library` activity
                    ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_LIBRARY, ActivityConstants.verbs.ADD, nico.user.id, folder.id, null, function() {

                        // Bert should have a share activity
                        ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, ActivityConstants.verbs.SHARE, nico.user.id, folder.id, [bert.user.id, groupA.group.id], function() {

                            // Managers get an aggregated share activity as well
                            ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, ActivityConstants.verbs.SHARE, nico.user.id, folder.id, [bert.user.id, groupA.group.id], function() {

                                // Only the users whom the folder was shared with get a notification
                                ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, ActivityConstants.verbs.SHARE, nico.user.id, folder.id, bert.user.id, function() {

                                    // Noone else should have a notification
                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, function() {
                                        ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_LIBRARY, function() {
                                            ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(simong.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, function() {
                                                ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stuart.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, function() {
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stephen.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the update-member-role activities are generated and propagated to the correct users
     */
    it('verify the update-member-role activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupA, groupB) {

            // Simon creates a folder, makes Nico a manager and Bert a member
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [nico], [bert], function(folder) {

                // Simon makes Bert a manager
                var updates = {};
                updates[bert.user.id] = _.extend({}, bert, {'role': 'manager'});
                FoldersTestUtil.assertUpdateFolderMembersSucceeds(simong.restContext, folder.id, updates, function() {
                    
                    // Simon should have an update-member-role activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, simong.user.id, bert.user.id, folder.id, function() {

                        // Bert should have an update-member-role activity
                        ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, simong.user.id, bert.user.id, folder.id, function() {

                            // Managers get an update-member-role activity
                            ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, simong.user.id, bert.user.id, folder.id, function() {

                                // Noone gets a notification for this activity
                                ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(simong.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                        ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                            ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stuart.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                                ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stephen.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the add-to-folder activities are generated and propagated to the correct users
     */
    it('verify the add-to-folder activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupA, groupB) {

            // Simon creates a folder and makes Bert a member
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [bert], function(folder) {

                // Stephen creates 2 files
                RestAPI.Content.createLink(stephen.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link1) {
                    assert.ok(!err);
                    RestAPI.Content.createLink(stephen.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, function(err, link2) {
                        assert.ok(!err);

                        // Simon adds the two items to the folder
                        FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folder.id, [link1.id, link2.id], function() {

                            // Simon should have an add-to-folder activity
                            ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {
                                // Nico follows Simon and should see the activity
                                ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {
                                    // Members of the folder should see the activity
                                    ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {
                                        // Managers of the content should see the activity
                                        ActivityTestsUtil.assertFeedContainsActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {

                                            // Unrelated users don't see it
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, function() {

                                                // Members of the folder should've received a notification
                                                ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {

                                                    // Others shouldn't receive a notification
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, function() {
                                                        ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stephen.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, function() {
                                                            ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stuart.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, callback);
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that previews are added to the folder entities when they are available
     */
    it('verify previews are added when available', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            // Simon creates a folder and makes Bert a member
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                // Fake some previews for the folder
                var previews = {
                    'thumbnailUri': 'local:f/camtest/ab/cd/ef/gh/thumbnail.jpg',
                    'wideUri': 'local:f/camtest/ab/cd/ef/gh/wide.jpg'
                };
                FoldersDAO.setPreviews(folder, previews, function(err, folder) {
                    assert.ok(!err);

                    // Get the activities
                    ActivityTestsUtil.collectAndGetActivityStream(simong.restContext, simong.user.id, null, function(err, response) {
                        assert.ok(!err);

                        // Assert the activity is present
                        var createdFolderActivity = _.findWhere(response.items, {'oae:activityType': FoldersConstants.activity.ACTIVITY_FOLDER_CREATE});
                        assert.ok(createdFolderActivity);

                        // Assert the folder has a thumbnail and wide image
                        assert.ok(createdFolderActivity.object);
                        assert.ok(createdFolderActivity.object.image);
                        assert.ok(createdFolderActivity.object.image.url);
                        assert.ok(createdFolderActivity.object['oae:wideImage']);
                        assert.ok(createdFolderActivity.object['oae:wideImage'].url);

                        return callback();
                    });
                });
            });
        });
    });
});
