/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var CAS = require('cas-sfu');
var passport = require('passport');
var util = require('util');
var url = require('url');
var AuthnUtil = require('oae-authentication/lib/util');

var Strategy = function(options, verify) {
    this.name = 'cas';
    this.options = options;
    this.verify = verify;
    passport.Strategy.call(this);
};

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);


/**
 * Authenticate request based on the contents of request parameters.
 *
 * @param  {Request}   req
 * @api protected
 */
Strategy.prototype.authenticate = function(req) {
    var self = this;
    var cas = new CAS(self.options);

    var ticket = req.param('ticket');
    if (ticket) {
        // If we have a ticket in the parameters, we try to validate it.
        cas.validate(ticket, function(err, loggedIn, casResponse) {
            if (loggedIn) {
                // Call the user-provided verify method which checks
                // (or creates) the user.
                self.verify(casResponse.user, function(err, user) {
                    if (err) {
                        return self.error(new Error(err.msg));
                    }

                    // By this point, the user has been retrieved (or created)
                    // We pass it on to passport so it can be stored in the express
                    // session object.
                    AuthnUtil.logAuthnSuccess(req, user, self.name);
                    self.success(user);
                });
            } else {
                // The CAS server thinks this is an invalid token.
                // This means the user is probably tampering with
                // the request token.
                return self.fail('Invalid token', 401);
            }
        });
    } else {
        // No ticket, redirect to cas login
        var redirectUrl = url.parse(self.options.casBase + self.options.loginPath, true);
        redirectUrl.query.service = self.options.service;
        if (self.options.allow) {
            redirectUrl.query.allow = self.options.allow;
        }
        self.redirect(url.format(redirectUrl));
    }
};

/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
