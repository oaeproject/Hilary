/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var BasicStrategy = require('passport-http').BasicStrategy;
var FacebookStrategy = require('passport-facebook').Strategy;
var TwitterStrategy = require('passport-twitter').Strategy;
var express = require('express');
var passport = require('passport');

var log = require('oae-logger').logger('oae-authentication');
var Context = require('oae-context').Context;
var principalAPI = require('oae-principals');
var User = require('oae-principals/lib/model').User;
var config = require('../../../config').config;

var api = require('./api');
var AuthenticationUtil = require('./util');

module.exports = function(tenant) {

    // Attach the Authentication middleware to this tenant.
    AuthenticationUtil.setupAuthMiddleware(tenant.server, tenant);

    // All of the strategies run at some URL under /api/auth/*
    // When a login fails, the user is redirected to / where he
    // will than be shown a login page with all the installed strategies.


    ////////////////////
    //  DIRECT LOGIN  //
    ////////////////////

    var localStrategy = new api.LocalStrategyWrapper(tenant);
    passport.use(localStrategy.name, localStrategy);

    tenant.server.post('/api/auth/login', passport.authenticate(localStrategy.name), function(req, res) {
        // This callback only gets called when we log in succesfully.
        return res.send(200, req.user);
    });


    tenant.server.post('/api/auth/logout', function(req, res) {
        req.logOut();
        res.send(200, {'loggedout': 'true'});
    });




    //////////////
    //  GOOGLE  //
    //////////////

    var googleCallbackWrapper = new api.GoogleCallbackWrapper(tenant);
    var googleStrategy = new api.GoogleStrategyWrapper(tenant, googleCallbackWrapper.callback);
    passport.use(googleStrategy);

    // Redirect the user to Google for authentication.  When complete, Google
    // will redirect the user back to the application at
    // /api/auth/google/return
    tenant.server.get('/api/auth/google', passport.authenticate(googleStrategy.name));

    // Google will redirect the user to this URL after authentication.  Finish
    // the process by verifying the assertion.  If valid, the user will be
    // logged in.  Otherwise, authentication has failed.
    tenant.server.get('/api/auth/google/return',
        passport.authenticate(googleStrategy.name, { 'successRedirect': '/',
                                                            'failureRedirect': '/'  })
    );



    ///////////////
    //  TWITTER  //
    ///////////////

    var twitterCallbackWrapper = new api.TwitterCallbackWrapper(tenant);
    var twitterStrategy = new TwitterStrategy({
            'consumerKey': '8eET3GSaCVE5GVd5kZsw',
            'consumerSecret': 'OIqx7h36fMWqc0Cb3tUI1jzp7bzCbE2F3zJ0Gladc',
            'callbackURL': 'http://' + tenant.baseUrl + '/api/auth/twitter/callback'
        }, twitterCallbackWrapper.callback
    );
    twitterStrategy.name = 'twitter-' + tenant.alias;

    passport.use(twitterStrategy);

    // Redirect the user to Twitter for authentication.  When complete, Twitter
    // will redirect the user back to the application at
    // /api/auth/twitter/callback
    tenant.server.get('/api/auth/twitter', passport.authenticate(twitterStrategy.name));

    // Twitter will redirect the user to this URL after approval.  Finish the
    // authentication process by attempting to obtain an access token.  If
    // access was granted, the user will be logged in.  Otherwise,
    // authentication has failed.
    tenant.server.get('/api/auth/twitter/callback',
        passport.authenticate(twitterStrategy.name, { 'successRedirect': '/',
                                                             'failureRedirect': '/' })
    );



    ////////////////
    //  FACEBOOK  //
    ////////////////

    var facebookCallbackWrapper = new api.FacebookCallbackWrapper(tenant);
    var facebookStrategy = new FacebookStrategy({
            'clientID': '194758077323671',
            'clientSecret': '663d14e7f9ad0baeb4e43390825a659f',
            'callbackURL': 'http://' + tenant.baseUrl + '/api/auth/facebook/callback'
        },
        facebookCallbackWrapper.callback
    );

    facebookStrategy.name = 'facebook-' + tenant.alias;

    passport.use(facebookStrategy);

    // Redirect the user to Facebook for authentication.  When complete,
    // Facebook will redirect the user back to the application at
    // /api/auth/facebook/callback
    tenant.server.get('/api/auth/facebook', passport.authenticate(facebookStrategy.name));

    // Facebook will redirect the user to this URL after approval.  Finish the
    // authentication process by attempting to obtain an access token.  If
    // access was granted, the user will be logged in.  Otherwise,
    // authentication has failed.
    tenant.server.get('/api/auth/facebook/callback',
        passport.authenticate(facebookStrategy.name, { 'successRedirect': '/',
                                                              'failureRedirect': '/' })
    );
};
