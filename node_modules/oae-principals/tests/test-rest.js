/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var AuthzAPI = require('oae-authz');
var AuthzModel = require('oae-authz/lib/model');
var TenantAPI = require('oae-tenants');
var TestAPI = require('oae-tests');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');

var request = TestAPI.Http.createRequest();

describe('Principals', function() {

    describe('User REST endpoints', function() {

        /**
         * Creates a user via the REST API.
         * Will use the currently logged in user's cookiestore.
         * @param  {String}   username    The name of the user you wish to create.
         * @param  {String}   visibility  desired visibility
         * @param  {String}   firstName   desired first name
         * @param  {String}   lastName    desired last name
         * @param  {String}   displayName desired displayname
         * @param  {Function} callback    Callback method
         */
        var createUserViaRest = function(username, visibility, firstName, lastName, displayName, callback) {
            request.post({
                'url': 'http://localhost:2001/api/user/create',
                'form': {
                    'username': username,
                    'password': 'testtest',
                    'firstName': firstName,
                    'lastName': lastName,
                    'visibility': visibility,
                    'displayName': displayName
                }
            }, callback);
        };

        /**
         * Utility function that will update a user's basic profile via the REST API.
         * Will use the currently logged in user's cookiestore.
         * @param  {String}   userid      Userid of the user we're trying to update
         * @param  {Object}   paramers    Object representing the profile updated. Keys are the profile fields, values
         *                                are the profile field values
         * @param  {Function} callback    Standard callback method
         */
        var updateUserViaRest = function(userid, params, callback) {
            request.post({
                'url': 'http://localhost:2001/api/user/' + userid,
                'method': 'POST',
                'form': params
            }, callback);
        };

        /**
         * Gets a profile from the REST api and asserts some values.
         * @param  {Object}   test        Nodeunit test object
         * @param  {String}   userid      Userid of the profile you wish to retrieve
         * @param  {String}   visibility  visibility to assert
         * @param  {String}   displayName displayname to assert
         * @param  {String}   firstName   first name to assert (pass in undefined for private profiles)
         * @param  {String}   lastName    last name to assert (pass in undefined for private profiles)
         * @param  {Function} callback    Callback method
         */
        var getProfile = function(userid, visibility, displayName, firstName, lastName, callback) {
            request.get('http://localhost:2001/api/user/' + userid, function(err, response, body) {
                assert.ok(!err);
                var j = JSON.parse(body);
                assert.equal(visibility, j.visibility);
                assert.equal(firstName, j.profile.firstName);
                assert.equal(lastName, j.profile.lastName);
                assert.equal(displayName, j.profile.displayName);

                callback(err, response, body);
            });
        };

        /**
         * Perform a local user login using the REST API.
         * @param {String}                          username            User name of the person logging in 
         * @param {String}                          password            Password of the person logged in
         * @param {Function(err, response, body)}   callback            Standard callback function
         * @param {Object}                          callback.err        Error object containing error message
         * @param {Integer}                         callback.response   Response code
         * @param {String}                          callback.body       Response body
         */
        var login = function(username, password, callback) {
            request.post({
                'url': 'http://localhost:2001/api/auth/login',
                'method': 'POST',
                'form': { 'username': username, 'password': password }
            },function(err, response, body) {
                assert.ok(!err);
                callback(err, response, body);
            });
        };

        /**
         * Perform a local user logout using the REST API.
         * @param {Function(err, response, body)}   callback            Standard callback function
         * @param {Object}                          callback.err        Error object containing error message
         * @param {Integer}                         callback.response   Response code
         * @param {String}                          callback.body       Response body
         */
        var logout = function(callback) {
            request.post({
                'uri': 'http://localhost:2001/api/auth/logout',
                'followRedirect': false
            }, function(err, response, body) {
                assert.ok(!err);
                callback(err, response, body);
            });
        };

        /**
         * Test to verify that it should only be possible to create a user if there are valid reCaptcha tokens present or the current user is an admin
         */
        it('Test create user', function(callback) {
            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);
                var globalAdminContext = TestAPI.User.getGlobalAdminContext();

                var r = Math.floor(Math.random()*10000000);
                var username = 'johndoe-' + r;

                createUserViaRest(username, 'public', 'John', 'Doe', 'John Doe', function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(400, response.statusCode, "Anonymous users without a reCaptcha shouldn't be able to create an account.");
                    var j = JSON.parse(body);
                    assert.equal(j.msg, 'Invalid reCaptcha token.');

                    // Create a user account directly and login with it.
                    var tenantAdmin = 'tenantAdmin-' + r;
                    PrincipalsAPI.createUser(anonymousContext, tenantAdmin, 'testtest', 'public', 'en_GB', 'Europe/London', 'tenant', 'admin', 'tenant admin', function(err, tenantAdminId) {
                        assert.ok(!err);
                        login(tenantAdmin, 'testtest', function() {
                            // try creating a user.
                            createUserViaRest(username, 'public', 'John', 'Doe', 'John Doe', function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(401, response.statusCode, "Non-admin logged-in users are not allowed to create an account.");

                                // Promote this user to an admin.
                                PrincipalsAPI.setTenantAdmin(globalAdminContext, tenantAdminId, true, function(err) {
                                    assert.ok(!err);

                                    // Try creating user.
                                    createUserViaRest(username, 'public', 'John', 'Doe', 'John Doe', function(err, response, body) {
                                        assert.ok(!err);
                                        assert.equal(201, response.statusCode);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test to verify that we should only display personal information if the visibility has been set to public or loggedin (and the current user is not anonymous)
         */
        it('Test user permissions', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            var username1 = 'johndoe-' + r;
            var username2 = 'janedoe-' + r;

            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);

                PrincipalsAPI.createUser(anonymousContext, username1, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userid1) {
                    assert.ok(!err);

                    PrincipalsAPI.createUser(anonymousContext, username2, 'testtest', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, userid2) {
                        assert.ok(!err);

                        // Set user1 his visibility to logged in.
                        login(username1, 'testtest', function() {
                            updateUserViaRest(userid1, {'visibility': 'loggedin'}, function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(200, response.statusCode);

                                // Try to get the profile as anon, should fail.
                                logout(function() {
                                    request.get('http://localhost:2001/api/user/' + userid1, function(err, response, body) {
                                        assert.ok(!err);
                                        var j = JSON.parse(body);
                                        assert.equal('loggedin', j.visibility);
                                        assert.equal(undefined, j.profile.firstName);
                                        assert.equal(undefined, j.profile.lastName);
                                        assert.equal('John Doe', j.profile.displayName);

                                        // Getting the profile as user 2 should still work.
                                        login(username2, 'testtest', function() {
                                            request.get('http://localhost:2001/api/user/' + userid1, function(err, response, body) {
                                                assert.ok(!err);
                                                var j = JSON.parse(body);
                                                assert.equal('loggedin', j.visibility);
                                                assert.equal('John', j.profile.firstName);
                                                assert.equal('Doe', j.profile.lastName);
                                                assert.equal('John Doe', j.profile.displayName);

                                                // Set it private.
                                                login(username1, 'testtest', function() {
                                                    updateUserViaRest(userid1, {'visibility': 'private'}, function(err, response, body) {
                                                        assert.ok(!err);
                                                        assert.equal(200, response.statusCode);

                                                        // As another user.
                                                        login(username2, 'testtest', function() {
                                                            request.get('http://localhost:2001/api/user/' + userid1, function(err, response, body) {
                                                                assert.ok(!err);
                                                                var j = JSON.parse(body);
                                                                assert.equal('private', j.visibility);
                                                                assert.equal(undefined, j.profile.firstName);
                                                                assert.equal(undefined, j.profile.lastName);
                                                                assert.equal('John Doe', j.profile.displayName);

                                                                // As anonymous
                                                                logout(function() {
                                                                     request.get('http://localhost:2001/api/user/' + userid1, function(err, response, body) {
                                                                        assert.ok(!err);
                                                                        var j = JSON.parse(body);
                                                                        assert.equal('private', j.visibility);
                                                                        assert.equal(undefined, j.profile.firstName);
                                                                        assert.equal(undefined, j.profile.lastName);
                                                                        assert.equal('John Doe', j.profile.displayName);
                                                                        callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test to verify that we respect the user timezone.
         */
        it('Test timezones', function(callback) {
            var updateAndCheckTimezone = function(userid, timezone, expected, callback) {
                updateUserViaRest(userid, {'timezone': timezone}, function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(200, response.statusCode, 'Failed to set timezone to ' + timezone);

                    request.get('http://localhost:2001/api/me', function(err, response, body) {
                        assert.ok(!err);

                        assert.equal(200, response.statusCode);
                        var j = JSON.parse(body);
                        assert.equal(j.locale.timezone.offset, expected, "Wrong offset for " + timezone);
                        callback();
                    });
                });
            };

            var r = Math.floor(Math.random()*10000000);
            var username = 'johndoe-' + r;

            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);

                PrincipalsAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userid) {
                    assert.ok(!err);

                    login(username, 'testtest', function() {
                        updateAndCheckTimezone(userid, 'America/Argentina/ComodRivadavia', -3, function() {
                            updateAndCheckTimezone(userid, 'America/Caracas', -4.5, function() {
                                updateAndCheckTimezone(userid, 'Asia/Kathmandu', 5.75, function() {
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('Test non standard fields updating.', function(callback) {
            // Create a user and update one of the non-standard fields.
            // When we retrieve the me feed, it should be present.
            var r = Math.floor(Math.random()*10000000);
            var username = 'johndoe-' + r;
            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);
                PrincipalsAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userid) {
                    assert.ok(!err);
                    login(username, 'testtest', function() {
                        updateUserViaRest(userid, {'non-standard-field': 'foobar'}, function(err, response, body) {
                            assert.equal(200, response.statusCode);
                            request.get('http://localhost:2001/api/me', function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(200, response.statusCode);
                                var j = JSON.parse(body);
                                assert.equal(j.profile['non-standard-field'], 'foobar');
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test to verify that it should be possible to change a user password
         */
        it('Test change password', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            var username = 'johndoe-' + r;

            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);

                PrincipalsAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userid) {
                    assert.ok(!err);

                    // First try changing it with the wrong password.
                    request.post({
                        'url': 'http://localhost:2001/api/user/' + userid + '/password',
                        'form': {
                            'oldPassword': 'wrong-password',
                            'newPassword': 'totally-new-password'
                        }
                    }, function(err, response, body) {
                        assert.equal(response.statusCode, 401);

                        // Now try with the correct one.
                        request.post({
                            'url': 'http://localhost:2001/api/user/' + userid + '/password',
                            'form': {
                                'oldPassword': 'testtest',
                                'newPassword': 'totally-new-password'
                            }
                        }, function(err, response, body) {
                            assert.ok(!err)
                            assert.equal(200, response.statusCode);

                            logout(function() {
                                login(username, 'testtest', function(err, response, body) {
                                    assert.equal(401, response.statusCode, "Login with old password should fail.");

                                    // Try with new.
                                    login(username, 'totally-new-password', function(err, response, body) {
                                        assert.equal(200, response.statusCode, "Login with new password should succeed.");
                                        callback();
                                    });
                                });
                            });
                        })
                    });
                });
            });
        });
    });
});
