/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var Counter = require('oae-util/lib/counter');
var ContentDAO = require('oae-content/lib/internal/dao');
var LibraryAPI = require('oae-library');
var log = require('oae-logger').logger('oae-folders-library');

var FoldersAPI = require('oae-folders');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');
var FoldersContentLibrary = require('oae-folders/lib/internal/contentLibrary');


// Keeps track of libraries that are being purged. This is helpful to
// synchronize things like tests so we know when all libraries are purged
var purgeCounter = new Counter();


/**
 * Invoke the handler the next time all libraries are purged. If there
 * are currently no activity delivery events being handled when this is
 * invoked, the handler is invoked immediately
 *
 * @param  {Function}   handler     The handler to invoke when all libraries have been purged
 */
var whenAllPurged = module.exports.whenAllPurged = function(handler) {
    purgeCounter.whenZero(handler);
};


/*!
 * Register a library indexer that can provide resources to reindex the folders library
 */
LibraryAPI.Index.registerLibraryIndex(FoldersConstants.library.FOLDERS_LIBRARY_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the group ids ('g') to which the principal is directly associated in this
        // batch of paged resources. Since the group can be a member of both user groups and
        // folder groups, we filter down to just the folder groups for folder libraries
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, 'g', start, limit, function(err, roles, nextToken) {
            if (err) {
                return callback(err);
            }

            // We just need the ids, not the roles
            var ids = _.pluck(roles, 'id');
            FoldersDAO.getFoldersByGroupIds(ids, function(err, folders) {
                if (err) {
                    return callback(err);
                }

                // Remove empty items, which indicates they mapped to user groups and not folder
                // groups
                folders = _.compact(folders);

                // Convert all the folders into the light-weight library items that describe how
                // they are placed in a library index
                var resources = _.map(folders, function(folder) {
                    return {
                        'id': folder.id,
                        'rank': folder.lastModified,
                        'tenant': folder.tenant,
                        'visibility': folder.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});

/*!
 * Register a library indexer that can provide resources to reindex the folder content library
 */
LibraryAPI.Index.registerLibraryIndex(FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the content ids ('c') to which the folder is directly associated in this
        // batch of paged resources. Since the group can be a member of both user groups and
        // folder groups, we filter down to just the folder groups for folder libraries
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, 'c', start, limit, function(err, roles, nextToken) {
            if (err) {
                return callback(err);
            }

            // We just need the ids, not the roles
            var ids = _.pluck(roles, 'id');

            ContentDAO.Content.getMultipleContentItems(ids, ['contentId', 'tenantAlias', 'visibility', 'lastModified'], function(err, contentItems) {
                if (err) {
                    return callback(err);
                }

                // Convert all the content into the light-weight library items that describe how
                // they are placed in a library index
                var resources = _.map(contentItems, function(contentItem) {
                    return {
                        'id': contentItem.id,
                        'rank': contentItem.lastModified,
                        'tenant': contentItem.tenant,
                        'visibility': contentItem.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});

/*!
 * Configure the search endpoint that allows you to search for content in a folder
 */
LibraryAPI.Search.registerLibrarySearch('folder-content', ['content'], {
    'getLibraryOwner': function(folderId, callback) {
        FoldersDAO.getFolder(folderId, function(err, folder) {
            if (err) {
                return callback(err);
            }

            // We use the *groupId* as a "direct member" of content in the search index
            var library = folder;
            library.indexedId = folder.groupId;
            return callback(null, library);
        });
    }
});

/*!
 * Configure the search endpoint that allows you to search for folders in a principal's library
 */
LibraryAPI.Search.registerLibrarySearch('folder-library', ['folder']);

/*!
 * When a folder gets deleted we remove it as an authz member of all the content items
 * it contained. Eventually we also purge all its content libraries
 */
FoldersAPI.on(FoldersConstants.events.DELETED_FOLDER, function(ctx, folder, memberIds) {
    // Keep track of the async operation
    purgeCounter.incr();

    // Remove the folder as an authz member of all the content items
    _removeAuthzFolderFromAllContentItems(folder, function() {

        // Purge the content library as it's no longer needed
        FoldersContentLibrary.purge(folder, function(err) {
            if (err) {
                log().error({'err': err, 'folderId': folder.id, 'folderGroupId': folder.groupId}, 'Unable to purge a folder content library');
            }

            // At this point the async operation is over
            purgeCounter.decr();
        });
    });
});

/**
 * Remove the authz membership between a folder and all the content that is in it
 *
 * @param  {Folder}     folder          The folder for which to remove the authz membership
 * @param  {Function}   callback        Standard callback function
 * @param  {Object      callback.err    An error object, if any
 * @api private
 */
var _removeAuthzFolderFromAllContentItems = function(folder, callback, _nextToken) {
    FoldersContentLibrary.list(folder, 'private', {'start': _nextToken}, function(err, contentIds, nextToken) {
        if (err) {
            log().error({'err': err, 'folderId': folder.id, 'folderGroupId': folder.groupId}, 'Unable to list the folder content library');
            return callback(err);
        }

        // Remove the folder group from the content item
        _removeAuthzFolderFromContentItems(folder, contentIds, function() {
            if (nextToken) {
                return _removeAuthzFolderFromAllContentItems(folder, callback, nextToken);
            }

            return callback();
        });
    });
};

/**
 * Remove the authz membership between a folder and a set of content items
 *
 * @param  {Folder}     folder          The folder for which to remove the authz membership
 * @param  {String[]}   contentIds      The content ids for which to remove the authz membership
 * @param  {Function}   callback        Standard callback function
 * @param  {Object      callback.err    An error object, if any
 * @api private
 */
var _removeAuthzFolderFromContentItems = function(folder, contentIds, callback) {
    if (_.isEmpty(contentIds)) {
        return callback();
    }

    // Grab the next content id to remove our folder from
    var contentId = contentIds.pop();

    // Remove the folder as an authz member
    var roleChange = {};
    roleChange[folder.groupId] = false;
    AuthzAPI.updateRoles(contentId, roleChange, function(err) {
        if (err) {
            log().error({'err': err, 'folderId': folder.id, 'folderGroupId': folder.groupId, 'contentId': contentId}, 'Unable to remove the folder from a group');
        }

        return _removeAuthzFolderFromContentItems(folder, contentIds, callback);
    });
};

/*!
 * When a content item's visibility is updated we need to rebuild all the folders
 * that contain it. This is to ensure that when we change a content item's visibility
 * to something less open, we don't leak it in the folder libraries
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContentObj, oldContentObj) {
    // Purge all the libraries this content item was in
    _getFolders(newContentObj.id, function(err, folders) {
        if (err) {
            // The error is logged further down the chain, there isn't much more that we can do
            return;
        }

        // Purge all the folder content libraries for the authz folders
        _.each(folders, function(folder) {
            FoldersContentLibrary.purge(folder, function() {
                purgeCounter.decr();
            });

            purgeCounter.incr();
        });
    });
});

/*!
 * When a content item is removed, we need to remove it from the folders it's in
 */
ContentAPI.on(ContentConstants.events.DELETED_CONTENT, function(ctx, contentObj, members) {
    // Grab the folders from the set of authz members
    var folders = _authzMembersToFolders(members);

    // Remove the content item from each folder's library
    _.each(folders, function(folder) {
        FoldersContentLibrary.remove(folder, [contentObj], function() {
            purgeCounter.decr();
        });

        purgeCounter.incr();
    });
});

/**
 * Given a content id, get the folders that it resides in. Note that this
 * function returns *light-weight* folder objects. The only real information
 * that it contains is the `groupId` of the folder
 *
 * @param  {String}     contentId           The id of the piece of content for which to retrieve the light-weight folders
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Object[]}   callback.folders    The light weight folder objects. The only information in each object is the `groupId`
 * @api private
 */
var _getFolders = function(contentId, callback) {
    AuthzAPI.getAuthzMembers(contentId, null, 10000, function(err, members) {
        if (err) {
            log().error({'err': err, 'contentId': contentId}, 'Unable to get the members of a piece of content');
            return callback(err);
        }

        return callback(null, _authzMembersToFolders(members));
    });
};

/**
 * Filter and map a set of authz principals to a set of light-weight folders
 *
 * @param  {AuthzPrincipal[]}   principals      The principals to filter and map to folders
 * @param  {Object[]}           folders         The light weight folder objects. The only information in each object is the `groupId`
 * @api private
 */
var _authzMembersToFolders = function(principals) {
    return _.chain(principals)
        .filter(function(principal) {
            // We're only interested in the groups
            return AuthzUtil.isGroupId(principal.id);
        })
        .map(function(authzGroup) {
            // Return a light-weight folder
            return {'groupId': authzGroup.id};
        })
        .value();
};
