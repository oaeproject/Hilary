/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzUtil = require('oae-authz/lib/util');
var LibraryAPI = require('oae-library');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var TenantsAPI = require('oae-tenants');

var DiscussionsAPI = require('./api');
var DiscussionsConstants = require('./constants').DiscussionsConstants;
var DiscussionsDAO = require('./internal/dao');

//////////////////////
// SEARCH ENDPOINTS //
//////////////////////

LibraryAPI.Search.registerLibrarySearch('discussion-library', 'discussion');

////////////////////
// INDEXING TASKS //
////////////////////

DiscussionsAPI.on(DiscussionsConstants.events.CREATED_DISCUSSION, function(ctx, discussion, members) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'discussion',
        'resources': [{
            'id': discussion.id,
            'opts': {
                'indexResource': true,
                'indexMembers': true
            }
        }]
    });
});

DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION, function(ctx, discussion, updatedDiscussion) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'discussion',
        'resources': [{
            'id': discussion.id,
            'opts': {
                'indexResource': true,
                'indexMembers': false
            }
        }]
    });
});

DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION_MEMBERS, function(ctx, discussion) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'discussion',
        'resources': [{
            'id': discussion.id,
            'opts': {
                'indexResource': true,
                'indexMembers': true
            }
        }]
    });
});

DiscussionsAPI.on(DiscussionsConstants.events.DELETED_DISCUSSION, function(ctx, discussionId) {
    MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'resourceType': 'discussion', 'id': discussionId});
});

////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for 'discussion' resources.
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceDiscussionSearchDocuments = function(resources, callback) {
    _getDiscussions(resources, function(err, discussions) {
        if (err) {
            return callback(err);
        }

        // Some discussions might have already been deleted.
        discussions = _.compact(discussions);
        if (discussions.length === 0) {
            return callback();
        }

        var docs = _.map(discussions, _produceDiscussionSearchDocument);
        return callback(null, docs);
    });
};

/**
 * Gets a set of discussions.
 *
 * @param  {Object[]}   resources   An array of resources to index.
 * @param  {Function}   callback    Standard callback method
 * @api private
 */
var _getDiscussions = function(resources, callback) {
    var discussions = [];
    var discussionIds = [];

    _.each(resources, function(resource) {
        if (resource.discussion) {
            dicussions.push(resource.discussion);
        } else {
            discussionIds.push(resource.id);
        }
    });

    if (discussionIds.length === 0) {
        return callback(null, discussions);
    }

    DiscussionsDAO.getDiscussionsById(discussionIds, callback);
};

/**
 * Given a discussion item, it produces an appropriate search document.
 *
 * @param  {Discussion}     discussion  The discussion item to index.
 * @return {SearchDoc}                  The produced search document.
 * @api private
 */
var _produceDiscussionSearchDocument = function(discussion) {
    // Allow full-text search on name and description, but only if they are specified. We also sort on this text
    var fullText = _.compact([discussion.displayName, discussion.description]).join(' ');

    // Add all properties for the resource document metadata
    var doc = {
        'resourceType': 'discussion',
        'id': discussion.id,
        'tenantAlias': discussion.tenant.alias,
        'displayName': discussion.displayName,
        'visibility': discussion.visibility,
        'q_high': discussion.displayName,
        'q_low': fullText,
        'sort': fullText,
        '_extra': {
            'lastModified': discussion.lastModified
        }
    };

    if (discussion.description) {
        doc.description = discussion.description;
    }

    return doc;
};

SearchAPI.registerSearchDocumentProducer('discussion', _produceDiscussionSearchDocuments);

///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

/**
 * Given an array of discussion search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param  {Context}   ctx             The current context
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformDiscussionDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    var principalId = (ctx.user() ? ctx.user().id : null);
    _.each(docs, function(doc, docId) {
        var result = _.extend({}, doc.fields, {'id': doc['_id']});
        result.lastModified = doc.fields._extra.lastModified;
        result.tenant = TenantsAPI.getCachedTenantByAlias(result.tenantAlias).compact();
        var resourceId = AuthzUtil.getResourceFromId(result.id).resourceId;
        result.profilePath = '/discussion/' + result.tenant.alias + '/' + resourceId;
        transformedDocs[docId] = result;
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('discussion', _transformDiscussionDocuments);
