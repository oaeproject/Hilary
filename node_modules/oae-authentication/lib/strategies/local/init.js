/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var LocalStrategy = require('passport-local').Strategy;
var passport = require('passport');

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model').User;

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

var globalTenantAlias;

module.exports = function(config) {
    globalTenantAlias = config.servers.globalAdminAlias;

    // Build up the OAE strategy.
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias) {
        // The global tenant should always have local login enabled.
        if (tenantAlias === globalTenantAlias) {
            return true;

        // Otherwise we need to check the configuration.
        } else {
            return AuthenticationConfig.getValue(tenantAlias, AuthenticationConstants.providers.LOCAL, 'enabled');
        }
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant) {
        var passportStrategy = new LocalStrategy({'passReqToCallback': true}, function(req, username, password, done) {
            var tenant = req.tenant;
            AuthenticationAPI.checkPassword(tenant.alias, username, password, function(err, userId) {
                if (err && err.code === 401) {
                    // The provided password was incorrect
                    return done(null, false);
                } else if (err) {
                    // Some internal error occurred
                    return done(err);
                }

                // By this point we know that we were succesfully logged in.
                // Retrieve the user account and stick it in the context.
                var ctx = new Context(tenant, new User(tenant.alias, userId));
                PrincipalsAPI.getUser(ctx, userId, function(err, user) {
                    if (err) {
                        return done(err);
                    }
                    AuthenticationUtil.logAuthenticationSuccess(req, user, AuthenticationConstants.providers.LOCAL);
                    return done(null, user);
                });
            });
        });
        return passportStrategy;
    };

    // Register our strategy.
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.LOCAL, strategy);

    // The local strategy is the only strategy that we register on the global admin server.
    // As this is a special case, it's OK to hardcode it.
    var globalTenant = {'alias': globalTenantAlias};
    var adminLocalPassportStrategyName = AuthenticationUtil.getStrategyId(globalTenant, AuthenticationConstants.providers.LOCAL);
    passport.use(adminLocalPassportStrategyName, strategy.getPassportStrategy(globalTenant));
};
