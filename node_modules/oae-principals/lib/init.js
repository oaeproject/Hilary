/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var AuthenticationAPI = require('oae-authentication');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var PrincipalsAPI = require('oae-principals');

module.exports = function(config, callback) {

    // Initialize activity capabilities
    require('oae-principals/lib/activity');

    // Initialize search capabilities
    require('oae-principals/lib/search');

    // Initialize library capabilities
    require('oae-principals/lib/library');

    _ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        return _ensureGlobalAdmin(config, callback);
    });
};

/**
 * Ensure that the all of the principal-related schemas are created. If they already exist, this method will not
 * do anything
 *
 * @param  {Function}    callback       Standard callback function
 * @param  {Object}      callback.err   An error that occurred, if any
 * @api private
 */
var _ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'EmailTokens': 'CREATE TABLE "EmailTokens" ("token" text PRIMARY KEY, "userId" text)',
        'Principals': 'CREATE TABLE "Principals" ("principalId" text PRIMARY KEY, "tenantAlias" text, "displayName" text, "description" text, "email" text, "emailPreference" text, "emailVerified" boolean, "visibility" text, "joinable" text, "lastModified" text, "locale" text, "publicAlias" text, "largePictureUri" text, "mediumPictureUri" text, "smallPictureUri" text, "admin:global" text, "admin:tenant" text, "notificationsUnread" text, "notificationsLastRead" text, "acceptedTC" text, "createdBy" text, "created" timestamp, "guest" boolean)',
        'PrincipalsByEmail': 'CREATE TABLE "PrincipalsByEmail" ("email" text PRIMARY KEY, "principalId" text)'
    }, callback);
};

/**
 * Ensure that the default global administrative user exists with username "administrator", and create
 * them if they do not
 *
 * @param  {Object}      config          The server configuration
 * @param  {Function}    callback        Standard callback function
 * @param  {Object}      callback.err    An error that occurred, if any
 * @api private
 */
var _ensureGlobalAdmin = function(config, callback) {
    // Mock a global admin request context so we can create a proper global administrator in the system
    var globalTenant = TenantsAPI.getTenant(config.servers.globalAdminAlias);
    var globalUser = new User(globalTenant.alias, 'u:' + globalTenant.alias + ':admin', 'Global Administrator', {
        'visibility': AuthzConstants.visibility.PRIVATE,
        'isGlobalAdmin': true
    });
    var globalContext = new Context(globalTenant, globalUser);

    // Create the global admin user if they don't exist yet with the username "administrator"
    AuthenticationAPI.getOrCreateGlobalAdminUser(globalContext, 'administrator', 'administrator', 'Global Administrator', null, callback);
};
