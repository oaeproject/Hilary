/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var ActivityTestsUtil = require('oae-activity/lib/test/util');
var EmailTestsUtil = require('oae-email/lib/test/util');

describe('Principals Activity', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    /*!
     * Get the activity from the stream with the given criteria.
     *
     * @param   {ActivityStream}    activityStream      The stream to search
     * @param   {String}            activityType        The type of activity to find
     * @param   {String}            entityType          The type of entity to apply the criteria (one of actor, object or target)
     * @param   {String}            entityOaeId         The oae:id of the entity to search
     * @return  {Activity}                              An activity from the stream that matches the provided criteria
     */
    var _getActivity = function(activityStream, activityType, entityType, entityOaeId) {
        if (!activityStream || !activityStream.items) {
            return null;
        }

        for (var i = 0; i < activityStream.items.length; i++) {
            var activity = activityStream.items[i];
            if (activity['oae:activityType'] === activityType && activity[entityType] && activity[entityType]['oae:id'] === entityOaeId) {
                return activity;
            }
        }
        return null;
    };

    describe('Routes', function() {

        it('verify cyclic group memberships terminate while routing an activity', function(callback) {
            var doerUsername = TestsUtil.generateTestUserId('doer');
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var group1Alias = TestsUtil.generateTestUserId('group1');
            var group2Alias = TestsUtil.generateTestUserId('group2');
            var group3Alias = TestsUtil.generateTestUserId('group3');
            var group4Alias = TestsUtil.generateTestUserId('group4');

            RestAPI.User.createUser(camAdminRestContext, doerUsername, 'password', 'Doer', null, function(err, doer) {
                assert.ok(!err);
                var doerCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, doerUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    // Create the 4 groups that will form a cycle
                    RestAPI.Group.createGroup(doerCtx, group1Alias, group1Alias, group1Alias, 'public', 'no', [], [], function(err, group1) {
                        assert.ok(!err);

                        RestAPI.Group.createGroup(doerCtx, group2Alias, group2Alias, group2Alias, 'public', 'no', [group1.id], [], function(err, group2) {
                            assert.ok(!err);

                            // Group 3 will be joinable, so Jack can join it to trigger an activity
                            RestAPI.Group.createGroup(doerCtx, group3Alias, group3Alias, group3Alias, 'public', 'yes', [group2.id], [], function(err, group3) {
                                assert.ok(!err);

                                RestAPI.Group.createGroup(doerCtx, group4Alias, group4Alias, group4Alias, 'public', 'no', [group3.id], [], function(err, group4) {
                                    assert.ok(!err);

                                    // Add group4 as manager to group1 to complete the cycle
                                    var cycleChange = {};
                                    cycleChange[group4.id] = 'manager';
                                    RestAPI.Group.setGroupMembers(doerCtx, group1.id, cycleChange, function(err) {
                                        assert.ok(!err);

                                        RestAPI.Group.joinGroup(jackCtx, group3.id, function(err) {
                                            assert.ok(!err);

                                            // Verify that each group now has this as its most recent activity
                                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, group1.id, null, function(err, activityStream) {
                                                assert.ok(!err);
                                                assert.equal(activityStream.items[0]['oae:activityType'], 'group-join');
                                                assert.equal(activityStream.items[0].object['oae:id'], group3.id);

                                                ActivityTestsUtil.collectAndGetActivityStream(jackCtx, group2.id, null, function(err, activityStream) {
                                                    assert.ok(!err);
                                                    assert.equal(activityStream.items[0]['oae:activityType'], 'group-join');
                                                    assert.equal(activityStream.items[0].object['oae:id'], group3.id);

                                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, group3.id, null, function(err, activityStream) {
                                                        assert.ok(!err);
                                                        assert.equal(activityStream.items[0]['oae:activityType'], 'group-join');
                                                        assert.equal(activityStream.items[0].object['oae:id'], group3.id);

                                                        ActivityTestsUtil.collectAndGetActivityStream(jackCtx, group4.id, null, function(err, activityStream) {
                                                            assert.ok(!err);
                                                            assert.equal(activityStream.items[0]['oae:activityType'], 'group-join');
                                                            assert.equal(activityStream.items[0].object['oae:id'], group3.id);
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that activities are routed to indirect group member descendants. This exercises a "membership" operation which should
         * only be routed to managers, as well as a regular update operation which should get routed to all members.
         */
        it('verify group activities are routed to group member descendants', function(callback) {
            var doerUsername = TestsUtil.generateTestUserId('doer');
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var targetGroupAlias = TestsUtil.generateTestUserId('targetGroup');
            var managerGroupAlias = TestsUtil.generateTestUserId('managerGroup');
            var memberGroupAlias = TestsUtil.generateTestUserId('memberGroup');
            var managerGroupMemberUsername = TestsUtil.generateTestUserId('managerGroupMember');

            RestAPI.User.createUser(camAdminRestContext, doerUsername, 'password', 'Doer', null, function(err, doer) {
                assert.ok(!err);
                var doerCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, doerUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, managerGroupMemberUsername, 'password', 'Jane', null, function(err, managerGroupMember) {
                        assert.ok(!err);
                        var managerGroupMemberCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, managerGroupMemberUsername, 'password');

                        // Create the member group, which will be member to the group that gets updated and has a user added. This group should not receive the "user added" activity
                        RestAPI.Group.createGroup(doerCtx, memberGroupAlias, memberGroupAlias, memberGroupAlias, 'public', 'no', [], [], function(err, memberGroup) {
                            assert.ok(!err);

                            // Create the manager group, which should receive both update and "user added" activities
                            RestAPI.Group.createGroup(doerCtx, managerGroupAlias, managerGroupAlias, managerGroupAlias, 'public', 'no', [], [], function(err, managerGroup) {
                                assert.ok(!err);

                                // ManagerGroupMember should be a member of the manager group to verify indirect group member routing
                                var membership = {};
                                membership[managerGroupMember.id] = 'manager';
                                RestAPI.Group.setGroupMembers(doerCtx, managerGroup.id, membership, function(err) {
                                    assert.ok(!err);

                                    // Create the target group, manager group and member group are members
                                    RestAPI.Group.createGroup(doerCtx, targetGroupAlias, targetGroupAlias, targetGroupAlias, 'public', 'yes', [managerGroup.id], [memberGroup.id], function(err, targetGroup) {
                                        assert.ok(!err);

                                        RestAPI.Group.joinGroup(jackCtx, targetGroup.id, function(err) {
                                            assert.ok(!err);

                                            // Update the group to propagate an activity
                                            RestAPI.Group.updateGroup(doerCtx, targetGroup.id, {'displayName': 'Ha ha I make change'}, function(err) {
                                                assert.ok(!err);

                                                // Ensure manager group received both update and join activities
                                                ActivityTestsUtil.collectAndGetActivityStream(doerCtx, managerGroup.id, null, function(err, activityStream) {
                                                    assert.ok(!err);
                                                    assert.ok(_getActivity(activityStream, 'group-update', 'object', targetGroup.id));
                                                    assert.ok(_getActivity(activityStream, 'group-join', 'object', targetGroup.id));

                                                    // Ensure the member group received update, but not join
                                                    ActivityTestsUtil.collectAndGetActivityStream(doerCtx, memberGroup.id, null, function(err, activityStream) {
                                                        assert.ok(!err);
                                                        assert.ok(_getActivity(activityStream, 'group-update', 'object', targetGroup.id));
                                                        assert.ok(!_getActivity(activityStream, 'group-join', 'object', targetGroup.id));

                                                        // Ensure member of the manager group got both update and join
                                                        ActivityTestsUtil.collectAndGetActivityStream(managerGroupMemberCtx, managerGroupMember.id, null, function(err, activityStream) {
                                                            assert.ok(!err);
                                                            assert.ok(_getActivity(activityStream, 'group-update', 'object', targetGroup.id));
                                                            assert.ok(_getActivity(activityStream, 'group-join', 'object', targetGroup.id));
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Activity Entity Model', function() {

        /**
         * Returns a stream to a jpg image
         *
         * @return {Stream} A stream to jpg image.
         */
        var getPictureStream = function() {
            var file = __dirname + '/data/restroom.jpg';
            return fs.createReadStream(file);
        };

        /**
         * Test that verifies the contents of the full group and user activity entity models.
         */
        it('verify the user and group activity entity model', function(callback) {
            var publicUsername = TestsUtil.generateTestUserId('userPublic');
            var privateUsername = TestsUtil.generateTestUserId('userPrivate');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create a public user so we can verify all the information is returned
            RestAPI.User.createUser(camAdminRestContext, publicUsername, 'password', 'Jack McJackerson', {'visibility': 'public'}, function(err, publicUser) {
                assert.ok(!err);
                var publicUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, publicUsername, 'password');

                var sizes = {
                    'x': 0,
                    'y': 0,
                    'width': 35,
                    'height': 35
                };

                // Give the users a profile picture so we can verify it is on the entity model
                RestAPI.User.uploadPicture(publicUserRestContext, publicUser.id, getPictureStream, sizes, function(err) {
                    assert.ok(!err);

                    // Create private user so we can verify information is properly hidden where appropriate
                    RestAPI.User.createUser(camAdminRestContext, privateUsername, 'password', 'Jane Janerville', {'visibility': 'private', 'publicAlias': 'Jane'}, function(err, privateUser) {
                        assert.ok(!err);
                        var privateUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, privateUsername, 'password');

                        // Add a profile picture to the private user so we can verify it gets hidden
                        RestAPI.User.uploadPicture(privateUserRestContext, privateUser.id, getPictureStream, sizes, function(err) {
                            assert.ok(!err);

                            // Create a group with the public user
                            RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'no', [publicUser.id], [], function(err, group) {
                                assert.ok(!err);

                                // Give the group a profile picture
                                RestAPI.Group.uploadPicture(camAdminRestContext, group.id, getPictureStream, sizes, function(err) {
                                    assert.ok(!err);

                                    // Add the private user
                                    var memberships = {};
                                    memberships[privateUser.id] = 'member';
                                    RestAPI.Group.setGroupMembers(publicUserRestContext, group.id, memberships, function(err) {
                                        assert.ok(!err);

                                        // Verify the public user feed, which will have the add group member activity. It will have the public user as the actor, the private user as the object and the group as the target
                                        ActivityTestsUtil.collectAndGetActivityStream(publicUserRestContext, publicUser.id, null, function(err, activityStream) {
                                            assert.ok(!err);
                                            
                                            var activity = activityStream.items[0];
                                            assert.ok(activity);

                                            var actor = activity.actor;     // Public user
                                            var object = activity.object;   // Private user
                                            var target = activity.target;   // Group
                                            assert.ok(actor);
                                            assert.ok(object);
                                            assert.ok(target);

                                            // Verify the public user model
                                            assert.equal(actor['oae:visibility'], publicUser.visibility);
                                            assert.ok(actor['url'].indexOf(publicUser.id) !== -1);
                                            assert.equal(actor['objectType'], 'user');
                                            assert.ok(actor['id'].indexOf(publicUser.id) !== -1);
                                            assert.equal(actor['oae:id'], publicUser.id);
                                            assert.equal(actor['oae:profilePath'], publicUser.profilePath);
                                            assert.equal(actor['displayName'], publicUser.displayName);
                                            assert.ok(actor['image']);

                                            // Verify the private user model
                                            assert.equal(object['oae:visibility'], privateUser.visibility);
                                            assert.equal(object['objectType'], 'user');
                                            assert.ok(object['id'].indexOf(privateUser.id) !== -1);
                                            assert.equal(object['oae:id'], privateUser.id);
                                            assert.equal(object['oae:profilePath'], undefined);
                                            assert.equal(object['displayName'], privateUser.publicAlias);

                                            // Url and image are not defined for unprivileged users in feeds
                                            assert.ok(!object['url']);
                                            assert.ok(!object['image']);

                                            // Verify the group model
                                            assert.equal(target['oae:visibility'], group.visibility);
                                            assert.equal(target['displayName'], group.displayName);
                                            assert.ok(target['url'].indexOf(group.id) !== -1);
                                            assert.equal(target['objectType'], 'group');
                                            assert.ok(target['id'].indexOf(group.id) !== -1);
                                            assert.equal(target['oae:id'], group.id);
                                            assert.equal(target['oae:profilePath'], group.profilePath);
                                            assert.ok(target['image']);

                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies private groups are not delivered to unauthorized users' activity feeds
         */
        it('verify private group is propagated to non-member users', function(callback) {
            // 1. Create user with admin
            // 2. Create private group with admin
            // 3. Create content with user
            // 4. Share content with private group with admin
            // 5. Verify that the group information is not leaked to the user
            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            var sizes = {
                'x': 0,
                'y': 0,
                'width': 35,
                'height': 35
            };

            // Create a user with which to create a group, then ensure the user gets the activity
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                assert.ok(!err);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'private', 'no', [], [], function(err, group) {
                    assert.ok(!err);

                    RestAPI.User.uploadPicture(camAdminRestContext, group.id, getPictureStream, sizes, function(err) {
                        assert.ok(!err);

                        RestAPI.Content.createLink(userRestContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                            assert.ok(!err);

                            RestAPI.Content.shareContent(camAdminRestContext, link.id, [group.id], function(err) {
                                assert.ok(!err);

                                ActivityTestsUtil.collectAndGetActivityStream(camAdminRestContext, user.id, null, function(err, activityStream) {
                                    assert.ok(!err);

                                    // Verify the target group is scrubbed
                                    var activity = _getActivity(activityStream, 'content-share', 'target', group.id);
                                    assert.ok(activity);

                                    var groupEntity = activity.target;
                                    assert.ok(groupEntity.id);
                                    assert.equal(groupEntity.objectType, 'group');
                                    assert.equal(groupEntity['oae:id'], group.id);
                                    assert.equal(groupEntity['displayName'], group.displayName);
                                    assert.equal(groupEntity['oae:visibility'], group.visibility);
                                    assert.equal(groupEntity['oae:joinable'], group.joinable);
                                    assert.notEqual(groupEntity['url'].indexOf(group.id), -1);
                                    assert.ok(groupEntity['image']);

                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Posting Activities', function() {

        /**
         * Test that verifies the group-create, group-update and group-update-visibility activities gets generated
         */
        it('verify group-create, group-update, group-update-visibility activities are delivered', function(callback) {
            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create a user with which to create a group, then ensure the user gets the activity
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                assert.ok(!err);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'no', [user.id], [], function(err, group) {
                    assert.ok(!err);

                    RestAPI.Group.updateGroup(camAdminRestContext, group.id, {'visibility': 'loggedin'}, function(err) {
                        assert.ok(!err);

                        RestAPI.Group.updateGroup(camAdminRestContext, group.id, {'displayName': 'har har har'}, function(err) {
                            assert.ok(!err);

                            ActivityTestsUtil.collectAndGetActivityStream(camAdminRestContext, user.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(_getActivity(activityStream, 'group-create', 'object', group.id));
                                assert.ok(_getActivity(activityStream, 'group-update', 'object', group.id));
                                assert.ok(_getActivity(activityStream, 'group-update-visibility', 'object', group.id));
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the group-join activity gets fired
         */
        it('verify group-join activity is delivered', function(callback) {
            var doerUsername = TestsUtil.generateTestUserId('doer');
            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create the user with which to perform setup
            RestAPI.User.createUser(camAdminRestContext, doerUsername, 'password', 'Doer', null, function(err, doer) {
                assert.ok(!err);
                var doerRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, doerUsername, 'password');

                // Create a user with which to create a group, then ensure the user gets the activity
                RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                    assert.ok(!err);
                    var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                    RestAPI.Group.createGroup(doerRestContext, groupAlias, groupAlias, groupAlias, 'public', 'yes', [], [], function(err, group) {
                        assert.ok(!err);

                        RestAPI.Group.joinGroup(userRestContext, group.id, function(err) {
                            assert.ok(!err);

                            ActivityTestsUtil.collectAndGetActivityStream(userRestContext, user.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(_getActivity(activityStream, 'group-join', 'object', group.id));
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the group-add-member activity gets generated
         */
        it('verify group-add-member activity gets generated', function(callback) {
            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create a user with which to create a group, then ensure the user gets the activity
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                assert.ok(!err);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'yes', [], [], function(err, group) {
                    assert.ok(!err);

                    var memberships = {};
                    memberships[user.id] = 'member';
                    RestAPI.Group.setGroupMembers(camAdminRestContext, group.id, memberships, function(err) {
                        assert.ok(!err);

                        ActivityTestsUtil.collectAndGetActivityStream(camAdminRestContext, user.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            assert.ok(_getActivity(activityStream, 'group-add-member', 'target', group.id));
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('Activity Aggregation', function() {

        /**
         * Test that verifies group-join activities aggregate.
         */
        it('verify group-join activities aggregation', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var brandenUsername = TestsUtil.generateTestUserId('branden');
            var groupAlias = TestsUtil.generateTestUserId('targetGroup');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                    assert.ok(!err);
                    var janeCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, brandenUsername, 'password', 'Branden', null, function(err, branden) {
                        assert.ok(!err);
                        var brandenCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, brandenUsername, 'password');

                        RestAPI.Group.createGroup(jackCtx, groupAlias, groupAlias, groupAlias, 'public', 'yes', [], [], function(err, group) {
                            assert.ok(!err);

                            // Join as jane
                            RestAPI.Group.joinGroup(janeCtx, group.id, function(err) {
                                assert.ok(!err);

                                // Join as branden
                                RestAPI.Group.joinGroup(brandenCtx, group.id, function(err) {
                                    assert.ok(!err);

                                    // Get jack's own feed
                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                        assert.ok(!err);

                                        // Verify 1 for the group create, plus 1 for the aggregated group-join activities
                                        assert.equal(activityStream.items.length, 2);

                                        // Verify the first is the group join, with a collection of 2 actor entities (jane and branden)
                                        var entity = activityStream.items[0].actor;
                                        assert.ok(entity['oae:collection']);
                                        assert.equal(entity['oae:collection'].length, 2);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies group-add-member activities aggregate.
         */
        it('verify group-add-member activities aggregation', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var brandenUsername = TestsUtil.generateTestUserId('branden');
            var groupAlias = TestsUtil.generateTestUserId('targetGroup');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                    assert.ok(!err);

                    RestAPI.User.createUser(camAdminRestContext, brandenUsername, 'password', 'Branden', null, function(err, branden) {
                        assert.ok(!err);

                        RestAPI.Group.createGroup(jackCtx, groupAlias, groupAlias, groupAlias, 'public', 'yes', [], [], function(err, group) {
                            assert.ok(!err);

                            // Join as jane
                            var membership = {};
                            membership[jane.id] = 'member';
                            RestAPI.Group.setGroupMembers(jackCtx, group.id, membership, function(err) {
                                assert.ok(!err);

                                // Join as branden
                                membership = {};
                                membership[branden.id] = 'member';
                                RestAPI.Group.setGroupMembers(jackCtx, group.id, membership, function(err) {
                                    assert.ok(!err);

                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                        assert.ok(!err);

                                        // Verify 1 for the group create, plus 1 for the aggregated group-add-member activities
                                        assert.equal(activityStream.items.length, 2);

                                        // Verify the first is the group join, with a collection of 2 actor entities (jane and branden)
                                        var entity = activityStream.items[0].object;
                                        assert.ok(entity['oae:collection']);
                                        assert.equal(entity['oae:collection'].length, 2);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Emails', function() {

        /**
         * Verify that when a user is added to a group at the time a group is created, they receive an email. Also verifies
         * that private user information is appropriately scrubbed from the email.
         */
        it('verify group-create email and privacy', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                var simong = _.values(users)[1];

                mrvisser.user.email = 'mrvisser' + Math.random() + '@email.com';
                simong.user.email = 'simong' + Math.random() + '@email.com';

                // Simon is private and mrvisser is public
                var mrvisserUpdate = {'email': mrvisser.user.email};
                var simongUpdate = {
                    'email': simong.user.email,
                    'visibility': 'private',
                    'publicAlias': 'swappedFromPublicAlias'
                };

                RestAPI.User.updateUser(mrvisser.restContext, mrvisser.user.id, mrvisserUpdate, function(err) {
                    assert.ok(!err);

                    RestAPI.User.updateUser(simong.restContext, simong.user.id, simongUpdate, function(err) {
                        assert.ok(!err);

                        // Create the group with a user. We will ensure that user receives an email
                        RestAPI.Group.createGroup(simong.restContext, 'emailGroupCreate', 'emailGroupCreate', 'emailGroupCreate', 'public', 'yes', [], [mrvisser.user.id], function(err, group) {
                            assert.ok(!err);

                            // Mrvisser should get an email, with simong's information scrubbed
                            EmailTestsUtil.collectAndFetchEmails(function(messages) {

                                // There should be exactly one message, the one sent to mrvisser
                                assert.equal(messages.length, 1);

                                var stringMessage = JSON.stringify(messages[0]);
                                var message = messages[0]._message;

                                // Sanity check that the message is to mrvisser
                                assert.equal(message.to, mrvisser.user.email);

                                // Ensure simong's private info is *nowhere* to be found
                                assert.equal(stringMessage.indexOf(simong.user.displayName), -1);
                                assert.equal(stringMessage.indexOf(simong.user.email), -1);
                                assert.equal(stringMessage.indexOf(simong.user.locale), -1);
                                assert.equal(stringMessage.indexOf(simong.user.timezone), -1);

                                // The message probably contains the public alias, though
                                assert.notEqual(stringMessage.indexOf('swappedFromPublicAlias'), -1);
                                
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify that when a user is added to a group, they receive an email. Also verifies that private user information
         * is appropriately scrubbed from the email.
         */
        it('verify group-add-member email and privacy', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                var simong = _.values(users)[1];

                mrvisser.user.email = 'mrvisser' + Math.random() + '@email.com';
                simong.user.email = 'simong' + Math.random() + '@email.com';

                // Simon is private and mrvisser is public
                var mrvisserUpdate = {'email': mrvisser.user.email};
                var simongUpdate = {
                    'email': simong.user.email,
                    'visibility': 'private',
                    'publicAlias': 'swappedFromPublicAlias'
                };

                RestAPI.User.updateUser(mrvisser.restContext, mrvisser.user.id, mrvisserUpdate, function(err) {
                    assert.ok(!err);

                    RestAPI.User.updateUser(simong.restContext, simong.user.id, simongUpdate, function(err) {
                        assert.ok(!err);

                        // Create the group and then share it after. We will verify the share triggered an email
                        RestAPI.Group.createGroup(simong.restContext, 'emailGroupAddMember', 'emailGroupAddMember', 'emailGroupAddMember', 'public', 'yes', [], [], function(err, group) {
                            assert.ok(!err);

                            // Collect the createGroup activity and emails before adding a member
                            EmailTestsUtil.collectAndFetchEmails(function(messages) {

                                var roleChanges = {};
                                roleChanges[mrvisser.user.id] = 'member';
                                RestAPI.Group.setGroupMembers(simong.restContext, group.id, roleChanges, function(err) {
                                    assert.ok(!err);

                                    // Mrvisser should get an email, with simong's information scrubbed
                                    EmailTestsUtil.collectAndFetchEmails(function(messages) {

                                        // There should be exactly one message, the one sent to mrvisser
                                        assert.equal(messages.length, 1);

                                        var stringMessage = JSON.stringify(messages[0]);
                                        var message = messages[0]._message;

                                        // Sanity check that the message is to mrvisser
                                        assert.equal(message.to, mrvisser.user.email);

                                        // Ensure simong's private info is *nowhere* to be found
                                        assert.equal(stringMessage.indexOf(simong.user.displayName), -1);
                                        assert.equal(stringMessage.indexOf(simong.user.email), -1);
                                        assert.equal(stringMessage.indexOf(simong.user.locale), -1);
                                        assert.equal(stringMessage.indexOf(simong.user.timezone), -1);

                                        // The message probably contains the public alias, though
                                        assert.notEqual(stringMessage.indexOf('swappedFromPublicAlias'), -1);
                                        
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});

