/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var log = require('oae-logger').logger('search');
var ElasticSearch = require('./internal/elasticsearch');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

module.exports = function(config, callback) {
    var hosts = config.search.hosts;
    var index = config.search.index;
    var processIndexJobs = config.search.processIndexJobs !== false;
    var destroy = config.search.index.destroyOnStartup === true;

    SearchAPI.registerSearch('general', require('./searches/general'));
    SearchAPI.refreshSearchConfiguration(index.name, { hosts: hosts }, processIndexJobs, function(err) {
        if (err) {
            return callback(err);
        }

        ensureIndex(index.name, index.settings, destroy, function(err) {
            if (err) {
                return callback(err);
            }

            ensureSearchSchema(config, callback);
        });
    });
};

/**
 * Ensure that the index identified by the index name exists.
 *
 * @param  {String}        indexName           The name of the index
 * @param  {Object}        indexSettings       The settings of the index
 * @param  {Object[]}      indexSettings.hosts An array of hosts (e.g., `[{ "host": "localhost", "port": 9200 }]`) to use
 * @param  {Boolean}       destroy             If true, the index will be destroyed if it exists, then recreated.
 * @param  {Function}      callback            Invoked when the process completes
 * @param  {Object}        callback.err        An error that occurred, if any
 * @api private
 */
var ensureIndex = function(indexName, indexSettings, destroy, callback) {
    if (destroy) {
        log().info('Destroying index "%s" on initialization.', indexName);
        ElasticSearch.deleteIndex(indexName, function(err) {
            if (err) {
                return callback(err);
            }

            ElasticSearch.createIndex(indexName, indexSettings, function(err) {
                if (err) {
                    log().error({'err': err}, 'Error recreating index "%s" after deletion.', indexName);
                    return callback(err);
                }

                log().info('Recreated index "%s" after deletion.', indexName);
                return callback();
            });
        });
    } else {
        ElasticSearch.createIndex(indexName, indexSettings, function(err) {
            if (err) {
                log().error({'err': err}, 'Error creating index "%s".', indexName);
                return callback(err);
            }

            return callback();
        });
    }
};

/**
 * Create the central resource search schema if it isn't already created.
 *
 * @param  {Object}    config          The search configuration object.
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @api private
 */
var ensureSearchSchema = function(config, callback) {
    // Gather all the search document schemas to auto-create them
    var resourceSchema = require('./schemas/resourceSchema');
    var resourceMembersSchema = require('./schemas/resourceMembersSchema');
    var resourceMembershipsSchema = require('./schemas/resourceMembershipsSchema');

    // The below elastic search options mean:
    //
    //  * `_source: false` indicates that the _source field is disabled for the mapping, saving disk space as it is not needed
    //  * `_parent: ...` establishes a parent-child relationship from the resource document to its child documents.
    //
    // For more information, please see the elasticsearch mapping documentation:
    // http://www.elasticsearch.org/guide/reference/mapping/

    ElasticSearch.putMapping(SearchConstants.resourceMappingName, resourceSchema, {'_source': false}, function(err) {
        if (err) {
            return callback(err);
        }

        // Members and memberships mappings are children to the parent resource.
        childOpts = {
            '_source': false,
            '_parent': SearchConstants.resourceMappingName
        };

        ElasticSearch.putMapping(SearchConstants.resourceMembersMappingName, resourceMembersSchema, childOpts, function(err) {
            if (err) {
                return callback(err);
            }

            ElasticSearch.putMapping(SearchConstants.resourceMembershipsMappingName, resourceMembershipsSchema, childOpts, callback);
        });
    });
};
