/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * visibilitys and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;
var User = require('oae-principals/lib/model.user').User;
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('Profiles', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Context object that can be used every time we need to use the internal API as a global admin
    var globalAdminContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the global admin context
        var globalTenant = new Tenant('admin', 'Global tenant', 'localhost:2000');
        globalAdminContext = new Context(globalTenant, new User(globalTenant.alias, 'u:global:administrator', 'The global admin user', { isGlobalAdmin: true }));

        callback();
    });


    describe('Set profile section', function() {

        /**
         * Test that verifies that profiles sections can be set and retrieved
         */
        it('verify basic profile section', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Set a profile section
                RestAPI.Profile.setSection(users[userId].restContext, userId, 'section1', 'loggedin', {'field1': 'Test1', 'field2': 'Test2'}, null, function(err) {
                    assert.ok(!err);

                    // Try and get the profile section
                    RestAPI.Profile.getSection(users[userId].restContext, userId, 'section1', function(err, section) {
                        assert.ok(!err);
                        assert.ok(section);
                        assert.equal(section.field1, 'Test1');
                        assert.equal(section.field2, 'Test2');

                        callback();
                    });
                });
            });
        });

        /**
         * Test that validates partial profile updates
         */
        it('verify partial updates', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Create private profile item for User 0
                var aboutme = {'aboutme': 'so interesting!', 'hobbies': 'tennis'};
                RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'private', aboutme, null, function(err) {
                    assert.ok(!err);

                    // Update the aboutme section partially.
                    RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'private', {'hobbies': 'football'}, false, function(err) {
                        assert.ok(!err);

                        RestAPI.Profile.getSection(users[userId].restContext, userId, 'aboutme', function(err, data) {
                            assert.ok(!err);
                            assert.ok(data);
                            assert.equal(data.aboutme, 'so interesting!');
                            assert.equal(data.hobbies, 'football');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that profile section validation is done appropriately
         */
        it('verify set profile section validation', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Try setting a section as an anonymous user
                RestAPI.Profile.setSection(anonymousCamRestContext, userId, 'aboutme', 'private', {'foo' : 'bar'}, null, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // Try saving a non JSON object
                    RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'private', 'wrong data entry', null, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Try to save an invalid visibility option
                        RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'non-existing', {'foo' : 'bar'}, null, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            callback();
                        });
                    });
                });
            });
        });

    });


    describe('Get profile section', function() {

        /**
         * Test that verifies that admins should have access to all profile sections and should be able
         * to set profile sections
         */
        it('verify admin access', function(callback) {
            // Create 2 users
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var userIds = _.keys(users);

                // Create private profile item.
                var aboutme = {'foo': 'bar'};
                RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'aboutme', 'private', aboutme, null, function(err) {
                    assert.ok(!err);

                    // Check that we cannot get the saved profile section as a different user
                    RestAPI.Profile.getSection(users[userIds[1]].restContext, userIds[0], 'aboutme', function(err, section) {
                        assert.ok(err);
                        assert.ok(!section);

                        // Try to overwirte this as a different user
                        var newAboutme = {'totally': 'changed'};
                        RestAPI.Profile.setSection(users[userIds[1]].restContext, userIds[0], 'aboutme', 'private', newAboutme, true, function(err) {
                            assert.equal(err.code, 401);

                            // Make User 1 a tenant admin
                            PrincipalsAPI.setTenantAdmin(globalAdminContext, userIds[1], true, function(err) {
                                assert.ok(!err);

                                // Verify that we can now get the profile section data
                                RestAPI.Profile.getSection(users[userIds[1]].restContext, userIds[0], 'aboutme', function(err, section) {
                                    assert.ok(!err);
                                    assert.ok(section);
                                    assert.deepEqual(section, aboutme);

                                    // Change the profile as the tenant admin
                                    RestAPI.Profile.setSection(users[userIds[1]].restContext, userIds[0], 'aboutme', 'private', newAboutme, true, function(err) {
                                        assert.ok(!err);

                                        // Get it back as the regular user as verification.
                                        RestAPI.Profile.getSection(users[userIds[0]].restContext, userIds[0], 'aboutme', function(err, section) {
                                            assert.ok(!err);
                                            assert.ok(section);
                                            assert.deepEqual(section, newAboutme);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a non-existing profile section cannot be retrieved
         */
        it('verify non-existing section', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Get a non-existing profile section
                RestAPI.Profile.getSection(users[userId].restContext, userId, 'non-existing-section', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 404);
                    callback();
                });
            });
        });

        /**
         * Test that verifies getting all sections from a user with no profile sections
         */
        it('verify getting all sections from a user with no profile sections', function(callback) {
            // Create 2 users
            TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var userIds = _.keys(users);

                // Verify that second user does get the loggedin profile in the overview but it is empty
                RestAPI.Profile.getSectionOverview(users[userIds[1]].restContext, userIds[0], function(err, sections) {
                    assert.ok(!err);
                    assert.equal(sections.sections.length, 0);
                    callback();
                });
            });
        });

        /**
         * Test that verifies getting all sections from an invalid user
         */
        it('verify getting all sections from an invalid user', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Verify getting all profile sections for a user that does not exist
                RestAPI.Profile.getSectionOverview(users[userId].restContext, 'u:gttest:nonexistinguser', function(err, sections) {
                    assert.ok(err);
                    assert.equal(err.code, 404);

                    // Verify getting all profile sections with a missing userid
                    RestAPI.Profile.getSectionOverview(users[userId].restContext, null, function(err, sections) {
                        assert.ok(err);
                        assert.equal(err.code, 404);

                        // Verify getting all profile sections with an invalid userid
                        RestAPI.Profile.getSectionOverview(users[userId].restContext, 'invaliduserid', function(err, sections) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            callback();
                        });
                    });
                });
            });
        });

    });


    describe('Profile section visibility', function() {

        /**
         * Test that verifies that updating a profile section's visibility and retrieving the profile section
         * visibility overview works
         */
        it('verify profile section visibility', function(callback) {
            // Create 2 users
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var userIds = _.keys(users);

                // Create a private profile section.
                var aboutme = {'aboutme': 'so interesting!'};
                RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'aboutme', 'private', aboutme, null, function(err) {
                    assert.ok(!err);

                    // Create a logged in profile section
                    var publications = {'2011': ['Background subtraction with ViBe and shadow detection']};
                    RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'publications', 'loggedin', publications, null, function(err) {
                        assert.ok(!err);

                        // Get the visibility overview
                        RestAPI.Profile.getSectionOverview(users[userIds[0]].restContext, userIds[0], function(err, sectionVisibilities) {
                            assert.ok(!err);
                            assert.ok(sectionVisibilities);
                            assert.equal(sectionVisibilities.accountVisibility, 'public');
                            assert.equal(sectionVisibilities.sections.aboutme, 'private');
                            assert.equal(sectionVisibilities.sections.publications, 'loggedin');

                            // Get the visibility overview as a different user. This should not include the private sections
                            RestAPI.Profile.getSectionOverview(users[userIds[1]].restContext, userIds[0], function(err, sectionVisibilities) {
                                assert.ok(!err);
                                assert.ok(sectionVisibilities);
                                assert.equal(sectionVisibilities.accountVisibility, 'public');
                                assert.equal(sectionVisibilities.sections.aboutme, undefined);
                                assert.equal(sectionVisibilities.sections.publications, 'loggedin');

                                // Try to get the private profile section
                                RestAPI.Profile.getSection(users[userIds[1]].restContext, userIds[0], 'aboutme', function(err, section) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);

                                    // Update a profile section's visibility with an invalid option
                                    RestAPI.Profile.updateVisibility(users[userIds[0]].restContext, userIds[0], 'publications', 'foo', function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);

                                        // Update a profile section's visibility with an valid option
                                        RestAPI.Profile.updateVisibility(users[userIds[0]].restContext, userIds[0], 'publications', 'private', function(err) {
                                            assert.ok(!err);

                                            // Check the visibility overview
                                            RestAPI.Profile.getSectionOverview(users[userIds[0]].restContext, userIds[0], function(err, sectionVisibilities) {
                                                assert.ok(!err);
                                                assert.ok(sectionVisibilities);
                                                assert.equal(sectionVisibilities.accountVisibility, 'public');
                                                assert.equal(sectionVisibilities.sections.aboutme, 'private');
                                                assert.equal(sectionVisibilities.sections.publications, 'private');

                                                // Check the visibility overview as a different user. This should not include the private sections
                                                RestAPI.Profile.getSectionOverview(users[userIds[1]].restContext, userIds[0], function(err, sectionVisibilities) {
                                                    assert.ok(!err);
                                                    assert.ok(sectionVisibilities);
                                                    assert.equal(sectionVisibilities.accountVisibility, 'public');
                                                    assert.equal(sectionVisibilities.sections.aboutme, undefined);
                                                    assert.equal(sectionVisibilities.sections.publications, undefined);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that profiles sections of a private user are only accessible to the user and admin.
         */
        it('verify private user profile is hidden regardless of profile visibility', function(callback) {
            var usernameA = TestsUtil.generateTestUserId();
            var usernameA2 = TestsUtil.generateTestUserId();

            // Create the private user
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'User A', {'visibility': 'private'}, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                // Create a user to try and view the private profile
                RestAPI.User.createUser(camAdminRestContext, usernameA2, 'password', 'User A2', null, function(err, userA2) {
                    assert.ok(!err);
                    var restCtxA2 = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA2, 'password');

                    // Create the private user's profile as public
                    RestAPI.Profile.setSection(restCtxA, userA.id, 'aboutme', 'public', {'aboutme': 'awesome guy'}, null, function(err) {
                        assert.ok(!err);

                        // Try getting the profile section with the user themself, tenant admin and the other user
                        RestAPI.Profile.getSection(camAdminRestContext, userA.id, 'aboutme', function(err, section) {
                            assert.ok(!err);
                            assert.equal(section.aboutme, 'awesome guy');

                            RestAPI.Profile.getSection(restCtxA, userA.id, 'aboutme', function(err, section) {
                                assert.ok(!err);
                                assert.equal(section.aboutme, 'awesome guy');

                                RestAPI.Profile.getSection(restCtxA2, userA.id, 'aboutme', function(err, section) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                                    assert.ok(!section);

                                    // Try getting the profile overview with the user themself, tenant admin and the other user
                                    RestAPI.Profile.getSectionOverview(camAdminRestContext, userA.id, function(err, overview) {
                                        assert.ok(!err);
                                        assert.equal(overview.sections.aboutme, 'public');

                                        RestAPI.Profile.getSectionOverview(restCtxA, userA.id, function(err, overview) {
                                            assert.ok(!err);
                                            assert.equal(overview.sections.aboutme, 'public');

                                            RestAPI.Profile.getSectionOverview(restCtxA2, userA.id, function(err, overview) {
                                                assert.ok(err);
                                                assert.equal(err.code, 401);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a profile section is accessible from an external tenant.
         */
        it('verify public profile section is accessible from external tenant', function(callback) {
            // Create 2 users from different tenants
            TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, userB) {
                assert.ok(!err);
                userB = userB[_.keys(userB)[0]];

                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, userA) {
                    assert.ok(!err);
                    userA = userA[_.keys(userA)[0]];

                    // Create public profile for user B
                    RestAPI.Profile.setSection(userB.restContext, userB.user.id, 'aboutme', 'public', {'aboutme': 'awesome guy'}, null, function(err) {
                        assert.ok(!err);

                        // Verify user A can access user B's profile
                        RestAPI.Profile.getSection(userA.restContext, userB.user.id, 'aboutme', function(err, section) {
                            assert.ok(!err);
                            assert.equal(section.aboutme, 'awesome guy');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a profile section is not accessible from an external tenant
         */
        it('verify loggedin profile section is not accessible from external tenant', function(callback) {
            // Create 2 users from different tenants
            TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, userB) {
                assert.ok(!err);
                userB = userB[_.keys(userB)[0]];

                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, userA) {
                    assert.ok(!err);
                    userA = userA[_.keys(userA)[0]];

                    // Create 'loggedin' profile for user B
                    RestAPI.Profile.setSection(userB.restContext, userB.user.id, 'aboutme', 'loggedin', {'aboutme': 'awesome guy'}, null, function(err) {
                        assert.ok(!err);

                        // Verify user A cannot view user B's profile
                        RestAPI.Profile.getSection(userA.restContext, userB.user.id, 'aboutme', function(err, section) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a loggedin profile section is not accessible when getting a section listing from an external tenant
         */
        it('verify loggedin profile section is not accessible when getting all sections from an external tenant', function(callback) {
            // Create 2 users from different tenants
            TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, userB) {
                assert.ok(!err);
                userB = userB[_.keys(userB)[0]];

                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, userA) {
                    assert.ok(!err);
                    userA = userA[_.keys(userA)[0]];

                    // Create a loggedin and a public profile for user B
                    RestAPI.Profile.setSection(userB.restContext, userB.user.id, 'aboutme', 'loggedin', {'aboutme': 'awesome guy'}, null, function(err) {
                        assert.ok(!err);

                        RestAPI.Profile.setSection(userB.restContext, userB.user.id, 'publications', 'public', {'publications': 'the art of war'}, null, function(err) {
                            assert.ok(!err);

                            // Verify that user A does not get the loggedin profile in the overview
                            RestAPI.Profile.getSectionOverview(userA.restContext, userB.user.id, function(err, sections) {
                                assert.ok(!err);
                                assert.ok(!sections.sections['aboutme']);
                                assert.equal(sections.sections['publications'], 'public');
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a loggedin profile section is accessible when getting all sections from a loggedin user
         */
        it('verify loggedin profile section is accessible when getting all sections from a loggedin user', function(callback) {
            // Create 2 users
            TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var userIds = _.keys(users);

                // Create 'loggedin' profile for first user
                RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'aboutme', 'loggedin', {'aboutme': 'awesome guy'}, null, function(err) {
                    assert.ok(!err);

                    // Verify that second user does get the loggedin profile in the overview
                    RestAPI.Profile.getSectionOverview(users[userIds[1]].restContext, userIds[0], function(err, sections) {
                        assert.ok(!err);
                        assert.ok(sections.sections['aboutme']);

                        // Verify that an anonymous user doesn't get the loggedin profile in the overview
                        RestAPI.Profile.getSectionOverview(anonymousCamRestContext, userIds[0], function(err, sections) {
                            assert.ok(!err);
                            assert.ok(!sections.sections.length);
                            callback();
                        });
                    });
                });
            });
        });

    });
});
