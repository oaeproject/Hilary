/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the 'License'); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an 'AS IS'
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var OaeServer = require('oae-util/lib/server');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('OAE Server', function() {

    // Rest context for the cam admin
    var camAdminRestContext = null;

    /*!
     * Function that will set up the user contexts
     */
    before(function(callback) {
        // Fill up Cam tenant admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    describe('CSRF', function() {

        /*!
         * Verifies CSRF validation with invalid hosts and safe paths
         */
        it('verifies CSRF validation with invalid hosts and safe paths', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = user[_.keys(user)[0]];

                // Ensure we can authenticate
                RestAPI.User.getMe(user.restContext, function(err, me) {
                    assert.ok(!err);
                    assert.equal(user.user.id, me.id);

                    // Sanity check we can sign out
                    RestAPI.Authentication.logout(user.restContext, function(err) {
                        assert.ok(!err);

                        // Verify we are anonymous
                        RestAPI.User.getMe(user.restContext, function(err, me) {
                            assert.ok(!err);
                            assert.ok(!me.id);
                            assert.ok(me.anon);

                            // Spoof the referer to be a relative uri. This should pass CSRF validation
                            user.restContext.refererHeader = '/some/path';

                            // Log back in
                            RestAPI.Authentication.login(user.restContext, user.restContext.userId, user.restContext.userPassword, function(err) {
                                assert.ok(!err);

                                // Verify we are authenticated
                                RestAPI.User.getMe(user.restContext, function(err, me) {
                                    assert.ok(!err);
                                    assert.equal(user.user.id, me.id);

                                    // Spoof the referer
                                    user.restContext.refererHeader = 'http://www.google.com';

                                    // Verify CSRF validation catches this request
                                    RestAPI.Authentication.logout(user.restContext, function(err, data) {
                                        assert.ok(err);
                                        assert.equal(err.code, 500);
                                        assert.strictEqual(err.msg.indexOf('CSRF'), 0);

                                        // Spoof the referer to be empty
                                        user.restContext.refererHeader = '';

                                        // Verify CSRF validation says no dice
                                        RestAPI.Authentication.logout(user.restContext, function(err, data) {
                                            assert.ok(err);
                                            assert.equal(err.code, 500);
                                            assert.strictEqual(err.msg.indexOf('CSRF'), 0);

                                            // Verify we are still authenticated (this is a GET request, CSRF validation will not happen here with our spoofed referer)
                                            RestAPI.User.getMe(user.restContext, function(err, me) {
                                                assert.ok(!err);
                                                assert.equal(user.user.id, me.id);

                                                // Make the logout API path safe from CSRF validation
                                                OaeServer.addSafePathPrefix('/api/auth/logout');

                                                // Sanity check we can now sign out, even with an invalid referer
                                                RestAPI.Authentication.logout(user.restContext, function(err) {
                                                    assert.ok(!err);

                                                    // Verify we are now anonymous
                                                    RestAPI.User.getMe(user.restContext, function(err, me) {
                                                        assert.ok(!err);
                                                        assert.ok(!me.id);
                                                        assert.ok(me.anon);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});