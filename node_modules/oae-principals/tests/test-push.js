/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityTestsUtil = require('oae-activity/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;

describe('Group Push', function() {
    // Rest contexts that can be used performing rest requests
    var localAdminRestContext = null;
    var anonymousRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest contexts
     */
    before(function(callback) {
        localAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.localhost.host);
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    describe('Authorization', function() {

        /**
         * Test that verifies registering for a feed goes through the proper authorization checks
         */
        it('verify signatures must be valid', function(callback) {
            TestsUtil.generateTestUsers(localAdminRestContext, 2, function(err, users, simong, branden) {
                assert.ok(!err);

                RestAPI.User.getMe(simong.restContext, function(err, simonFull) {
                    assert.ok(!err);

                    var data = {
                        'authentication': {
                            'userId': simonFull.id,
                            'tenantAlias': simonFull.tenant.alias,
                            'signature': simonFull.signature
                        },
                        'feeds': []
                    };

                    ActivityTestsUtil.getFullySetupPushClient(data, function(client) {

                        // Create a group and get its full profile so we have a signature that we can use to register for push notifications
                        RestAPI.Group.createGroup(simong.restContext, 'displayName', 'description', 'public', 'yes', [branden.user.id], null, function(err, group) {
                            assert.ok(!err);
                            RestAPI.Group.getGroup(simong.restContext, group.id, function(err, group) {
                                assert.ok(!err);

                                // Ensure we get a 400 error with an invalid activity stream id
                                client.subscribe(group.id, null, group.signature, null, function(err) {
                                    assert.equal(err.code, 400);

                                    // Ensure we get a 400 error with a missing resource id
                                    client.subscribe(null, 'activity', group.signature, null, function(err) {
                                        assert.equal(err.code, 400);

                                        // Ensure we get a 401 error with an invalid token
                                        client.subscribe(group.id, 'activity', {'signature': group.signature.signature}, null, function(err) {
                                            assert.equal(err.code, 401);
                                            client.subscribe(group.id, 'activity', {'expires': group.signature.expires}, null, function(err) {
                                                assert.equal(err.code, 401);
                                                client.subscribe(group.id, 'activity', {'expires': Date.now() + 10000, 'signature': 'foo', 'lastModified': Date.now()}, null, function(err) {
                                                    assert.equal(err.code, 401);

                                                    // Simon should not be able to use a signature that was generated for Branden
                                                    RestAPI.Group.getGroup(branden.restContext, group.id, function(err, groupForBranden) {
                                                        assert.ok(!err);
                                                        client.subscribe(group.id, 'activity', groupForBranden.signature, null, function(err) {
                                                            assert.equal(err.code, 401);

                                                            // Sanity check
                                                            client.subscribe(group.id, 'activity', {'expires': group.signature.expires, 'signature': group.signature.signature}, null, function(err) {
                                                                assert.ok(!err);
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only group members/managers get to see the signature
         */
        it('verify only members get a signature', function(callback) {
            TestsUtil.generateTestUsers(localAdminRestContext, 2, function(err, users, simong, branden) {
                assert.ok(!err);
                RestAPI.Group.createGroup(simong.restContext, 'displayName', 'description', 'public', 'yes', [], null, function(err, group) {
                    assert.ok(!err);

                    // Simon should see the signature, but Branden shouldn't
                    RestAPI.Group.getGroup(simong.restContext, group.id, function(err, group) {
                        assert.ok(!err);
                        assert.ok(group.signature);
                        RestAPI.Group.getGroup(branden.restContext, group.id, function(err, group) {
                            assert.ok(!err);
                            assert.ok(!group.signature);
                            RestAPI.Group.getGroup(anonymousRestContext, group.id, function(err, group) {
                                assert.ok(!err);
                                assert.ok(!group.signature);

                                // If we make Branden a member, he should be able to see it
                                var changes = {};
                                changes[branden.user.id] = 'manager';
                                RestAPI.Group.setGroupMembers(simong.restContext, group.id, changes, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Group.getGroup(branden.restContext, group.id, function(err, group) {
                                        assert.ok(!err);
                                        assert.ok(group.signature);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Notifications', function() {

        /**
         * Creates 3 users: `branden`, `nico` and `simon` of which Branden and Simon are managers of a group. A websocket will be created
         * for the `Simon`-user which is both authenticated and registered for push notifications on the group.
         *
         * @param  {Function}       callback                Gets executed once the fixture has been setup
         * @param  {Object}         callback.contexts       An object that holds the context and user info for the created users
         * @param  {Discussion}     callback.group          The created group
         * @param  {Client}         callback.client         A websocket client that is authenticated for the `Simon`-user and is registered for push notificates on the created group
         * @throws {Error}                                  If anything goes wrong, an assertion error will be thrown
         */
        var setupFixture = function(callback) {
            TestsUtil.generateTestUsers(localAdminRestContext, 3, function(err, users, branden, simon, nico) {
                assert.ok(!err);

                var contexts = {
                    'branden': branden,
                    'simon': simon,
                    'nico': nico
                };

                // Get the full profile so we have a signature to authenticate ourselves on the WS
                RestAPI.User.getMe(contexts['simon'].restContext, function(err, simonFull) {
                    assert.ok(!err);

                    // Create a group and get the full group profile so we have a signature that we can use to register for push notifications
                    RestAPI.Group.createGroup(contexts['simon'].restContext, 'displayName', 'description', 'public', 'yes', [contexts['branden'].user.id], null, function(err, group) {
                        assert.ok(!err);
                        RestAPI.Group.getGroup(contexts['simon'].restContext, group.id, function(err, group) {
                            assert.ok(!err);

                            // Route and deliver activities
                            ActivityTestsUtil.collectAndGetActivityStream(contexts['simon'].restContext, null, null, function() {
                                // Register for some streams
                                var data = {
                                    'authentication': {
                                        'userId': contexts['simon'].user.id,
                                        'tenantAlias': simonFull.tenant.alias,
                                        'signature': simonFull.signature
                                    },
                                    'streams': [
                                        {
                                            'resourceId': group.id,
                                            'streamType': 'activity',
                                            'token': group.signature
                                        }
                                    ]
                                };

                                ActivityTestsUtil.getFullySetupPushClient(data, function(client) {
                                    return callback(contexts, group, client);
                                });
                            });
                        });
                    });
                });
            });
        };

        /**
         * Test that verifies an update gets pushed out
         */
        it('verify updates trigger a push notification', function(callback) {
            setupFixture(function(contexts, group, client) {

                // Trigger a push notification
                RestAPI.Group.updateGroup(contexts['branden'].restContext, group.id, {'displayName': 'Laaike whatevs'}, function(err) {
                    assert.ok(!err);
                });

                client.on('message', function(message) {
                    if (message.resourceId === group.id && message.streamType === 'activity') {
                        ActivityTestsUtil.assertActivity(message.activity, PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE, ActivityConstants.verbs.UPDATE, contexts['branden'].user.id, group.id);

                        // Verify the updated display name is present on the activity object
                        assert.equal(message.activity.object.displayName, 'Laaike whatevs');

                        client.close(callback);
                    }
                });
            });
        });

        /**
         * Test that verifies a visibility update gets pushed out
         */
        it('verify visibility updates trigger a push notification', function(callback) {
            setupFixture(function(contexts, group, client) {

                // Trigger an update
                RestAPI.Group.updateGroup(contexts['branden'].restContext, group.id, {'visibility': 'loggedin'}, function(err) {
                    assert.ok(!err);
                });

                client.on('message', function(message) {
                    ActivityTestsUtil.assertActivity(message.activity, PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, contexts['branden'].user.id, group.id);

                    // Verify the updated visibility setting is present on the activity object
                    assert.equal(message.activity.object.visibility, 'loggedin');

                    client.close(callback);
                });
            });
        });

        /**
         * Test that verifies adding a user or changing a user's role triggers a push notification
         */
        it('verify adding a user to a group/changing a user\'s role triggers a push notification', function(callback) {
            setupFixture(function(contexts, group, client) {

                var addedActivityReceived = false;
                var roleChangeReceived = false;

                // We should receive 2 messages. One for adding Nico to the group and one for changing his role
                client.on('message', function(message) {
                    if (message.activity['oae:activityType'] === PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER) {
                        ActivityTestsUtil.assertActivity(message.activity, PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, ActivityConstants.verbs.ADD, contexts['branden'].user.id, contexts['nico'].user.id, group.id);
                        addedActivityReceived = true;
                    } else if (message.activity['oae:activityType'] === PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE_MEMBER_ROLE) {
                        ActivityTestsUtil.assertActivity(message.activity, PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, contexts['branden'].user.id, contexts['nico'].user.id, group.id);
                        roleChangeReceived = true;
                    }

                    if (addedActivityReceived && roleChangeReceived) {
                        client.close(callback);
                    }
                });

                // Add nicolaas as a member of the group
                var membersToAdd = {};
                membersToAdd[contexts['nico'].user.id] = 'member';
                RestAPI.Group.setGroupMembers(contexts['branden'].restContext, group.id, membersToAdd, function(err) {
                    assert.ok(!err);

                    // Changing nico's role to a manager should result in a message on the socket as well
                    membersToAdd[contexts['nico'].user.id] = 'manager';
                    RestAPI.Group.setGroupMembers(contexts['branden'].restContext, group.id, membersToAdd, function(err) {
                        assert.ok(!err);
                    });
                });
            });
        });

        /**
         * Test that verifies joining a group results in a push notification
         */
        it('verify joining a group triggers a push notification', function(callback) {
            setupFixture(function(contexts, group, client) {

                // Nicolaas joins the group
                RestAPI.Group.joinGroup(contexts['nico'].restContext, group.id, function(err) {
                    assert.ok(!err);
                });

                client.on('message', function(message) {
                    ActivityTestsUtil.assertActivity(message.activity, PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN, ActivityConstants.verbs.JOIN, contexts['nico'].user.id, group.id);
                    client.close(callback);
                });
            });
        });
    });
});
