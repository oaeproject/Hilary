/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');
var xml2js = require('xml2js');

var log = require('oae-logger').logger('oae-publications-symplectic');
var PublicationsConfig = require('oae-config').config('oae-publications');
var request = require('request');
var Telemetry = require('oae-telemetry').telemetry('symplectic');

var SymplecticPublication = require('./publicationtypes').SymplecticPublication;


/**
 * Gets a page of users from Symplectic
 *
 * @param  {String}     tenantAlias                         The alias of the tenant that identifies which Symplectic instance should be used
 * @param  {Number}     modifiedSince                       Only return users that have been modified (or whose publications have been) since this timestamp. Expressed in ms since the epoch
 * @param  {Number}     page                                Which page to retrieve
 * @param  {Function}   callback                            Standard callback method
 * @param  {Object}     callback.err                        Standard error object, if any
 * @param  {Object}     callback.result                     An object containing the users and pagination info
 * @param  {Object}     callback.result.pagination          Contains any pagination info
 * @param  {Number}     callback.result.pagination.total    The total number of users (if `modifiedSince` was null, this will be all the users in symplectic, if a value was provided, this will be the number that have been modified in Symplectic since that value)
 * @param  {Number}     callback.result.pagination.pages    The number of pages that are available
 * @param  {Object[]}   callback.result.users               An array of objects, each one representing a user in Symplectic. Each object will also include a `oaeUserId` providing the OAE user ID
 */
var getUsers = module.exports.getUsers = function(tenantAlias, modifiedSince, page, callback) {
    var usersUrl = util.format('/users?page=%d&detail=full', page);

    // Tack on the modified-since parameter with its ISO8601 value if one was provided
    if (modifiedSince) {
        var d = new Date(modifiedSince);
        usersUrl += util.format('&modified-since=%s', d.toISOString());
    }

    _request(tenantAlias, usersUrl, function(err, response, body) {
        if (err) {
            log().error({'err': err, 'page': page}, 'Error retrieving users from Symplectic');
            return callback(err);
        }

        _parseXml(body, function(err, xml) {
            if (err) {
                return callback(err);
            }

            var result = _parseUserResult(xml);
            return callback(null, result);
        });
    });
};

/**
 * Parses the response of a /users request
 *
 * @param  {Object} xml The XML object to parse
 * @return {Object}     The resulting users
 * @api private
 */
var _parseUserResult = function(xml) {
    var result = {
        'pagination': _getPagination(xml),
        'users': []
    };

    // Handle user results
    _.each(xml.feed.entry, function(entry) {
        if (entry['api:object']) {
            result.users.push({
                'externalUserId': entry['api:object'][0]['$']['username'],
                'symplecticUserId':  entry['api:object'][0]['$']['id'],
                'name': {
                    'firstName': entry['api:object'][0]['api:first-name'],
                    'lastName': entry['api:object'][0]['api:last-name'],
                    'initials': entry['api:object'][0]['api:initials']
                }
            });
        }
    });
    return result;
};


/**
 * Gets *ALL* the publications that are associated with a user.
 * The user identifier can be specified in the following formats:
 *
 *   * by external username.    ex: `username-jdjones` where `jdjones` is the external identifier bit
 *   * by proprietary ID.       ex: `pid-A7784545` where `A7784545` is the proprietary identifier
 *   * by Symplectic ID.        ex: `125` where `125` is the Symplectic identifier
 *
 * @param  {String}                 tenantAlias             The alias of the tenant that identifies which Symplectic instance should be used
 * @param  {String}                 userId                  The Symplectic user ID
 * @param  {Function}               callback                Standard callback function
 * @param  {Object}                 callback.err            Standard error object, if any
 * @param  {IngesterPublication[]}  callback.publications   A set of publications that can be ingested
 */
var getPublicationsForUser = module.exports.getPublicationsForUser = function(tenantAlias, userId, callback) {
    log().trace({'tenantAlias': tenantAlias, 'userId': userId}, 'Requesting publications from Symplectic for a user');
    var publications = [];

    /*!
     * Get a page of publications for a user
     *
     * @param  {Number} page The page to retrieve
     */
    var getPublicationsForUserPage = function(page) {
        var url = util.format('/users/%s/publications?page=%d&detail=full', userId, page);
        _request(tenantAlias, url, function(err, response, body) {
            if (err) {
                log().error({'err': err, 'user': userId}, 'Error retrieving publications from Symplectic');
                return callback(err);
            }

            _parseXml(body, function(err, xml) {
                if (err) {
                    return callback(err);
                }

                // Get authorname
                var fullName = xml.feed.title[0].substr(34);
                var namedParts = fullName.split(',');
                var lastName = namedParts[0];
                var firstNames = namedParts.slice(1).join(',').split(' ');
                var initials = _.chain(firstNames).compact().map(function(name) { return name[0]; }).value().join('');

                // Construct the name that is used in the authors list for each publication
                var authorName = lastName + ' ' + initials;

                // Handle pagination
                var pagination = _getPagination(xml);

                // Parse the publications
                _.each(xml.feed.entry, function(entry) {
                    var publication = new SymplecticPublication(entry, authorName);

                    // Ignore null publications or publications that don't have a date
                    if (!_.isEmpty(publication) && publication.publication.date) {
                        publications.push(publication);
                    }
                });

                if (pagination.pages === page) {
                    return callback(null, publications);
                } else {
                    page++;

                    // Symplectic explicitly states that you shouldn't hammer their API with requests and demands that you wait a minimum of half a second between requests
                    setTimeout(getPublicationsForUserPage, 500, page);
                }
            });
        });
    };

    getPublicationsForUserPage(1);
};

/**
 * Requests a certain page from Symplectic
 *
 * @param  {String}     tenantAlias         The alias of the tenant that can be used to retrieve the configured base URL
 * @param  {String}     url                 The URL to request from the Symplectic instance
 * @param  {Function}   callback            Standard callback method
 * @param  {Object}     callback.err        Standard error object
 * @param  {Response}   callback.response   The HTTP response object
 * @param  {String}     callback.body       The response body
 * @api private
 */
var _request = function(tenantAlias, url, callback) {
    var baseUrl = _getBaseUrl(tenantAlias);
    var fullUrl = util.format('%s%s', baseUrl, url);

    var retryAttempts = 0;
    var timeout = 1000;

    /*!
     * Retries a request with some backing off logic.
     * The request will only be retried 5 times and each time the sleep time between two requests will be doubled.
     */
    var retry = function() {
        if (retryAttempts <= 5) {
            timeout *= 2;
            retryAttempts++;
            setTimeout(doRequest, timeout);
        } else {
            return callback({'code': 500, 'msg': 'Could not interact with Symplectic user (even with retries)'});
        }
    };

    /*!
     * Performs the actual request
     */
    var doRequest = function() {
        log().trace({'url': fullUrl, 'tenantAlias': tenantAlias}, 'Requesting data from Symplectic');
        request(fullUrl, function(err, response, body) {
            if (err) {
                log().error({'err': err, 'url': fullUrl}, 'Error interacting with Symplectic');
                return retry();
            } else if (response.statusCode !== 200) {
                log().error({'err': err, 'url': fullUrl, 'body': body}, 'Got a non-200 statuscode when interacting with Symplectic');
                return retry();
            }

            return callback(null, response, body);
        });
    };

    // Fire the request
    doRequest();
};

/**
 * Given a tenant alias, retrieve the configured base URL
 *
 * @param  {String}     tenantAlias     The alias of the tenant for which the Symplectic base URL should be retrieved
 * @return {String}                     The configured base URL
 * @api private
 */
var _getBaseUrl = function(tenantAlias) {
    return PublicationsConfig.getValue(tenantAlias, 'symplectic', 'baseUrl');
};

/**
 * Takes a string and parses it as XML
 *
 * @param  {String}     str             The string to parse
 * @param  {Function}   callback        Standard callback method
 * @param  {Object}     callback.err    Standard error object
 * @param  {Object}     callback.xml    The XML object
 * @api private
 */
var _parseXml = function(str, callback) {
    // xml2js has a nasty bug where sometimes both an error gets thrown AND passed into the callback
    var called = false;
    try {
        var parser = new xml2js.Parser({'explicitArray': true});
        parser.parseString(str, function (err, xml) {
            if (err) {
                if (!called) {
                    called = true;
                    log().error({'err': err, 'str': str}, 'Could not parse XML');
                    return callback({'code': 500, 'msg': 'Could not parse XML'});
                }
            }

            if (!called) {
                called = true;
                return callback(null, xml);
            }
        });
    } catch (error) {
        if (!called) {
            called = true;
            log().error({'err': error, 'str': str}, 'Could not parse XML');
            return callback({'code': 500, 'msg': 'Could not parse XML'});
        }
    }
};

/**
 * Takes the XML object and returns a pagination object
 *
 * @param  {Object} xml The XML object that contains the pagination data
 * @return {Object}     An object containing the keys: `total` which holds the total number of users/publications and `pages` which holds the total number of pages for this request
 * @api private
 */
var _getPagination = function(xml) {
    var nrOfPages = 0;
    var lastPage = _.find(xml.feed['api:pagination'][0]['api:page'], function(page) { return page['$']['position'] === 'last'; });
    if (lastPage) {
        nrOfPages = parseInt(lastPage['$']['number'], 10);
    }

    return {
        'total': xml.feed['api:pagination'][0]['$']['results-count'],
        'pages':  nrOfPages
    };
};
