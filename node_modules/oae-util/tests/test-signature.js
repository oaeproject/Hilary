/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Signature = require('oae-util/lib/signature');
var Validator = require('oae-util/lib/validator').Validator;

describe('Signature', function() {
    describe('Validator', function() {

        /*!
         * Validate a simple signature.
         */
        var validate = function(body, signature, isValid) {
            var validator = new Validator();
            validator.check(signature, 'Invalid signature').verifySignature('camtest', body);
            assert.equal(validator.hasErrors(), !isValid);
        };

        /*!
         * Validate an expiring signature.
         */
        var validateExpiring = function(body, signature, expires, isValid) {
            var validator = new Validator();
            validator.check(signature, 'Invalid signature').verifyExpiringSignature('camtest', expires, body);
            assert.equal(validator.hasErrors(), !isValid);
        };

        /*!
         * Verify that the simple signature utility works.
         */
        it('#verifySignature()', function() {
            var body = 'The quick brown fox jumped over the lazy dog.';
            var signature = Signature.sign('camtest', body);

            validate(body, signature, true);
            validate('totally different', signature, false);
            validate(body + 'a', signature, false);
        });

        /*!
         * Verify that the expring signature utility works.
         */
        it('#verifyExpiringSignature()', function(callback) {
            var body = 'The quick brown fox jumped over the lazy dog.';
            // expire after 2 ms
            var expires = 2;
            var signature = Signature.createExpiringSignature('camtest', expires, body);

            validateExpiring(body, signature.signature, signature.expires, true);
            validateExpiring('totally different', signature.signature, signature.expires, false);
            validateExpiring(body + 'a', signature.signature, signature.expires, false);

            // Test expiration.
            setTimeout(function() {
                // The signature is now invalid as 20 ms have past.
                validateExpiring(body, signature.signature, signature.expires, false);
                callback();
            }, 20);
        });

        /*!
         * Verify that the expires-at-a-date signature utility works.
         */
        it('#verifyExpiresAtSignature()', function() {
            var body = 'The quick brown fox jumped over the lazy dog.';
            // Expires at 2 minutes.
            var expiresAt = new Date(Date.now() + 120000);

            // Ensure they are the same
            var signature = Signature.createExpiresAtSignature('camtest', expiresAt, body);

            validateExpiring(body, signature.signature, signature.expires, true);
            validateExpiring('totally different', signature.signature, signature.expires, false);
            validateExpiring(body + 'a', signature.signature, signature.expires, false);

            // Test it generates the same for the same input fields.
            var signatureB = Signature.createExpiresAtSignature('camtest', expiresAt, body);
            assert.deepEqual(signature, signatureB);
        });
    });

    // Encapsulate the rolling test in it's own describe block
    // so we don't accidentally overwrite the Date.now method
    // for any other tests.
    describe('Rolling expiring signatures', function() {

        var properDateNow = null;

        // Monkey patch the Date.now method so we can verify the expire dates
        // against a known timestamp.
        beforeEach(function() {
            properDateNow = Date.now;
            Date.now = function() {
                // Fri, 25 Jan 2013 11:40:46 GMT
                return 1359114046782;
            };
        });

        // Reset it after each test.
        afterEach(function() {
            Date.now = properDateNow;
        });

        var verifyRollingSignature = function(duration, offset, shouldExpireAt) {
            var body = 'The quick brown fox jumped over the lazy dog.';
            var signature = Signature.createRollingSignature('camtest', duration, offset, body);
            var expiresDate = new Date(signature.expires);
            assert.deepEqual(expiresDate.getTime(), shouldExpireAt.getTime(), 'Expected "' + shouldExpireAt + '" (' + shouldExpireAt.getTime() + ') got "' + expiresDate + '" (' + expiresDate.getTime() + ')');
        };

        /**
         * Verify the rolling signature functionality values that are known to be correct.
         */
        it('verify the expire timestamps against known values.', function() {
            // Use Date.UTC so that the date is not created with a local GMT offset.
            verifyRollingSignature(30, 10, new Date(Date.UTC(2013, 0, 25, 11, 41, 10)));

            // 30 days expire duration, 1 day offset
            verifyRollingSignature(30*24*60*60, 24*60*60, new Date(Date.UTC(2013, 1, 15, 0, 0, 0)));
        });

        /**
         * Ensure that multiple calls within the window result in the same signature
         */
        it('verify rolling window', function() {
            // Remember, it's Fri, 25 Jan 2013 11:40:46 GMT in this test.
            var jan_25_sig = Signature.createRollingSignature('camtest', 10*24*60*60, 24*60*60, 'foo');

            // Set the 'Date.now' one day further,
            // generating a signature should return the same expires value.
            Date.now = function() {
                // Sat, 26 Jan 2013 11:40:46 GMT
                return 1359200446782;
            };
            var jan_26_sig = Signature.createRollingSignature('camtest', 10*24*60*60, 24*60*60, 'foo');
            assert.deepEqual(jan_25_sig, jan_26_sig);

            // If we set it 10 days further, we should get a new signature.
            Date.now = function() {
                // Tue Feb 05 2013 11:40:46 GMT
                return 1360064446782;
            };
            var feb_05_sig = Signature.createRollingSignature('camtest', 10*24*60*60, 24*60*60, 'foo');
            assert.notDeepEqual(jan_25_sig, feb_05_sig);
            assert.notDeepEqual(jan_26_sig, feb_05_sig);
        });

        /**
         * Ensure that signature does actually expire after the correct amount of time.
         */
        it('verify expiration', function(callback) {
            // Restore the Date.now method for this test.
            Date.now = properDateNow;

            // Create a signature that expires in 100 milliseconds.
            var signature = Signature.createRollingSignature('camtest', 0.1, 0, 'foo');
            setTimeout(function() {
                // By now, the signature should be expired.
                var isValid = Signature.verifyExpiringSignature('camtest', signature.expires, 'foo', signature.signature);
                assert.ok(!isValid);
                callback();
            }, 250);

        });
    });
});
