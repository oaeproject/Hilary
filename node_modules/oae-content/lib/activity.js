/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-content');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('./internal/dao');
var ContentUtil = require('oae-content/lib/util');

/////////////////////
/////////////////////
// POST ACTIVITIES //
/////////////////////
/////////////////////

////////////////////
// CONTENT-CREATE //
////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_CREATE,
    {
        'groupBy': [{'actor': true}],
        'notifications': {
            'email': true,
            'emailTemplateModule': 'oae-content',
            'emailTemplateId': 'notify-content-share'   // Use content share template, as it is the same as create
        }
    }
);

/*!
 * Post a content-create activity when a user creates a content item.
 */
ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

//////////////////////////////////////////////////
// CONTENT-UPDATE and CONTENT-UPDATE-VISIBILITY //
//////////////////////////////////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE, {'groupBy': [
    // "Content Item was updated by 5 users"
    {'object': true}
]});

/*!
 * Post either a content-update or content-update-visibility activity when a user updates a content item's metadata.
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContent.id, {'content': newContent});

    // We discriminate between general updates and visibility changes. If the visibility has changed, we fire a visibility changed activity *instead* of an update activity
    var activityType = null;
    if (newContent.visibility === oldContent.visibility) {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE;
    } else {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

//////////////////////
// CONTENT-REVISION //
//////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, {'groupBy': [
    // "5 new revisions were created for Content Item"
    {'object': true}
]});

/*!
 * Post a content-revision activity when a user uploads a new file body
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, content, fileInfo) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

/////////////////////
// CONTENT-COMMENT //
/////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_COMMENT,
    {
        'groupBy': [{'target': true}],
        'notifications': {
            'email': true,
            'emailTemplateModule': 'oae-content',
            'emailTemplateId': 'notify-content-comment'
        }
    }
);

/*!
 * Post a content-comment activity when a user comments on a content item
 */
ContentAPI.on(ContentConstants.events.CREATED_COMMENT, function(ctx, comment) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content-comment', comment.commentId, {'comment': comment});
    var targetResource = new ActivityModel.ActivitySeedResource('content', comment.contentId);
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_COMMENT, millis, ActivityConstants.verbs.POST, actorResource, objectResource, targetResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

//////////////////////////////////////////////
// CONTENT-SHARE and CONTENT-ADD-TO-LIBRARY //
//////////////////////////////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY, {'groupBy': [
    // "Branden Visser added 5 items to his library"
    {'actor': true}
]});

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_SHARE,
    {
        'groupBy': [
            // "Branden Visser shared Content Item with 5 users and groups"
            {'actor': true, 'object': true},

            // "Branden Visser shared 8 files with OAE Team"
            {'actor': true, 'target': true}
        ],
        'notifications': {
            'email': true,
            'emailTemplateModule': 'oae-content',
            'emailTemplateId': 'notify-content-share'
        }
    }
);

/*!
 * Post a content-share or content-add-to-library activity based on content sharing
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content, permissionChanges) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var activitySeeds = [];

    // Post an activity for each user / group the content item was shared with. Each is a content-share activity where
    // the object is the content item and the target is the user or group with which it was shared.
    var principalIds = _.keys(permissionChanges);
    for (var i = 0; i < principalIds.length; i++) {
        var principalId = principalIds[i];
        if (permissionChanges[principalId]) {
            var targetResourceType = (PrincipalsUtil.isGroup(principalId)) ? 'group' : 'user';
            var targetResource = new ActivityModel.ActivitySeedResource(targetResourceType, principalId);
            if (targetResource.resourceId === actorResource.resourceId) {
                // Users can't "share" with themselves, they actually "add it to their library"
                ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY, millis, ActivityConstants.verbs.ADD, actorResource, objectResource));
            } else {
                // A user shared content with some other user, fire the content share activity
                ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_SHARE, millis, ActivityConstants.verbs.SHARE, actorResource, objectResource, targetResource));
            }
        }
    }
});



////////////////////////
// ACTIVITY PRODUCERS //
////////////////////////

/*!
 * Produces a persistent 'content' activity entity
 */
ActivityAPI.registerActivityEntityProducer('content', function(activityType, entityType, resource, callback) {
    var content = (resource.resourceData) ? resource.resourceData.content : null;

    // If the content item was fired with the resource, use it instead of fetching
    if (content) {
        return callback(null, ContentUtil.createPersistentContentActivityEntity(content));
    }

    ContentDAO.Content.getContent(resource.resourceId, function(err, content) {
        if (err) {
            return callback(err);
        }

        return callback(null, ContentUtil.createPersistentContentActivityEntity(content));
    });
});

/*!
 * Produces an persistent activity entity that represents a comment that was posted
 */
ActivityAPI.registerActivityEntityProducer('content-comment', function(activityType, entityType, resource, callback) {
    var comment = resource.resourceData.comment;
    ContentDAO.Content.getContent(comment.contentId, function(err, content) {
        if (err) {
            return callback(err);
        }

        var context = {};
        if (comment.replyTo) {
            // Create the parent entity if the comment is a reply
            ContentDAO.Comments.getComment(comment.replyTo, function(err, parent) {
                if (err) {
                    return callback(err);
                }

                context.parent = parent;

                if (parent.createdBy) {
                    PrincipalsDAO.getPrincipal(parent.createdBy, function(err, parentUser) {
                        if (err) {
                            return callback(err);
                        }

                        context.parent.createdBy = parentUser;

                        return callback(null, ContentUtil.createPersistentCommentActivityEntity(content, comment, context));
                    });
                } else {
                    // The parent comment has probably been deleted since this activity was triggered. Don't include it
                    // as context to the activity
                    delete context.parent;
                    return callback(null, ContentUtil.createPersistentCommentActivityEntity(content, comment, context));
                }
            });
        } else {
            return callback(null, ContentUtil.createPersistentCommentActivityEntity(content, comment, context));
        }
    });
});



//////////////////////
// ACTIVITY ROUTERS //
//////////////////////

/*!
 * Routes an activity that occurred for a content activity entity
 */
ActivityAPI.registerActivityRouter('content', function(activityType, entityType, entity, callback) {
    // Extract the OAE ID from the activity object to get the content id
    return _routeContent(activityType, entityType, entity[ActivityConstants.properties.OAE_ID], entity.content.visibility, callback);
});

/*!
 * Routes an activity that occurred for a comment activity entity
 */
ActivityAPI.registerActivityRouter('content-comment', function(activityType, entityType, entity, callback) {
    // First collect the routes for the parent content item
    var contentId = entity.comment.contentId;
    _routeContent(activityType, entityType, contentId, entity.comment.visibility, function(err, routes, propagation) {
        if (err) {
            return callback(err);
        }

        // In addition to the content routes, a comment routes to recent commenters of a content item
        ContentDAO.Comments.getRecentCommenterIds(contentId, null, 10000, function(err, commenterIds) {
            if (err) {
                return callback(err);
            } else if (commenterIds.length === 0) {
                return callback(null, routes, propagation);
            }

            // Push the commenterIds into both the activity and notification routes
            routes.activity = routes.activity || [];
            routes.activity = _.union(routes.activity, commenterIds);

            routes.notification = routes.notification || [];
            routes.notification = _.union(routes.notification, commenterIds);

            return callback(null, routes, propagation);
        });
    });
});

/**
 * Produce routes for the given content item.
 *
 * @param   {String}    activityType            The type of activity for which the routes are being produced
 * @param   {String}    entityType              The type of entity the content item is (e.g., actor, object, target)
 * @param   {String}    contentId               The ID of the content item for which to produce routes
 * @param   {String}    visibility              The visibility of the content item
 * @param   {Function}  callback                Invoked when the process completes
 * @param   {Object}    callback.err            An error that occurred, if any
 * @param   {String[]}  callback.routes         The routes for the given content item
 * @param   {Object}    callback.propagation    How the entity data should be propagated among activity routes
 * @api private
 */
var _routeContent = function(activityType, entityType, contentId, visibility, callback) {
    // Get lists of all the direct and indirect members of this content, keyed by their role
    ActivityUtil.getAllAuthzMembersByRole(contentId, function(err, specify) {
        if (err) {
            return callback(err);
        }

        // Resolve the routes of the content item
        var activityRoutes = _.extend({}, specify);
        var notificationRoutes = null;
        var isContentCreateActivity = (activityType === ContentConstants.activity.ACTIVITY_CONTENT_CREATE);
        var isShareActivity = (activityType === ContentConstants.activity.ACTIVITY_CONTENT_SHARE || activityType === ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY);
        var isCommentActivity = (activityType === ContentConstants.activity.ACTIVITY_CONTENT_COMMENT);
        if (isShareActivity && entityType === ActivityConstants.entityTypes.OBJECT) {
            // When content is shared with another user (or a user adds it to their library), the 'viewers' of that content object are not interested
            delete activityRoutes[ContentConstants.roles.VIEWER];
        } else if (isCommentActivity) {
            // When a comment is posted, we must notify all the manager users of the parent content item
            notificationRoutes = specify[ContentConstants.roles.MANAGER];
        } else if (isContentCreateActivity) {
            // When creating content with a members list, we should notify those who were on the members list of the content item
            notificationRoutes = _.uniq(_.flatten(_.values(specify)));
        }

        // Filter out non-user members, as only users receive notifications
        if (notificationRoutes) {
            notificationRoutes = _.filter(notificationRoutes, function(route) {
                return PrincipalsUtil.isUser(route);
            });
        }

        activityRoutes = _.uniq(_.flatten(_.values(activityRoutes)));

        // Resolve the propagation of the content item. If the content is public or loggedin, we propagate to all users
        specify = _.uniq(_.flatten(_.values(specify)));
        var propagation = {'type': ActivityConstants.entityPropagation.ALL};
        if (visibility !== 'public' && visibility !== 'loggedin') {
            propagation = {'type': ActivityConstants.entityPropagation.SPECIFY, 'specify': specify};
        }

        return callback(null, {'activity': activityRoutes, 'notification': notificationRoutes}, propagation);
    });
};



///////////////////////////
// ACTIVITY TRANSFORMERS //
///////////////////////////

/*!
 * Transform the content persistent activity entities into UI-friendly ones
 */
ActivityAPI.registerActivityEntityTransformer('content', function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};

    // Collect all the content ids so we can fetch their preview data
    var allContentIds = [];
    _.each(activityEntities, function(entities, activityId) {
        _.each(entities, function(entity, entityId) {
            allContentIds.push(entityId);
        });
    });
    allContentIds = _.uniq(allContentIds);

    // Fetch the previews and attach them to the transformed entities
    ContentDAO.Previews.getContentPreviewsMetadata(allContentIds, function(err, previews) {
        if (err) {
            return callback(err);
        }

        _.each(activityEntities, function(entities, activityId) {
            transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
            _.each(entities, function(entity, entityId) {
                // Transform the persistent entity with its up-to-date preview status
                transformedActivityEntities[activityId][entityId] = ContentUtil.transformPersistentContentActivityEntity(ctx, entity.content, previews[entityId]);
            });
        });

        return callback(null, transformedActivityEntities);
    });
});

/*!
 * Transform the comment persistent activity entities into UI-friendly ones
 */
ActivityAPI.registerActivityEntityTransformer('content-comment', function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            transformedActivityEntities[activityId][entityId] = ContentUtil.transformPersistentCommentActivityEntity(ctx, entity.comment, entity.commentContext);
        });
    });
    return callback(null, transformedActivityEntities);
});

