/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');

var Cassandra = require('oae-util/lib/cassandra');
var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('config');
var OAE = require('oae-util/lib/oae');
var OAEUtil = require('oae-util/lib/util');
var Pubsub = require('oae-util/lib/pubsub');
var Validator = require('oae-util/lib/validator').Validator;

var Fields = require('oae-config/lib/fields');

var cachedConfiguration = {};

Pubsub.on('oae-config', function(receivedMessage) {
    // Messages are of the form:
    //      cam config updated
    //      gt config updated
    var tenantId = receivedMessage.split(' ')[0];
    _getConfigFromCassandra(tenantId, function() {});
});

/**
 * Writes configuration to Cassandra
 * @param {String}   tenantId      The id of the tenant to store config for
 * @param {Object}   configValues  The configuration to store
 * @param {Function} callback      Function executed when storing the configuration completes
 */
var writeConfig = module.exports.writeConfig = function(tenantId, configValues, callback) {
    var validator = new Validator();
    validator.check(tenantId, {'code': 400, 'msg': 'Missing tenantid'}).notEmpty();
    validator.check(_.keys(configValues).length, {'code': 400, 'msg': 'Missing configuration. Example configuration: {"oae-authentication/google-authentication/google-authentication-enabled": {"tenantid": "global","value": false}}'}).min(1);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    var q = Cassandra.constructUpsertCQL('Config', 'tenantId', tenantId, configValues, 'QUORUM');
    Cassandra.runQuery(q.query, q.parameters, function(err, config) {
        if (!err) {
            Pubsub.publish('oae-config', tenantId + ' config updated');
        }
        callback(err, config);
    });
};

/**
 * Parses a Helenus row into an object that can be merged with the configuration
 * @param {Object} config Helenus result row
 */
var parseStoredConfigToObject = function(config) {
    var configToExtend = {};

    for (var i = 0, l = config.count; i < l; i++) {
        var colHash = config[i].name.split('/');
        if (colHash[0] !== 'tenantId') {
            configToExtend[colHash[0]] = configToExtend[colHash[0]] || {};
            configToExtend[colHash[0]][colHash[1]] = configToExtend[colHash[0]][colHash[1]] || {"elements": {}};
            configToExtend[colHash[0]][colHash[1]].elements[colHash[2]] = {
                "defaultValue": config[i].value
            };
        }
    }

    return configToExtend;
};

/**
 * Merges the different configurations into one. config.json < global config < tenant config
 * @param {Object}    config     Contains configuration values
 * @param {Object}    modules    Contains the modules available for configuration
 * @param {Function}  callback   Function executed when config has been fully merged
 */
var _mergeConfigIntoOriginal = function(config, modules, callback) {
    for (var i = 0; i < config.length; i++) {
        var mergedConfig = OAEUtil.extend(true, modules, parseStoredConfigToObject(config[i]));

        cachedConfiguration[config[i].get("tenantId").value] = mergedConfig;
        modules = mergedConfig;
    }

    // Filter out the unused modules and their configuration
    for (m in modules) {
        for (c in modules[m]) {
            if (modules[m][c].elements && !modules[m][c].name) {
                // Delete module that has no name
                // No name means not merged with predefined config.js file
                delete modules[m][c];

                // Check if other configuration is available for the module
                // If not remove the module
                var i = 0;
                for (var k in modules[m]) {
                    i++;
                    break;
                }
                if (!i) {
                    delete modules[m];
                }
            }
        }
    }

    callback(modules);
};

/**
 * Reads the configuration values from Cassandra
 * @param {String}    tenantId   The ID of the tenant to get configuration for
 * @param {Function}  callback   Function executed after config has been read
 */
var _getConfigFromCassandra = function(tenantId, callback) {
    var cqlParams = [OAE.serverTenant.alias];
    if (tenantId !== OAE.serverTenant.alias) {
        cqlParams.push(tenantId);
    }

    Cassandra.runQuery('SELECT * FROM Config USING CONSISTENCY QUORUM WHERE tenantId IN (?)', [cqlParams], function(err, rows) {
        if (err) {
            return callback(err);
        }

        getModules(function(modules) {
            _mergeConfigIntoOriginal(rows, modules, function(config) {
                callback(false, config);
            });
        });
    });
};

/**
 * Reads the configuration values from cache or calls retrieveConfigFromCassandra and returns the configuration
 * @param {String}    tenantId   The ID of the tenant to get configuration for
 * @param {Function}  callback   Function executed after config has been read
 */
var getConfig = module.exports.getConfig = function(tenantId, callback) {
    var validator = new Validator();
    validator.check(tenantId, {'code': 400, 'msg': 'Missing tenantid'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // If the tenant configuration is cached return it instead of querying the database
    if (cachedConfiguration[tenantId]) {
        return callback(false, cachedConfiguration[tenantId]);
    } else {
        _getConfigFromCassandra(tenantId, callback);
    }
};

 /**
 * Filters out modules that don't have a configuration file in the config directory and fills an Array of modules with configuration.
 * Every file in the /config directory of a module is read. It's assumed that the files contains valid JSON.
 * If multiple configuration files exist in one module they will be merged together.
 * @param {Array}     modules    Array of strings containing directory names for oae- modules.
 * @param {Function}  callback   Callback function executed when filtering is complete. Passes through the filtered Array of config objects.
 */
var filterModulesByConfig = function(modules, callback) {

    var configurableModules = {};
    var toDo = modules.length;
    var done = 0;

    /**
     * Gets the configuration files for a given module
     * @param   {String}  dir       The URL to a module's configuration directory. e.g. '/node_modules/oae-principals/config/'
     * @param   {String}  module    The module we're getting the configuration for. e.g. 'oae-principals'
     */
    var getConfigContent = function(dir, module) {
        IO.getFileListForFolder(dir, function(files) {
            for (var ii = 0; ii < files.length; ii++) {
                var content = require(module + '/config/' + files[ii]);
                if (configurableModules[module]) {
                    configurableModules[module] = OAEUtil.extend(true, configurableModules[module], content.config[module]);
                } else {
                    configurableModules[module] = content.config[module];
                }
            }
            done++;
            if (done === toDo) {
                callback(configurableModules);
            }
        });
    };

    for (var i = 0; i < modules.length; i++) {
        var dir = 'node_modules/' + modules[i] + '/config/';
        getConfigContent(dir, modules[i]);
    }
};


/**
 * Gets the available modules
 * @param {Function} callback Function executed when availables modules are retrieved
 */
var getModules = module.exports.getModules = function(callback) {
    callback = callback || function(){};

    // Read directories starting with oae- and get their configuration files.
    // If there's no configuration file the directory is skipped.
    OAE.getAvailableModules(function(finalModules) {
        filterModulesByConfig(finalModules, callback);
    });
};
