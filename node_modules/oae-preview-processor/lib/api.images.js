/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var gm = require('gm');
var Path = require('path');

var ImageUtil = require('oae-util/lib/image');
var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-preview-processor');

var PreviewConstants = require('./constants');

/**
 * Generates previews for an image file.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, callback) {
    // Download the file.
    ctx.download(function(err, path) {
        if (err) {
            return callback(err);
        }

        // Generate different sizes.
        var sizes = [
            { 'width': PreviewConstants.SIZES.IMAGE.MEDIUM, 'height': PreviewConstants.SIZES.IMAGE.MEDIUM, 'size': 'medium' },
            { 'width': PreviewConstants.SIZES.IMAGE.SMALL, 'height': PreviewConstants.SIZES.IMAGE.SMALL, 'size': 'small' }
        ];
        resizeImages(ctx, path, sizes, function(err) {
            if (err) {
                return callback(err);
            }

            // Intelligently crop out a part of the image.
            cropThumbnail(ctx, path, callback);
        });
    });
};

/**
 * Resizes an image to one or multiple different sizes.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {String}              path            The path where the image can be found on disk.
 * @param {Object[]}            sizes           An array of size object. Each object should have a `width`, `height` and `size` key, the `prefix` key is optional.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 */
var resizeImages = module.exports.resizeImages = function(ctx, path, sizes, callback) {
    var todo = sizes.length;
    var called = false;
    sizes.forEach(function(size) {
        _resize(ctx, path, size, function(err) {
            todo--;
            if (err) {
                if (!called) {
                    called = true;
                    return callback(err);
                }
            }

            if (todo === 0 && !called) {
                called = true;
                callback();
            }
        });
    });
};

/**
 * Resizes an image to the specified size.
 * The image will be stored at basedir/previews/filename.<size name>.png
 * The filename will be retrieved from the path.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {String}              path            The path where the image can be found on disk.
 * @param {Object}              size            A size object
 * @param {Number}              size.width      The width in pixels.
 * @param {Number}              size.height     The height in pixels.
 * @param {String}              size.size       The size of the desired image. One of 'small', 'medium' or 'large'.
 * @param {String}              [size.prefix]   The prefix that should be used in the filename. The end filename will look like <prefix><size>.png . If no prefix is specified, an empty string will be used.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 * @api private
 */
var _resize = function(ctx, path, size, callback) {
    log().trace({'contentId': ctx.contentId}, 'Resizing image %s to %s x %s', path, size.width, size.height);
    ImageUtil.resizeImage(path, size, function(err, file) {
        if (err) {
            return callback(err);
        }

        // Move the resized image to the base directory for this piece of content.
        var prefix = size.prefix || '';
        var resizedPath = ctx.baseDir + '/' + prefix + size.size + '.png';
        IO.moveFile(file.path, resizedPath, function(err) {
            if (err) {
                return callback(err);
            }

            // Add it to the set of previews that should be attached to it.
            ctx.addPreview(resizedPath, size.size);
            callback();
        });
    });
};

/**
 * Intelligently crops out a square thumbnail.
 * In landscape mode we crop out a box the size of the image height in the (horizontal) center of the image
 * In portrait mode we crop out a box the size of the image width at the top of the image.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {String}              path            The path where the image can be found on disk.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 */
var cropThumbnail = module.exports.cropThumbnail = function(ctx, path, callback) {
    log().trace({'contentId': ctx.contentId}, 'Cropping image: %s', path);
    gm(path).size(function (err, size) {
        if (err) {
            log().error({'err': err}, 'Could not get the image size for the large image.');
            return callback({'code': 500, 'msg': 'Could not get the image size for the large image.'});
        }

        var width = size.width;
        var height = size.height;

        // If the image is a square, just resize it.
        if (width === height) {
            ImageUtil.resizeImage(path, { 'width': PreviewConstants.SIZES.IMAGE.THUMBNAIL, 'height': PreviewConstants.SIZES.IMAGE.THUMBNAIL }, function(err, thumbnailFile) {
                if (err) {
                    return callback(err);
                }
                // Move the files to the preview directory
                var thumbnailPath = ctx.baseDir + '/thumbnail.png';
                IO.moveFile(thumbnailFile.path, thumbnailPath, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    // Set this file as the image thumbnail.
                    ctx.setThumbnail(thumbnailPath);
                    callback();
                });
            });
        } else {
            // In portrait mode we crop out a box the size of the image width at the top of the image.
            var selectedArea = {
                'x': 0,
                'y': 0,
                'width': width,
                'height': width
            };

            // In landscape mode we crop out a box the size of the image height in the (horizontal) center of the image.
            if (width > height) {
                selectedArea.x = Math.floor(width / 2 - height / 2);
                selectedArea.width = height;
                selectedArea.height = height;
            }

            // Crop the correct square.
            ImageUtil.cropAndResize(path, selectedArea, [ PreviewConstants.SIZES.IMAGE.THUMBNAIL ], function(err, files) {
                if (err) {
                    return callback(err);
                }

                // Move the files to the thumbnail path
                var thumbnailPath = ctx.baseDir + '/thumbnail.png';
                IO.moveFile(files[PreviewConstants.SIZES.IMAGE.THUMBNAIL].path, thumbnailPath, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    // Set this file as the image thumbnail.
                    ctx.setThumbnail(thumbnailPath);
                    callback();
                });
            });
        }
    });
};
