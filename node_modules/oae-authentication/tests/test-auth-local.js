/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');

var PrincipalsAPI = require('oae-principals');
var TenantApi = require('oae-tenants');
var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;
var TestAPI = require('oae-tests');

describe('Authentication', function() {

    var tenantA = null;
    var tenantB = null;
    var anonA = null;
    var anonB = null;

    before(function(callback) {
        TenantApi.getTenantByPort(2001, function(err, tenant) {
            assert.ok(!err);
            tenantA = tenant;
            anonA = new Context(tenantA, null);
            TenantApi.getTenantByPort(2002, function(err, tenant) {
                assert.ok(!err);
                tenantB = tenant;
                anonB = new Context(tenantB, null);
                callback();
            });
        });
    });

    /**
     * Test that will verify that users can log into the system using a local authorization strategy
     */
    it('Test local auth', function(callback) {
        var r = Math.floor(Math.random()*10000000);
        var username = 'user-' + r;
    
        TenantApi.getTenantByPort(2001, function(err, tenant) {
            var ctx = new Context(tenant, null);
            assert.ok(!err);
    
            PrincipalsAPI.createUser(ctx, username, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId) {
                assert.ok(!err);

                // Log in.
                request.post({
                    'uri': 'http://localhost:2001/api/auth/login',
                    'method': 'POST',
                    'form': {'username': username, 'password': 'password'}
                }, function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(200, response.statusCode, "Expected to be succesfully logged in.");
                    // the request module has a built-in cookie jar.
                    request.get('http://localhost:2001/api/me', function(err, response, body) {
                        assert.ok(!err);
                        assert.equal(200, response.statusCode);
                        var data = JSON.parse(body);
                        assert.equal(userId, data.userId);
                        assert.equal('John', data.profile.firstName);
                        assert.equal('Doe', data.profile.lastName);
                        assert.equal('John Doe', data.profile.displayName);
    
                        // logout.
                        request.post({
                            'uri': 'http://localhost:2001/api/auth/logout',
                            'followRedirect': false
                        }, function(err, response, body) {
                            assert.ok(!err);
                            assert.equal(200, response.statusCode, "Expected to be succesfully logged out.");
    
                            request.get('http://localhost:2001/api/me', function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(200, response.statusCode);
                                var j = JSON.parse(body);
                                assert.equal(true, j.anon);
                                callback();
                            });
                        });
                    });
                });
    
            });
        });
    });
    
    /**
     * Test that will verify that loggin in with a non-existing user doesn't work
     */
    it('Test failed auth', function(callback) {
        var r = Math.floor(Math.random()*10000000);
        var username = 'user-' + r;
    
        TenantApi.getTenantByPort(2001, function(err, tenant) {
            assert.ok(!err);
    
            // Login with some non-existing user.
            request.post({
                    'uri': 'http://localhost:2001/api/auth/login',
                    'method': 'POST',
                    'form': {'username': 'non-existing-user', 'password': 'password'}
                }, function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(401, response.statusCode, "Expected to be unauthorized");
                    callback();
                }
            );
        });
    });

    it('Test you cannot login with a user account from tenant A on tenant B', function(callback) {
        var r = Math.floor(Math.random()*10000000);
        var username = 'user-' + r;

        // Create an account on tenant A
        PrincipalsAPI.createUser(anonA, username, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId) {
            assert.ok(!err);

            // Make sure we can't login on tenant B
            request.post({
                'uri': 'http://localhost:2002/api/auth/login',
                'method': 'POST',
                'form': {'username': username, 'password': 'password'}
            }, function(err, response, body) {
                assert.ok(!err);
                assert.equal(response.statusCode, 401);
                // Make sure we can login on tenant A
                request.post({
                    'uri': 'http://localhost:2001/api/auth/login',
                    'method': 'POST',
                    'form': {'username': username, 'password': 'password'}
                }, function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });
        });
    });
    
    it('Test a global administrator can log in and log out of the administration panel', function(callback) {
        var r = Math.floor(Math.random()*10000000);
        var username = 'user-' + r;

        var serverTenant = new Tenant('global', 'Global Administration', 2000, 'localhost:2000', true, false);
        var ctx = new Context(serverTenant, null);

        PrincipalsAPI.createUser(ctx, username, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId) {
            assert.ok(!err);

            // Log in.
            request.post({
                'uri': 'http://localhost:2000/api/auth/login',
                'method': 'POST',
                'form': {'username': username, 'password': 'password'}
            }, function(err, response, body) {
                assert.ok(!err);
                assert.equal(200, response.statusCode, "Expected to be logged in.");

                // the request module has a built-in cookie jar.
                request.get('http://localhost:2000/api/me', function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(200, response.statusCode);
                    var data = JSON.parse(body);
                    assert.equal(userId, data.userId);
                    assert.equal('John', data.profile.firstName);
                    assert.equal('Doe', data.profile.lastName);
                    assert.equal('John Doe', data.profile.displayName);

                    // logout.
                    request.post({
                        'uri': 'http://localhost:2000/api/auth/logout',
                        'followRedirect': false
                    }, function(err, response, body) {
                        assert.ok(!err);
                        assert.equal(200, response.statusCode, "Expected to be succesfully logged out.");

                        request.get('http://localhost:2000/api/me', function(err, response, body) {
                            assert.ok(!err);
                            assert.equal(200, response.statusCode);
                            var j = JSON.parse(body);
                            assert.equal(true, j.anon);
                            callback();
                        });
                    });
                });
            });
        });
    });

});
