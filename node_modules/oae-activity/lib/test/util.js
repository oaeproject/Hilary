/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var RestAPI = require('oae-rest');

var ActivityAggregator = require('oae-activity/lib/internal/aggregator');

var COLLECT_DELAY = parseInt(process.env['OAE_TIMEOUTS_ACTIVITY_COLLECTION'], 10) || 250;

/**
 * Get the activity stream by its id, but delay (if specified) and perform a collection first to ensure the stream is
 * updated.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {String}         [activityStreamId]  The id of the activity stream to get. If `null`, will get the stream of the current user
 * @param  {Object}         [opts]              @see RestAPI.Activity#getActivityStream for available options
 * @param  {Boolean}        [opts._delay]       If specified and equal to `false`, will suppress the delay before collection. Otherwise, there will be a delay before collection is performed.
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getActivityStream for more information.
 */
var collectAndGetActivityStream = module.exports.collectAndGetActivityStream = function(restCtx, activityStreamId, opts, callback) {
    opts = opts || {};
    var delay = (opts._delay !== false);
    delete opts._delay;

    if (delay) {
        setTimeout(_collectAndGetActivityStream, COLLECT_DELAY, restCtx, activityStreamId, opts, callback);
    } else {
        _collectAndGetActivityStream(restCtx, activityStreamId, opts, callback);
    }
};

/**
 * Force an activity collection and then get the activity stream.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {String}         [activityStreamId]  The id of the activity stream to get. If `null`, will get the stream of the current user
 * @param  {Object}         [opts]              @see RestAPI.Activity#getActivityStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getActivityStream for more more information
 * @api private
 */
var _collectAndGetActivityStream = function(restCtx, activityStreamId, opts, callback) {
    ActivityAggregator.collectAllBuckets(function() {
        _getActivityStream(restCtx, activityStreamId, opts, callback);
    });
};

/**
 * Get the specified (or current) activity stream.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {String}         [activityStreamId]  The id of the activity stream to get. If `null`, will get the stream of the current user
 * @param  {Object}         [opts]              @see RestAPI.Activity#getActivityStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getActivityStream for more more information
 * @api private
 */
var _getActivityStream = function(restCtx, activityStreamId, opts, callback) {
    if (activityStreamId) {
        RestAPI.Activity.getActivityStream(restCtx, activityStreamId, opts, callback);
    } else {
        RestAPI.Activity.getCurrentUserActivityStream(restCtx, opts, callback);
    }
};
