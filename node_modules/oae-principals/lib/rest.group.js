/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var OAE = require('oae-util/lib/oae');

var PrincipalsAPI = require('./api');


OAE.tenantServer.post('/api/group/create', function(req, res) {
    req.telemetryUrl = '/api/group/create';
    var managers = req.body.managers || [];
    var members = req.body.members || [];
    if (managers && !Array.isArray(managers)) {
        managers = [managers];
    }
    if (members && !Array.isArray(members)) {
        members = [members];
    }

    var memberHash = {};
    for (var i = 0; i < managers.length; i++) {
        memberHash[managers[i]] = 'manager';
    }
    for (var j = 0; j < members.length; j++) {
        memberHash[members[j]] = 'member';
    }

    PrincipalsAPI.createGroup(req.ctx, req.body.alias, req.body.name, req.body.description, req.body.visibility, req.body.joinable, memberHash, {}, function(err, groupId) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        PrincipalsAPI.getGroup(req.ctx, groupId, function(err, group) {
            if (err){
                return res.send(err.code, err.msg);
            }
            res.send(201, group);
        });
    });
});

OAE.tenantServer.get('/api/group/exists/:alias', function(req, res) {
    req.telemetryUrl = '/api/group/exists/alias';
    PrincipalsAPI.getGroupByAlias(req.ctx, req.params.alias, function(err, group) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, group);
    });
});

OAE.tenantServer.get('/api/group/:id', function(req, res) {
    req.telemetryUrl = '/api/group/id';
    PrincipalsAPI.getFullGroupProfile(req.ctx, req.params.id, function(err, group) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, group);
    });
});

OAE.tenantServer.post('/api/group/:id', function(req, res) {
    req.telemetryUrl = '/api/group/id';
    // Get the fields we wish to update.
    PrincipalsAPI.updateGroup(req.ctx, req.params.id, req.body, function(err, group) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200);
    });
});

OAE.tenantServer.get('/api/group/:id/members', function(req, res) {
    req.telemetryUrl = '/api/group/id/members';
    var limit = req.query.limit || 10;
    PrincipalsAPI.getGroupMembers(req.ctx, req.params.id, req.query.start, limit, function(err, members) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, {'results': members});
    });
});

OAE.tenantServer.post('/api/group/:id/members', function(req, res) {
    req.telemetryUrl = '/api/group/id/members';
    // Convert the string 'false' to a proper boolean.
    var members = req.body;
    var principals = _.keys(members);
    for (var i = 0; i < principals.length; i++) {
        if (members[principals[i]] === 'false') {
            members[principals[i]] = false;
        }
    }
    PrincipalsAPI.setGroupMembers(req.ctx, req.params.id, members, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200);
    });
});

OAE.tenantServer.post('/api/group/:id/picture', function(req, res) {
    req.telemetryUrl = '/api/group/id/picture';
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.id, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, principal);
    });
});
