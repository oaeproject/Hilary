/*
 * Copyright 2016 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the 'License'); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an 'AS IS'
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var ZencoderAPI = require('oae-zencoder/lib/api');
var ZencoderDAO = require('oae-zencoder/lib/internal/dao');

describe('Zencoder API', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var globalAdminOnTenantRestContext = null;

    /*!
     * Set up rest contexts before each test
     */
    beforeEach(function(callback) {
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Log in the admin so his cookie jar is set up appropriately
        RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
            assert.ok(!err);
            globalAdminOnTenantRestContext = ctx;

            RestAPI.User.getMe(globalAdminOnTenantRestContext, function(err, user) {
                assert.ok(!err);
                assert.ok(!user.anon);
                callback();
            });
        });
    });

    /*!
     * @return a stream to a video file
     */
    var _getVideoStream = function() {
        return fs.createReadStream(__dirname + '/data/video.mp4');
    };

    describe('#encodingCompleted', function() {
        it('verify a valid notification is processed correctly', function(callback) {
            TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 1, function(err, users) {
                assert.ok(!err);
                var user = _.values(users)[0];
                var restCtx = user.restContext;
                // Create the content item that we'll test with
                RestAPI.Content.createFile(restCtx, 'test video', null, 'private', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    ZencoderDAO.saveContentRevisionId('10', content.id, content.latestRevisionId, function(err) {
                        assert.ok(!err);
                        var key = util.format('%s/%s.mp4', content.id, content.latestRevisionId);
                        // Test creating reviews when there are no thumbnails
                        var notification = {
                            'job': {
                                'state': 'finished',
                                'pass_through': key,
                            },
                            'output': {
                                'id': 10,
                                'state': 'finished'
                            }
                        };
                        ZencoderAPI.encodingCompleted(notification, function(err) {
                            assert.ok(!err);
                            RestAPI.Content.createFile(restCtx, 'test video', null, 'private', _getVideoStream, null, null, null, function(err, content) {
                                assert.ok(!err);
                                ZencoderDAO.saveContentRevisionId('11', content.id, content.latestRevisionId, function(err) {
                                    assert.ok(!err);
                                    var url = 'http://example.com/thumbnail';
                                    var nock = require('nock');
                                    nock.enableNetConnect();

                                    nock('http://example.com')
                                        .get('/thumbnail')
                                        .replyWithFile(200, __dirname + '/data/image.png');

                                    // Test creating reviews when there is a thumbnail
                                    notification = {
                                        'job': {
                                            'state': 'finished',
                                            'pass_through': key,
                                        },
                                        'output': {
                                            'id': 11,
                                            'state': 'finished',
                                            'thumbnails': [
                                                {
                                                    'label': 'base',
                                                    'images': [
                                                        {
                                                            'url': url
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    };
                                    ZencoderAPI.encodingCompleted(notification, function(err) {
                                        assert.ok(!err);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies when Zencoder provides invalid JSON in the response body, we return a 500 code to the client
         */
        it('verify invalid JSON response from Zencoder results in internal error to endpoint', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];
                // Create the content item that we'll test with
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'private', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    ZencoderDAO.saveContentRevisionId('20', content.id, content.latestRevisionId, function(err) {
                        assert.ok(!err);
                        // Test when received notification that the Zencoder job failed
                        var notification = {
                            'job': {
                                'state': 'failed',
                                'pass_through': util.format('%s/%s.mp4', content.id, content.latestRevisionId)
                            },
                            'output': {
                                'id': 20
                            }
                        };

                        ZencoderAPI.encodingCompleted(notification, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 500);

                            // Test when received notification with no pass_through
                            notification = {
                                'job': {
                                    'state': 'finished'
                                },
                                'output': {
                                    'id': 20
                                }
                            };

                            ZencoderAPI.encodingCompleted(notification, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 500);

                                // Test when received notification with failed output state
                                notification = {
                                    'job': {
                                        'state': 'finished',
                                        'pass_through': util.format('%s/%s.mp4', content.id, content.latestRevisionId)
                                    },
                                    'output': {
                                        'id': 20,
                                        'state': 'failed'
                                    }
                                };

                                ZencoderAPI.encodingCompleted(notification, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 500);

                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
