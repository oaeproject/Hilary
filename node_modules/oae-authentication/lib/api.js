/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var GoogleStrategy = require('passport-google').Strategy;
var OpenIDStrategy = require('passport-openid').Strategy;
var util = require('util');

var principalAPI = require('oae-principals');


var getOrCreateUser = function(tenant, username, firstName, lastName, displayName, callback) {
    // Check if this user already exists in our DB.
    principalAPI.getTenantUser(tenant, username, function(err, user) {
        if (err.code === 404) {
            // new user, create an account.
            principalAPI.createUser(tenant, username, "lkfa;sdjsnldkjfghjsa", "public", firstName, lastName, displayName, function(err, principal_id) {
                if (err) {
                    return callback(err);
                }
                else {
                    return callback(null, {'id': principal_id});
                }
            });
        }
        else if (err) {
            return callback(err);
        }
        else {
            // User already exists, move on.
            return callback(null, user);
        }
    });
};



//////////////
//  GOOGLE  //
//////////////



module.exports.GoogleCallbackWrapper = function(tenant) {
    var that = {};
    that.tenant = tenant;
    that.callback = function(identifier, profile, done) {
        var username = profile.emails[0].value;
        var displayName = profile.name.givenName + " " + profile.name.familyName;

        // Check if this user already exists in our DB.
        principalAPI.getTenantUser(that.tenant, username, function(err, user) {
            if (err.code === 404) {
                // new user, create an account.
                principalAPI.createUser(that.tenant, username, "lkfa;sdjsnldkjfghjsa", "public", profile.name.givenName, profile.name.familyName, displayName, function(err, principal_id) {
                    if (err) {
                        return done(err);
                    } else {
                        return done(null, {'id': principal_id});
                    }
                });
            }
            else if (err) {
                return done(err);
            }
            else {
                // User already exists, move on.
                return done(null, user);
            }
        });
    };
    return that;
};


module.exports.GoogleStrategyWrapper = function(tenant, validate) {
    var options = {
        'providerURL': 'https://www.google.com/accounts/o8/id',
        'profile': true,
        'returnURL' : '://' + tenant.baseUrl + '/api/auth/google/return',
        'realm': '://' + tenant.baseUrl + '/'
    };

    OpenIDStrategy.call(this, options, validate);
    this.name = 'google-' + tenant.alias;
};
util.inherits(module.exports.GoogleStrategyWrapper, GoogleStrategy);





///////////////
//  TWITTER  //
///////////////


module.exports.TwitterCallbackWrapper = function(tenant) {
    var that = {};
    that.tenant = tenant;
    that.callback = function(token, tokenSecret, profile, done) {
        // Use the Twitter handle to register this user.
        var username = "twitter-" + profile.username;
        // Twitter has no concept of first or lastname, so just fill in blanks for now.
        var firstName = '';
        var lastName = '';
        var displayName = profile.displayName;

        getOrCreateUser(that.tenant, username, firstName, lastName, displayName, done);
    };
    return that;
};




////////////////
//  FACEBOOK  //
////////////////

module.exports.FacebookCallbackWrapper = function(tenant) {
    var that = {};
    that.tenant = tenant;
    that.callback = function(accessToken, refreshToken, profile, done) {
        // Use the Twitter handle to register this user.
        var username = "facebook-" + profile.username;
        var firstName = profile.name.givenName;
        var lastName = profile.name.familyName;
        var displayName = profile.displayName;

        getOrCreateUser(that.tenant, username, firstName, lastName, displayName, done);
    };
    return that;
};