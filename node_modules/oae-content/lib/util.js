/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var PrincipalsUtil = require('oae-principals/lib/util');
var TenantsUtil = require('oae-tenants/lib/util');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;

/**
 * Create the persistent content entity that can be transformed into an activity entity for the UI.
 *
 * @param   {Content}  content      The content item that provides the data for the entity.
 * @return  {Object}                An object containing the entity data that can be transformed into a UI content activity entity
 */
var createPersistentContentActivityEntity = module.exports.createPersistentContentActivityEntity = function(content) {
    var persistentEntity = {'objectType': 'content', 'content': content};
    persistentEntity[ActivityConstants.properties.OAE_ID] = content.contentId;
    return persistentEntity;
};

/**
 * Transform a content object into an activity entity suitable to be displayed in an activity stream.
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityTransformer
 *
 * @param   {Context}           ctx         The context of the current request
 * @param   {Content}           content     The content object to transform
 * @return  {ActivityEntity}                The activity entity that represents the given content item
 */
var transformPersistentContentActivityEntity = module.exports.transformPersistentContentActivityEntity = function(ctx, content) {
    var tenant = ctx.tenant();
    var urlScheme = (TenantsUtil.useHttps(tenant.alias)) ? 'https://' : 'http://';

    var globalId = 'http://' + tenant.host + '/api/content/' + content.contentId;
    var profileUrl = urlScheme + tenant.host + '/content/' + content.contentId;

    var opts = {};
    opts.displayName = content.displayName;
    opts.url = profileUrl;

    // TODO: Use previews when it is merged.
    opts.image = new ActivityModel.ActivityMediaLink('local://2012/11/28/17/image/to/come.png', 35, 35);

    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = content.contentId;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = content.visibility;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_TYPE] = content.contentType;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_MIMETYPE] = content.mimeType;

    return new ActivityModel.ActivityEntity('content', globalId, opts);
};

/**
 * Create the persistent comment entity that can be transformed into an activity entity for the UI.
 *
 * @param   {Content}   content     The content item for which the comment was posted
 * @param   {Comment}   comment     The comment that was posted
 * @param   {Object}    [context]   Some context of the comment, such as the parent if the comment is a reply.
 * @return  {Object}                An object containing the entity data that can be transformed into a UI comment activity entity
 */
var createPersistentCommentActivityEntity = module.exports.createPersistentCommentActivityEntity = function(content, comment, context) {
    comment.visibility = content.visibility;
    var persistentEntity = {
        'objectType': 'content-comment',
        'comment': comment,
        'commentContext': context
    };
    persistentEntity[ActivityConstants.properties.OAE_ID] = comment.commentId;
    return persistentEntity;
};

/**
 * Create a comment activity entity that can be used in an activity stream.
 *
 * @param   {Context}           ctx                 The context of the current request
 * @param   {Comment}           comment             The comment object that was posted
 * @param   {Object}            [context]           Some context about the comment
 * @param   {Comment}           [context.parent]    The parent of the comment, if it is a reply
 * @return  {ActivityEntity}                        The activity entity that represents the given comment data
 */
var transformPersistentCommentActivityEntity = module.exports.transformPersistentCommentActivityEntity = function(ctx, comment, context) {
    var tenant = ctx.tenant();
    var entity = _transformCommentActivityEntity(ctx, comment);

    // Transform the parent if there is one
    if (context.parent) {
        entity[ContentConstants.activity.PROP_OAE_COMMENT_REPLY_TO] = _transformCommentActivityEntity(ctx, context.parent);
    }

    return entity;
};

/**
 * Transforms the given comment object into an activity entity for an activity stream.
 *
 * @param   {Context}           ctx     The context of the current request
 * @param   {Comment}           comment The comment object to transform
 * @return  {ActivityEntity}            The transformed activity entity that represents the given comment object
 */
var _transformCommentActivityEntity = function(ctx, comment) {
    var tenant = ctx.tenant();
    var httpHost = 'http://' + tenant.host;
    var globalId = httpHost + '/api/content/' + comment.contentId + '/comments/' + comment.commentId;
    var commentUrl = httpHost + '/content/' + comment.contentId;

    var opts = {};
    opts.url = commentUrl;
    opts.content = comment.body;

    opts.author = PrincipalsUtil.transformPersistentUserActivityEntity(ctx, comment.createdBy.id, comment.createdBy);
    opts.published = comment.created;

    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = comment.commentId;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = comment.visibility;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_ID] = comment.contentId;

    // TODO: When the threaded representation of the comment is changed to store the plain timestamp in `comment.created`, this should be
    // changed to represent the thread hierarchy. e.g., 123456780#123456780|
    opts.ext[ContentConstants.activity.PROP_OAE_COMMENT_THREAD_KEY] = comment.created;

    return new ActivityModel.ActivityEntity('content-comment', globalId, opts);
};



