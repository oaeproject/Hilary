/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');

var ConfigAPI = require('oae-config');
var OAE = require('oae-util/lib/oae');
var OaeServer = require('oae-util/lib/server');
var Signature = require('oae-util/lib/signature');
var TenantsAPI = require('oae-tenants');
var Validator = require('oae-util/lib/validator').Validator;

var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');
var Token = require('oae-authentication/lib/model').Token;


// Ensure that the signed auth URL bypass CSRF validation.
// It has its own authenticity handling.
OaeServer.addSafePathPrefix('/api/auth/signed');

OAE.globalAdminServer.get('/api/auth/signed', function(req, res) {
    req.telemetryUrl = '/api/auth/signed';
    _getSignedToken(req.ctx, req.query.tenant, function(err, data) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(data);
    });
});

OAE.tenantServer.post('/api/auth/signed', function(req, res, next) {
    req.telemetryUrl = '/api/auth/signed';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.SIGNED);
    var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
    passport.authenticate(strategyId, { 'successRedirect': '/me',
                                        'failureRedirect': '/' })(req, res, next);
});


/**
 * Returns a signed token that global administrators can use to login on a tenant without creating an account.
 * This method is only useful to global administrators.
 *
 * @param  {Context}    ctx                         The current context.
 * @param  {String}     tenantAlias                 The alias of the tenant on which they wish to log on.
 * @param  {Function}   callback                    Standard callback method.
 * @param  {Object}     callback.err                Standard error object (if any.)
 * @param  {Token}      callback.token              A token object that contains all the data to sign in.
 * @api private
 */
var _getSignedToken = function(ctx, tenantAlias, callback) {
    if (!ctx.user() || !ctx.user().isGlobalAdmin()) {
        return callback({'code': 401, 'msg': 'Only global administrators are allowed to log onto other tenants.'});
    }

    var validator = new Validator();
    validator.check(tenantAlias, {'code': 400, 'msg': 'Missing tenant alias'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    TenantsAPI.getTenantByAlias(tenantAlias, function(err, tenant) {
        if (err) {
            return callback(err);
        }

        // Create a signature that's valid for 2 minutes and can be used to log on the tenant.
        var userId = ctx.user().id;
        var expires = parseInt(AuthenticationConfig.getValue(tenantAlias, 'signed', 'expires'), 10);
        var signature = Signature.createExpiringSignature(tenantAlias, expires, userId);

        // Return an object that the clients can use to construct an URL to redirect the user to.
        var protocol = (OaeServer.useHttps() ? 'https' : 'http');
        var token = new Token(signature.expires, protocol, tenant.host, signature.signature, userId);
        callback(null, token);
    });
};
