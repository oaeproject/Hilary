/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ActivityAggregator = require('oae-activity/lib/internal/aggregator');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityEmail = require('oae-activity/lib/internal/email');
var ActivityNotifications = require('oae-activity/lib/internal/notifications');
var Cassandra = require('oae-util/lib/cassandra');
var MqTestsUtil = require('oae-util/lib/test/mq-util');
var RestAPI = require('oae-rest');

var EmailAPI = require('oae-email');

/**
 * Send and return a single email message. This helper utility will ensure that the activity / notifications queue
 * is cleaned out to avoid a different email being triggered and the wrong message being inspected.
 *
 * For parameters, @see EmailAPI#sendEmail
 */
var sendEmail = module.exports.sendEmail = function(templateModule, templateId, toUser, data, opts, callback) {

    // Wait for all pending activities to fire, be collected, and then for all associated notifications to complete. This
    // is to avoid any notifications from other tests firing the debugSent event, which will result in us returning the
    // wrong message here.
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            ActivityNotifications.whenNotificationsEmpty(function() {

                var returned = false;

                /*!
                 * Takes care of invoking the callback when the email is "successfully sent".
                 *
                 * @see EmailAPI events
                 */
                var _handleDebugSent = function(message) {
                    if (!returned) {
                        returned = true;
                        return callback(null, message);
                    }
                };

                EmailAPI.once('debugSent', _handleDebugSent);

                // Send the email, and return the error if one occurs, otherwise the mailcomposer message will be
                // returned by _handleDebugSent
                EmailAPI.sendEmail(templateModule, templateId, toUser, data, opts, function(err) {
                    if (!returned && err) {
                        // We errored, the debugSent event *probably* won't be invoked. Unbind it and reply with the error
                        returned = true;
                        EmailAPI.removeListener('debugSent', _handleDebugSent);
                        return callback(err);
                    }
                });
            });
        });
    });
};

/**
 * Continuously poll for email until at least one shows up in the queue
 *
 * @param  {Function}   callback            Invoked when an email has arrived
 * @param  {Object[]}   callback.messages   The array of mails that were sent out
 */
var waitForEmail = module.exports.waitForEmail = function(callback) {
    collectAndFetchAllEmails(function(messages) {
        if (!_.isEmpty(messages)) {
            return callback(messages);
        }

        return setTimeout(waitForEmail, 100, callback);
    });
};

/**
 * Collect the queued activities and fetch the emails that come out of it
 *
 * @param  {Function}   callback            Standard callback function
 * @param  {Object[]}   callback.messages   An array of mails that were sent out
 */
var collectAndFetchAllEmails = module.exports.collectAndFetchAllEmails = function(callback) {
    var messages = [];

    // Ensure no notifications from other tests are still processing
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityNotifications.whenNotificationsEmpty(function() {

            /*!
             * Handle the debugSent event, filling up the messages array with the messages we receive
             */
            var _handleDebugSent = function(message) {
                messages.push(message);
            };

            // Handler that simply collects the messages that are sent in this collection cycle into an array
            EmailAPI.on('debugSent', _handleDebugSent);

            // Collect the activity buckets, which will aggregate any pending activities into the proper email activity streams
            ActivityAggregator.collectAllBuckets(function() {

                // Ensure all scheduling of email delivery has been completed
                ActivityEmail.whenEmailsScheduled(function() {

                    // Collect and send the emails
                    ActivityEmail.collectAllBuckets(function() {
                        EmailAPI.removeListener('debugSent', _handleDebugSent);

                        // SMTP specifications have a requirement that no line in an email body
                        // should surpass 999 characters, including the CR+LF character. This check
                        // ensures no email has an html content line longer than 500 chars, which
                        // accounts for post-processing things such as SendGrid changing the links
                        // to extremely long values (e.g., ~400 characters long) for click-tracking
                        //
                        // @see https://github.com/oaeproject/Hilary/issues/1168
                        _.each(messages, function(message) {
                            _assertEmailTemplateFieldValid(message, 'subject');
                            _assertEmailTemplateFieldValid(message, 'html');
                            _assertEmailTemplateFieldValid(message, 'text');
                            _.each(message.html.split('\n'), function(line) {
                                assert.ok(line.length <= 500, util.format('Expected no email line to be more than 500 characters, but found: (%s) %s', line.length, line));
                                assert.ok(line.split('<a').length < 3, util.format('Expected no email line to have more than 1 link, but found: %s', line));
                            });
                        });

                        return callback(messages);
                    });
                });
            });
        });
    });
};


/**
 * Collect the queued activities and fetch the emails for a particular preference and bucket number
 * that come out of it
 *
 * @param  {Number}     bucketNumber        The bucket number to collect
 * @param  {String}     emailPreference     The email preference to collect. One of: immediate, daily, weekly
 * @param  {Number}     [dayOfWeek]         The 0-indexed (0 = Sunday) day of the week for which to collect. Only useful for weekly collection
 * @param  {Number}     [hourOfDay]         The 0-indexed hour of the day for which to collect. Only useful for daily and weekly collection
 * @param  {Function}   callback            Standard callback function
 * @param  {Object[]}   callback.messages   An array of mails that were sent out
 */
var collectAndFetchEmailsForBucket = module.exports.collectAndFetchEmailsForBucket = function(bucketNumber, emailPreference, dayOfWeek, hourOfDay, callback) {
    var messages = [];

    // Ensure no notifications from other tests are still processing
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityNotifications.whenNotificationsEmpty(function() {

            /*!
             * Handle the debugSent event, filling up the messages array with the messages we receive
             */
            var _handleDebugSent = function(message) {
                messages.push(message);
            };

            // Handler that simply collects the messages that are sent in this collection cycle into an array
            EmailAPI.on('debugSent', _handleDebugSent);

            // Collect the activity buckets, which will aggregate any pending activities into the proper email activity streams
            ActivityAggregator.collectAllBuckets(function() {

                // Collect and send the emails
                ActivityEmail.collectMails(bucketNumber, emailPreference, dayOfWeek, hourOfDay, function(err) {
                    assert.ok(!err);
                    EmailAPI.removeListener('debugSent', _handleDebugSent);
                    return callback(messages);
                });
            });
        });
    });
};

/**
 * Clear all pending emails
 *
 * @param  {Function}   callback    Standard callback function
 * @throws {Error}                  An assertion error is thrown if there is an issue clearing the emails
 */
var clearEmailCollections = module.exports.clearEmailCollections = function(callback) {
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {

        // Force an activity collection so all emails get scheduled
        ActivityAggregator.collectAllBuckets(function() {

            // Clear the scheduled emails from the buckets
            Cassandra.runQuery('TRUNCATE "EmailBuckets"', [], function(err) {
                assert.ok(!err);

                return callback();
            });
        });
    });
};

/**
 * Ensure the specified field for the message is a valid well-templated string
 *
 * @param  {Object}         mail        The mail message object
 * @param  {String}         fieldName   The field name of the message to check
 * @throws {AssertionError}             Thrown if the field content is not valid
 */
var _assertEmailTemplateFieldValid = function(mail, fieldName) {
    var content = mail[fieldName];
    assert.ok(_.isString(content), util.format('Expected email field "%s" be a string, but was: %s', fieldName, JSON.stringify(content, null, 2)));
    assert.strictEqual(content.indexOf('__MSG__'), -1, util.format('Email field "%s" contained "__MSG__" placeholder: %s', fieldName, content));
};
