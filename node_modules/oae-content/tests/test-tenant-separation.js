/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var temp = require('temp');

var AuthzAPI = require('oae-authz');
var Config = require('oae-config').config('oae-content');
var ConfigTestUtil = require('oae-config/lib/test/util');
var MQ = require('oae-util/lib/mq');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var RestUtil = require('oae-rest/lib/util');
var TestsUtil = require('oae-tests');

var ContentTestUtil = require('oae-content/lib/test/util');

describe('Content', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and tenant admin REST context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up tenant admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    describe('Tenant separation', function() {

        /**
         * Shares a content item with a user and verifies whether or not the object is in the
         * target user his library.
         *
         * @param  {RestContext}    actorUserRestContext The context that should perform the sharing. Make sure this user has access on the piece of content.
         * @param  {Content}        objectContent        The piece of content that should be shared
         * @param  {String}         targetPrincipalId    The principal ID the content should be shared with
         * @param  {RestContext}    targetRestContext    A context to use to verify the content item ended up in the library (or not).
         * @param  {Number}         expectedHttpCode     The expected HTTP status code
         * @param  {Function}       callback             Standard callback method
         */
        var verifyShare = function(actorUserRestContext, objectContent, targetPrincipalId, targetRestContext, expectedHttpCode, callback) {
            RestAPI.Content.shareContent(actorUserRestContext, objectContent.id, [targetPrincipalId], function(err) {
                if (expectedHttpCode === 200) {
                    assert.ok(!err);
                } else {
                    assert.equal(err.code, expectedHttpCode);
                }

                // Sanity check that the item was not shared.
                RestAPI.Content.getLibrary(targetRestContext, targetPrincipalId, null, 100, function(err, data) {
                    assert.ok(!err);
                    var library = data.results;
                    if (expectedHttpCode !== 200) {
                        assert.ok(!_.find(library, function(content) { return content.id === objectContent.id; }));
                    } else {
                        assert.ok(_.find(library, function(content) { return content.id === objectContent.id; }));
                    }
                    callback();
                });
            });
        };

        /**
         * Test that verifies that a public user A from a public tenant A can access a public content item from a external tenant B
         */
        it('verify user can access public content from external tenant', function(callback) {
            ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenantA, publicTenantB, privateTenantA, privateTenantB) {
                // Accessing public content in a public tenant from a public tenant should succeed
                RestAPI.Content.getContent(publicTenantA.publicUser.restCtx, publicTenantB.publicContent.id, function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj);
                    assert.equal(contentObj.id, publicTenantB.publicContent.id);

                    // Accessing loggedin content in a public tenant from a public tenant should fail
                    RestAPI.Content.getContent(publicTenantA.publicUser.restCtx, publicTenantB.loggedinContent.id, function(err, contentObj) {
                        assert.equal(err.code, 401);
                        assert.ok(!contentObj);
                        // Accessing private content in a public tenant from a public tenant should fail
                        RestAPI.Content.getContent(publicTenantA.publicUser.restCtx, publicTenantB.privateContent.id, function(err, contentObj) {
                            assert.equal(err.code, 401);
                            assert.ok(!contentObj);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the object -> target sharing permutations
         */
        it('verify content sharing permutations from object to target (users)', function(callback) {
            ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenantA, publicTenantB, privateTenantA, privateTenantB) {

                // In all these cases, the target user should see the content item in his library
                verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 200, function() {
                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 200, function() {
                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 200, function() {

                            // These cases should fail.
                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, privateTenantA.loggedinUser.user.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, privateTenantA.loggedinUser.user.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, privateTenantA.loggedinUser.user.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, privateTenantA.privateUser.user.id, privateTenantA.privateUser.restCtx, 400, function() {
                                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, privateTenantA.privateUser.user.id, privateTenantA.privateUser.restCtx, 400, function() {
                                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, privateTenantA.privateUser.user.id, privateTenantA.privateUser.restCtx, 400, function() {
                                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, publicTenantA.loggedinUser.user.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.loggedinUser.user.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, publicTenantA.loggedinUser.user.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, publicTenantA.privateUser.user.id, publicTenantA.privateUser.restCtx, 400, function() {
                                                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.privateUser.user.id, publicTenantA.privateUser.restCtx, 400, function() {
                                                                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, publicTenantA.privateUser.user.id, publicTenantA.privateUser.restCtx, 400, function() {

                                                                            // Sharing a content item with public users from private tenants should fail.
                                                                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, privateTenantA.publicUser.user.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, privateTenantA.publicUser.user.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, privateTenantA.publicUser.user.id, privateTenantA.publicUser.restCtx, 400, callback);
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

/**
         * Test that verifies the object -> target sharing permutations
         */
        it('verify content sharing permutations from object to target (groups)', function(callback) {
            ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenantA, publicTenantB, privateTenantA, privateTenantB) {

                // In all these cases, the target user should see the content item in his library
                verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, publicTenantA.publicGroup.id, publicTenantA.publicUser.restCtx, 200, function() {
                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.publicGroup.id, publicTenantA.publicUser.restCtx, 200, function() {
                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, publicTenantA.publicGroup.id, publicTenantA.publicUser.restCtx, 200, function() {

                            // These cases should fail.
                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, privateTenantA.loggedinGroup.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, privateTenantA.loggedinGroup.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, privateTenantA.loggedinGroup.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, privateTenantA.privateGroup.id, publicTenantA.privateUser.restCtx, 400, function() {
                                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, privateTenantA.privateGroup.id, publicTenantA.privateUser.restCtx, 400, function() {
                                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, privateTenantA.privateGroup.id, publicTenantA.privateUser.restCtx, 400, function() {
                                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, publicTenantA.loggedinGroup.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.loggedinGroup.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, publicTenantA.loggedinGroup.id, publicTenantA.loggedinUser.restCtx, 400, function() {
                                                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, publicTenantA.privateGroup.id, publicTenantA.privateUser.restCtx, 400, function() {
                                                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.privateGroup.id, publicTenantA.privateUser.restCtx, 400, function() {
                                                                        verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, publicTenantA.privateGroup.id, publicTenantA.privateUser.restCtx, 400, function() {
                                                                            // Sharing a content item with public group from private tenants should fail.
                                                                            verifyShare(publicTenantB.adminRestCtx, publicTenantB.publicContent, privateTenantA.publicGroup.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                                verifyShare(publicTenantB.adminRestCtx, publicTenantB.loggedinContent, privateTenantA.publicGroup.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                                    verifyShare(publicTenantB.adminRestCtx, publicTenantB.privateContent, privateTenantA.publicGroup.id, privateTenantA.publicUser.restCtx, 400, callback);
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * Test that verifies the actor -> object sharing permutations
         */
        it('verify content sharing permutations from actor to object', function(callback) {
            ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenantA, publicTenantB, privateTenantA, privateTenantB) {

                // Create some more users as we can only share it with a target user once.
                TestsUtil.generateTestUsers(publicTenantA.adminRestCtx, 3, function(err, users) {
                    assert.ok(!err);

                    var targetUsers = [];
                    _.each(users, function(user) {
                        targetUsers.push({
                            'user': user.user,
                            'restCtx': user.restContext
                        });
                    });

                    // In all these cases, the target user should see the content item in his library
                    verifyShare(publicTenantA.adminRestCtx, publicTenantB.publicContent, targetUsers[0].user.id, targetUsers[0].restCtx, 200, function() {
                        verifyShare(publicTenantA.adminRestCtx, publicTenantB.publicContent, targetUsers[1].user.id, targetUsers[1].restCtx, 200, function() {
                            verifyShare(publicTenantA.adminRestCtx, publicTenantB.publicContent, targetUsers[2].user.id, targetUsers[2].restCtx, 200, function() {

                                // These cases should fail.
                                verifyShare(publicTenantA.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                    verifyShare(publicTenantA.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                        verifyShare(publicTenantA.adminRestCtx, publicTenantB.loggedinContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                            verifyShare(publicTenantA.adminRestCtx, publicTenantB.privateContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                                verifyShare(publicTenantA.adminRestCtx, publicTenantB.privateContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                                    verifyShare(publicTenantA.adminRestCtx, publicTenantB.privateContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                                        verifyShare(publicTenantA.adminRestCtx, privateTenantA.publicContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                                            verifyShare(publicTenantA.adminRestCtx, privateTenantA.loggedinContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, function() {
                                                                verifyShare(publicTenantA.adminRestCtx, privateTenantA.privateContent, publicTenantA.publicUser.user.id, publicTenantA.publicUser.restCtx, 401, callback);
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * Test that verifies the actor -> target sharing permutations
         */
        it('verify content sharing permutations from actor to target (users)', function(callback) {
            ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenantA, publicTenantB, privateTenantA, privateTenantB) {

                // Create some more users as we can only share it with a target user once.
                TestsUtil.generateTestUsers(publicTenantB.adminRestCtx, 3, function(err, users) {
                    assert.ok(!err);

                    var targetUsers = [];
                    _.each(users, function(user) {
                        targetUsers.push({
                            'user': user.user,
                            'restCtx': user.restContext
                        });
                    });

                    // In all these cases, the target user should see the content item in his library
                    verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, targetUsers[0].user.id, targetUsers[0].restCtx, 200, function() {
                        verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, targetUsers[1].user.id, targetUsers[0].restCtx, 200, function() {
                            verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, targetUsers[2].user.id, targetUsers[0].restCtx, 200, function() {

                                // These cases should fail:
                                //  * Sharing with any user in a private tenant (regardless of their visibility setting)
                                //  * Sharing with a private or loggedin user in a public tenant
                                verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, publicTenantB.loggedinUser.user.id, publicTenantB.loggedinUser.restCtx, 400, function() {
                                    verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, publicTenantB.loggedinUser.user.id, publicTenantB.loggedinUser.restCtx, 400, function() {
                                        verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, publicTenantB.loggedinUser.user.id, publicTenantB.loggedinUser.restCtx, 400, function() {
                                            verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, publicTenantB.privateUser.user.id, publicTenantB.privateUser.restCtx, 400, function() {
                                                verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, publicTenantB.privateUser.user.id, publicTenantB.privateUser.restCtx, 400, function() {
                                                    verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, publicTenantB.privateUser.user.id, publicTenantB.privateUser.restCtx, 400, function() {
                                                        verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, privateTenantA.publicUser.user.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                            verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, privateTenantA.publicUser.user.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, privateTenantA.publicUser.user.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                    verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, privateTenantA.loggedinUser.user.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                                                        verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, privateTenantA.loggedinUser.user.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                                                            verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, privateTenantA.loggedinUser.user.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                                                                verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, privateTenantA.privateUser.user.id, privateTenantA.privateUser.restCtx, 400, function() {
                                                                                    verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, privateTenantA.privateUser.user.id, privateTenantA.privateUser.restCtx, 400, function() {
                                                                                        verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, privateTenantA.privateUser.user.id, privateTenantA.privateUser.restCtx, 400, callback);
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the actor -> target sharing permutations
         */
        it('verify content sharing permutations from actor to target (groups)', function(callback) {
            ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenantA, publicTenantB, privateTenantA, privateTenantB) {

                // Create some more users as we can only share it with a target user once.
                TestsUtil.generateTestGroups(publicTenantB.adminRestCtx, 3, function(err, groups) {
                    assert.ok(!err);

                    groups = _.values(groups);

                    // In all these cases, the target user should see the content item in his library
                    verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, groups[0].id, publicTenantB.adminRestCtx, 200, function() {
                        verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, groups[1].id, publicTenantB.adminRestCtx, 200, function() {
                            verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, groups[2].id, publicTenantB.adminRestCtx, 200, function() {

                                // These cases should fail:
                                //  * Sharing with any user in a private tenant (regardless of their visibility setting)
                                //  * Sharing with a private or loggedin user in a public tenant
                                verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, publicTenantB.loggedinGroup.id, publicTenantB.loggedinUser.restCtx, 400, function() {
                                    verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, publicTenantB.loggedinGroup.id, publicTenantB.loggedinUser.restCtx, 400, function() {
                                        verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, publicTenantB.loggedinGroup.id, publicTenantB.loggedinUser.restCtx, 400, function() {
                                            verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, publicTenantB.privateGroup.id, publicTenantB.privateUser.restCtx, 400, function() {
                                                verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, publicTenantB.privateGroup.id, publicTenantB.privateUser.restCtx, 400, function() {
                                                    verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, publicTenantB.privateGroup.id, publicTenantB.privateUser.restCtx, 400, function() {
                                                        verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, privateTenantA.publicGroup.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                            verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, privateTenantA.publicGroup.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, privateTenantA.publicGroup.id, privateTenantA.publicUser.restCtx, 400, function() {
                                                                    verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, privateTenantA.loggedinGroup.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                                                        verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, privateTenantA.loggedinGroup.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                                                            verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, privateTenantA.loggedinGroup.id, privateTenantA.loggedinUser.restCtx, 400, function() {
                                                                                verifyShare(publicTenantA.publicUser.restCtx, publicTenantA.publicContent, privateTenantA.privateGroup.id, privateTenantA.privateUser.restCtx, 400, function() {
                                                                                    verifyShare(publicTenantA.loggedinUser.restCtx, publicTenantA.publicContent, privateTenantA.privateGroup.id, privateTenantA.privateUser.restCtx, 400, function() {
                                                                                        verifyShare(publicTenantA.privateUser.restCtx, publicTenantA.publicContent, privateTenantA.privateGroup.id, privateTenantA.privateUser.restCtx, 400, callback);
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user from an external tenant is limited to only the public content library of users
         */
        it('verify user sees only public libraries of external tenant users', function(callback) {
            var tenantAliasB = TestsUtil.generateTestUserId();
            var usernameA = TestsUtil.generateTestUserId();
            var usernameA2 = TestsUtil.generateTestUserId();
            var usernameB = TestsUtil.generateTestUserId();

            // Create user in tenant A (cam)
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                // Create a second user in tenant A (A2)
                RestAPI.User.createUser(camAdminRestContext, usernameA2, 'password', 'Public User A2', null, function(err, userA2) {
                    assert.ok(!err);
                    var restCtxA2 = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA2, 'password');

                    // Create user in tenant B (gt)
                    RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', null, function(err, userB) {
                        assert.ok(!err);
                        var restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                        // Create "public" content in tenant A
                        RestAPI.Content.createLink(restCtxA, 'Yahoo', 'Yahoo Website', 'public', 'http://www.yahoo.ca', [userA.id], [], function(err, publicContentA) {
                            assert.ok(!err);

                            // Create "loggedin" content in tenant A
                            RestAPI.Content.createLink(restCtxA, 'Google', 'Google Website', 'loggedin', 'http://google.com', [userA.id], [], function(err, loggedInContentA) {
                                assert.ok(!err);

                                // Verify user A2 can see both public and logged in content items
                                RestAPI.Content.getLibrary(restCtxA2, userA.id, null, 10, function(err, libraryA) {
                                    assert.ok(!err);
                                    assert.equal(libraryA.results.length, 2);

                                    // Verify user B cannot see the loggedin content item, but can see the public content item
                                    RestAPI.Content.getLibrary(restCtxB, userA.id, null, 10, function(err, libraryA) {
                                        assert.ok(!err);
                                        assert.equal(libraryA.results.length, 1);
                                        assert.equal(libraryA.results[0].id, publicContentA.id);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users from an external tenant are limited to a group's public content library
         */
        it('verify user sees only public library of external tenant groups', function(callback) {
            var usernameA = TestsUtil.generateTestUserId();
            var groupNameA = TestsUtil.generateTestUserId();
            var usernameB = TestsUtil.generateTestUserId();

            // Create user in tenant A (cam)
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                // Create a group in tenant A
                RestAPI.Group.createGroup(restCtxA, groupNameA, groupNameA, 'public', 'no', [], [], function(err, groupA) {
                    assert.ok(!err);

                    // Create user in tenant B (gt)
                    RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', null, function(err, userB) {
                        assert.ok(!err);
                        restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                        // Create "public" content in tenant A
                        RestAPI.Content.createLink(restCtxA, 'Yahoo', 'Yahoo Website', 'public', 'http://www.yahoo.ca', [userA.id], [groupA.id], function(err, publicContentA) {
                            assert.ok(!err);

                            // Create "loggedin" content in tenant A
                            RestAPI.Content.createLink(restCtxA, 'Google', 'Google Website', 'loggedin', 'http://google.com', [userA.id], [groupA.id], function(err, loggedInContentA) {
                                assert.ok(!err);

                                // Verfy user A can see both public and logged in content items for the group
                                RestAPI.Content.getLibrary(restCtxA, groupA.id, null, 10, function(err, libraryA) {
                                    assert.ok(!err);
                                    assert.equal(libraryA.results.length, 2);

                                    // Verify user B cannot see the loggedin content item, but can see the public content item
                                    RestAPI.Content.getLibrary(restCtxB, groupA.id, null, 10, function(err, libraryB) {
                                        assert.ok(!err);
                                        assert.equal(libraryB.results.length, 1);
                                        assert.equal(libraryB.results[0].id, publicContentA.id);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});