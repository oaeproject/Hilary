var express = require('express');

var OAE = require('oae-util/lib/oae');
var IO = require('oae-util/lib/io');
var Cassandra = require('oae-util/lib/cassandra');

var model = require('./model');

/**
 * Start a new tenant
 * @param {Tenant}      tenant      The tenant object representing the tenant to be started
 * @param {Function}    callback    Standard callback function execute when the tenant is fully
 *                                  started up
 */
var startTenant = module.exports.startTenant = function(tenant, callback) {
    callback = callback || function() {};
    if (tenant && tenant.port) {
        tenant.server = express();
        tenant.server.listen(tenant.port);
        registerAPI(tenant, callback);
        console.log('Start tenant "' + tenant.name + '" on port ' + tenant.port);
    }
};

/**
 * Stop a running tenant
 * @param {Tenant}   tenant     The tenant object representing the tenant to be stopped
 */
var stopTenant = module.exports.stopTenant = function(tenant) {
    if (tenant && tenant.server) {
        tenant.server.close();
    }
};

/**
 * Get all the tenants in the datastore.
 *
 * @param {Function} callback A function(tenants, err) specifying the array of tenants in the
 * datastore.
 */ 
var getAllTenants = module.exports.getAllTenants = function(callback) {
    Cassandra.runQuery('select * from Tenant', false, function(err, rows) {
        if (!err) {
            var tenants = [];
            if (hasTenant(rows)) {
                for (var i = 0; i < rows.rowCount(); i++) {
                    tenants.push(mapToTenant(rows[i]));
                }
            }
            callback(tenants);
        } else {
            callback(null, err);
        }
    });
};

/**
 * Get the unique tenant by their mapped port.
 * 
 * @param {Number}   port The port number on which the tenant listens
 * @param {Function} callback A function(err, tenant) specifying the tenant requested
 */
var getTenantByPort = module.exports.getTenantByPort = function(port, callback) {
    Cassandra.runQuery('select * from Tenant where port = ?', [ port ], function(err, rows) {
        if (!err) {
            if (hasTenant(rows)) {
                var tenant = mapToTenant(rows[0]);
                callback(null, tenant);
            } else {
                callback({'code': 404, 'msg': 'There is no tenant listening on port ' + port});
            }
        } else {
            callback(err);
        }
    });
};

/**
 * Get the unique tenant by their alias.
 * 
 * @param {String}   alias The alias assigned to the tenant
 * @param {Function} callback A function(err, tenant) specifying the tenant requested
 */
var getTenantByAlias = module.exports.getTenantByAlias = function(alias, callback) {
    getAllTenants(function(tenants, err) {
        if (!err) {
            var tenant = null;
            if (tenants !== null) {
                for (var i = 0; i < tenants.length; i++) {
                    if (tenants[i].alias === alias) {
                        tenant = tenants[i];
                        break;
                    }
                }
            }
            callback(null, tenant);
        } else {
            callback(err);
        }
    });
};

/**
 * Create a tenant using the provided information.
 * 
 * @param {String}   alias The unique alias assigned to the tenant
 * @param {String}   name A descriptive short name for the tenant
 * @param {String}   description A long description of the tenant
 * @param {Number}   port The port on which the tenant should listen
 * @param {Function} callback A function(err, tenant) specifying the tenant information that was persisted.
 */
var createTenant = module.exports.createTenant = function(alias, name, description, port, callback) {
    callback = callback || function() {};
    getTenantByPort(port, function(err, tenant) {
        if (!tenant) {
            getTenantByAlias(alias, function(err, tenant) {
                if (!tenant) {
                    tenant = new model.Tenant(alias, name, description, port);
                    // no tenant by this alias or port exist, create one
                    Cassandra.runQuery('update Tenant set alias = ?, name = ?, description = ? where port = ?',
                        [tenant.alias, tenant.name, tenant.description || "", tenant.port], function(err) {
                        if (!err) {
                            startTenant(tenant, function() {
                                callback(null, tenant);
                            });
                        } else {
                            callback(err);
                        }
                    });
                } else {
                    callback({'code': 500, 'msg': 'A tenant with the alias ' + alias + ' already exists'});
                }
            });
        } else {
            callback({'code': 500, 'msg': 'A tenant is already running on port ' + port});
        }
    });
};

/**
 * Register all of the REST end points from all modules against a tenant
 * @param {Tenant}      tenant      The tenant object representing the tenant for which the REST
 *                                  endpoints need to be registered
 * @param {Function}    callback    Standard callback function execute when all of the REST endpoints
 *                                  have finished registering
 */
var registerAPI = function(tenant, callback) {
    OAE.getAvailableModules(function(modules) {
        var modulesLoaded = 0;
        for (var m = 0; m < modules.length; m++) {
            (function(m) {
                var path = "node_modules/" + modules[m] + "/lib/rest.js";
                IO.pathExists(path, function(exists) {
                    if (exists) {
                        require(modules[m] + "/lib/rest")(tenant);
                    }
                    modulesLoaded++;
                    if (modulesLoaded === modules.length) {
                        callback();
                    }
                });
            }(m));
        }
    });
};

/**
 * Determines whether or not this set of rows represents a result set with a tenant.
 */
var hasTenant = function(rows) {
    return (rows && rows[0] && rows[0].colHash && rows[0].colHash['alias']);
}

/**
 * Map a cassandra row element to a tenant object.
 */
var mapToTenant = function(row) {
    return new model.Tenant(row.colHash['alias'], row.colHash['name'], row.colHash['description'],
        row.colHash['port']);
}
