/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * The User model
 *
 * @param {String}  tenant          The tenant this user belongs to.
 * @param {String}  id              The globally unique userid for this user. ie: u:cam:johndoe
 * @param {String}  visibility      The visibility of this user account. ie: loggedin
 * @param {String}  locale          The user's locale
 * @param {String}  timezone        The user's timezone
 * @param {String}  displayName     An optional display name. If the account is hidden, the displayname can still be used.
 * @param {Boolean} isGlobalAdmin   Whether or not the user is a global admin
 * @param {Boolean} isTenantAdmin   Whether or not the user is the admin of their tenant
 */
module.exports.User = function(tenant, id, visibility, locale, timezone, displayName, isGlobalAdmin, isTenantAdmin) {
    // Explicit checks on true for admin.
    var _isGlobalAdmin = (isGlobalAdmin === true);
    var _isTenantAdmin = (isTenantAdmin === true);

    var that = {};

    that.tenant = tenant;
    that.id = id;
    that.visibility = visibility;
    that.locale = locale;
    that.timezone = timezone;
    that.displayName = displayName;

    /**
     * Hides the sensitive data (first and last name) from this user.
     */
    that.hide = function() {
        delete that.timezone;
        delete that.locale;
    };

    /**
     * @return {Boolean} Whether or not this user is a global admin.
     */
    that.isGlobalAdmin = function() {
        return _isGlobalAdmin;
    };

    /**
     * Whether or not this user is a tenant admin for the provided tenant.
     *
     * @param  {String}  tenantAlias    The tenant this user is supposed to be an admin of.
     * @return {Boolean}                Whether or not the user is a tenant admin.
     */
    that.isTenantAdmin = function(tenantAlias) {
        return (_isTenantAdmin && tenantAlias === that.tenant);
    };

    /**
     * Checks for both tenant admin as global admin.
     *
     * @param  {Object}  tenantAlias    The tenant this user could a tenant admin of.
     * @return {Boolean}                Whether this user is a tenant or global admin.
     */
    that.isAdmin = function(tenant) {
        return (that.isTenantAdmin(tenant) || that.isGlobalAdmin());
    };

    return that;
};

/**
 * The LoginId model object, which represents a unique identifier for an external user. The object is
 * scoped by the id provider (e.g., facebook, google, local) and the external ID itself, as provided
 * by the external system (e.g., my-google-id@gmail.com).
 *
 * @param   {String}  provider      The provider of the ID
 * @param   {String}  externalId    The external ID (e.g., my-google-id@gmail.com)
 * @return  {Object}                An object that represents the globally unique LoginId
 */
var LoginId = module.exports.LoginId = function(provider, externalId) {
    var that = {};
    that.provider = provider;
    that.externalId = externalId;
    return that;
}
