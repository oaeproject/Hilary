/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var ConfigTestUtil = require('oae-config/lib/test/util');
var MQTestUtil = require('oae-util/lib/test/mq-util');
var PreviewAPI = require('oae-preview-processor');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PreviewTestUtil = require('oae-preview-processor/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var MediaCoreProcessor = require('oae-mediacore/lib/processor');
var MediaCoreTestsUtil = require('oae-mediacore/lib/test/util');

describe('MediaCore Processor', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    var app = null;
    var server = null;
    var port = null;

    /*!
     * Set up a mock web server and rest contexts before each test
     */
    beforeEach(function(callback) {
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

        // Start the express server
        TestsUtil.createTestServer(function(_app, _server, _port) {
            app = _app;
            server = _server;
            port = _port;

            // Enable the MediaCore preview processor and configure it to talk to our new web server
            MediaCoreTestsUtil.enableMediaCore(camAdminRestContext, util.format('http://127.0.0.1:%s', port), 'camKey', 'camSecret', 12345, callback);
        });
    });

    /*!
     * Shut down the mock web server after each test
     */
    afterEach(function(callback) {
        server.close(callback);
    });

    /*!
     * @return a stream to a video file
     */
    var _getVideoStream = function() {
        return fs.createReadStream(__dirname + '/data/video.mp4');
    };

    /*!
     * @return a stream to an audio file
     */
    var _getAudioStream = function() {
        return fs.createReadStream(__dirname + '/data/music.mp3');
    };

    describe('#test', function() {

        /**
         * Test that verifies the MediaCore processor will claim an mp4 file
         */
        it('verify the MediaCore processor will pick up an mp4 file', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);

                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.id,
                            'revision': revision
                        };

                        MediaCoreProcessor.test(mockPreviewContext, content, function(err, rank) {
                            assert.strictEqual(rank, 20);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the MediaCore processor will claim an mp3 file
         */
        it('verify the MediaCore processor will pick up an mp3 file', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Content.createFile(user.restContext, 'test song', null, 'public', _getAudioStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);

                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.id,
                            'revision': revision
                        };

                        MediaCoreProcessor.test(mockPreviewContext, content, function(err, rank) {
                            assert.strictEqual(rank, 20);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('#generatePreviews', function() {

        /*!
         * Test that verifies that the MediaCore video processor executes the necessary web requests to MediaCore without the
         * post-process url
         */
        it('verify video file is posted properly to MediaCore', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var createdMediaItem = false;
                var createdFile = false;
                var publishedFile = false;
                var uploadedFile = false;
                var gotThumbnails = false;

                // Endpoint for creating a media item. Respond with a mock media id
                app.post('/api2/media', function(req, res) {
                    createdMediaItem = true;
                    res.send(200, {'id': 67890});
                });

                // Handle the request to create the file stub on the MediaCore server
                app.post('/api2/media/:mediaId/files', function(req, res) {
                    createdFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    // Return this mock structure to validate
                    res.send(200, {
                        'upload': {
                            'protocols': {
                                'form_data': {
                                    // The subsequent upload request will go to this url
                                    'upload_url': 'http://localhost:' + port + '/api2/media/67890/upload',

                                    // The upload request should contain these post params
                                    'upload_post_params': {
                                        'key': 'value'
                                    }
                                }
                            }
                        }
                    });
                });

                // Handle the request to publish the upload
                app.post('/api2/media/:mediaId/publish', function(req, res) {
                    publishedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {});
                });

                // Handle the request to upload the file body
                app.post('/api2/media/:mediaId/upload', function(req, res) {
                    uploadedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    assert.equal(req.body.key, 'value');
                    res.send(200);
                });

                // Handle the request to fetch the thumbnails
                app.get('/api2/media/:mediaId/thumbs', function(req, res) {
                    gotThumbnails = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {
                        'sizes': {
                            'l': 'http://path/to/large/image',
                            '720p': 'http://path/to/720p/image'
                        }
                    });
                });

                // Create a video item and wait for the preview processor to invoke all our endpoints
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    var numLargePreviews = 0;
                    var num720pPreviews = 0;
                    var hadMediaCoreIdPreview = false;

                    var mockPreviewContext = {
                        'contentId': content.id,
                        'revisionId': content.latestRevisionId,
                        'revision': {'previews': {}},
                        'download': function(callback) {
                            // We'll give a reference to the file, but we're not actually going to use it
                            return callback(null, __dirname + '/data/video.mp4');
                        },
                        'addPreview': function(name, value) {
                            // Ensure the preview references apply to the proper preview sizes
                            if (name === 'http://path/to/large/image') {
                                numLargePreviews++;
                                assert.ok(_.contains(['thumbnail', 'small'], value));
                            } else if (name === 'http://path/to/720p/image') {
                                num720pPreviews++;
                                assert.ok(_.contains(['medium', 'large', 'wide'], value));
                            }
                        },
                        'addPreviewMetadata': function(name, value) {
                            // Ensure the mediaCoreId that gets set is correct
                            if (name === 'mediaCoreId') {
                                hadMediaCoreIdPreview = true;
                                assert.equal(value, 67890);
                            }
                        }
                    };

                    // Generate the previews to invoke the mock endpoints and assert the data set on the mock preview context
                    MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                        assert.ok(!err);
                        assert.ok(createdMediaItem);
                        assert.ok(createdFile);
                        assert.ok(publishedFile);
                        assert.ok(uploadedFile);
                        assert.ok(gotThumbnails);

                        assert.ok(hadMediaCoreIdPreview);
                        assert.equal(numLargePreviews, 2);
                        assert.equal(num720pPreviews, 3);

                        return callback();
                    });
                });
            });
        });

        /*!
         * Test that verifies that the MediaCore video processor only uploads to MediaCore once
         */
        it('verify video file is not uploaded to MediaCore if it already has a media id', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var gotThumbnails = false;

                // Endpoint for creating a media item. Respond with a mock media id
                app.post('/api2/media', function(req, res) {
                    assert.fail('Should not have tried to create a media item');
                });

                // Handle the request to create the file stub on the MediaCore server
                app.post('/api2/media/:mediaId/files', function(req, res) {
                    assert.fail('Should not have tried to create a media file');
                });

                // Handle the request to publish the upload
                app.post('/api2/media/:mediaId/publish', function(req, res) {
                    assert.fail('Should not have tried to publish a media item');
                });

                // Handle the request to upload the file body
                app.post('/api2/media/:mediaId/upload', function(req, res) {
                    assert.fail('Should not have tried to upload a file');
                });

                // Handle the request to fetch the thumbnails
                app.get('/api2/media/:mediaId/thumbs', function(req, res) {
                    gotThumbnails = true;
                    assert.equal(req.params.mediaId, 12345);
                    res.send(200, {
                        'sizes': {
                            'l': 'http://path/to/large/image',
                            '720p': 'http://path/to/720p/image'
                        }
                    });
                });

                // Create a video item and wait for the preview processor to invoke all our endpoints
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    var numLargePreviews = 0;
                    var num720pPreviews = 0;
                    var hadMediaCoreIdPreview = false;

                    var mockPreviewContext = {
                        'contentId': content.id,
                        'revisionId': content.latestRevisionId,
                        'revision': {'previews': {'mediaCoreId': 12345}},
                        'download': function(callback) {
                            // We should not download the file body because our revision has a mediaCoreId already
                            assert.fail('Should not have tried to download the video file to the PP');
                        },
                        'addPreview': function(name, value) {
                            // Ensure the preview references apply to the proper preview sizes
                            if (name === 'http://path/to/large/image') {
                                numLargePreviews++;
                                assert.ok(_.contains(['thumbnail', 'small'], value));
                            } else if (name === 'http://path/to/720p/image') {
                                num720pPreviews++;
                                assert.ok(_.contains(['medium', 'large', 'wide'], value));
                            }
                        },
                        'addPreviewMetadata': function(name, value) {
                            // Ensure the mediaCoreId that gets set is correct
                            if (name === 'mediaCoreId') {
                                hadMediaCoreIdPreview = true;
                                assert.equal(value, 12345);
                            }
                        }
                    };

                    // Generate the previews to invoke the test and ensure we only fetch the existing thumbnails
                    MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                        assert.ok(!err);
                        assert.ok(gotThumbnails);

                        assert.ok(hadMediaCoreIdPreview);
                        assert.equal(numLargePreviews, 2);
                        assert.equal(num720pPreviews, 3);

                        return callback();
                    });
                });
            });
        });

        /*!
         * Test that verifies that the MediaCore video processor executes the necessary web requests to MediaCore with a
         * post-process url
         */
        it('verify video file is posted properly with post-process url', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var createdMediaItem = false;
                var createdFile = false;
                var publishedFile = false;
                var uploadedFile = false;
                var postProcessed = false;
                var gotThumbnails = false;

                // Endpoint for creating a media item. Respond with a mock media id
                app.post('/api2/media', function(req, res) {
                    createdMediaItem = true;
                    res.send(200, {'id': 67890});
                });

                // Handle the request to create the file stub on the MediaCore server
                app.post('/api2/media/:mediaId/files', function(req, res) {
                    createdFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    // Return this mock structure to validate
                    res.send(200, {
                        'upload': {
                            'protocols': {
                                'form_data': {
                                    // The subsequent upload request will go to this url
                                    'upload_url': 'http://localhost:' + port + '/api2/media/67890/upload',

                                    // Add a post-process url so we can ensure it gets invoked
                                    'postprocess_url': '/api2/media/67890/postProcess',

                                    // The upload request should contain these post params
                                    'upload_post_params': {
                                        'key': 'value'
                                    }
                                }
                            }
                        }
                    });
                });

                // Handle the request to publish the upload
                app.post('/api2/media/:mediaId/publish', function(req, res) {
                    publishedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {});
                });

                // Handle the request to upload the file body
                app.post('/api2/media/:mediaId/upload', function(req, res) {
                    uploadedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    assert.equal(req.body.key, 'value');
                    res.send(200);
                });

                // Handle the request to fetch the thumbnails
                app.get('/api2/media/:mediaId/thumbs', function(req, res) {
                    gotThumbnails = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {
                        'sizes': {
                            'l': 'http://path/to/large/image',
                            '720p': 'http://path/to/720p/image'
                        }
                    });
                });

                // Handle the request to fetch the thumbnails
                app.post('/api2/media/:mediaId/postProcess', function(req, res) {
                    postProcessed = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {});
                });

                // Create a video item and wait for the preview processor to invoke all our endpoints
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    var numLargePreviews = 0;
                    var num720pPreviews = 0;
                    var hadMediaCoreIdPreview = false;

                    var mockPreviewContext = {
                        'contentId': content.id,
                        'revisionId': content.latestRevisionId,
                        'revision': {'previews': {}},
                        'download': function(callback) {
                            // We'll give a reference to the file, but we're not actually going to use it
                            return callback(null, __dirname + '/data/video.mp4');
                        },
                        'addPreview': function(name, value) {
                            // Ensure the preview references apply to the proper preview sizes
                            if (name === 'http://path/to/large/image') {
                                numLargePreviews++;
                                assert.ok(_.contains(['thumbnail', 'small'], value));
                            } else if (name === 'http://path/to/720p/image') {
                                num720pPreviews++;
                                assert.ok(_.contains(['medium', 'large', 'wide'], value));
                            }
                        },
                        'addPreviewMetadata': function(name, value) {
                            // Ensure the mediaCoreId that gets set is correct
                            if (name === 'mediaCoreId') {
                                hadMediaCoreIdPreview = true;
                                assert.equal(value, 67890);
                            }
                        }
                    };

                    // Generate the previews to invoke the mock endpoints and assert the data set on the mock preview context
                    MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                        assert.ok(!err);
                        assert.ok(createdMediaItem);
                        assert.ok(createdFile);
                        assert.ok(publishedFile);
                        assert.ok(uploadedFile);
                        assert.ok(gotThumbnails);
                        assert.ok(postProcessed);

                        assert.ok(hadMediaCoreIdPreview);
                        assert.equal(numLargePreviews, 2);
                        assert.equal(num720pPreviews, 3);

                        return callback();
                    });
                });
            });
        });

        /*!
         * Test that verifies that the revision data and filename is sent to MediaCore for the upload file instead of content data and displayName
         */
        it('verify revision data and filename are sent to MediaCore instead of content data and display name', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                // Used to assert the data passed for the media items in the MediaCore requests
                var mediaAssertions = {
                    'displayName': null,
                    'fileName': null,
                    'size': null
                };

                // Endpoint for creating a media item. Respond with a mock media id
                app.post('/api2/media', function(req, res) {
                    assert.equal(req.body.collection_id, 12345);
                    assert.equal(req.body.title, mediaAssertions.displayName);
                    assert.equal(req.body.byline, user.user.displayName);
                    res.send(200, {'id': 67890});
                });

                // Handle the request to create the file stub on the MediaCore server
                app.post('/api2/media/:mediaId/files', function(req, res) {
                    var createdFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    assert.equal(req.body.upload_name, mediaAssertions.fileName);
                    assert.equal(req.body.upload_size, mediaAssertions.size);

                    // Return this mock structure to validate
                    res.send(200, {
                        'upload': {
                            'protocols': {
                                'form_data': {
                                    // The subsequent upload request will go to this url
                                    'upload_url': 'http://localhost:' + port + '/api2/media/67890/upload',
                                    'upload_post_params': {}
                                }
                            }
                        }
                    });
                });

                // Handle the request to publish the upload
                app.post('/api2/media/:mediaId/publish', function(req, res) {
                    res.send(200, {});
                });

                // Handle the request to upload the file body
                app.post('/api2/media/:mediaId/upload', function(req, res) {
                    res.send(200);
                });

                // Handle the request to fetch the thumbnails
                app.get('/api2/media/:mediaId/thumbs', function(req, res) {
                    res.send(200, {
                        'sizes': {
                            'l': 'http://path/to/large/image',
                            '720p': 'http://path/to/720p/image'
                        }
                    });
                });

                // Create a video item and wait for the preview processor to invoke all our endpoints
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    // Get the full content profile so that createdBy is set to the full user who created it
                    RestAPI.Content.getContent(user.restContext, content.id, function(err, content) {
                        assert.ok(!err);

                        // Get the revision so we can perform assertions against it
                        RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                            assert.ok(!err);

                            // Create a mock previewcontext that we can use to fire the generate previews operation of the MediaCore
                            // preview processor
                            var mockPreviewContext = {
                                'contentId': content.id,
                                'revisionId': revision.id,
                                'revision': revision,
                                'download': function(callback) {
                                    // We'll give a reference to the file, but we're not actually going to use it
                                    return callback(null, __dirname + '/data/video.mp4');
                                },
                                'addPreview': function(name, value) {},
                                'addPreviewMetadata': function(name, value) {}
                            };

                            // We expect the filename of the video stream and its size
                            mediaAssertions.displayName = content.displayName;
                            mediaAssertions.fileName = revision.filename;
                            mediaAssertions.size = revision.size;

                            // Generate the previews to invoke the mock endpoints and assert the data set on the mock preview context
                            MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                                assert.ok(!err);

                                // Update the content item now with a file of a different name and size
                                RestAPI.Content.updateFileBody(user.restContext, content.id, _getAudioStream, function(err, content) {
                                    assert.ok(!err);

                                    // Get the new revision so we can assert its file data
                                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                                        assert.ok(!err);

                                        // Prepare the mock preview context for the next test with the newest revision data
                                        mockPreviewContext.revisionId = revision.id;
                                        mockPreviewContext.revision = revision;

                                        // Set our new upload file expectations based on revision data
                                        mediaAssertions.fileName = revision.filename;
                                        mediaAssertions.size = revision.size;

                                        // Generate the previews to invoke the mock endpoints and assert the file data
                                        MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                                            assert.ok(!err);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies tenant-specific MediaCore configuration is honoured
         */
        it('verify video uploads from different tenants honour tenant-specific configuration', function(callback) {
            // Cambridge has a test server setup to some random port, we'll start up another for gatech to ensure the separate URL configuration is honoured
            TestsUtil.createTestServer(function(gtMediaCoreApp, gtMediaCoreServer, gtMediaCorePort) {
                var gtMediaCoreUrl = util.format('http://127.0.0.1:%s', gtMediaCorePort);

                // Setup the gatech tenant to use the 2nd MediaCore server
                MediaCoreTestsUtil.enableMediaCore(gtAdminRestContext, gtMediaCoreUrl, 'gtKey', 'gtSecret', 67890, function(err) {
                    assert.ok(!err);

                    // Tracks whether or not publish requests were received by the cam and gt tenants
                    var camRequestReceived = false;
                    var gtRequestReceived = false;

                    /**
                     * Ensure we exit when we receive a MediaCore upload for each uploaded file
                     */
                    var _finishMediaCoreRequest = function() {
                        if (camRequestReceived && gtRequestReceived) {
                            // The test was successful, we expected one from each tenant. If we do not receive each request, this test will time out and that
                            // is what indicates the error
                            return callback();
                        }
                    };

                    // Apply routes to the cam and gt MediaCore servers to verify the incoming config information
                    app.post('/api2/media', function(req, res) {
                        camRequestReceived = true;
                        assert.equal(req.body.collection_id, 12345);
                        assert.equal(req.body.title, 'File from cam tenant');
                        res.send(400, {});
                        return _finishMediaCoreRequest();
                    });

                    gtMediaCoreApp.post('/api2/media', function(req, res) {
                        gtRequestReceived = true;
                        assert.equal(req.body.collection_id, 67890);
                        assert.equal(req.body.title, 'File from gt tenant');
                        res.send(400, {});
                        return _finishMediaCoreRequest();
                    });

                    // Generate our test users with which to create files
                    TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, camUser) {
                        assert.ok(!err);
                        camUser = _.values(camUser)[0];
                        TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, gtUser) {
                            assert.ok(!err);
                            gtUser = _.values(gtUser)[0];

                            // Create a video file for each tenant
                            RestAPI.Content.createFile(camUser.restContext, 'File from cam tenant', null, 'public', _getVideoStream, null, null, null, function(err, camContent) {
                                assert.ok(!err);
                                RestAPI.Content.createFile(gtUser.restContext, 'File from gt tenant', null, 'public', _getVideoStream, null, null, null, function(err, gtContent) {
                                    assert.ok(!err);

                                    // Get the revisions that we can use for the mock preview contexts
                                    RestAPI.Content.getRevision(camUser.restContext, camContent.id, camContent.latestRevisionId, function(err, camRevision) {
                                        assert.ok(!err);
                                        RestAPI.Content.getRevision(gtUser.restContext, gtContent.id, gtContent.latestRevisionId, function(err, gtRevision) {
                                            assert.ok(!err);

                                            // Create the mock preview contexts we can use to invoke the MediaCore preview processor
                                            var camMockPreviewContext = {
                                                'contentId': camContent.id,
                                                'revisionId': camRevision.revisionId,
                                                'revision': camRevision,
                                                'download': function(callback) {
                                                    return callback(null, __dirname + '/data/video.mp4');
                                                },
                                                'addPreview': function(name, value) {},
                                                'addPreviewMetadata': function(name, value) {}
                                            };

                                            var gtMockPreviewContext = {
                                                'contentId': gtContent.id,
                                                'revisionId': gtRevision.revisionId,
                                                'revision': gtRevision,
                                                'download': function(callback) {
                                                    return callback(null, __dirname + '/data/video.mp4');
                                                },
                                                'addPreview': function(name, value) {},
                                                'addPreviewMetadata': function(name, value) {}
                                            };

                                            // Invoke the processors, letting the mock MediaCore servers and routes we set up earlier handle the remaining assertions
                                            MediaCoreProcessor.generatePreviews(camMockPreviewContext, camContent, function(err) {
                                                assert.ok(err);
                                                MediaCoreProcessor.generatePreviews(gtMockPreviewContext, gtContent, function(err) {
                                                    assert.ok(err);
                                                    // Don't callback here, we're expecting the `_finishMediaCoreRequest` function to eventually call back
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
