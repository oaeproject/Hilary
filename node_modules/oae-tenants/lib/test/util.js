/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var ShortId = require('shortid');
var util = require('util');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var ConfigTestUtil = require('oae-config/lib/test/util');
var Counter = require('oae-util/lib/counter');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var TenantsAPI = require('oae-tenants');

// Keep track of the asynchronous operations that are still pending in the Tenants API
var asyncOperationsCounter = new Counter();
TenantsAPI.on('preCache', asyncOperationsCounter.incr);
TenantsAPI.on('cached', asyncOperationsCounter.decr);

/**
 * Execute `callback` once a tenant change has propagated through the system. This is useful to
 * synchronize with the asynchronous nature of creating/updating tenants so you can continue
 * tests after everything is in sync.
 *
 * @param  {Function}   callback    Standard callback function
 */
var whenTenantChangePropagated = module.exports.whenTenantChangePropagated = function(callback) {
    // Only return to the caller if all the requirements have been met (see lower)
    var returnToCaller = _.after(2, callback);

    // The tenant needs to be cached with the TenantsAPI before returning to the caller
    asyncOperationsCounter.whenZero(returnToCaller);

    // The configuration needs to be properly cached before returning to the caller
    ConfigTestUtil.whenConfigUpdated(returnToCaller);
};

/**
 * Create test tenants
 *
 * @param  {RestContext}    globalAdminRestCtx      The global admin rest context with which to create the tenants
 * @param  {Number}         numToCreate             How many tenants to create
 * @param  {Function}       callback                Standard callback function
 * @param  {TenantNetwork}  callback.tenant0        The first tenant  that was created
 * @param  {TenantNetwork}  [callback.tenant...]    All tenants that were created as new callback arguments
 * @throws {AssertionError}                         Thrown if there is an error creating any of the tenants
 */
var generateTestTenants = module.exports.generateTestTenants = function(globalAdminRestCtx, numToCreate, callback, _created) {
    _created = _created || [];
    if (_created.length === numToCreate) {
        // Invoke the callback with all the tenants created
        return callback.apply(callback, _created);
    }

    // Create a tenant with random data
    var alias = generateTestTenantAlias();
    var description = TestsUtil.generateRandomText();
    var host = generateTestTenantHost();
    createTenantAndWait(globalAdminRestCtx, alias, description, host, function(err, tenant) {
        assert.ok(!err);
        _created.push(tenant);
        return generateTestTenants(globalAdminRestCtx, numToCreate, callback, _created);
    });
};

/**
 * Create a tenant and wait for the event that indicates that the configuration has finished loading
 *
 * For method parameter descriptions, @see RestAPI.Tenant#createTenant
 */
var createTenantAndWait = module.exports.createTenantAndWait = function(globalAdminRestCtx, alias, displayName, host, callback) {
    RestAPI.Tenants.createTenant(globalAdminRestCtx, alias, displayName, host, function(err, tenant) {
        if (err) {
            return callback(err);
        }

        // Wait until all current config events have fired until calling back
        whenTenantChangePropagated(function() {
            return callback(null, tenant);
        });
    });
};

/**
 * Update a tenant and wait until the change propagated through the system
 *
 * For method parameter descriptions, @see RestAPI.Tenant#updateTenant
 */
var updateTenantAndWait = module.exports.updateTenantAndWait = function(restContext, tenantAlias, update, callback) {
    RestAPI.Tenants.updateTenant(restContext, tenantAlias, update, function(err) {
        assert.ok(!err);

        // Wait until the tenant change propagated through the entire system
        whenTenantChangePropagated(callback);
    });
};

/**
 * Stop a tenant and wait until the change propagated through the system
 *
 * For method parameter descriptions, @see RestAPI.Tenant#stopTenant
 */
var stopTenantAndWait = module.exports.stopTenantAndWait = function(restContext, tenantAlias, callback) {
    RestAPI.Tenants.stopTenant(restContext, tenantAlias, function(err) {
        assert.ok(!err);

        // Wait until the tenant change propagated through the entire system
        whenTenantChangePropagated(callback);
    });
};

/**
 * Start a tenant and wait until the change propagated through the system
 *
 * For method parameter descriptions, @see RestAPI.Tenant#startTenant
 */
var startTenantAndWait = module.exports.startTenantAndWait = function(restContext, tenantAlias, callback) {
    RestAPI.Tenants.startTenant(restContext, tenantAlias, function(err) {
        assert.ok(!err);

        // Wait until the tenant change propagated through the entire system
        whenTenantChangePropagated(callback);
    });
};

/**
 * Create test tenant networks
 *
 * @param  {RestContext}    globalAdminRestCtx              The global admin rest context with which to create the tenant networks
 * @param  {Number}         numToCreate                     How many tenant networks to create
 * @param  {Function}       callback                        Standard callback function
 * @param  {TenantNetwork}  callback.tenantNetwork0         The first tenant network that was created
 * @param  {TenantNetwork}  [callback.tenantNetwork...]     All tenant networks that were created as new callback arguments
 * @throws {AssertionError}                                 Thrown if there is an error creating any of the tenant networks
 */
var generateTestTenantNetworks = module.exports.generateTestTenantNetworks = function(globalAdminRestCtx, numToCreate, callback, _created) {
    _created = _created || [];
    if (_created.length === numToCreate) {
        // Invoke the callback with all the tenant networks created
        return callback.apply(callback, _created);
    }

    // Create a tenant network with a random displayName
    RestAPI.Tenants.createTenantNetwork(globalAdminRestCtx, ShortId.generate(), function(err, tenantNetwork) {
        assert.ok(!err);
        _created.push(tenantNetwork);
        return generateTestTenantNetworks(globalAdminRestCtx, numToCreate, callback, _created);
    });
};

/**
 * Ensure one tenant is equal to another
 *
 * @param  {Tenant}         actual      The tenant to test
 * @param  {Tenant}         expected    The expected tenant object
 * @throws {AssertionError}             Thrown if the actual tenant does not match the expected model
 */
var assertTenantsEqual = module.exports.assertTenantsEqual = function(actual, expected) {
    assert.strictEqual(actual.alias, expected.alias);
    assert.strictEqual(actual.displayName, expected.displayName);
    assert.strictEqual(actual.host, expected.host);
    assert.strictEqual(actual.active, expected.active);
    assert.strictEqual(actual.deleted, expected.deleted);
    assert.strictEqual(actual.isGlobalAdminServer, expected.isGlobalAdminServer);
};

/**
 * Generate a random unique tenant alias that can be used inside of tests
 *
 * @param  {String}     [seed]  String that should be used as the first part of the generated alias. Defaults to "tenant"
 * @return {String}             The generated tenant alias
 */
var generateTestTenantAlias = module.exports.generateTestTenantAlias = function(seed) {
    seed = seed || 'tenant';
    return util.format('%s-%s', seed, ShortId.generate()).toLowerCase();
};

/**
 * Generate a random unique tenant host name that can be used inside of tests
 *
 * @param  {String}     [seed]  String that should be used as the first part of the generated host name. Defaults to "host"
 * @return {String}             The generated tenant host
 */
var generateTestTenantHost = module.exports.generateTestTenantHost = function(seed) {
    seed = seed || 'host';
    return util.format('%s-%s', seed, TestsUtil.generateRandomText()).toLowerCase();
};

/**
 * Clear all the blocks from a tenant landing page
 *
 * @param  {RestContext}    adminRestContext    The rest context of a tenant admin whose tenant's landing page to clear
 * @param  {Function}       callback            Standard callback function
 * @throws {AssertionError}                     Thrown if any assertions failed
 */
var clearTenantLandingPage = module.exports.clearTenantLandingPage = function(adminRestContext, callback) {
    var config = {};
    for (var i = 1; i <= 12; i++) {
        var blockName = util.format('block_%d', i);
        config['oae-tenants/' + blockName + '/type'] = 'empty';
    }
    ConfigTestUtil.updateConfigAndWait(adminRestContext, null, config, function(err) {
        assert.ok(!err);
        return callback();
    });
};
