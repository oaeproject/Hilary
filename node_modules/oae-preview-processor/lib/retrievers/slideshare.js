/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var parseString = require('xml2js').parseString;
var request = require('request');
var urlAPI = require('url');
var util = require('util');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-preview-processor');
var PreviewConfig = require('oae-config').config('oae-preview-processor');

var PreviewUtil = require('oae-preview-processor/lib/util');

/**
 * Whether or not this retriever can handle the passed in URL.
 *
 * @param  {String}     url     The URL to generate images for.
 * @return {Boolean}            true if this retriever can handle the URL, false otherwise.
 */
var test = module.exports.test = function(url) {
    // First check that this retriever has been configured in the Admin UI.
    var config = _getConfig();
    if (!config.apiKey || !config.sharedSecret) {
        return false;
    }

    // Now check if the url is a SlideShare url.
    var parsedUrl = urlAPI.parse(url);
    return (/slideshare\.net$/i.test(parsedUrl.hostname));
};

/**
 * Get an image for a URL.
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {String}             url             The URL to generate images for.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 * @param  {String}             callback.path   The path on disk where the image is stored.
 * @param  {Object}             [callback.opts] Extra options that should be posted to the main content object. ex: displayName, description, ..
 */
var getImage = module.exports.getImage = function(ctx, url, callback) {
    var config = _getConfig();

    // Do an API request first.
    // See http://www.slideshare.net/developers/documentation for more info.
    // Essentially each API call should look like:
    //     https://www.slideshare.net/api/2/<api method>?<method parameters>&api_key=<api key>&hash=<sha1(secret + ts)>&ts=<ts>
    var ts = Math.round(Date.now() / 1000);
    var shasum = crypto.createHash('sha1');
    shasum.update(config.sharedSecret + ts);
    var hash = shasum.digest('hex');
    var apiUrl = util.format('https://www.slideshare.net/api/2/get_slideshow?slideshow_url=%s&api_key=%s&hash=%s&ts=%s', url, config.apiKey, hash, ts);
    request(apiUrl, function(err, response, body) {
        if (err || response.statusCode !== 200) {
            return callback(err || {'code': response.statusCode, 'msg': body});
        }

        // Get Thumbnail url.
        parseString(body, function (err, result) {
            if (err || result.SlideShareServiceError) {
                return callback(err || {'code': 500, 'msg': result.SlideShareServiceError.Message});
            }

            var opts = {
                'displayName': result.Slideshow.Title,
                'description': result.Slideshow.Description,
                'imageUrl': 'http:' + result.Slideshow.ThumbnailURL[0]
            };

            // Download it.
            var path = ctx.baseDir + '/slideshare.jpg';
            PreviewUtil.downloadRemoteFile(opts.imageUrl, path, function(err, path) {
                if (err) {
                    return callback(err);
                }
                callback(null, path, opts);
            });
        });
    });
};

/**
 * Get the SlideShare API values that have been configured in the Admin UI.
 *
 * @return {Object} The apiKey and sharedSecret from the Admin UI.
 * @api private
 */
var _getConfig = function() {
    return {
        'apiKey': PreviewConfig.getValue('admin', 'slideshare', 'apikey'),
        'sharedSecret': PreviewConfig.getValue('admin', 'slideshare', 'sharedsecret')
    };
};
