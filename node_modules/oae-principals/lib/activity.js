/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('./internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;


////////////////////////
////////////////////////
// POSTING ACTIVITIES //
////////////////////////
////////////////////////


//////////////////
// GROUP-CREATE //
//////////////////

/*!
 * Fire the 'group-create' activity when a new group is created.
 */
PrincipalsAPI.on(PrincipalsConstants.events.CREATED_GROUP, function(ctx, group, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('group', group.id, {'group': group});
    var activitySeed = new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////////////////////////////
// GROUP-UPDATE and GROUP-UPDATE-VISIBILITY //
//////////////////////////////////////////////

/*!
 * Fire the 'group-update' or 'group-update-visibility' activity when a group is updated.
 */
PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP, function(ctx, newGroup, oldGroup) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('group', newGroup.id, {'group': newGroup});

    // If just update the group's visibility, we want to fire off a special "changed visibility" activity instead of the normal "group update"
    var activityType = null;
    if (newGroup.visibility === oldGroup.visibility) {
        activityType = PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE;
    } else {
        activityType = PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


/////////////////////////////////////
// GROUP-JOIN and GROUP-ADD-MEMBER //
/////////////////////////////////////

ActivityAPI.registerActivityType(PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN, {'groupBy': [
    // "5 users have joined GroupA"
    {'object': true}
]});

ActivityAPI.registerActivityType(PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, {'groupBy': [
    // "5 users and groups have been added to GroupA"
    {'target': true}
]});

/*!
 * Fire the group-add-member activity when someone adds members to a group
 */
PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP_MEMBERS, function(ctx, group, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var targetResource = new ActivityModel.ActivitySeedResource('group', group.id, {'group': group});

    // We fire one group-add-member for each user that joined.
    var principalIds = _.keys(members);
    for (var i = 0; i < principalIds.length; i++) {
        var principalId = principalIds[i];
        if (members[principalId]) {
            var objectResourceType = PrincipalsUtil.isGroup(principalId) ? 'group' : 'user';
            var objectResource = new ActivityModel.ActivitySeedResource(objectResourceType, principalId);
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, millis, ActivityConstants.verbs.ADD, actorResource, objectResource, targetResource));
        }
    }
});

/*!
 * Fire the group-join activity when someone joins a group
 */
PrincipalsAPI.on(PrincipalsConstants.events.JOINED_GROUP, function(ctx, group, role) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('group', group.id, {'group': group});
    ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN, millis, ActivityConstants.verbs.JOIN, actorResource, objectResource));
});



////////////////////////
////////////////////////
// ACTIVITY PRODUCERS //
////////////////////////
////////////////////////

/*!
 * Create the 'user' activity entity
 */
ActivityAPI.registerActivityEntityProducer('user', function(activityType, entityType, resource, callback) {
    var user = (resource.resourceData) ? resource.resourceData.user : null;

    // If the user was provided in the resource data, use it instead of fetching
    if (user) {
        return callback(null, PrincipalsUtil.createPersistentUserActivityEntity(user.id, user));
    }

    // We didn't have a user to work with, fetch it and produce the persistent entity
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, user) {
        if (err) {
            return callback(err);
        }

        return callback(null, PrincipalsUtil.createPersistentUserActivityEntity(user.id, user));
    });
});

/*!
 * Transform the user persistent activity entities into UI-friendly ones
 */
ActivityAPI.registerActivityEntityTransformer('user', function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            transformedActivityEntities[activityId][entityId] = PrincipalsUtil.transformPersistentUserActivityEntity(ctx, entityId, entity.user);
        });
    });
    return callback(null, transformedActivityEntities);
});

/*!
 * Create the 'group' activity entity
 */
ActivityAPI.registerActivityEntityProducer('group', function(activityType, entityType, resource, callback) {
    var group = (resource.resourceData) ? resource.resourceData.group : null;

    // If the group was delivered with the resource, use it instead of fetching
    if (group) {
        return callback(null, PrincipalsUtil.createPersistentGroupActivityEntity(group.id, group));
    }

    // Only the group id was added to the resource, query the group
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, group) {
        if (err) {
            return callback(err);
        }

        return callback(null, PrincipalsUtil.createPersistentGroupActivityEntity(group.id, group));
    });
});

/*!
 * Transform the group persistent activity entities into UI-friendly ones
 */
ActivityAPI.registerActivityEntityTransformer('group', function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            transformedActivityEntities[activityId][entityId] = PrincipalsUtil.transformPersistentGroupActivityEntity(ctx, entityId, entity.group);
        });
    });
    return callback(null, transformedActivityEntities);
});


//////////////////////
// ACTIVITY ROUTERS //
//////////////////////

/*!
 * Routes a user entity when an activity has occurred. Currently it is only routed to the user themself.
 */
ActivityAPI.registerActivityRouter('user', function(activityType, entityType, entity, callback) {
    // Route to activity the user's self, but no one else
    // TODO: When user 'following' is implemented, we'll be routing to the user's followers here as well
    return callback(null, [entity[ActivityConstants.properties.OAE_ID]], {'type': ActivityConstants.entityPropagation.ALL});
});

/*!
 * Routes a group entity when an activity has occurred.
 */
ActivityAPI.registerActivityRouter('group', function(activityType, entityType, persistentEntity, callback) {
    // Deliver to all the group members, direct or indirect
    var groupId = persistentEntity[ActivityConstants.properties.OAE_ID];
    ActivityUtil.getAllAuthzMembersByRole(groupId, function(err, specify) {
        if (err) {
            return callback(err);
        }
        
        // Resolve routes
        var routes = null;
        var isMembershipActivity = (activityType === PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN || activityType === PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER);
        if (isMembershipActivity) {
            // If the activity is that a user became a member of the group, only managers are interested
            routes = specify['manager'] || [];
        } else {
            // Union all members of all roles into one array as the routes
            routes = _.flatten(_.values(specify));
        }

        // Include the group itself as a route
        routes.push(groupId);
        routes = _.uniq(routes);

        // Resolve propagation
        var propagation = {'type': ActivityConstants.entityPropagation.ALL};
        var visibility = persistentEntity.group.visibility;
        var joinable = (persistentEntity.group.joinable && persistentEntity.group.joinable !== PrincipalsConstants.joinable.NO);
        if (visibility !== 'public' && visibility !== 'loggedin' && !joinable) {
            specify = _.uniq(_.flatten(_.values(specify)));
            propagation = {'type': ActivityConstants.entityPropagation.SPECIFY, 'specify': specify};
        }

        return callback(null, routes, propagation);
    });
});

