/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

const passport = require('passport');

const OAE = require('oae-util/lib/oae');

const AuthenticationAPI = require('oae-authentication');
const AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
const AuthenticationUtil = require('oae-authentication/lib/util');

/**
 * @REST postAuthLogin
 *
 * Log in using local authentication
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /auth/login
 * @FormParam   {string}        password                    The password for the user
 * @FormParam   {string}        username                    The username for the user
 * @Return      {User}                                      The logged in user
 * @HttpResponse                200                         Login succeeded
 * @HttpResponse                401                         Unauthorized
 */
const _handleLocalAuthentication = function(req, res, next) {
  const strategyId = AuthenticationUtil.getStrategyId(
    req.tenant,
    AuthenticationConstants.providers.LOCAL
  );
  const errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
  passport.authenticate(strategyId)(req, res, errorHandler);
};

/**
 * Callback after the user has logged in using local authentication
 *
 * @param  {Request}            req                         The express request object
 * @param  {User}               req.oaeAuthInfo.user        The authenticated user
 * @param  {Response}           res                         The express response object
 * @api private
 */
const _handleLocalAuthenticationSuccess = function(req, res) {
  // Simply return a 200 response with the user object
  res.status(200).send(req.oaeAuthInfo.user);
};

OAE.globalAdminRouter.on('post', '/api/auth/login', [
  _handleLocalAuthentication,
  _handleLocalAuthenticationSuccess
]);
OAE.tenantRouter.on('post', '/api/auth/login', [
  _handleLocalAuthentication,
  _handleLocalAuthenticationSuccess
]);

/**
 * @REST postUserIdPassword
 *
 * Change a user's local password
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /user/{userId}/password
 * @PathParam   {string}        userId                      The id of user for which to change the local password
 * @FormParam   {string}        newPassword                 The new password for the user
 * @FormParam   {string}        [oldPassword]               The previous password for the user. This is only required when the current user is not an administrator
 * @Return      {void}
 * @HttpResponse                200                         Password changed
 * @HttpResponse                400                         A new password must be provided
 * @HttpResponse                400                         A password must be provided
 * @HttpResponse                400                         A user id must be provided
 * @HttpResponse                400                         A username must be provided
 * @HttpResponse                400                         User does not have a local account mapping
 * @HttpResponse                401                         You have to be logged in to be able to change a password
 * @HttpResponse                401                         You're not authorized to change this user's password
 */
const _handleChangePassword = function(req, res) {
  AuthenticationAPI.changePassword(
    req.ctx,
    req.params.userId,
    req.body.oldPassword,
    req.body.newPassword,
    err => {
      if (err) {
        return res.status(err.code).send(err.msg);
      }

      return res.sendStatus(200);
    }
  );
};

OAE.globalAdminRouter.on('post', '/api/user/:userId/password', _handleChangePassword);
OAE.tenantRouter.on('post', '/api/user/:userId/password', _handleChangePassword);

/**
 * Determine if a local username already exists
 *
 * @param  {Request}            req                         The express request object
 * @param  {Context}            req.ctx                     The context of the current request
 * @param  {String}             req.params.username         The username to check existence for
 * @param  {String}             [req.params.tenantAlias]    The alias of the tenant on which to check for existence. Defaults to the current tenant
 * @param  {Response}           res                         The express response object
 * @api private
 */
const _handleLocalUsernameExists = function(req, res) {
  AuthenticationAPI.localUsernameExists(
    req.ctx,
    req.params.tenantAlias,
    req.params.username,
    (err, exists) => {
      if (err) {
        return res.status(err.code).send(err.msg);
      }

      // If the login id doesn't exist, we send back a 404
      if (exists) {
        return res.sendStatus(200);
      }
      return res.sendStatus(404);
    }
  );
};

/**
 * @REST getAuthTenantAliasExistsUsername
 *
 * Determine if a local username already exists
 *
 * @Server      admin
 * @Method      GET
 * @Path        /auth/{tenantAlias}/exists/{username}
 * @PathParam   {string}        tenantAlias                 The alias of the tenant on which to check for existence
 * @FormParam   {string}        username                    The username to check existence for
 * @Return      {void}
 * @HttpResponse                200                         Username does exist
 * @HttpResponse                400                         Please specify a username
 * @HttpResponse                404                         Username does not exist
 */
OAE.globalAdminRouter.on(
  'get',
  '/api/auth/:tenantAlias/exists/:username',
  _handleLocalUsernameExists
);

/**
 * @REST getAuthExistsUsername
 *
 * Determine if a local username already exists
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /auth/exists/{username}
 * @FormParam   {string}        username                    The username to check existence for
 * @Return      {void}
 * @HttpResponse                200                         Username does exist
 * @HttpResponse                400                         Please specify a username
 * @HttpResponse                404                         Username does not exist
 */
OAE.tenantRouter.on('get', '/api/auth/exists/:username', _handleLocalUsernameExists);
