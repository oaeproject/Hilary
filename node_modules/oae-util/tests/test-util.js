/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var UtilAPI = require('oae-util/lib/util');

describe('Extend objects', function(callback) {
    it('Test object gets deep extended correctly', function(callback) {
        var furniture = {
            'chair': {
                'material': 'wood',
                'color': 'brown',
                'broken': false
            },
            'table': {
                'material': 'plastic',
                'color': 'white',
                'broken': false,
                'cups': {
                    'count': 1
                }
            },
            'furnitureStatus': [{
                'broken': false
            }, {
                'shiny': true
            }]
        };
        var afterPartyFurniture = {
            'chair': {
                'broken': true
            },
            'table': {
                'material': 'plastic',
                'color': 'white',
                'broken': true,
                'cups': {
                    'count': 58
                }
            },
            'furnitureStatus': [{
                'broken': true
            }, {
                'shiny': false
            }, {
                'trashed': true
            }]
        };

        var damages = UtilAPI.extend(true, furniture, afterPartyFurniture);

        assert.equal(damages.chair.material, 'wood');
        assert.equal(damages.chair.color, 'brown');
        assert.ok(damages.chair.broken);
        assert.equal(damages.table.material, 'plastic');
        assert.equal(damages.table.color, 'white');
        assert.ok(damages.table.broken);
        assert.equal(damages.table.cups.count, 58);
        assert.equal(damages.furnitureStatus.length, 3);
        assert.equal(damages.furnitureStatus[1].shiny, false);
        assert.equal(damages.furnitureStatus[2].trashed, true);

        callback();
    });
});
