/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthzAPI = require('oae-authz');
var User = require('oae-principals/lib/model.user').User;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('Content', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and tenant admin REST context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Log in the global admin so his cookie jar is set up appropriately
        RestAPI.User.getMe(camAdminRestContext, function(err, meObj) {
            callback();
        });
    });


    /**
     * Create a number of users that will be used inside of a test
     * @param  {Function(contexts)}  callback           Standard callback function
     * @param  {Object}              callback.contexts  Object where the keys are identifiers for the created users and the values are an
     *                                                  object with a user key containing the user object for the created user and a restContext key
     *                                                  containing the REST Context for that user
     */
    var setUpUsers = function(callback) {
        var contexts = {};
        var createUser = function(identifier, visibility, firstName, lastName, displayName) {
            var userId = TestsUtil.generateTestUserId(identifier);
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', displayName, {'visibility': visibility}, function(err, createdUser) {
                if (err) {
                    assert.fail('Could not create test user');
                }
                contexts[identifier] = {
                    'user': createdUser,
                    'restContext': new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password')
                }
                if (_.keys(contexts).length === 6) {
                    callback(contexts);
                }
            });
        };
        
        createUser('nicolaas', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
        createUser('simon', 'loggedin', 'Simon', 'Gaeremynck', 'Simon Gaeremynck');
        createUser('bert', 'private', 'Bert', 'Pareyn', 'Bert Pareyn');
        createUser('branden', 'private', 'Branden', 'Visser', 'Branden Visser');
        createUser('anthony', 'public', 'Anthony', 'Whyte', 'Anthony Whyte');
        createUser('stuart', 'public', 'Stuart', 'Freeman', 'Stuart Freeman');
    };

    /**
     * Create a number of groups that will be used inside of a test
     * @param  {Array<Context>}      contexts           Array of contexts that represent the users that will be used in the test
     * @param  {Function(groups)}    callback           Standard callback function
     * @param  {Object}              callback.groups    JSON Object where the keys are the group identifiers and the values are the
     *                                                  actual group object
     */
     var setUpGroups = function(contexts, callback) {
        var groups = {};
        // Create UI Dev Group
        // Make Bert a member
        RestAPI.Group.createGroup(contexts['nicolaas'].restContext, TestsUtil.generateTestGroupId('ui-team'), 'UI Dev Team', 'UI Dev Group', 'public', 'yes', [], [contexts['bert'].user.id], function(err, groupObj) {
            groups['ui-team'] = groupObj;
            // Create Back-end Dev Group
            // Make Simon a member
            var simonMember = {};
            simonMember = 'member';
            RestAPI.Group.createGroup(contexts['branden'].restContext, TestsUtil.generateTestGroupId('backend-team'), 'Back-end Dev Team', 'Back-end Dev Group', 'public', 'yes', [], [contexts['simon'].user.id], function(err, groupObj) {
                groups['backend-team'] = groupObj;
                // Create OAE Team Group
                // Make Stuart, UI Dev Group and Back-end Dev Group all members
                RestAPI.Group.createGroup(contexts['anthony'].restContext, TestsUtil.generateTestGroupId('oae-team'), 'OAE Team', 'OAE Team Group', 'public', 'yes', [], [groups['ui-team'].id, groups['backend-team'].id, contexts['stuart'].user.id], function(err, groupObj) {
                    groups['oae-team'] = groupObj;
                    callback(groups);
                });
            });
        });
    };

    /**
     * Run a number of asserts on a piece of content. This function checks whether a user has access to the content and
     * whether or not it can be seen in the library of the creator
     * @param  {RestContext}        restCtx             Standard REST Context object that contains the current tenant URL and the current
     *                                                  user credentials
     * @param  {String}             creator             The user id for which we want to check the library
     * @param  {Content}            contentObj          The content object we'll be running checks for
     * @param  {Boolean}            expectAccess        Whether or not we expect the current user to have access to the piece of content
     * @param  {Boolean}            expectManager       Whether or not we expect the current user to be able to manage the piece of content
     * @param  {Boolean}            expectInLibrary     Whether or not we expect the current user to see the item in the creator's library
     * @param  {Function}           callback            Standard callback function executed when all checks have finished
     */
    var checkPieceOfContent = function(restCtx, libraryToCheck, contentObj, expectAccess, expectManager, expectInLibrary, callback) {
        // Check whether the content can be retrieved
        RestAPI.Content.getContent(restCtx, contentObj.contentId, function(err, retrievedContent) {
            if (expectAccess) {
                assert.ok(!err);
                assert.ok(retrievedContent.contentId);
                assert.equal(retrievedContent.tenant, contentObj.tenant);
                assert.equal(retrievedContent.visibility, contentObj.visibility);
                assert.equal(retrievedContent.name, contentObj.name);
                assert.equal(retrievedContent.description, contentObj.description);
                assert.equal(retrievedContent.contentType, contentObj.contentType);
                assert.equal(retrievedContent.createdBy.id, contentObj.createdBy);
                assert.equal(retrievedContent.created, contentObj.created);
                assert.ok(retrievedContent.lastModified);
                // Check if the canManage check is appropriate
                assert.equal(retrievedContent.isManager, expectManager);
            } else {
                assert.ok(err);
                assert.ok(!retrievedContent);
            }
            // Check if the item comes back in the library
            RestAPI.Content.getLibrary(restCtx, libraryToCheck, null, 10, function(err, contentItems) {
                // If no logged in user is provided, we expect an error
                if (!libraryToCheck) {
                    assert.ok(err);
                } else {
                    assert.ok(!err);
                    if (expectInLibrary) {
                        assert.equal(contentItems.results.length, 1);
                        assert.equal(contentItems.results[0].contentId, contentObj.contentId);
                    } else {
                        assert.equal(contentItems.results.length, 0);
                    }
                }
                callback();
            });
        });
    };

    describe('Get content', function() {

        /** 
         * Test that will create a piece of content and try to get it in an invalid
         * and valid way
         */
        it('verify get content', function(callback) {
            setUpUsers(function(contexts) {
                // Create a piece of content
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/',  [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj);

                    // Get invalid piece of content
                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, null, function(err, retrievedContentObj) {
                        assert.ok(err);
                        assert.ok(!retrievedContentObj);

                        // Get the created piece of content
                        RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, retrievedContentObj) {
                            assert.ok(!err);
                            assert.equal(retrievedContentObj.contentId, contentObj.contentId);
                            callback();
                        });
                    });
                });
            });
        });

    });


    describe('Create content', function() {
        
        /**
         * Test that will attempt to create new links with various parameter combinations
         */
        it('verify create link', function(callback) {
            setUpUsers(function(contexts) {
                // Create one as anon user
                RestAPI.Content.createLink(anonymousRestContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                    assert.ok(err);
                    assert.ok(!contentObj);

                    // Create one with all required fields
                    RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj.contentId);

                        // Create one without description
                        RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 3', null, 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            assert.ok(contentObj.contentId);

                            // Create one without URL
                            RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 4', 'Test content description 4', 'public', null, [], [], function(err, contentObj) {
                                assert.ok(err);
                                assert.ok(!contentObj);

                                // Create one without a valid URL
                                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 5', 'Test content description 5', 'public', 'Just a string', [], [], function(err, contentObj) {
                                    assert.ok(err);
                                    assert.ok(!contentObj);

                                    // Create one without title
                                    RestAPI.Content.createLink(contexts['nicolaas'].restContext, null, 'Test content description 6', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                                        assert.ok(err);
                                        assert.ok(!contentObj);

                                        // Create one without visibility
                                        RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 7', 'Test content description 7', null, 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                                            assert.ok(!err);
                                            assert.ok(contentObj.contentId);
                                            // Check if the visibility has been set to public (default)
                                            RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, contentObj) {
                                                assert.ok(!err);
                                                assert.equal(contentObj.visibility, 'public');
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create new files with various parameter combinations
         */
        it('verify create file', function(callback) {
            setUpUsers(function(contexts) {
                // Create one as anon user
                RestAPI.Content.createFile(anonymousRestContext, 'Test Content 1', 'Test content description 1', 'public', [], [], function(err, contentObj) {
                    assert.ok(err);
                    assert.ok(!contentObj);

                    // Create one with all required fields
                    RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'public', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj.contentId);

                        // Create one without description
                        RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 3', null, 'public', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            assert.ok(contentObj.contentId);

                            // Create one without title
                            RestAPI.Content.createFile(contexts['nicolaas'].restContext, null, 'Test content description 4', 'public', [], [], function(err, contentObj) {
                                assert.ok(err);
                                assert.ok(!contentObj);

                                // Create one without visibility
                                RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 5', 'Test content description 6', null, [], [], function(err, contentObj) {
                                    assert.ok(!err);
                                    assert.ok(contentObj.contentId);
                                    // Check if the visibility has been set to public (default)
                                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, contentObj) {
                                        assert.ok(!err);
                                        assert.equal(contentObj.visibility, 'public');
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * Test that will attempt to create new sakai docs with various parameter combinations
         */
        it('verify create sakai doc', function(callback) {
            setUpUsers(function(contexts) {
                // Create one as anon user
                RestAPI.Content.createSakaiDoc(anonymousRestContext, 'Test Content 1', 'Test content description 1', 'public', [], [], function(err, contentObj) {
                    assert.ok(err);
                    assert.ok(!contentObj);

                    // Create one with all required fields
                    RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'public', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj.contentId);

                        // Create one without description
                        RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, 'Test Content 3', null, 'public', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            assert.ok(contentObj.contentId);

                            // Create one without title
                            RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, null, 'Test content description 4', 'public', [], [], function(err, contentObj) {
                                assert.ok(err);
                                assert.ok(!contentObj);

                                // Create one without permission
                                RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, 'Test Content 5', 'Test content description 5', null, [], [], function(err, contentObj) {
                                    assert.ok(!err);
                                    assert.ok(contentObj.contentId);
                                    // Check if the permission has been set to public (default)
                                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, contentObj) {
                                        assert.ok(!err);
                                        assert.equal(contentObj.visibility, 'public');
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a public content item and will verify direct and library access
         * for various people
         */
        it('verify create public content item', function(callback) {
            setUpUsers(function(contexts) {
                // Create a public content item
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as a different logged in user
                        checkPieceOfContent(contexts['simon'].restContext, contexts['nicolaas'].user.id, contentObj, true, false, true, function() {
                            // Get the piece of content as an anonymous user
                            checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, true, false, true, callback);
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a loggedin content item and will verify direct and library access
         * for various people
         */
        it('verify create logged in content item', function(callback) {
            setUpUsers(function(contexts) {
                // Create a logged in content item
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'loggedin', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as a different logged in user
                        checkPieceOfContent(contexts['simon'].restContext, contexts['nicolaas'].user.id, contentObj, true, false, true, function() {
                            // Get the piece of content as an anonymous user
                            checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a private content item and will verify direct and library access
         * for various people
         */
        it('verify create private content item', function(callback) {
            setUpUsers(function(contexts) {
                // Create a private content item
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'private', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as a different logged in user
                        checkPieceOfContent(contexts['simon'].restContext, contexts['nicolaas'].user.id, contentObj, false, false, false, function() {
                            // Get the piece of content as an anonymous user
                            checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                        });
                    });
                });
            });
        });
    
        /**
         * Test whether or not passing in viewers and managers to be added to the content upon creation works as expected. This test will
         * create a private piece of content that will have 1 additional manager and 1 viewer. We will fetch the content as those people
         * to verify access, and then get the content as a logged in user and an anonymous user to verify they don't have access
         */
        it('verify create content with default members', function(callback) {
            setUpUsers(function(contexts) {
                // Create a private content item and share with 2 people
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'private', 'http://www.sakaiproject.org/', [contexts['simon'].user.id], [contexts['bert'].user.id], function(err, contentObj) {   
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as another manager
                        checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, true, true, function() {
                            // Get the piece of content as a viewer
                            checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, true, false, true, function() {
                                // Get the piece of content as a non-member
                                checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, false, false, false, function() {
                                    // Get the piece of content as an anonymous user
                                    checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });

    
    describe('Update content', function() {
    
        /**
         * Utitility function for the update content profile test, that will check whether or not the name and description of a piece
         * of content are as expected for 2 different users.
         * @param  {Object}             contexts            Object where the keys are identifiers for the created users and the values are an
         *                                                  object with a user key containing the user object for the created user and a restContext key
         *                                                  containing the REST Context for that user
         * @param  {String}             contentId           Content id of the content for which the name and description are checked
         * @param  {String}             expectedName        The name the content is supposed to have
         * @param  {String}             expectedDescription The description the content is supposed to have
         * @param  {Function}           callback            Standard callback function
         */
        var checkNameAndDescription = function(contexts, contentId, expectedName, expectedDescription, callback) {
            // Check as user 0
            RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentId, function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.contentId, contentId);
                assert.ok(contentObj.name, expectedName);
                assert.ok(contentObj.description, expectedDescription);
                // Check as user 1
                RestAPI.Content.getContent(contexts['simon'].restContext, contentId, function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj.contentId, contentId);
                    assert.ok(contentObj.name, expectedName);
                    assert.ok(contentObj.description, expectedDescription);
                    callback();
                });
            });
        };
    
        /**
         * Test that will exercise the name and description part of the updateContent profile function. A piece of content will be 
         * updated with invalid parameters, then the name will be updated, the description will be updated, both name and description 
         * will be updated at the same time, and we will attempt to update the profile as a non-manager. After all of these, we'll 
         * check if the correct metadata is still on the content.
         */
        it('verify update content profile', function(callback) {
            // Create a piece of content
            setUpUsers(function(contexts) {
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);
                    // Share it with someone
                    RestAPI.Content.share(contexts['nicolaas'].restContext, contentObj.contentId, [contexts['simon'].user.id], function(err) {
                        assert.ok(!err);
                        // Invalid content metadata update (empty)
                        RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {}, function(err) {
                            assert.ok(err);
                            // Invalid content metadata update (unexisting field)
                            RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'name': 'New Test Content 1', 'nonExisting': 'Non-existing field'}, function(err) {
                                assert.ok(err);
                                // Check name and description are still correct
                                checkNameAndDescription(contexts, contentObj.contentId, 'Test Content 1', 'Test content description 1', function() {
                                    // Change the name
                                    RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'name': 'New Test Content 1'}, function(err) {
                                        assert.ok(!err);
                                        // Check the new name comes back
                                        checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 1', 'Test content description 1', function() {
                                            // Change the description
                                            RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'description': 'New test content description 1'}, function(err) {
                                                assert.ok(!err);
                                                // Check the new description comes back
                                                checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 1', 'New test content description 1', function() {
                                                    // Change both at same time
                                                    RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'name': 'New Test Content 2', 'description': 'New test content description 2'}, function(err) {
                                                        assert.ok(!err);
                                                        // Check the new name and description come back
                                                        checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 2', 'New test content description 2', function() {
                                                            // Try updating it as non-manager of the content
                                                            RestAPI.Content.updateContent(contexts['simon'], contentObj.contentId, {'name': 'New Test Content 3'}, function(err) {
                                                                assert.ok(err);
                                                                 // Check that the old values are still in place
                                                                 checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 2', 'New test content description 2', callback);
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    
        /**
         * Utility function that will check for content access and library presence for a content manager,
         * a content viewer, a logged in user and the anonymous user
         * @param  {Array<Context>}     contexts                Array of context objects that represent a request cycle and contain
         * @param  {String}             contentId               Content id of the content for which we expect in the access and library checks
         * @param  {Boolean}            expectLoggedInAccess    Whether or not the logged in user is expected to have access to the content
         * @param  {Boolean}            expectAnonAccess        Whether or not the anonymous user is expected to have access to the content
         * @param  {Function}           callback                Standard callback function
         */
        var checkAccessAndLibrary = function(contexts, contentId, expectLoggedInAccess, expectAnonAccess, callback) {
            // Check for the content manager
            RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentId, function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj);
                // Check that it's part of the content manager's library
                RestAPI.Content.getLibrary(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, null, 10, function(err, items) {
                    assert.ok(!err);
                    assert.equal(items.results.length, 1);
                    assert.equal(items.results[0].contentId, contentId);

                    // Check for the content viewer
                    RestAPI.Content.getContent(contexts['simon'].restContext, contentId, function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj);
                        // Check that it is part of his library
                        RestAPI.Content.getLibrary(contexts['simon'].restContext, contexts['simon'].user.id, null, 10, function(err, items) {
                            assert.ok(!err);
                            assert.equal(items.results.length, 1);
                            assert.equal(items.results[0].contentId, contentId);
                            // Check that it is visible in the manager's library
                            RestAPI.Content.getLibrary(contexts['simon'].restContext, contexts['nicolaas'].user.id, null, 10, function(err, items) {
                                assert.ok(!err);
                                if (expectLoggedInAccess) {
                                    assert.equal(items.results.length, 1);
                                    assert.equal(items.results[0].contentId, contentId);
                                } else {
                                    assert.equal(items.results.length, 0);
                                }

                                // Check for the logged in user that's not a viewer
                                RestAPI.Content.getContent(contexts['bert'].restContext, contentId, function(err, contentObj) {
                                    if (expectLoggedInAccess) {
                                        assert.ok(!err);
                                        assert.ok(contentObj);
                                    } else {
                                        assert.ok(err);
                                        assert.ok(!contentObj);
                                    }
                                    // Check that it isn't part of his library
                                    RestAPI.Content.getLibrary(contexts['bert'].restContext, contexts['bert'].user.id, null, 10, function(err, items) {
                                        assert.ok(!err);
                                        assert.equal(items.results.length, 0);
                                        // Check that it is visible in the manager's library
                                        RestAPI.Content.getLibrary(contexts['bert'].restContext, contexts['nicolaas'].user.id, null, 10, function(err, items) {
                                            assert.ok(!err);
                                            if (expectLoggedInAccess) {
                                                assert.equal(items.results.length, 1);
                                                assert.equal(items.results[0].contentId, contentId);
                                            } else {
                                                assert.equal(items.results.length, 0);
                                            }

                                            // Check for the anonymous user
                                            RestAPI.Content.getContent(anonymousRestContext, contentId, function(err, contentObj) {
                                                if (expectAnonAccess) {
                                                    assert.ok(!err);
                                                    assert.ok(contentObj);
                                                } else {
                                                    assert.ok(err);
                                                    assert.ok(!contentObj);
                                                }
                                                // Check that it is visible in the manager's library
                                                RestAPI.Content.getLibrary(anonymousRestContext, contexts['nicolaas'].user.id, null, 10, function(err, items) {
                                                    assert.ok(!err);
                                                    if (expectAnonAccess) {
                                                        assert.equal(items.results.length, 1);
                                                        assert.equal(items.results[0].contentId, contentId);
                                                    } else {
                                                        assert.equal(items.results.length, 0);
                                                    }
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
    
        /**
         * Test that will exercise the visibility part of the updateContentMetadata function for content. This test will create a public 
         * content item, try to give it a non-existing visibility, then make it visible to logged in users, then make it private and 
         * then try to change the visibility as a non-manager. After all of those, we check if the manager, viewer, logged in user and 
         * anonymous user have access as expected.
         */
        it('verify update content visibility', function(callback) {
            // Create a piece of content
            setUpUsers(function(contexts) {
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);
                    // Share the content with one viewer
                    RestAPI.Content.share(contexts['nicolaas'].restContext, contentObj.contentId, [contexts['simon'].user.id], function(err) {
                        assert.ok(!err);
                        // Check that all of these can get the content as expected, check library presence as expected
                        checkAccessAndLibrary(contexts, contentObj.contentId, true, true, function() {
                            // Try an invalid update
                            RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': null}, function(err) {
                                assert.ok(err);
                                // Check that the access remains unchanged
                                checkAccessAndLibrary(contexts, contentObj.contentId, true, true, function() {
                                    // Try an unknown visibility update
                                    RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': 'unknown-option'}, function(err) {
                                        assert.ok(err);
                                        // Check that the access remains unchanged
                                        checkAccessAndLibrary(contexts, contentObj.contentId, true, true, function() {
                                            // Make the content logged in only
                                            RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': 'loggedin'}, function(err) {
                                                assert.ok(!err);
                                                // Check that everyone can get the content as expected, check library presence as expected
                                                checkAccessAndLibrary(contexts, contentObj.contentId, true, false, function() {
                                                    // Make the content private
                                                    RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': 'private'}, function(err) {
                                                        assert.ok(!err);
                                                        // Check that everyone can get the content as expected, check library presence as expected
                                                        checkAccessAndLibrary(contexts, contentObj.contentId, false, false, function() {
                                                            // Try update as non-manager
                                                            RestAPI.Content.updateContent(contexts['simon'].restContext, contentObj.contentId, {'visibility': 'public'}, function(err) {
                                                                assert.ok(err);
                                                                // Check that everyone can get the content as expected, check library presence as expected
                                                                checkAccessAndLibrary(contexts, contentObj.contentId, false, false, callback);
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });


    describe('Delete content', function() {
    
        /**
         * Utitility function for the content delete assert. This function will create a piece of content, add a manager and a viewer using the setPermissions function,
         * share the content with an additional user. After each of these, the expected access will be checked. After that, the test will attempt to delete the content
         * as an anonymous user, a logged in user, a content member and a content manager. After that, the tests check if each of those can still access the content,
         * whether or not all roles have deleted, whether or not all libraries have been updated and whether or not the content members list is no longer available
         * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
         *                                                  the current user and the current tenant
         * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
         * @param  {Function(content)}  callback            Standard callback function
         */
        var prepareDelete = function(contexts, privacy, callback) {
            // Create a content item
            RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                // Get the piece of content as the creator
                checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {

                    // Make a user a manager and make a user a member
                    var permissions = {};
                    permissions[contexts['simon'].user.id] = 'manager';
                    permissions[contexts['bert'].user.id] = 'viewer';
                    RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                        assert.ok(!err);
                        checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, true, true, function() {
                            checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, true, false, true, function() {

                                // Share the content with another user
                                RestAPI.Content.share(contexts['simon'].restContext, contentObj.contentId, [contexts['branden'].user.id], function(err) {
                                    assert.ok(!err);
                                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, false, true, function() {

                                        // Try to delete the content as an anonymous user
                                        RestAPI.Content.deleteContent(anonymousRestContext, contentObj.contentId, function(err) {
                                            assert.ok(err);
                                            // Check that it is still around
                                            checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {

                                                // Try to delete the content as a logged in user
                                                RestAPI.Content.deleteContent(contexts['anthony'].restContext, contentObj.contentId, function(err) {
                                                    assert.ok(err);
                                                    // Check that it is still around
                                                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {

                                                        // Try to delete the content as a content member
                                                        RestAPI.Content.deleteContent(contexts['branden'].restContext, contentObj.contentId, function(err) {
                                                            assert.ok(err);
                                                            // Check that it is still around
                                                            checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {

                                                                // Try to delete the content as a content manager
                                                                RestAPI.Content.deleteContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err) {
                                                                    assert.ok(!err);
                                                                    // Check to see if the manager, a member, a logged in user and the anonymous user still have access
                                                                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, false, false, false, function() {
                                                                        checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, false, false, false, function() {
                                                                            checkPieceOfContent(contexts['anthony'].restContext, contexts['anthony'].user.id, contentObj, false, false, false, function() {
                                                                                checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, function() {
                                                                                    // Check roles api for the role on the content for a manager, a member and a logged in user
                                                                                    AuthzAPI.getAllRoles(contexts['nicolaas'].user.id, contentObj.contentId, function(err, roles) {
                                                                                        assert.equal(roles.length, 0);
                                                                                        AuthzAPI.getAllRoles(contexts['bert'].user.id, contentObj.contentId, function(err, roles) {
                                                                                            assert.equal(roles.length, 0);
                                                                                            AuthzAPI.getAllRoles(contexts['anthony'].user.id, contentObj.contentId, function(err, roles) {
                                                                                                assert.equal(roles.length, 0);
                                                                                                // Check whether the list of members is no longer accessible
                                                                                                RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err) {
                                                                                                    assert.ok(err);
                                                                                                    callback();
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
    
        /**
         * Test that will attempt to create a public piece of content and delete it
         */
        it('Test public delete', function(callback) {
            setUpUsers(function(contexts) {
                prepareDelete(contexts, 'public', callback);
            });
        });
    
        /**
         * Test that will attempt to create a logged in piece of content and delete it
         */
        it('Test logged in delete', function(callback) {
            setUpUsers(function(contexts) {
                prepareDelete(contexts, 'loggedin', callback);
            });
        });
    
        /**
         * Test that will attempt to create a private piece of content and delete it
         */
        it('Test private delete', function(callback) {
            setUpUsers(function(contexts) {
                prepareDelete(contexts, 'private', callback);
            });
        });
        
    });

    
    describe('Content permissions', function() {
    
        /**
         * Utility function that creates a piece of content, make a user a manager, make a user a viewer and test access for all of these as 
         * well as library content and the membership list of the content
         * @param  {Object}             contexts            Object where the keys are identifiers for the created users and the values are an
         *                                                  object with a user key containing the user object for the created user and a restContext key
         *                                                  containing the REST Context for that user
         * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
         * @param  {Function(content)}  callback            Standard callback function
         * @param  {Content}            callback.content    Content object that has been created as part of this test
         */
        var setUpContentPermissions = function(contexts, privacy, callback) {
            // Create a public content item
            RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);

                // Get the piece of content as the person who created the content
                checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                    // Check the list of content members
                    RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.results.length, 1);
                        // Morph results to hash for easy access.
                        var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                        assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');

                        // Try an invalid set permissions with no principals passed in
                        RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, {}, function(err) {
                            assert.ok(err);

                            // Make another user manager of the content
                            var permissions = {};
                            permissions[contexts['simon'].user.id] = 'manager';
                            RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                assert.ok(!err);
                                // Get the piece of content as the newly added manager
                                checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, true, true, function() {
                                    RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                        assert.ok(!err);
                                        assert.equal(members.results.length, 2);
                                        // Morph results to hash for easy access.
                                        var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                        assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                        assert.equal(hash[contexts['simon'].user.id][0].role, 'manager');

                                        // Make another user member of the content
                                        permissions = {};
                                        permissions[contexts['bert'].user.id] = 'viewer';
                                        RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                            assert.ok(!err);
                                            // Get the piece of content as the added member
                                            checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, true, false, true, function() {
                                                RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                    assert.ok(!err);
                                                    assert.equal(members.results.length, 3);
                                                    // Morph results to hash for easy access.
                                                    var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                                    assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                                    assert.equal(hash[contexts['simon'].user.id][0].role, 'manager');
                                                    assert.equal(hash[contexts['bert'].user.id][0].role, 'viewer');

                                                    // Try to add an existing and non-existing user
                                                    permissions = {};
                                                    permissions[contexts['anthony'].user.id] = 'viewer';
                                                    permissions['u:cam:nonExistingUser'] = 'viewer';
                                                    RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                                        assert.ok(err);
                                                        // Get the piece of content as the member that was part of the invalid setPermissions
                                                        checkPieceOfContent(contexts['anthony'].restContext, contexts['anthony'].user.id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                            RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                                assert.ok(!err);
                                                                assert.equal(members.results.length, 3);
                                                                // Morph results to hash for easy access.
                                                                var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                                                assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                                                assert.equal(hash[contexts['simon'].user.id][0].role, 'manager');
                                                                assert.equal(hash[contexts['bert'].user.id][0].role, 'viewer');

                                                                // Remove a manager from the content
                                                                permissions = {};
                                                                permissions[contexts['simon'].user.id] = false;
                                                                RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                                                    assert.ok(!err);
                                                                    // Get the piece of content as the removed manager
                                                                    checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                                        RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                                            assert.ok(!err);
                                                                            assert.equal(members.results.length, 2);
                                                                            // Morph results to hash for easy access.
                                                                            var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                                                            assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                                                            assert.equal(hash[contexts['simon'].user.id], undefined);
                                                                            assert.equal(hash[contexts['bert'].user.id][0].role, 'viewer');

                                                                            // Try setting the permissions with an undefined role
                                                                            permissions = {};
                                                                            permissions[contexts['branden'].user.id] = undefined;
                                                                            RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                                                                assert.ok(err);

                                                                                // Try to set the permissions on the content as a non-manager of the content
                                                                                permissions = {};
                                                                                permissions[contexts['branden'].user.id] = 'viewer';
                                                                                RestAPI.Content.updateMembers(contexts['simon'].restContext, contentObj.contentId, permissions, function(err) {
                                                                                    assert.ok(err);
                                                                                    callback(contentObj);
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
    
        /**
         * Test that will attempt to set permissions on a public piece of content
         */
        it('verify public content permissions', function(callback) {
            setUpUsers(function(contexts) {
                setUpContentPermissions(contexts, 'public', function(contentObj) {
                    // Get the piece of content as a non-associated user
                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, false, false, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, true, false, true, callback);
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to set permissions on a loggedin piece of content
         */
        it('verify logged in content permissions', function(callback) {
            setUpUsers(function(contexts) {
                setUpContentPermissions(contexts, 'loggedin', function(contentObj) {
                    // Get the piece of content as a non-associated user
                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, false, false, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to set permissions on a private piece of content
         */
        it('verify private content permissions', function(callback) {
            setUpUsers(function(contexts) {
                setUpContentPermissions(contexts, 'private', function(contentObj) {
                    // Get the piece of content as a non-associated user
                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, false, false, false, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                    });
                });
            });
        });
        
        /**
         * Test that will attempt to set permissions on multiple principals at once. It will add permissions and
         * remove permissions on sets of principals that have all valid principals and some with non-valid principals
         */
        it('verify multiple content permissions', function(callback) {
            setUpUsers(function(contexts) {
                // Create a content item
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Set permission on multiple people at the same time (managers and members)
                    var permissions = {};
                    permissions[contexts['simon'].user.id] = 'manager';
                    permissions[contexts['bert'].user.id] = 'viewer';
                    permissions[contexts['branden'].user.id] = 'viewer';
                    RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                        assert.ok(!err);
                        // Verify that the members have been set
                        RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.results.length, 4);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                            assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                            assert.equal(hash[contexts['simon'].user.id][0].role, 'manager');
                            assert.equal(hash[contexts['bert'].user.id][0].role, 'viewer');
                            assert.equal(hash[contexts['branden'].user.id][0].role, 'viewer');

                            // Set permission on multiple people at same time, some remove role
                            permissions = {};
                            permissions[contexts['simon'].user.id] = false;
                            permissions[contexts['bert'].user.id] = false;
                            permissions[contexts['anthony'].user.id] = 'viewer';
                            RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                assert.ok(!err);
                                // Verify that the members have been set and removed
                                RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                    assert.ok(!err);
                                    assert.equal(members.results.length, 3);
                                    // Morph results to hash for easy access.
                                    var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                    assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                    assert.equal(hash[contexts['branden'].user.id][0].role, 'viewer');
                                    assert.equal(hash[contexts['anthony'].user.id][0].role, 'viewer');

                                    // Set permission on multiple people at same time (managers and members), some invalid
                                    permissions = {};
                                    permissions[contexts['simon'].user.id] = 'manager';
                                    permissions[contexts['bert'].user.id] = 'viewer';
                                    permissions['u:cam:non-existing-user'] = 'viewer';
                                    RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                        assert.ok(err);
                                        // Verify that the members have not changed
                                        RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                            assert.ok(!err);
                                            assert.equal(members.results.length, 3);
                                            // Morph results to hash for easy access.
                                            var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                            assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                            assert.equal(hash[contexts['branden'].user.id][0].role, 'viewer');
                                            assert.equal(hash[contexts['anthony'].user.id][0].role, 'viewer');

                                            // Set permission on multiple people at same time, some remove role, some invalid
                                            permissions = {};
                                            permissions[contexts['branden'].user.id] = false;
                                            permissions[contexts['anthony'].user.id] = false;
                                            permissions['u:cam:non-existing-user'] = false;
                                            RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                                assert.ok(err);
                                                // Verify that the members have not changed
                                                RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                    assert.ok(!err);
                                                    assert.equal(members.results.length, 3);
                                                    // Morph results to hash for easy access.
                                                    var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                                    assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                                    assert.equal(hash[contexts['branden'].user.id][0].role, 'viewer');
                                                    assert.equal(hash[contexts['anthony'].user.id][0].role, 'viewer');
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    
        // TODO: Create unit test for paging on getContentMembers
        // TODO: Test get content members with no provided contentId
        
    });


    describe('Content sharing', function() {
        
        /**
         * Utility function for the sharing tests that will create a new content item, check for successful creation and check that
         * the right set of content members are retrieved
         * @param  {Object}             contexts            Object where the keys are identifiers for the created users and the values are an
         *                                                  object with a user key containing the user object for the created user and a restContext key
         *                                                  containing the REST Context for that user
         * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
         * @param  {Function(content)}  callback            Standard callback function
         * @param  {Content}            callback.content    Content object that has been created as part of this test
         */
        var prepareSharing = function(contexts, privacy, callback) {
            // Create a content item
            RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                // Get the piece of content as the creator
                checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                    RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.results.length, 1);
                        // Morph results to hash for easy access.
                        var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                        assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                        callback(contentObj);
                     });
                });
            });
        };
    
        /**
         * Utility function for the sharing tests that will try to share content, will then check for access to the content by the person
         * the content was shared with. Then the test will check whether that person can see the content's membership list and sees the
         * correct list of members in there
         * @param  {Content}        contentObj          Content object that will be shared
         * @param  {Object}         sharer              Object representing the user that will share the content. The object will have a user key containing
         *                                              the user's basic profile and a restContext key containing the user's Rest Context
         * @param  {Object}         shareWith           Object representing the user that the content will be shared with. The object will have a user key containing
         *                                              the user's basic profile and a restContext key containing the user's Rest Context. Content access,
         *                                              library presence and membership checks will be run on this user
         * @param  {Boolean}        expectShare         Whether or not we expect that user 1 will be able to share the content with user 2
         * @param  {Boolean}        expectAccess        Whether or not we expect that user 2 will have access to the content after it's been shared with him
         * @param  {Boolean}        expectManager       Whether or not we expect that user 2 will be able to manage the content after it's been shared with him
         * @param  {Boolean}        expectInLibrary     Whether or not we expect user 2 to be able to see the content in his library after it's been shared with him
         * @param  {Function}       callback            Standard callback function
         */
        var testSharing = function(contentObj, sharer, shareWith, expectShare, expectAccess, expectManager, expectInLibrary, expectedMembers, callback) {
            RestAPI.Content.share(sharer.restContext, contentObj.contentId, [shareWith.user.id], function(err) {
                if (expectShare) {
                    assert.ok(!err);
                } else {
                    assert.ok(err);
                }
                checkPieceOfContent(shareWith.restContext, shareWith.user ? shareWith.user.id : null, contentObj, expectAccess, expectManager, expectInLibrary, function() {
                    RestAPI.Content.getMembers(shareWith.restContext, contentObj.contentId, null, null, function(err, members) {
                        if (expectedMembers) {
                            assert.ok(!err);
                            assert.equal(members.results.length, _.keys(expectedMembers).length);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                            for (var member in hash) {
                                assert.ok(hash[member][0].role, expectedMembers[member]);
                            }
                        } else {
                            assert.ok(err);
                        }
                        callback();
                    });
                });
            });
        };
    
        /**
         * Test that will attempt to create a public piece of content, share it as the manager, share it as a member, share it
         * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
         * presence and the correct content membership list 
         */
        it('verify public sharing', function(callback) {
            setUpUsers(function(contexts) {
                // Create a public content item
                prepareSharing(contexts, 'public', function(contentObj) {
                    // Share as content owner
                    var expectedMembers = {};
                    expectedMembers[contexts['nicolaas'].user.id] = 'manager';
                    expectedMembers[contexts['simon'].user.id] = 'viewer';
                    testSharing(contentObj, contexts['nicolaas'], contexts['simon'], true, true, false, true, expectedMembers, function() {

                        // Share as content member
                        expectedMembers[contexts['bert'].user.id] = 'viewer';
                        testSharing(contentObj, contexts['simon'], contexts['bert'], true, true, false, true, expectedMembers, function() {

                            // Share as other user, add to own library
                            expectedMembers[contexts['branden'].user.id] = 'viewer';
                            testSharing(contentObj, contexts['bert'], contexts['branden'], true, true, false, true, expectedMembers, function() {

                                // Share with the content manager, making sure that he's still the content manager after sharing
                                testSharing(contentObj, contexts['branden'], contexts['nicolaas'], true, true, true, true, expectedMembers, function() {

                                    // Share as anonymous
                                    testSharing(contentObj, {'restContext': anonymousRestContext}, contexts['anthony'], false, true, false, false, expectedMembers, callback); 
                                });
                            }); 
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a loggedin piece of content, share it as the manager, share it as a member, share it
         * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
         * presence and the correct content membership list 
         */
        it('Test logged in sharing', function(callback) {
            setUpUsers(function(contexts) {
                // Create a loggedin content item
                prepareSharing(contexts, 'loggedin', function(contentObj) {
                    // Share as content owner
                    var expectedMembers = {};
                    expectedMembers[contexts['nicolaas'].user.id] = 'manager';
                    expectedMembers[contexts['simon'].user.id] = 'viewer';
                    testSharing(contentObj, contexts['nicolaas'], contexts['simon'], true, true, false, true, expectedMembers, function() {

                        // Share as content member
                        expectedMembers[contexts['bert'].user.id] = 'viewer';
                        testSharing(contentObj, contexts['simon'], contexts['bert'], true, true, false, true, expectedMembers, function() {

                            // Share as other user, add to own library
                            expectedMembers[contexts['branden'].user.id] = 'viewer';
                            testSharing(contentObj, contexts['branden'], contexts['branden'], true, true, false, true, expectedMembers, function() {

                                // Share with the content manager, making sure that he's still the content manager after sharing
                                testSharing(contentObj, contexts['branden'], contexts['nicolaas'], true, true, true, true, expectedMembers, function() {

                                    // Share as anonymous
                                    testSharing(contentObj, {'restContext': anonymousRestContext}, contexts['anthony'], false, true, false, false, expectedMembers, callback);
                                });
                            }); 
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a private piece of content, share it as the manager, share it as a member, share it
         * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
         * presence and the correct content membership list 
         */
        it('Test private sharing', function(callback) {
            setUpUsers(function(contexts) {
                // Create a private content item
                prepareSharing(contexts, 'private', function(contentObj) {
                    // Share as content owner
                    var expectedMembers = {};
                    expectedMembers[contexts['nicolaas'].user.id] = 'manager';
                    expectedMembers[contexts['simon'].user.id] = 'viewer';
                    testSharing(contentObj, contexts['nicolaas'], contexts['simon'], true, true, false, true, expectedMembers, function() {

                        // Share as content member
                        testSharing(contentObj, contexts['simon'], contexts['bert'], false, false, false, false, null, function() {

                            // Share as other user, add to own library
                            testSharing(contentObj, contexts['branden'], contexts['branden'], false, false, false, false, null, function() {

                                // Share with the content manager, making sure that he's still the content manager after sharing
                                testSharing(contentObj, contexts['simon'], contexts['nicolaas'], false, true, true, true, expectedMembers, function() {

                                    // Share as anonymous
                                    testSharing(contentObj, {'restContext': anonymousRestContext}, contexts['anthony'], false, false, false, false, null, callback);
                                });
                            }); 
                        });
                    });
                });
            });
        });
        
        /**
         * Test that will attempt to use the shareContent function with multiple people and/or groups at the same time. Invalid
         * principal ids will be added in as well.
         */
        it('verify multiple sharing', function(callback) {
            setUpUsers(function(contexts) {
                // Create a piece of content
                prepareSharing(contexts, 'private', function(contentObj) {
                    // Share with multiple people at the same time
                    var toShare = [contexts['simon'].user.id, contexts['bert'].user.id, contexts['branden'].user.id];
                    RestAPI.Content.share(contexts['nicolaas'].restContext, contentObj.contentId, toShare, function(err) {
                        assert.ok(!err);

                        // Check that these people have access
                        checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, false, true, function() {
                            checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, true, false, true, function() {
                                checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, false, true, function() {
                                    checkPieceOfContent(contexts['anthony'].restContext, contexts['anthony'].user.id, contentObj, false, false, false, function() {

                                        // Share with multiple people, of which some are invalid users
                                        toShare = [contexts['anthony'].user.id, 'u:cam:nonExistingUser'];
                                        RestAPI.Content.share(contexts['nicolaas'].restContext, contentObj.contentId, toShare, function(err) {
                                            assert.ok(err);
                                            checkPieceOfContent(contexts['anthony'].restContext, contexts['anthony'].user.id, contentObj, false, false, false, callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });


    describe('Group related content access', function() {
        
        /**
         * Utility function for the for group-related content access. The following situation is assumed:
         * 1) UI Dev Group has 2 members, Nicolaas is a manager, Bert is a manager
         * 2) Back-end Dev Group has 2 members, Branden is a manager, Simon is a member
         * 3) OAE Team Group has 4 members, Anthony is a manager, Stuart is a member
         *    UI Dev Group is a member and Back-end Dev Group is a member
         * 
         * The following steps will be taken:
         * 1) A content item is created with the specified visibility
         * 2) Permissions are set on the content
         *  2.1) The UI Dev Group is made a viewer
         *  2.2) Simon is made a viewer
         *  2.3) We check that the content is part of the UI Dev Group's library
         *  2.4) We verify that Simon has access to content
         *  2.5) We verify that Bert and Nico have access to the content through the UI Dev Group membership
         *  2.6) We verify that the content doesn't show in the library of OAE Team and the Back-end team
         *  2.7) We verify that Stuart and Branden don't have access to the content
         * 3) The content is shared with the OAE Team Group
         *  3.1) We verify that Stuart and Branden now have access to the content
         *  3.2) We verify that the content shows in OAE Team and UI Dev team's library and not in the Back-end Team's library
         * 4) The Back-end Team Group is made a manager of the content
         *  4.1) We verify that Simon and Branden are now a manager
         *  4.2) We verify that Stuart is not a manager
         * 5) The permissions for OAE Team Group and Back-end Team Group are removed from the content
         *  5.1) We verify that Branden no longer has access to the content
         *  5.2) We verify that Simon and Nicolaas still have access to the content
         * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
         *                                                  the current user and the current tenant
         * @param  {Array<Group>}       groups              Array of group objects that will be used as part of this test
         * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
         * @param  {Function}           callback            Standard callback function
         */
        var testGroupAccess = function(contexts, groups, privacy, callback) {
            // Anthony creates a content item
            RestAPI.Content.createLink(contexts['anthony'].restContext, 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);
        
                // Set permissions on content --> Make UI dev team member, make Simon a member
                var permissions = {};
                permissions[groups['ui-team'].id] = 'viewer';
                permissions[contexts['simon'].user.id] = 'viewer';
                RestAPI.Content.updateMembers(contexts['anthony'].restContext, contentObj.contentId, permissions, function(err) {
                    assert.ok(!err);
                    // Check that UI Dev Team, Bert, Nico and Simon have member access
                    checkPieceOfContent(contexts['bert'].restContext, groups['ui-team'].id, contentObj, true, false, true, function() {
                        checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, false, false, function() {
                            checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, true, false, false, function() {
                                // Check that it shows in UI Dev Team's library
                                RestAPI.Content.getLibrary(contexts['nicolaas'].restContext, groups['ui-team'].id, null, 10, function(err, contentItems) {
                                    assert.ok(!err);
                                    assert.equal(contentItems.results.length, 1);
                                    assert.equal(contentItems.results[0].contentId, contentObj.contentId);
                                    // Check that it shows in Simon's library
                                    RestAPI.Content.getLibrary(contexts['simon'].restContext, contexts['simon'].user.id, null, 10, function(err, contentItems) {
                                        assert.ok(!err);
                                        assert.equal(contentItems.results.length, 1);
                                        assert.equal(contentItems.results[0].contentId, contentObj.contentId);
                                        // Check that it doesn't show in Nico's library
                                        RestAPI.Content.getLibrary(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, null, 10, function(err, contentItems) {
                                            assert.ok(!err);
                                            assert.equal(contentItems.results.length, 0);
                                            // Check that it doesn't show in Bert's library
                                            RestAPI.Content.getLibrary(contexts['bert'].restContext, contexts['bert'].user.id, null, 10, function(err, contentItems) {
                                                assert.ok(!err);
                                                assert.equal(contentItems.results.length, 0);
                                                // Check that it doesn't show in OAE Team's and Back-end team's library
                                                RestAPI.Content.getLibrary(contexts['anthony'].restContext, groups['backend-team'].id, null, 10, function(err, contentItems) {
                                                    assert.ok(!err);
                                                    assert.equal(contentItems.results.length, 0);
                                                    RestAPI.Content.getLibrary(contexts['anthony'].restContext, groups['oae-team'].id, null, 10, function(err, contentItems) {
                                                        assert.ok(!err);
                                                        assert.equal(contentItems.results.length, 0);
                                                        // Check that Stuart doesn't have access
                                                        checkPieceOfContent(contexts['stuart'].restContext, contexts['stuart'].user.id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                            // Check that Branden doesn't have access
                                                            checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, privacy === 'private' ? false : true, false, false, function() {
        
                                                                // Share with the OAE Team group
                                                                RestAPI.Content.share(contexts['anthony'].restContext, contentObj.contentId, [groups['oae-team'].id], function(err) {
                                                                    // Check that Stuart has access
                                                                    checkPieceOfContent(contexts['stuart'].restContext, contexts['stuart'].user.id, contentObj, true, false, false, function() {
                                                                        // Check that Branden has access
                                                                        checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, false, false, function() {
                                                                            // Check that it shows in OAE Team and UI Dev team's library and not in the Back-End Team's library
                                                                            RestAPI.Content.getLibrary(contexts['anthony'].restContext, groups['oae-team'].id, null, 10, function(err, contentItems) {
                                                                                assert.ok(!err);
                                                                                assert.equal(contentItems.results.length, 1);
                                                                                assert.equal(contentItems.results[0].contentId, contentObj.contentId);
                                                                                RestAPI.Content.getLibrary(contexts['nicolaas'].restContext, groups['ui-team'].id, null, 10, function(err, contentItems) {
                                                                                    assert.ok(!err);
                                                                                    assert.equal(contentItems.results.length, 1);
                                                                                    assert.equal(contentItems.results[0].contentId, contentObj.contentId);
                                                                                    RestAPI.Content.getLibrary(contexts['simon'].restContext, groups['backend-team'].id, null, 10, function(err, contentItems) {
                                                                                        assert.ok(!err);
                                                                                        assert.equal(contentItems.results.length, 0);
        
                                                                                        // Make Back-end team manager
                                                                                        permissions = {};
                                                                                        permissions[groups['backend-team'].id] = 'manager';
                                                                                        RestAPI.Content.updateMembers(contexts['anthony'].restContext, contentObj.contentId, permissions, function(err) {
                                                                                            assert.ok(!err);
                                                                                            // Check that Simon and Branden are manager, check that Stuart is not a manager
                                                                                            checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, true, true, function() {
                                                                                                checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, true, false, function() {
                                                                                                    checkPieceOfContent(contexts['stuart'].restContext, contexts['stuart'].user.id, contentObj, true, false, false, function() {

                                                                                                        // Remove permission for Back-end team manager and OAE Team
                                                                                                        permissions = {};
                                                                                                        permissions[groups['backend-team'].id] = false;
                                                                                                        permissions[groups['oae-team'].id] = false;
                                                                                                        RestAPI.Content.updateMembers(contexts['anthony'].restContext, contentObj.contentId, permissions, function(err) {
                                                                                                            assert.ok(!err);
                                                                                                            // Check that Branden no longer has access, but Simon and Nico still do
                                                                                                            checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, false, false, function() {
                                                                                                                checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, false, true, function() {
                                                                                                                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, privacy === 'private' ? false : true, false, false, callback);
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
        
        /**
         * Test that will verify group-related access for public content
         */
        it('verify public content group access', function(callback) {
            setUpUsers(function(contexts) {
                setUpGroups(contexts, function(groups) {
                    testGroupAccess(contexts, groups, 'public', callback);
                });
            });
        });
        
        /**
         * Test that will verify group-related access for logged in content
         */
        it('verify logged in content group access' , function(callback) {
            setUpUsers(function(contexts) {
                setUpGroups(contexts, function(groups) {
                    testGroupAccess(contexts, groups, 'loggedin', callback);
                });
            });
        });
        
        /**
         * Test that will verify group-related access for private content
         */
        it('verify private content group access', function(callback) {
            setUpUsers(function(contexts) {
                setUpGroups(contexts, function(groups) {
                    testGroupAccess(contexts, groups, 'private', callback);
                });
            });
        });
        
    });


    describe('Libraries', function() {
        
        // TODO: Tests around libraries
        // User library
        // Mix of private, public, logged in content
        // Mix of created himself, manager through setPermissions and shared
        // Check the library as user, other user, anonymous
        // Check paging
        // Group library
        // TODO: Get library that doesn't exist
        
        /**
         * Test that will verify if the returned items from the library are sorted by their last modified date.
         */
        it('verify library is sorted on last modified', function(callback) {
            setUpUsers(function(contexts) {
                var items = [];
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                    assert.ok(!err);
                    items.push(contentObj.contentId);
                    RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        items.push(contentObj.contentId);
                        RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            items.push(contentObj.contentId);

                            // Get the 2 most recent items.
                            RestAPI.Content.getLibrary(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, null, 2, function(err, data) {
                                assert.ok(!err);
                                var library = data.results;
                                assert.equal(library.length, 2);
                                assert.equal(library[0].contentId, items[2]);
                                assert.equal(library[1].contentId, items[1]);

                                // Modify the oldest one.
                                RestAPI.Content.updateContent(contexts['nicolaas'].restContext, items[0], {'description': 'lalila'}, function(err) {
                                    assert.ok(!err);

                                    // When we retrieve the library the just modified one, should be on-top.
                                    RestAPI.Content.getLibrary(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, null, 2, function(err, data) {
                                        assert.ok(!err);
                                        var library = data.results;
                                        assert.equal(library.length, 2);
                                        assert.equal(library[0].contentId, items[0]);
                                        assert.equal(library[1].contentId, items[2]);

                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
