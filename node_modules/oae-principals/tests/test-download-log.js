/*
 * Copyright 2018 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');

describe('Download Logs', function() {

    // Rest contexts that will be used for requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    var lrAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and tenant admin REST context
     */
    before(function(callback) {
    	TestsUtil.clearAllData(function(err) {
			anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
	        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
	        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
	        return callback();
	    });
    });

    var parseUser = function(hash) {
        var user = {
            'principalId': hash.user.id,
            'tenantAlias': hash.user.tenant.alias,
            'email': hash.user.email,
            'publicAlias': hash.user.displayName,
            'created': hash.user.created,
            'lastLog': hash.user.lastLog
        };
        return user;
    };

    var sortList = function(list) {
        return list.sort(function (a, b) {
            if (a < b) return -1;
            else if (a > b) return 1;
            return 0;
        });
    };

    describe('Download the log of the user creation date', function() {

        /**
         * Test that verifies that we get the right users TODO
         */
        it('verify if we get the right users on download log of user creation date', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                camAdminRestContext.user = function () { return mrvisser.user; };
                camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };

                var userList = [parseUser(mrvisser), parseUser(simong)];

                // Call the download logs method
                PrincipalsTestUtil.getLogCreation(camAdminRestContext, camAdminRestContext.tenant().alias, function(err, obj) {
                    assert.ok(!err);
                    assert.ok(obj);

                    // Get a new list excluding the tenant admin
                    var regexp = /random-user-/gi;
                    var newList = [];
                    newList = _.filter(obj, function(o) { return o.publicAlias.match(regexp); });

                    // We should get the same number of elements in both list
                    assert.equal(newList.length, userList.length);

                    // Sort the lists
                    newList = sortList(newList);
                    userList = sortList(userList);

                    _.each(newList, function(user, i) {
                        var foundUser = _.findWhere(newList, {principalId: user.principalId});
                        assert.equal(foundUser.tenantAlias, user.tenantAlias);
                        assert.equal(foundUser.email, user.email);
                        assert.equal(foundUser.publicAlias, user.publicAlias);
                        assert.equal(foundUser.created , user.created);
                    });

                    return callback();
                });
            });
        });

        /**
         * Test that verifies that we get the right users TODO
         */
        it('verify if we get only the users of the right tenant', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);
                // Create user
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, odoran, stuartf) {
                    assert.ok(!err);

                    camAdminRestContext.user = function () { return mrvisser; };
                    camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                    camAdminRestContext.user().isAdmin = function () { return true; };

                    var userList = [parseUser(mrvisser), parseUser(simong)];
                    var secondUserList = [parseUser(odoran), parseUser(stuartf)];

                    // Call the Download logs method
                    PrincipalsTestUtil.getLogCreation(camAdminRestContext, camAdminRestContext.tenant().alias, function(err, obj) {
                        assert.ok(!err);
                        assert.ok(obj);

                        // Get a new list excluding the tenant admin
                        var regexp = /random-user-/gi;
                        var newList = _.filter(obj, function(o) { return o.publicAlias.match(regexp); });

                        _.each(userList, function(user) {
                            assert.ok(_.findWhere(newList, {principalId: user.principalId}));
                        });

                        _.each(secondUserList, function(user) {
                            assert.ok(!_.findWhere(newList, {principalId: user.principalId}));
                        });

                        return callback();
                    });
                });
            });
        });

    });

    describe('Download log of user last connection date', function() {

        /**
         * Test that verifies that we get the right users TODO
         */
        it('verify if we get the right users without setting a date', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                camAdminRestContext.user = function () { return mrvisser.user; };
                camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };

                var userList = [parseUser(mrvisser), parseUser(simong)];

                var today = new Date();

                PrincipalsDAO.saveDateLastLogIn(mrvisser.user, today, function(err) {
                    assert.ok(!err);
                    PrincipalsDAO.saveDateLastLogIn(simong.user, today, function(err) {
                        assert.ok(!err);

                        // Call the Download logs method
                        PrincipalsTestUtil.getLog(camAdminRestContext, 0, camAdminRestContext.tenant().alias, function(err, obj) {
                            assert.ok(!err);
                            assert.ok(obj);

                            // Get a new list excluding the tenant admin
                            var regexp = /random-user-/gi;
                            var newList = [];
                            newList = _.filter(obj, function(o) { return o.publicAlias.match(regexp); });

                            // We should get the same number of elements in both list
                            assert.equal(newList.length, userList.length);

                            // Sort the lists
                            newList = sortList(newList);
                            userList = sortList(userList);

                            _.each(newList, function(user, i) {
                                var foundUser = _.findWhere(newList, {principalId: user.principalId});
                                assert.equal(foundUser.tenantAlias, user.tenantAlias);
                                assert.equal(foundUser.email, user.email);
                                assert.equal(foundUser.publicAlias, user.publicAlias);
                                assert.equal(foundUser.lastLog , user.lastLog);
                            });

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that we get the right users
         */
        it('verify if we get the right users setting date', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                camAdminRestContext.user = function () { return mrvisser; };
                camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };

                var today = new Date();
                var newDate = new Date();
                var m = today.getMonth();
                var newMonth = m - 3;
                newDate.setMonth(newMonth);

                // Set a date last login
                PrincipalsDAO.saveDateLastLogIn(mrvisser.user, newDate, function(err) {
                    assert.ok(!err);

                    // Call the Download logs method
                    PrincipalsTestUtil.getLog(camAdminRestContext, 2, camAdminRestContext.tenant().alias, function(err, obj) {
                        assert.ok(!err);
                        assert.ok(obj);

                        // Get a new list excluding the tenant admin
                        var regexp = /random-user-/gi;
                        var newList = _.filter(obj, function(o) { return o.publicAlias.match(regexp); });

                        assert.ok(_.findWhere(newList, {principalId: mrvisser.user.id}));
                        assert.ok(!_.findWhere(newList, {principalId: simong.user.id}));

                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that we get the right users
         */
        it('verify if we get only the users of the right tenant', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);
                // Create user
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, odoran, stuartf) {
                    assert.ok(!err);

                    camAdminRestContext.user = function () { return mrvisser; };
                    camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                    camAdminRestContext.user().isAdmin = function () { return true; };

                    var userList = [parseUser(mrvisser), parseUser(simong)];
                    var secondUserList = [parseUser(odoran), parseUser(stuartf)];
                    var today = new Date();

                    // Set a date last login
                    PrincipalsDAO.saveDateLastLogIn(mrvisser.user, today, function(err) {
                        assert.ok(!err);
                        PrincipalsDAO.saveDateLastLogIn(simong.user, today, function(err) {
                            assert.ok(!err);

                            // Call the Download logs method
                            PrincipalsTestUtil.getLog(camAdminRestContext, 0, camAdminRestContext.tenant().alias, function(err, obj) {
                                assert.ok(!err);
                                assert.ok(obj);

                                // Get a new list excluding the tenant admin
                                var regexp = /random-user-/gi;
                                var newList = _.filter(obj, function(o) { return o.publicAlias.match(regexp); });

                                _.each(userList, function(user) {
                                    assert.ok(_.findWhere(newList, {principalId: user.principalId}));
                                });

                                _.each(secondUserList, function(user) {
                                    assert.ok(!_.findWhere(newList, {principalId: user.principalId}));
                                });

                                return callback();

                            });
                        });
                    });
                });
            });
        });

    });
});
