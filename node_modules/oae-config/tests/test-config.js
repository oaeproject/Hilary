/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context').Context;
var RestAPI = require('oae-rest');
var TenantsTestUtil = require('oae-tenants/lib/test/util');
var TestsUtil = require('oae-tests');

var ConfigAPI = require('oae-config');


describe('Configuration', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user on the Cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user on the global admin tenant
    var anonymousGlobalRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context for a user that will be used inside of the tests
    var johnRestContext = null;

    /*!
     * Function that will fill up the global admin, tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        // Fill up tenant admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the rest context for our test user
        var userId = TestsUtil.generateTestUserId('john');
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'John Doe', null, function(err, createdUser) {
            johnRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');
            callback();
        });
    });

    /*!
     * Clear the configuration values that are changed during tests
     */
    afterEach(function(callback) {

        // An update object to apply that will clear the values for the global admin
        var globalClearValues = [
            'oae-authentication/twitter/enabled',
            'oae-content/storage/amazons3-access-key',
            'oae-content/storage/backend',
            'oae-email/general/from',
            'oae-google-analytics/google-analytics/globalEnabled',
            'oae-principals/group/visibility',
            'oae-principals/recaptcha/privateKey',
            'oae-principals/recaptcha/publicKey',
            'oae-principals/termsAndConditions/text'
        ];

        // An array of values to clear on the tenant admin
        var tenantClearValues = [
            'oae-authentication/twitter/enabled',
            'oae-email/general/from',
            'oae-principals/group/visibility',
            'oae-principals/recaptcha/publicKey',
            'oae-principals/termsAndConditions/text'
        ];

        // Reset the global admin values by setting them to the empty string
        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, null, globalClearValues, function(err) {
            assert.ok(!err);

            // Reset the tenant values by using the tenant admin clear config
            ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, tenantClearValues, function(err) {
                assert.ok(!err);
                return callback();
            });
        });
    });

    describe('Schema', function() {

        /**
         * Test that verifies that the configuration schema can be retrieved on the global admin server
         */
        it('verify get schema global', function(callback) {
            RestAPI.Config.getSchema(globalAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.ok(schema);
                assert.ok(schema['oae-authentication'].title);
                assert.strictEqual(schema['oae-authentication']['twitter'].elements['enabled'].defaultValue, true);

                // Verify that the anonymous users can't retrieve the schema
                RestAPI.Config.getSchema(anonymousGlobalRestContext, function(err, schema) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.ok(!schema);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that the configuration schema can be retrieved on the tenant server
         */
        it('verify get schema tenant', function(callback) {
            RestAPI.Config.getSchema(camAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.ok(schema);
                assert.ok(schema['oae-authentication'].title);
                assert.strictEqual(schema['oae-authentication']['twitter'].elements['enabled'].defaultValue, true);

                // Verify that regular tenant users can't retrieve the schema
                RestAPI.Config.getSchema(johnRestContext, function(err, schema) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.ok(!schema);

                    // Verify that only anonymous users can't retrieve the schema
                    RestAPI.Config.getSchema(anonymousCamRestContext, function(err, schema) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        assert.ok(!schema);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that the configuration schema for a global admin has `globalAdminOnly` values and
         * that the schema for a tenant admin excludes `globalAdminOnly` values.
         */
        it('verify globalAdminOnly', function(callback) {
            RestAPI.Config.getSchema(globalAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.ok(schema);
                assert.ok(schema['oae-content'].title);
                assert.equal(schema['oae-content']['storage'].elements['amazons3-access-key'].defaultValue, '<access-key>');

                RestAPI.Config.getSchema(camAdminRestContext, function(err, schema) {
                    assert.ok(!err);
                    assert.ok(schema);
                    assert.ok(schema['oae-content'].title);
                    assert.equal(schema['oae-content']['storage'].elements['amazons3-access-key'], undefined);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a `defaultValue` always returns in the schema, even when it's not provided
         * in the configuration file
         */
        it('verify defaultValue always returns', function(callback) {
            RestAPI.Config.getSchema(globalAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.equal(schema['oae-email']['general'].elements['from'].defaultValue, '');
                return callback();
            });
        });
    });


    describe('Internal Configuration API', function() {

        /**
         * Test that verifies that a single configuration value can be retrieved from the cached configuration
         */
        it('verify get single config value', function(callback) {
            var AuthenticationConfig = ConfigAPI.config('oae-authentication');
            var PrincipalsConfig = ConfigAPI.config('oae-principals');
            // Retrieve a non-existing value
            assert.equal(AuthenticationConfig.getValue(global.oaeTests.tenants.cam.alias, 'sso', 'enabled'), null);
            // Retrieve a boolean value
            assert.equal(AuthenticationConfig.getValue(global.oaeTests.tenants.cam.alias, 'twitter', 'enabled'), true);
            // Retrieve a string value
            assert.equal(PrincipalsConfig.getValue(global.oaeTests.tenants.cam.alias, 'user', 'defaultLanguage'), 'en_GB');
            // Retrieve a suppressed value
            assert.equal(PrincipalsConfig.getValue(global.oaeTests.tenants.cam.alias, 'recaptcha', 'privateKey'), '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');
            callback();
        });

        /**
         * Test that verifies the validation for retrieving a config value from the cached configuration
         */
        it('verify validation', function(callback) {
            // Verify that initializing a config factory needs a module name. This should throw an error
            assert.throws(function() {
                ConfigAPI.config();
            });
            // Verify that a feature needs to be provided when getting a config value
            var AuthenticationConfig = ConfigAPI.config('oae-authentication');
            assert.equal(AuthenticationConfig.getValue(global.oaeTests.tenants.cam.alias), null);
            // Verify that an element needs to be provided when getting a config value
            assert.equal(AuthenticationConfig.getValue(global.oaeTests.tenants.cam.alias, 'twitter'), null);
            callback();
        });

        /**
         * Test that verifies the last updated timestamp is reflected when a value gets updated
         */
        it('verify the last updated timestamp increases when updated', function(callback) {
            var PrincipalsConfig = ConfigAPI.config('oae-principals');

            // Not passing in any of the `tenantAlias`, `feature` or `element` parameters should result in the epoch date being returned
            assert.equal(PrincipalsConfig.getLastUpdated().getTime(), 0);
            assert.equal(PrincipalsConfig.getLastUpdated(global.oaeTests.tenants.cam.alias).getTime(), 0);
            assert.equal(PrincipalsConfig.getLastUpdated(global.oaeTests.tenants.cam.alias, 'recaptcha').getTime(), 0);

            // Passing in an unknown element should result in the epoch date
            assert.equal(PrincipalsConfig.getLastUpdated(global.oaeTests.tenants.cam.alias, 'careful', 'now').getTime(), 0);

            // The createTenantWithAdmin test utility will set the recaptcha value to disabled when the tenant has been created. This should be reflected in the last updated timestamp
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Record the current value of the recaptcha config update timestamp
                var recaptchaUpdateTime = PrincipalsConfig.getLastUpdated(tenantAlias, 'recaptcha', 'enabled').getTime();
                assert.ok(recaptchaUpdateTime > 0);

                // Enable recaptcha on the tenant
                ConfigTestUtil.updateConfigAndWait(tenantAdminRestContext, null, {'oae-principals/recaptcha/enabled': true}, function(err) {
                    assert.ok(!err);

                    // Ensure the config value update time is larger than it was before
                    assert.ok(PrincipalsConfig.getLastUpdated(tenantAlias, 'recaptcha', 'enabled').getTime() > recaptchaUpdateTime);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies the last updated timestamp does not get updated when the value does not change
         */
        it('verify the last updated timestamp does not change when the config value did not change', function(callback) {
            var PrincipalsConfig = ConfigAPI.config('oae-principals');
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Record the current value of the recaptcha config update timestamp
                var recaptchaUpdateTime = PrincipalsConfig.getLastUpdated(tenantAlias, 'recaptcha', 'enabled').getTime();
                assert.ok(recaptchaUpdateTime > 0);

                // Update a different configuration field. Let's enable the twitter!
                ConfigTestUtil.updateConfigAndWait(tenantAdminRestContext, null, {'oae-authentication/twitter/enabled': true}, function(err) {
                    assert.ok(!err);

                    // Ensure the recaptcha config update timestamp has not updated
                    assert.strictEqual(PrincipalsConfig.getLastUpdated(tenantAlias, 'recaptcha', 'enabled').getTime(), recaptchaUpdateTime);
                    return callback();
                });
            });
        });
    });


    describe('REST Configuration API', function() {

        /**
         * Test that verifies that the configuration can be retrieved on the global server
         */
        it('verify get global config', function(callback) {
            // Get the config as an admin user
            RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                // Verify that a public value is present
                assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                // Verify that a suppressed value is present
                assert.equal(config['oae-principals']['recaptcha']['privateKey'], '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');
                // Verify that a globalAdminOnly value is present
                assert.equal(config['oae-content']['storage']['amazons3-access-key'], '<access-key>');

                // Get the config as an anonymous user
                RestAPI.Config.getTenantConfig(anonymousGlobalRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    // Verify that a public value is present
                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                    // Verify that a suppressed value is not present
                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                    // Verify that a globalAdminOnly value is not present
                    assert.ok(!config['oae-content']['storage']);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that the configuration can be retrieved on the tenant server
         */
        it('verify get tenant config', function(callback) {
            // Get the config as an admin user
            RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                // Verify that a public value is present
                assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                // Verify that a suppressed value is present
                assert.equal(config['oae-principals']['recaptcha']['privateKey'], '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');
                // Verify that a globalAdminOnly value is not present
                assert.ok(!config['oae-content']['storage'].elements);

                // Get the config as a logged in user
                RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    // Verify that a public value is present
                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                    // Verify that a suppressed value is not present
                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                    // Verify that a globalAdminOnly value is not present
                    assert.ok(!config['oae-content']['storage']);

                    // Get the config as an anonymous user
                    RestAPI.Config.getTenantConfig(anonymousCamRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        // Verify that a public value is present
                        assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                        // Verify that a suppressed value is not present
                        assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                        // Verify that a globalAdminOnly value is not present
                        assert.ok(!config['oae-content']['storage']);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies config fields on admin can be cleared
         */
        it('verify clear global config', function(callback) {
            // Start with an overriden configuration value
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                assert.ok(!err);

                // Validate that the change has been made
                RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                    // Validate that the change is reflected in the tenant configuration
                    RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                        // Clear the global admin value
                        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, null, ['oae-authentication/twitter/enabled'], function(err) {
                            assert.ok(!err);

                            // Validate that the global config value has reverted to the default
                            RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                                assert.ok(!err);
                                assert.ok(config);
                                assert.equal(config['oae-authentication']['twitter']['enabled'], true);

                                // Validate that the tenant config value has reverted to the default
                                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                    assert.ok(!err);
                                    assert.ok(config);
                                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies clearing config fields
         */
        it('verify clear tenant config', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                assert.ok(!err);

                // Validate that the change has been made and has overriden the global config
                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                    // Validate that the global admin still has the old values
                    RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], true);

                        // Clear the override
                        ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-authentication/twitter/enabled'], function(err) {
                            assert.ok(!err);
                            // Verify that the value reverts to the default
                            RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                assert.ok(!err);
                                assert.ok(config);
                                assert.equal(config['oae-authentication']['twitter']['enabled'], true);

                                // Validate passing the element name as a string rather than an array works as well
                                ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                                    assert.ok(!err);

                                    // Validate that the change has been made and has overriden the global config
                                    RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                        assert.ok(!err);
                                        assert.ok(config);
                                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                                        // Clear the config
                                        ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, 'oae-authentication/twitter/enabled', function(err) {
                                            assert.ok(!err);

                                            // Verify that the value reverts to the default
                                            RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                                assert.ok(!err);
                                                assert.ok(config);
                                                assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * Test that verifies that clearing both an element and one of its optional keys at the same time is not allowed
         */
        it('verify clearing both an element and one of its optional keys at the same time is not allowed', function(callback) {
            var configUpdate = {
                'oae-principals/termsAndConditions/text/en_CA': 'Canadian English',
                'oae-principals/termsAndConditions/text/en_GB': 'British English',
                'oae-principals/termsAndConditions/text/en_US': 'American English',
                'oae-principals/termsAndConditions/text/fr_BE': 'Belgian French',
                'oae-principals/termsAndConditions/text/fr_FR': 'French French'
            };
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, configUpdate, function(err) {
                assert.ok(!err);

                // Clearing both en_GB and the entire text element should result in an error
                ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-principals/termsAndConditions/text/en_GB', 'oae-principals/termsAndConditions/text'], function(err) {
                    assert.equal(err.code, 400);

                    // The order should not matter
                    ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-principals/termsAndConditions/text', 'oae-principals/termsAndConditions/text/en_GB'], function(err) {
                        assert.equal(err.code, 400);

                        // Assert all the values are still there
                        RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                            assert.ok(!err);
                            assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                            assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 6);
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['en_CA'], 'Canadian English');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['en_GB'], 'British English');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'American English');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_BE'], 'Belgian French');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_FR'], 'French French');

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that optional keys can be cleared from a config element
         */
        it('verify clear config when using optional keys', function(callback) {
            var configUpdate = {
                'oae-principals/termsAndConditions/text/en_CA': 'Canadian English',
                'oae-principals/termsAndConditions/text/en_GB': 'British English',
                'oae-principals/termsAndConditions/text/en_US': 'American English',
                'oae-principals/termsAndConditions/text/fr_BE': 'Belgian French',
                'oae-principals/termsAndConditions/text/fr_FR': 'French French'
            };
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, configUpdate, function(err) {
                assert.ok(!err);

                // Verify all the values are present
                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                    assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 6);
                    assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_CA'], 'Canadian English');
                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_GB'], 'British English');
                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'American English');
                    assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_BE'], 'Belgian French');
                    assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_FR'], 'French French');

                    // Clearing just the British English value should not affect the other values
                    ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-principals/termsAndConditions/text/en_GB'], function(err) {
                        assert.ok(!err);

                        // Verify the other values are unaffected
                        RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                            assert.ok(!err);
                            assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                            assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 5);
                            assert.ok(!config['oae-principals']['termsAndConditions']['text']['en_GB']);
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['en_CA'], 'Canadian English');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'American English');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_BE'], 'Belgian French');
                            assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_FR'], 'French French');

                            // Try clearing multiple keys
                            ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-principals/termsAndConditions/text/fr_BE', 'oae-principals/termsAndConditions/text/fr_FR'], function(err) {
                                assert.ok(!err);

                                // Verify the other values are unaffected
                                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                    assert.ok(!err);
                                    assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                                    assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 3);
                                    assert.ok(!config['oae-principals']['termsAndConditions']['text']['en_GB']);
                                    assert.ok(!config['oae-principals']['termsAndConditions']['text']['fr_FR']);
                                    assert.ok(!config['oae-principals']['termsAndConditions']['text']['fr_BE']);
                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_CA'], 'Canadian English');
                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'American English');

                                    // Reset the T&C field in its entirety
                                    ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-principals/termsAndConditions/text'], function(err) {
                                        assert.ok(!err);

                                        // Only the default key should be present
                                        RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                            assert.ok(!err);
                                            assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                                            assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 1);
                                            assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');

                                            // Check that we can still set a value
                                            var configUpdate = {
                                                'oae-principals/termsAndConditions/text/en_CA': 'Canadian English',
                                                'oae-principals/termsAndConditions/text/en_GB': 'British English',
                                                'oae-principals/termsAndConditions/text/en_US': 'American English',
                                                'oae-principals/termsAndConditions/text/fr_BE': 'Belgian French',
                                                'oae-principals/termsAndConditions/text/fr_FR': 'French French'
                                            };
                                            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, configUpdate, function(err) {
                                                assert.ok(!err);

                                                // Verify the update
                                                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                                    assert.ok(!err);
                                                    assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                                                    assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 6);
                                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_CA'], 'Canadian English');
                                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_GB'], 'British English');
                                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'American English');
                                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_BE'], 'Belgian French');
                                                    assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_FR'], 'French French');

                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the configuration can be retrieved for the tenant server through the global admin
         */
        it('verify get tenant config through global tenant', function(callback) {
            // Get the config as an admin user
            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                // Verify that a public value is present
                assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                // Verify that a suppressed value is present
                assert.equal(config['oae-principals']['recaptcha']['privateKey'], '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');
                // Verify that a globalAdminOnly value is present
                assert.equal(config['oae-content']['storage']['amazons3-access-key'], '<access-key>');

                // Get the config as an anonymous user
                RestAPI.Config.getTenantConfig(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    // Verify that a public value is present
                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                    // Verify that a suppressed value is not present
                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                    // Verify that a globalAdminOnly value is not present
                    assert.ok(!config['oae-content']['storage']);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a global configuration value can be persisted
         */
        it('verify set config value global', function(callback) {
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                assert.ok(!err);

                // Validate that the change has been made
                RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                    // Validate that the tenant admin can see this as well
                    RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                        // Set a new value for a suppressed config value
                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-principals/recaptcha/privateKey': 'newKey'}, function(err) {
                            assert.ok(!err);

                            // Validate that the change has been made
                            RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                                assert.ok(!err);
                                assert.ok(config);
                                assert.equal(config['oae-principals']['recaptcha']['privateKey'], 'newKey');

                                // Validate that the tenant admin can see this as well
                                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                    assert.ok(!err);
                                    assert.ok(config);
                                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], 'newKey');

                                    // Validate that a non-admin user can still not see this
                                    RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                                        assert.ok(!err);
                                        assert.ok(config);
                                        assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant configuration value can be persisted
         */
        it('verify set tenant config value', function(callback) {
            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                assert.ok(!err);

                // Validate that the change has been made and has overriden the global config
                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                    // Validate that the new value can be retrieved through the global admin
                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                        // Set a new value for a suppressed config value
                        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/recaptcha/privateKey': 'newTenantKey'}, function(err) {
                            assert.ok(!err);

                            // Validate that the tenant admin can see this as well
                            RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                assert.ok(!err);
                                assert.ok(config);
                                assert.equal(config['oae-principals']['recaptcha']['privateKey'], 'newTenantKey');

                                // Validate that a non-admin user can still not see this
                                RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                                    assert.ok(!err);
                                    assert.ok(config);
                                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);

                                    // Validate that the global admin still has the old values
                                    RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                                        assert.ok(!err);
                                        assert.ok(config);
                                        assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                                        assert.equal(config['oae-principals']['recaptcha']['privateKey'], '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant configuration value can be persisted through the global server
         */
        it('verify set tenant config value from global tenant', function(callback) {
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-authentication/twitter/enabled': false}, function(err) {
                assert.ok(!err);

                // Validate that the change has been made from the global admin
                RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], false);

                    // Validate that the change has been made from the tenant admin
                    RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that boolean and non-boolean values are coerced correctly
         */
        it('verify config value coercion', function(callback) {
            // Get Boolean config value that's supposed to be `true`
            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                assert.strictEqual(config['oae-authentication']['local']['enabled'], true);

                // Change the value to false using '0', which would be used by checkboxes
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-authentication/local/enabled': '0'}, function(err) {
                    assert.ok(!err);
                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.strictEqual(config['oae-authentication']['local']['enabled'], false);

                        // Change the value to true using '1', which would be used by checkboxes
                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-authentication/local/enabled': '1'}, function(err) {
                            assert.ok(!err);
                            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                assert.ok(!err);
                                assert.ok(config);
                                assert.strictEqual(config['oae-authentication']['local']['enabled'], true);

                                // Change the value to false using the 'false' string
                                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-authentication/local/enabled': 'false'}, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                        assert.ok(!err);
                                        assert.ok(config);
                                        assert.strictEqual(config['oae-authentication']['local']['enabled'], false);

                                        // Change the value back to true using the 'true' string
                                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-authentication/local/enabled': 'true'}, function(err) {
                                            assert.ok(!err);
                                            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                                assert.ok(!err);
                                                assert.ok(config);
                                                assert.strictEqual(config['oae-authentication']['local']['enabled'], true);

                                                // Get non-Boolean config value
                                                RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                                    assert.ok(!err);
                                                    assert.ok(config);

                                                    // Change the value to '1' and ensure it isn't coerced to a boolean
                                                    ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-email/general/from': '1'}, function(err) {
                                                        assert.ok(!err);
                                                        RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                                            assert.ok(!err);
                                                            assert.ok(config);
                                                            assert.strictEqual(config['oae-email']['general']['from'], '1');

                                                            // Change the value to '0' and ensure it isn't coerced to a boolean
                                                            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-email/general/from': '0'}, function(err) {
                                                                assert.ok(!err);
                                                                RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                                                    assert.ok(!err);
                                                                    assert.ok(config);
                                                                    assert.strictEqual(config['oae-email']['general']['from'], '0');

                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation on setting and retrieving config
         */
        it('verify configuration validation', function(callback) {
            // Missing configField
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {null: false}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 404);

                // Missing configValue
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-authentication/twitter/enabled': null}, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Try changing the config with an invalid tenant id
                    ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, ' ', {'oae-authentication/twitter/enabled': false}, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Ensure the value did not change
                        RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                            assert.ok(!err);
                            assert.strictEqual(config['oae-authentication']['twitter']['enabled'], true);

                            // Try updating a non-existing configuration option
                            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-non/existing/options': 'moops'}, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 404);

                                // Set the amazon s3 access key to a non-empty string so we can later verify we can set it to the empty string
                                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-content/storage/amazons3-access-key': 'blahblahblah'}, function(err) {
                                    assert.ok(!err);

                                    // Verify the value changed to the string we set
                                    RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, testSetEmptyStringConfig) {
                                        assert.ok(!err);
                                        assert.equal(testSetEmptyStringConfig['oae-content']['storage']['amazons3-access-key'], 'blahblahblah');

                                        // Ensure a text configuration option can be set to the empty string
                                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-content/storage/amazons3-access-key': ''}, function(err) {
                                            assert.ok(!err);

                                            // Verify the value became the empty string
                                            RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, testSetEmptyStringConfig) {
                                                assert.ok(!err);
                                                assert.strictEqual(testSetEmptyStringConfig['oae-content']['storage']['amazons3-access-key'], '');

                                                // Try changing the tenant config as a regular user (non-admin)
                                                ConfigTestUtil.updateConfigAndWait(johnRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                                                    assert.ok(err);
                                                    assert.equal(err.code, 401);

                                                    // Try changing the tenant config as an anonymous user
                                                    ConfigTestUtil.updateConfigAndWait(anonymousCamRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                                                        assert.ok(err);
                                                        assert.equal(err.code, 401);

                                                        // Try changing the global config as an anonymous user
                                                        ConfigTestUtil.updateConfigAndWait(anonymousGlobalRestContext, null, {'oae-authentication/twitter/enabled': false}, function(err) {
                                                            assert.ok(err);
                                                            assert.equal(err.code, 401);

                                                            // Ensure Cambridge configuration of twitter did not change
                                                            RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                                                                assert.ok(!err);
                                                                assert.strictEqual(config['oae-authentication']['twitter']['enabled'], true);

                                                                // Ensure global configuration of twitter did not change
                                                                RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                                                                    assert.ok(!err);
                                                                    assert.strictEqual(config['oae-authentication']['twitter']['enabled'], true);

                                                                    // Try changing the global config as a regular user (non-admin)
                                                                    ConfigTestUtil.updateConfigAndWait(johnRestContext, null, {'oae-content/storage/amazons3-access-key': 'moops'}, function(err) {
                                                                        assert.ok(err);
                                                                        assert.equal(err.code, 401);

                                                                        // Ensure the amazons3 access key value did not change from the empty string
                                                                        RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                                                            assert.ok(!err);
                                                                            assert.strictEqual(config['oae-content']['storage']['amazons3-access-key'], '');

                                                                            // Try changing a config option that is not editable by a tenant (tenantOverride=false) as a tenant admin
                                                                            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-google-analytics/google-analytics/globalEnabled': '1'}, function(err) {
                                                                                assert.ok(err);
                                                                                assert.equal(err.code, 401);

                                                                                // Ensure the value did not change
                                                                                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                                                                    assert.ok(!err);
                                                                                    assert.strictEqual(config['oae-google-analytics']['google-analytics']['globalEnabled'], false);

                                                                                    // Verify that a global administrator can update `tenantOverride=false` configuration options
                                                                                    ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-google-analytics/google-analytics/globalEnabled': '1'}, function(err) {
                                                                                        assert.ok(!err);

                                                                                        // Ensure the value changed
                                                                                        RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                                                                            assert.ok(!err);
                                                                                            assert.strictEqual(config['oae-google-analytics']['google-analytics']['globalEnabled'], true);

                                                                                            // Verify getting tenant configuration through the global server needs a valid ID
                                                                                            RestAPI.Config.getTenantConfig(globalAdminRestContext, ' ', function(err, config) {
                                                                                                assert.ok(err);
                                                                                                assert.equal(err.code, 400);
                                                                                                return callback();
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the functionality of an internationalizable text config field
         */
        it('verify internationalizable field', function(callback) {
            // Verify there is a default key
            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                assert.ok(!err);
                assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 1);
                assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');

                // Set some American English text
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/termsAndConditions/text/en_US': 'Some legalese in American English'}, function(err) {
                    assert.ok(!err);
                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                        assert.ok(!err);
                        assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                        assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 2);
                        assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                        assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'Some legalese in American English');

                        // Set some Dutch text
                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/termsAndConditions/text/nl_BE': 'Een waterdicht legaal contract'}, function(err) {
                            assert.ok(!err);
                            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                assert.ok(!err);
                                assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                                assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 3);
                                assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                                assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'Some legalese in American English');
                                assert.equal(config['oae-principals']['termsAndConditions']['text']['nl_BE'], 'Een waterdicht legaal contract');

                                // Verify that updating the American English text doesn't change the other languages
                                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/termsAndConditions/text/en_US': 'Some updated legalese in American English'}, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                        assert.ok(!err);
                                        assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                                        assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 3);
                                        assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                                        assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'Some updated legalese in American English');
                                        assert.equal(config['oae-principals']['termsAndConditions']['text']['nl_BE'], 'Een waterdicht legaal contract');

                                        // Verify that updating multiple keys does not affect the keys that should not be updated
                                        var update = {
                                            'oae-principals/termsAndConditions/text/en_US': 'en us text',
                                            'oae-principals/termsAndConditions/text/fr_FR': 'fr fr text'
                                        };
                                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, update, function(err) {
                                            assert.ok(!err);
                                            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                                assert.ok(!err);
                                                assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                                                assert.equal(_.keys(config['oae-principals']['termsAndConditions']['text']).length, 4);
                                                assert.equal(config['oae-principals']['termsAndConditions']['text']['default'], '');
                                                assert.equal(config['oae-principals']['termsAndConditions']['text']['en_US'], 'en us text');
                                                assert.equal(config['oae-principals']['termsAndConditions']['text']['nl_BE'], 'Een waterdicht legaal contract');
                                                assert.equal(config['oae-principals']['termsAndConditions']['text']['fr_FR'], 'fr fr text');
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies text config values get trimmed
         */
        it('verify text field gets trimmed', function(callback) {
            // Set the recaptcha public key to a value that needs trimming on the global tenant
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-principals/recaptcha/publicKey': ' untrimmed value '}, function(err) {
                assert.ok(!err);

                // Ensure the recaptcha public key is trimmed
                RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.equal(config['oae-principals']['recaptcha']['publicKey'], 'untrimmed value');

                    // Set the recaptcha public key to only whitespace and ensure it is treated like the empty string
                    ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, {'oae-principals/recaptcha/publicKey': ' '}, function(err) {
                        assert.ok(!err);

                        // It should have become the empty string
                        RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                            assert.ok(!err);
                            assert.strictEqual(config['oae-principals']['recaptcha']['publicKey'], '');

                            // Set the recaptcha public key to a value that needs trimming on a user tenant
                            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/recaptcha/publicKey': ' untrimmed value '}, function(err) {
                                assert.ok(!err);

                                // Ensure the recaptcha public key is trimmed
                                RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                    assert.ok(!err);
                                    assert.equal(config['oae-principals']['recaptcha']['publicKey'], 'untrimmed value');

                                    // Set the recaptcha public key to only whitespace and ensure it is treated like the empty string
                                    ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/recaptcha/publicKey': ' '}, function(err) {
                                        assert.ok(!err);

                                        // Ensure the recaptcha public key became the empty string
                                        RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                                            assert.ok(!err);
                                            assert.strictEqual(config['oae-principals']['recaptcha']['publicKey'], '');
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the functionality of the list config field
         */
        it('verify list field', function(callback) {
            // Verify the `list` property is returned in the schema and that it contains the correct objects
            RestAPI.Config.getSchema(globalAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.ok(_.isArray(schema['oae-principals']['group'].elements['visibility']['list']));
                _.each(schema['oae-principals']['group'].elements['visibility']['list'], function(listOption) {
                    assert.ok(listOption.name);
                    assert.ok(listOption.value);
                });

                // Assert that there is a value 'private' in the list
                var privateValues = _.filter(schema['oae-principals']['group'].elements['visibility']['list'], function(option) { return option.value === 'private'; });
                assert.equal(privateValues.length, 1);

                // Set a value for a list config field
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/group/visibility': 'private'}, function(err) {
                    assert.ok(!err);
                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                        assert.ok(!err);
                        assert.equal(config['oae-principals']['group']['visibility'], 'private');

                        // Clear the config and ensure it goes back to the default
                        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, ['oae-principals/group/visibility'], function(err) {
                            assert.ok(!err);
                            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                assert.ok(!err);
                                assert.equal(config['oae-principals']['group']['visibility'], 'public');
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the functionality of the radio config field
         */
        it('verify radio field', function(callback) {
            // Verify the `group` property is returned in the schema and that it contains the correct objects
            RestAPI.Config.getSchema(globalAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.ok(_.isArray(schema['oae-content']['storage'].elements['backend']['group']));
                _.each(schema['oae-content']['storage'].elements['backend']['group'], function(listOption) {
                    assert.ok(listOption.name);
                    assert.ok(listOption.value);
                });

                // Assert that there is a value 'amazons3' in the set
                var amazons3Values = _.filter(schema['oae-content']['storage'].elements['backend']['group'], function(option) { return option.value === 'amazons3'; });
                assert.equal(amazons3Values.length, 1);

                // Update one of the values
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-content/storage/backend': 'amazons3'}, function(err) {
                    assert.ok(!err);
                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                        assert.ok(!err);
                        assert.equal(config['oae-content']['storage']['backend'], 'amazons3');

                        // Clear the config and ensure it goes back to the default
                        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, ['oae-content/storage/backend'], function(err) {
                            assert.ok(!err);
                            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                                assert.ok(!err);
                                assert.equal(config['oae-content']['storage']['backend'], 'local');
                                return callback();
                            });
                        });
                    });
                });
            });
        });

    });
});
