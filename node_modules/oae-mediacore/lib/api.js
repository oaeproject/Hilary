/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var request = require('request');
var util = require('util');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');
var log = require('oae-logger').logger('oae-mediacore');
var Validator = require('oae-util/lib/validator').Validator;

var MediaCoreDAO = require('./internal/dao');
var MediaCoreUtil = require('./internal/util');

/**
 * Gets the html to put a MediaCore player in a page
 *
 * @param  {Context}    ctx                         Standard context object
 * @param  {String}     contentId                   The contentId of the content to play in the MediaCore player
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error if one occurred
 * @param  {Object}     callback.embedCode          A JSON object with one element, 'html', which is the html code that should be inserted in the page
 * @param  {String}     callback.embedCode.html     The HTML source that can be used to embed this content item's MediaCore video in a page
 */
var getEmbedCode = module.exports.getEmbedCode = function(ctx, contentId, callback) {
    ContentAPI.getContent(ctx, contentId, function(err, content) {
        if (err) {
            return callback(err);
        } else if (!content.previews || !content.previews.mediaCoreId) {
            return callback({'code': 400, 'msg': 'This content doesn\'t have a MediaCore ID'});
        }

        var mediaCoreConfig = MediaCoreUtil.getConfig(content.tenant.alias);

        // Get the embed code from MediaCore
        var getEmbedCodeUrl = util.format('/api2/media/%s/embedcode', content.previews.mediaCoreId);
        MediaCoreUtil.signedRequest(content.tenant.alias, 'get', getEmbedCodeUrl, null, null, function(err, res, body) {
            if (err) {
                return callback({'code': 500, 'msg': 'Error communicating with MediaCore server'});
            } else if (res.statusCode !== 200) {
                log().error({'code': res.statusCode, 'body': body}, 'An unexpected error occurred communicating with MediaCore');
                return callback({'code': 500, 'msg': util.format('There was an unexpected error communicating with the media server')});
            }

            var embedCode = null;
            try {
                embedCode = JSON.parse(body);
            } catch (parseErr) {
                log().error({
                    'err': parseErr,
                    'mediaCoreId': content.previews.mediaCoreId,
                    'body': body
                }, 'Error parsing MediaCore response as JSON');
                return callback({'code': 500, 'msg': 'Error parsing MediaCore response as JSON'});
            }

            // The iframe src comes back unsigned, so we have to sign it and put the new url in
            embedCode.html = embedCode.html.replace(/src=["']*([^\s"']*)["']*[\s>]/, function(match, url) {
                url = url.split('?');
                return 'src="' + MediaCoreUtil.getSignedUrl(url[0], url[1], mediaCoreConfig.keyId, mediaCoreConfig.secret) + '"' + match[match.length - 1];
            });

            return callback(null, embedCode);
        });
    });
};

/**
 * Update the thumbnail images from MediaCore for a given MediaCore item id. Since this simply updates data
 * from a secure source and does not ingest or release any information, it is not protected with a context.
 *
 * @param  {String}     mediaCoreId     The MediaCore item id
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var updateThumbnails = module.exports.updateThumbnails = function(mediaCoreId, callback) {
    var validator = new Validator();
    validator.check(mediaCoreId, {'code': 400, 'msg': util.format('Invalid mediaCoreId provided: %s', mediaCoreId)}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Get the content and revision id from the MediaCore id mappings
    MediaCoreDAO.getContentRevisionId(mediaCoreId, function(err, contentRevisionId) {
        if (err) {
            return callback(err);
        } else if (!contentRevisionId || !contentRevisionId.contentId || !contentRevisionId.revisionId) {
            log().warn('Attempted to update thumbnails for non-existing MediaCore ID: %s', mediaCoreId);
            return callback({'code': 404, 'msg': 'Non-existing MediaCore ID was provided'});
        }

        // Ensure the content item exists
        ContentDAO.Content.getContent(contentRevisionId.contentId, function(err, content) {
            if (err) {
                return callback(err);
            }

            // Ensure the revision exists
            ContentDAO.Revisions.getRevision(contentRevisionId.revisionId, function(err, revision) {
                if (err) {
                    return callback(err);
                }

                var mediaCoreConfig = MediaCoreUtil.getConfig(content.tenant.alias);

                // Get the thumbnail data from MediaCore
                var getThumbsUrl = util.format('/api2/media/%s/thumbs', mediaCoreId);
                MediaCoreUtil.signedRequest(content.tenant.alias, 'get', getThumbsUrl, null, null, function(err, res, body) {
                    if (err) {
                        return callback(err);
                    } else if (res.statusCode !== 200) {
                        log().error({'code': res.statusCode, 'body': body}, 'An unexpected error occurred communicating with MediaCore');
                        return callback({'code': 500, 'msg': util.format('There was an unexpected error communicating with the media server. Code: %s', res.statusCode)});
                    }

                    try {
                        body = JSON.parse(body);
                    } catch (parseErr) {
                        log().error({
                            'err': parseErr,
                            'mediaCoreId': mediaCoreId,
                            'body': body
                        }, 'Error parsing MediaCore response as JSON');
                        return callback({'code': 500, 'msg': 'Error parsing MediaCore response as JSON'});
                    }

                    var thumbnailUri = 'remote:' + body.sizes.l;
                    var previewMetadata = {
                        'smallUri': 'remote:' + body.sizes.l,
                        'mediumUri': 'remote:' + body.sizes['720p'],
                        'largeUri': 'remote:' + body.sizes['720p'],
                        'wideUri': 'remote:' + body.sizes['720p'],
                        'mediaCoreId': mediaCoreId
                    };

                    // Store the thumbnail info on the content item
                    ContentDAO.Previews.storeMetadata(content, contentRevisionId.revisionId, ContentConstants.previews.DONE, thumbnailUri, null, previewMetadata, {}, function(err){
                        if (err) {
                            return callback(err);
                        }

                        // Indicate that we've just updated a preview
                        ContentAPI.emit(ContentConstants.events.UPDATED_CONTENT_PREVIEW, null, content.id, content);

                        return callback();
                    });
                });
            });
        });
    });
};
