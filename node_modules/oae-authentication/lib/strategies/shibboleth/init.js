/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var SamlStrategy = require('passport-saml').Strategy;

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var Redis = require('oae-util/lib/redis');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

var SAMLParserJarPath;

module.exports = function(config) {
    // Store the path where we have the SAML Jar file.
    SAMLParserJarPath = config.saml.SAMLParserJarPath;

    // Build up the OAE strategy
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias) {
        return AuthenticationConfig.getValue(tenantAlias, AuthenticationConstants.providers.SHIBBOLETH, 'enabled');
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant) {
        // We fetch the config values *in* the getPassportStrategy so it can be re-configured at run-time.
        // The endpoint we should redirect to.
        var idpUrl = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'idpUrl');

        // The IdP's public key
        var idpCert = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'idpPublicKey');

        // The entity ID we registered our Service Provider with.
        var entityID = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'spEntityID');

        // The private/public keypair for our SP.
        var privateKey = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'spPrivateKey');
        var cert = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'spCertificate');
        var certSubjectName = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'spCertificateSubjectName');

        var strategyId = AuthenticationUtil.getStrategyId(tenant, AuthenticationConstants.providers.SHIBBOLETH);

        var passportStrategy = new SamlStrategy({
            'isShibboleth': true,
            // Although it's technically possible to run a Shibboleth SP on http, we enforce that it's running behind https.
            // This is to avoid re-registering the SP metadata when the tenant switches to https.
            'callbackUrl': 'https://' + tenant.host + '/api/auth/shibboleth/callback',
            'entryPoint': idpUrl,
            'issuer': entityID,
            'cert': idpCert,
            'converter': SAMLParserJarPath,
            'publicCert': cert,
            'publicCertSubjectName': certSubjectName,
            'privateCert': privateKey,
            'identifierFormat': null,

            // The anti-replay store is designed to thwart replay attack.
            // It allows for detection of messages that got somehow intercepted and replayed.
            // The SamlStrategy's default anti-replay attack mechanism doesn't work in a cluster (it uses a local cache.)
            // We implement a Redis based anti-replay mechanism. This works because all app nodes talk to the same Redis instance.
            // A key might look like:
            //     shibboleth:cam-shibboleth:0ebec0b63b3732b3e3bd
            // The Redis keys will expire after 5 minutes.
            'antiReplayStore': {
                'get': function(id, callback) {
                    var key = util.format('shibboleth:%s:%s', strategyId, id);
                    Redis.getClient().get(key, callback);
                },
                'set': function(id, data, callback) {
                    var key = util.format('shibboleth:%s:%s', strategyId, id);
                    Redis.getClient().setex(key, 5 * 60, data, callback);
                },
                'del': function(id, callback) {
                    var key = util.format('shibboleth:%s:%s', strategyId, id);
                    Redis.getClient().del(key, callback);
                }
            }
        }, function(profile, done) {

            log().trace({
                'tenant': tenant,
                'profile': profile
            }, 'Received SHIBBOLETH authentication callback.');

            // See https://wiki.umn.edu/ShibAuth/AttributeList for a full attribute list.
            var username = _getSamlAttributeValue('eduPersonPrincipalName', profile);
            var displayName = _getSamlAttributeValue('displayName', profile) || _getSamlAttributeValue('eduPersonNickname', profile) || _getSamlAttributeValue('cn', profile) || _getSamlAttributeValue('eduPersonPrincipalName', profile);
            var opts = {};

            var email = _getSamlAttributeValue('mail', profile);
            if (email) {
                opts.email = email;
            }

            var context = new Context(tenant, null);
            AuthenticationAPI.getOrCreateUser(context, AuthenticationConstants.providers.SHIBBOLETH, username, displayName, opts, done);
        });
        return passportStrategy;
    };

    // Register our strategy.
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.SHIBBOLETH, strategy);
};

/**
 * Get the value for a SAML attribute.
 * This will look up the readable `key` as the SAML2 URI in the `profile` hash.
 * If it couldn't be found the SAML1 URI will be tried.
 * If that couldn't be found either, null will be returned.
 *
 * @param  {String}     key     The human readable key as defined in the `AuthenticationConstants.SAML` hash.
 * @param  {Object}     data    The hash where the value can be found.
 * @return {String}             The value
 * @api private
 */
var _getSamlAttributeValue = function(key, data) {
    if (AuthenticationConstants.SAML[key]) {
        if (data[AuthenticationConstants.SAML[key].saml2]) {
            return data[AuthenticationConstants.SAML[key].saml2];
        } else if (data[AuthenticationConstants.SAML[key].saml1]) {
            return data[AuthenticationConstants.SAML[key].saml1];
        } else {
            return null;
        }
    } else {
        return null;
    }
};
