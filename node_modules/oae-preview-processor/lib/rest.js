/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var log = require('oae-logger').logger('preview-processor-rest');
var OAE = require('oae-util/lib/oae');
var Util = require('oae-util/lib/util');

var PreviewProcessorAPI = require('oae-preview-processor');

/**
 * @REST postContentReprocessPreviews
 *
 * Reprocess previews for the content items that match a set of filters
 *
 * @Server      admin
 * @Method      POST
 * @Path        /content/reprocessPreviews
 * @FormParam   {String[]}          [content_createdBy]           Filter content based on who it was created by
 * @FormParam   {string[]}          [content_resourceSubType]     Filter content based on its resourceSubType                                               [collabdoc,file,link]
 * @FormParam   {string[]}          [content_previewsStatus]      Filter content based on the status of the previews processing                             [ignored,error]
 * @FormParam   {number}            [revision_createdAfter]       Filter those revisions who were created after a certain timestamp in ms since epoch
 * @FormParam   {number}            [revision_createdBefore]      Filter those revisions who were created before a certain timestamp in ms since epoch
 * @FormParam   {string[]}          [revision_createdBy]          Filter the revisions based on who it was created by
 * @FormParam   {string[]}          [revision_mime]               Filter based on the mime type of a file
 * @FormParam   {string[]}          [revision_previewsStatus]     Filter the revisions based on their previews status                                       [ignored,error]
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/content/reprocessPreviews', function(req, res) {
    req.telemetryUrl = '/api/content/reprocessPreviews';
    var filters = {};

    _.each(req.body, function(value, name) {
        if (name.indexOf('content_') === 0) {
            filters.content = filters.content || {};
            filters.content[name.substr(8)] = value;
        } else if (name.indexOf('revision_') === 0) {
            filters.revision = filters.revision || {};
            filters.revision[name.substr(9)] = value;
        }
    });

    PreviewProcessorAPI.reprocessPreviews(req.ctx, filters, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200);
    });
});

/*!
 * Reprocess the preview of a revision
 *
 * @param  {Request}    The express request
 * @param  {Response}   The express response
 * @api private
 */
var _handleReprocessPreview = function(req, res) {
    PreviewProcessorAPI.reprocessPreview(req.ctx, req.params.contentId, req.params.revisionId, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
};

/**
 * @REST postContentContentIdRevisionRevisionIdReprocessPreview
 *
 * Reprocess the preview for a single content items
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /content/{contentId}/revision/{revisionId}/reprocessPreview
 * @PathParam   {string}        contentId       The id of the content item for which to reprocess the preview
 * @PathParam   {string}        revisionId      The id of the revision to reprocess
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/content/:contentId/revision/:revisionId/reprocessPreview', _handleReprocessPreview);
OAE.tenantRouter.on('post', '/api/content/:contentId/revision/:revisionId/reprocessPreview', _handleReprocessPreview);
