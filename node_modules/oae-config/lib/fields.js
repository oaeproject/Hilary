/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * Contains a set of fields that are grouped together in an ArrayFieldSet.
 * The ArrayFieldSet can be used to define schemas
 * @param   {Object}  An object containing one or more key-value pairs where the value is a field specified in fields.js
 * @return  {Object}  Returns the fieldset and all key-value pairs in it
 */
var ArrayFieldSet = module.exports.ArrayFieldSet = function(fieldSet) {
    return fieldSet;
};

/**
 * Returns the configuration object for a boolean type field
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {Boolean}    defaultValue       The default value of the element
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var Boolean = module.exports.Boolean = function(name, description, defaultValue, options) {
    options = options || {
        tenantOverride: true
    };
    return {
        'description': description,
        'defaultValue': defaultValue,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'boolean'
    };
};

/**
 * Returns the configuration object for a text input type field
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {String}     defaultValue       The default value of the element
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var Text = module.exports.Text = function(name, description, defaultValue, options) {
    options = options || {
        tenantOverride: true,
        validate: {
            'required': true
        }
    };
    return {
        'description': description,
        'defaultValue': defaultValue,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'text',
        'validate': options.validate
    };
};

/**
 * Returns the configuration object for a textarea type field
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {String}     defaultValue       The default value of the element
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var Textarea = module.exports.Textarea = function(name, description, defaultValue, options) {
    options = options || {
        tenantOverride: true,
        validate: {
            'required': true
        }
    };
    return {
        'description': description,
        'defaultValue': defaultValue,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'textarea',
        'validate': options.validate
    };
};

/**
 * Returns the configuration object for a radio button group type field
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {String}     defaultValue       The default value of the element
 * @param    {Array}      group              An array of options for the radio button group. e.g. {'name': 'choice 1', 'value': 'ch1'}
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var Radio = module.exports.Radio = function(name, description, defaultValue, group, options) {
    options = options || {
        tenantOverride: true
    };
    return {
        'description': description,
        'defaultValue': defaultValue,
        'group': group,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'radio'
    };
};

/**
 * Returns the configuration object for a drop down list type field
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {String}     defaultValue       The default value of the element
 * @param    {Array}      list               An array of options for the dorp down list. e.g. {'name': 'choice 1', 'value': 'ch1'}
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var List = module.exports.List = function(name, description, defaultValue, list, options) {
    options = options || {
        tenantOverride: true
    };
    return {
        'description': description,
        'defaultValue': defaultValue,
        'list': list,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'list'
    };
};

/**
 * Returns the configuration object for an Array of options that has an Array of configuration values
 *
 * e.g.
 * roleCanShareContent: {
 *     'public': ['editor', 'viewer', 'everyone', 'anon'],
 *     'everyone': ['editor', 'viewer', 'everyone'],
 *     'private': ['editor', 'viewer']
 * }
 *
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {Array{}}    optionArr          The options that are configurable
 * @param    {Array{}}    optionArr          The configurable choices for the optionArr. Every object in the optionArr will get all choices in the choiceArr.
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var ArrayMultipleChoice = module.exports.ArrayMultipleChoice = function(name, description, defaultValue, optionArr, choiceArr, options) {
    options = options || {
        tenantOverride: true
    };
    return {
        'description': description,
        'defaultValue': defaultValue,
        'optionArr': optionArr,
        'choiceArr': choiceArr,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'arraymultiplechoice'
    };
};

/**
 * Returns the configuration object for an Array that has the possibility to be expanded on through the UI
 *
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {Array{}}    obj                The Object that can be extended
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var ExpandableObject = module.exports.ExpandableObject = function(name, description, obj, options) {
    options = options || {
        tenantOverride: true
    };
    return {
        'description': description,
        'defaultValue': obj,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'expandableobject'
    };
};

/**
 * Returns the configuration object for a tree structure that can be interpreted by the jstree plugin
 *
 * @param    {String}     name               The name of the element shown in the UI as a header
 * @param    {String}     description        The description that will be shown next to the element
 * @param    {Array{}}    tree               The Array of objects that form a structured tree
 * @param    {Object}     [options]            Object with extra options available for the current field (tenantOverride)
 */
var TreeStructure = module.exports.TreeStructure = function(name, description, tree, options) {
    options = options || {
        tenantOverride: true
    };
    return {
        'description': description,
        'defaultValue': tree,
        'name': name,
        'tenantOverride': options.tenantOverride,
        'type': 'treestructure'
    };
};
