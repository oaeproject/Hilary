/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var Context = require('oae-context').Context;
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var log = require('oae-logger').logger('oae-content');

/////////////////////
// POST ACTIVITIES //
/////////////////////

/*!
 * Post a content-create activity when a user creates a content item.
 */
ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, members) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.contentId);
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(activitySeed);
});

/*!
 * Post either a content-update or content-update-visibility activity when a user updates a content item's metadata.
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContent.contentId);

    // We discriminate between general updates and visibility changes. If the visibility has changed, we fire a visibility changed activity *instead* of an update activity
    var activityType = null;
    if (newContent.visibility === oldContent.visibility) {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE;
    } else {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(activitySeed);
});

/*!
 * Post a content-revision activity when a user uploads a new file body
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, content, fileInfo) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.contentId);
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(activitySeed);
});

/*!
 * Post a content-comment activity when a user comments on a content item
 */
ContentAPI.on(ContentConstants.events.CREATED_COMMENT, function(ctx, comment) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('content-comment', comment.commentId, {'comment': comment});
    var targetResource = new ActivityModel.ActivitySeedResource('content', comment.contentId);
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_COMMENT, millis, ActivityConstants.verbs.POST, actorResource, objectResource, targetResource);
    ActivityAPI.postActivity(activitySeed); 
});

/*!
 * Post a content-share or content-add-to-library activity based on content sharing
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, contentId, permissionChanges) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('content', contentId);
    var activitySeeds = [];

    // TODO: remove during merge
    if (!permissionChanges) {
        throw new Error('permission changes is not getting set on UPDATED_CONTENT_MEMBERS event.');
    }

    // Aggregate all users this content object was shared with into 'target' entities
    var principalIds = _.keys(permissionChanges);
    for (var i = 0; i < principalIds.length; i++) {
        var principalId = principalIds[i];
        if (permissionChanges[principalId]) {
            var targetResourceType = (PrincipalsUtil.isGroup(principalId)) ? 'group' : 'user';
            var targetResource = new ActivityModel.ActivitySeedResource(targetResourceType, principalId);
            if (targetResource.resourceId === actorResource.resourceId) {
                // Users can't "share" with themselves, they actually "add it to their library"
                ActivityAPI.postActivity(new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY, millis, ActivityConstants.verbs.ADD, actorResource, objectResource));
            } else {
                // A user shared content with some other user, fire the content share activity
                ActivityAPI.postActivity(new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_SHARE, millis, ActivityConstants.verbs.SHARE, actorResource, objectResource, targetResource));
            }
        }
    }
});

////////////////////////
// ACTIVITY PRODUCERS //
////////////////////////

/*!
 * Produces a 'content' activity entity
 */
ActivityAPI.registerActivityEntityProducer('content', function(activityType, entityType, resource, callback) {
    // TODO: When _getContent is no longer exposed on ContentAPI, there should be something like a ContentDAO.getContent available to do get content w/o permission checks instead
    ContentAPI._getContent(resource.resourceId, function(err, content) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(content.tenant, function(err, tenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + tenant.host;
            var globalId = httpHost + '/api/content/' + content.contentId;
            var profileUrl = httpHost + '/content/' + content.contentId;
            var isPrivate = (content.visibility === 'private');

            var opts = {};
            // TODO: Change this to content.displayName when Issue #284 is merged
            opts.displayName = content.name;
            opts.url = profileUrl;
            // TODO: Use previews when it is merged.
            opts.image = new ActivityModel.ActivityMediaLink('local://2012/11/28/17/image/to/come.png', 35, 35);

            opts.ext = {};
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = content.visibility;
            opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_TYPE] = content.contentType;
            opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_MIMETYPE] = content.mimeType;

            var propagation = (!isPrivate) ? ActivityConstants.entityPropagation.ALL : ActivityConstants.entityPropagation.OWN;
            var entity = new ActivityModel.ActivityEntity('content', globalId, opts);
            return callback(null, entity, propagation);
        });
    });
});

/*!
 * Produces an activity entity that represents a comment that was posted
 */
ActivityAPI.registerActivityEntityProducer('content-comment', function(activityType, entityType, resource, callback) {
    // TODO: When _getContent is no longer exposed on ContentAPI, there should be something like a ContentDAO.getContent available to do get content w/o permission checks instead
    var comment = resource.resourceData.comment;
    ContentAPI._getContent(comment.contentId, function(err, content) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(content.tenant, function(err, tenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + tenant.host;
            var globalId = httpHost + '/api/content/' + content.contentId + '/comments/' + resource.resourceId
            var commentUrl = httpHost + '/content/' + content.contentId;
            var isPrivate = (content.visibility === 'private');

            var opts = {};
            opts.url = commentUrl;
            opts.content = comment.body;

            opts.ext = {};

            var propagation = (!isPrivate) ? ActivityConstants.entityPropagation.ALL : ActivityConstants.entityPropagation.OWN;
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = content.visibility;

            // We attach the parent content id to the comment item
            opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_ID] = content.contentId;

            var entity = new ActivityModel.ActivityEntity('content-comment', globalId, opts);
            return callback(null, entity, propagation);
        });
    });
});

//////////////////////
// ACTIVITY ROUTERS //
//////////////////////

/*!
 * Routes an activity that occurred for a content activity entity
 */
ActivityAPI.registerActivityRouter('content', function(activityType, entityType, activityEntity, callback) {
    // Extract the OAE ID from the activity object to get the content id
    return _routeContent(activityType, entityType, activityEntity[ActivityConstants.properties.OAE_ID], callback);
});

/*!
 * Routes an activity that occurred for a comment activity entity
 */
ActivityAPI.registerActivityRouter('content-comment', function(activityType, entityType, activityEntity, callback) {
    // Extract the parent content id from the activity object, as the routes are identical
    return _routeContent(activityType, entityType, activityEntity[ContentConstants.activity.PROP_OAE_CONTENT_ID], callback);
});

/**
 * Produce routes for the given content item.
 *
 * @param   {String}    activityType        The type of activity for which the routes are being produced
 * @param   {String}    entityType          The type of entity the content item is (e.g., actor, object, target)
 * @param   {String}    contentId           The ID of the content item for which to produce routes
 * @param   {Function}  callback            Invoked when the process completes
 * @param   {Object}    callback.err        An error that occurred, if any
 * @param   {String[]}  callback.routes     The routes for the given content item
 */
var _routeContent = function(activityType, entityType, contentId, callback) {
    // Get lists of all the direct and indirect members of this content, keyed by their role
    ActivityUtil.getAllAuthzMembersByRole(contentId, function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        // When content is shared with another user (or a user adds it to their library), the 'viewers' of that content object are not interested
        var isShareActivity = (activityType === ContentConstants.activity.ACTIVITY_CONTENT_SHARE || activityType === ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY);
        if (isShareActivity && entityType === ActivityConstants.entityTypes.OBJECT) {
            delete membersByRole[ContentConstants.roles.VIEWER];
        }

        // The routes are the union of all the members that we haven't filtered out. In other words, all indirect members of the content
        var routes = _.uniq(_.flatten(_.values(membersByRole)));
        return callback(null, routes);
    });
};
