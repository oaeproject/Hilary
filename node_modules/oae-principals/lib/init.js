/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var LoginId = require('oae-authentication/lib/model').LoginId;
var PrincipalsAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var log = require('oae-logger').logger('oae-principals');
var User = require('oae-principals/lib/model').User;

module.exports = function(config, callback) {

    // Initialize activity capabilities
    require('./activity');

    // Initialize search capabilities
    require('oae-principals/lib/search');

    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        ensureGlobalAdmin(config, callback);
    });
};

/**
 * Ensure that the all of the principal-related schemas are created. If they already exist, this method will not
 * do anything
 *
 * @param  {Function}    callback       A function(err), specifying whether or not there was an error creating the schema.
 * @param  {Object}      callback.err   Error object, containing the error message
 * @api private
 */
var ensureSchema = function(callback) {
    // Both user and group information will be stored inside of the Principals CF
    Cassandra.createColumnFamily('Principals', 'CREATE COLUMNFAMILY Principals (principalId text PRIMARY KEY, tenantAlias text, displayName text, visibility text);', callback);
};

/**
 * Ensure that the global administrative user exists, create them if they do not.
 *
 * @param  {Object}      config          The server configuration
 * @param  {Function}    callback        Invoked when the process completes
 * @param  {Object}      callback.err    An error that occurred, if any
 */
var ensureGlobalAdmin = function(config, callback) {
    // We'll create/get 1 global admin account in the internal global tenant that can be used
    // to create tenants/other global accounts.
    var globalTenant = TenantsAPI.getCachedTenantByAlias(config.servers.globalAdminAlias);
    var globalLoginId = new LoginId(globalTenant.alias, AuthenticationConstants.providers.LOCAL, 'administrator', { 'password': 'administrator' });

    // Mock a global admin user so we can create a proper global admin in the DB.
    var globalUser = new User(globalTenant.alias, 'u:' + globalTenant.alias + ':admin', 'Global Administrator', {
        visibility: 'private',
        isGlobalAdmin: true
    });
    var globalContext = new Context(globalTenant, globalUser);

    AuthenticationAPI.getUserIdFromLoginId(globalLoginId.tenantAlias, globalLoginId.provider, globalLoginId.externalId, function(err, userId) {
        if (err) {
            return callback(err);
        }

        // The global admin does not exist. create it
        if (!userId) {

            AuthenticationAPI.createUser(globalContext, globalLoginId, globalUser.displayName, { visibility: 'private' }, function(err, createdUser) {
                if (err) {
                    return callback(err);
                }

                // Promote them to administrator
                PrincipalsAPI.setGlobalAdmin(globalContext, createdUser.id, true, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    log().info('Admin account created with ID "%s" and username "%s".', createdUser.id, 'administrator');

                    return callback();
                });
            });
        } else {
            return callback();
        }
    });
};
