/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var TestsUtil = require('oae-tests/lib/util');

var LibraryAPI = require('oae-library');

describe('Library Indexing', function() {

    describe('#registerLibraryIndex', function() {

        /**
         * Test that verifies we cannot register two library indexes of the same name
         */
        it('verify cannot register two library indexes of the same name', function(callback) {
            var testName = TestsUtil.generateRandomText();
            LibraryAPI.Index.registerLibraryIndex(testName, {'pageResources': function() {}});

            assert.throws(function() {
                LibraryAPI.Index.registerLibraryIndex(testName, {'pageResources': function() {}});
            });

            return callback();
        });

        /**
         * Test that verifies we cannot register a library with no pageResources function
         */
        it('verify cannot register a library index that has no ability to page resources', function(callback) {
            assert.throws(function() {
                LibraryAPI.Index.registerLibraryIndex(TestsUtil.generateRandomText(), {});
            });

            return callback();
        });
    });

    describe('#purge', function() {

        /**
         * Test that verifies purging a library index results in it being rebuilt
         */
        it('verify a library index is cleared when purged and then rebuilt when queried', function(callback) {
            var testName = TestsUtil.generateRandomText();
            LibraryAPI.Index.registerLibraryIndex(testName, {
                'pageResources': function(libraryId, start, limit, callback) {
                    // Just return a static set of resources
                    var resources = null;
                    if (!start) {
                        resources = [
                            {
                                'id': 'a',
                                'rank': 1,
                                'tenant': 'oae',
                                'visibility': 'private'
                            },
                            {
                                'id': 'b',
                                'rank': 2,
                                'tenant': 'oae',
                                'visibility': 'loggedin'
                            },
                            {
                                'id': 'c',
                                'rank': 3,
                                'tenant': 'oae',
                                'visibility': 'public'
                            }
                        ];
                    }

                    return callback(null, resources, null);
                }
            });

            // Ensure that some arbitrary library in this index is currently stale
            LibraryAPI.Index.isStale(testName, 'somelibrary', 'private', function(err, isStale) {
                assert.ok(!err);
                assert.strictEqual(isStale, true);
                LibraryAPI.Index.isStale(testName, 'somelibrary', 'loggedin', function(err, isStale) {
                    assert.ok(!err);
                    assert.strictEqual(isStale, true);
                    LibraryAPI.Index.isStale(testName, 'somelibrary', 'public', function(err, isStale) {
                        assert.ok(!err);
                        assert.strictEqual(isStale, true);

                        // Query the index and make sure we get the items
                        LibraryAPI.Index.list(testName, 'somelibrary', 'private', {'limit': 10}, function(err, itemIds) {
                            assert.ok(!err);
                            assert.strictEqual(itemIds.length, 3);
                            assert.strictEqual(itemIds[0], 'c');
                            assert.strictEqual(itemIds[1], 'b');
                            assert.strictEqual(itemIds[2], 'a');

                            // Ensure that each library index list is no longer stale
                            LibraryAPI.Index.isStale(testName, 'somelibrary', 'private', function(err, isStale) {
                                assert.ok(!err);
                                assert.strictEqual(isStale, false);
                                LibraryAPI.Index.isStale(testName, 'somelibrary', 'loggedin', function(err, isStale) {
                                    assert.ok(!err);
                                    assert.strictEqual(isStale, false);
                                    LibraryAPI.Index.isStale(testName, 'somelibrary', 'public', function(err, isStale) {
                                        assert.ok(!err);
                                        assert.strictEqual(isStale, false);

                                        // Purge the full library
                                        LibraryAPI.Index.purge(testName, 'somelibrary', function(err) {
                                            assert.ok(!err);

                                            // Ensure that each library index list is stale once again
                                            LibraryAPI.Index.isStale(testName, 'somelibrary', 'private', function(err, isStale) {
                                                assert.ok(!err);
                                                assert.strictEqual(isStale, true);
                                                LibraryAPI.Index.isStale(testName, 'somelibrary', 'loggedin', function(err, isStale) {
                                                    assert.ok(!err);
                                                    assert.strictEqual(isStale, true);
                                                    LibraryAPI.Index.isStale(testName, 'somelibrary', 'public', function(err, isStale) {
                                                        assert.ok(!err);
                                                        assert.strictEqual(isStale, true);

                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
