/*
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model.user').User;

describe('LTI tools', function() {
  // Rest context that can be used to perform requests as different types of users
  var anonymousRestContext = null;
  var camAdminRestContext = null;
  var janeRestContext = null;

  /**
   * Function that will create a user that will be used inside of the tests
   */
  before(function(callback) {
    // Create all the REST contexts before each test
    anonymousRestContext = TestsUtil.createTenantRestContext(
      global.oaeTests.tenants.cam.host,
    );
    camAdminRestContext = TestsUtil.createTenantAdminRestContext(
      global.oaeTests.tenants.cam.host,
    );

    // Create the REST context for our test user
    TestsUtil.generateTestUsers(camAdminRestContext, 1, function(
      err,
      users,
      jane,
    ) {
      assert.ok(!err);
      janeRestContext = jane.restContext;

      // Add the full user id onto the REST context for use inside of this test
      janeRestContext.user = jane.user;
      return callback();
    });
  });

  describe('Create LTI tool', function() {
    /**
     * Test that verifies that LTI tool creation is successful when all of the parameters have been provided
     */
    it('verify that LTI tool creation succeeds given a valid request', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var launchUrl = 'http://lti.launch.url';
          var secret = 'secret';
          var key = '12345';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            launchUrl,
            secret,
            key,
            'LTI tool title',
            'LTI tool description',
            function(err, ltiTool) {
              assert.ok(!err);
              assert.equal(ltiTool.groupId, group.id);
              assert.equal(ltiTool.launchUrl, launchUrl);
              assert.equal(ltiTool.displayName, 'LTI tool title');
              assert.equal(ltiTool.description, 'LTI tool description');
              return callback();
            },
          );
        },
      );
    });

    /**
     * Test that verifies that a LTI tool can be created without a description
     */
    it('verify that missing description is accepted', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var launchUrl = 'http://lti.launch.url';
          var secret = 'secret';
          var key = '12345';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            launchUrl,
            secret,
            key,
            'LTI tool title',
            null,
            function(err, toolObject) {
              assert.ok(!err);
              assert.equal(toolObject.description, '');

              // Verify that an empty description is acceptable as well
              RestAPI.LtiTool.createLtiTool(
                camAdminRestContext,
                group.id,
                launchUrl,
                secret,
                key,
                'LTI tool title',
                '',
                function(err, toolObject) {
                  assert.ok(!err);
                  assert.equal(toolObject.description, '');
                  return callback();
                },
              );
            },
          );
        },
      );
    });

    /**
     * Test that verifies that creating a LTI tool with no launchUrl is not possible
     */
    it('verify that missing launchUrl is not accepted', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var secret = 'secret';
          var key = '12345';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            '',
            secret,
            key,
            'LTI tool title',
            null,
            function(err, toolObject) {
              assert.ok(err);
              assert.equal(err.code, 400);
              assert.equal(
                err.msg,
                'You need to provide a launch URL for this LTI tool',
              );
              return callback();
            },
          );
        },
      );
    });

    /**
     * Test that verifies that creating a LTI tool with no OAUTH secret is not possible
     */
    it('verify that missing OAUTH secret is not accepted', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var launchUrl = 'http://lti.launch.url';
          var key = '12345';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            launchUrl,
            null,
            key,
            'LTI tool title',
            null,
            function(err, toolObject) {
              assert.ok(err);
              assert.equal(err.code, 400);
              assert.equal(
                err.msg,
                'You need to provide an OAUTH secret for this LTI tool',
              );
              return callback();
            },
          );
        },
      );
    });

    /**
     * Test that verifies that creating a LTI tool with no OAUTH consumer key is not possible
     */
    it('verify that missing OAUTH consumer key is not accepted', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var launchUrl = 'http://lti.launch.url';
          var secret = 'secret';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            launchUrl,
            secret,
            null,
            'LTI tool title',
            null,
            function(err, toolObject) {
              assert.ok(err);
              assert.equal(err.code, 400);
              assert.equal(
                err.msg,
                'You need to provide an OAUTH consumer key for this LTI tool',
              );
              return callback();
            },
          );
        },
      );
    });

    /**
     * Test that verifies that a non-manager of a group can not create a LTI tool
     */
    it('verify that a non-manager can not create LTI tool', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var launchUrl = 'http://lti.launch.url';
          var secret = 'secret';
          var key = '12345';
          RestAPI.LtiTool.createLtiTool(
            anonymousRestContext,
            group.id,
            launchUrl,
            secret,
            key,
            'LTI tool title',
            'LTI tool description',
            function(err, toolObject) {
              assert.ok(err);
              assert.equal(err.code, 401);
              assert.equal(
                err.msg,
                'The current user is not authorized to create an LTI tool',
              );
              return callback();
            },
          );
        },
      );
    });

    /**
     * Test that verifies LTI tools can not be created in deleted groups
     */
    it('verify that a LTI tool can not be created in a deleted group', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          RestAPI.Group.deleteGroup(camAdminRestContext, group.id, function(
            err,
          ) {
            assert.ok(!err);
            var launchUrl = 'http://lti.launch.url';
            var secret = 'secret';
            var key = '12345';
            RestAPI.LtiTool.createLtiTool(
              camAdminRestContext,
              group.id,
              launchUrl,
              secret,
              key,
              'LTI tool title',
              'LTI tool description',
              function(err, toolObject) {
                assert.ok(err);
                assert.equal(err.code, 404);
                assert.equal(err.msg, "Couldn't find group: " + group.id);
                return callback();
              },
            );
          });
        },
      );
    });
  });

  describe('Get LTI tool', function() {
    /**
     * Test that verifies that an existing LTI tool can be successfully retrieved and launch data
     * created
     */
    it('verify retrieved LTI tool launch data', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          var launchUrl = 'http://lti.launch.url';
          var secret = 'secret';
          var key = '12345';
          var title = 'LTI tool title';
          var description = 'LTI tool description';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            launchUrl,
            secret,
            key,
            title,
            description,
            function(err, tool) {
              assert.ok(!err);
              RestAPI.Group.joinGroup(janeRestContext, group.id, function(err) {
                assert.ok(!err);
                // Get the LTI tool and verify its model
                RestAPI.LtiTool.getLtiTool(
                  janeRestContext,
                  group.id,
                  tool.id,
                  function(err, data) {
                    assert.ok(!err);
                    var ltiLaunchData = data.launchParams;
                    assert.equal(ltiLaunchData['oauth_consumer_key'], key);
                    assert.equal(
                      ltiLaunchData['lti_message_type'],
                      'basic-lti-launch-request',
                    );
                    assert.equal(ltiLaunchData['lti_version'], 'LTI-1p0');
                    assert.equal(
                      ltiLaunchData['tool_consumer_info_product_family_code'],
                      'OAE',
                    );
                    assert.equal(ltiLaunchData['resource_link_id'], tool.id);
                    assert.equal(ltiLaunchData['resource_link_title'], title);
                    assert.equal(
                      ltiLaunchData['resource_link_description'],
                      description,
                    );
                    assert.equal(
                      ltiLaunchData['user_id'],
                      group.id + ':' + janeRestContext.user.id,
                    );
                    assert.equal(ltiLaunchData['context_id'], group.id);
                    assert.equal(
                      ltiLaunchData['lis_person_email_primary'],
                      janeRestContext.user.email,
                    );
                    assert.equal(ltiLaunchData['roles'], 'Learner');
                    return callback();
                  },
                );
              });
            },
          );
        },
      );
    });

    /**
     * Test that verifies that a non-existing LTI tool cannot be retrieved
     */
    it('verify non existing LTI tool can not be retrieved', function(callback) {
      // Invalid group identifier
      RestAPI.LtiTool.getLtiTool(
        camAdminRestContext,
        'g:camtest:not-exists',
        '12345',
        function(err, ltiTool) {
          assert.ok(err);
          assert.equal(err.code, 404);
          assert.ok(!ltiTool);

          RestAPI.Group.createGroup(
            camAdminRestContext,
            'This is a group',
            null,
            'public',
            'yes',
            [],
            [],
            function(err, group) {
              // Non existing tool
              RestAPI.LtiTool.getLtiTool(
                camAdminRestContext,
                group.id,
                'not-a-tool',
                function(err, ltiTool) {
                  assert.ok(err);
                  assert.equal(err.code, 404);
                  assert.ok(!ltiTool);
                  return callback();
                },
              );
            },
          );
        },
      );
    });
  });

  describe('Get LTI tools for a group', function() {
    /**
     * Test that verifies that all LTI tools linked to a group can be successfully retrieved
     */
    it('verify retrieving LTI tools for a group', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          var secret = 'secret';
          var title = 'LTI tool title';
          var description = 'LTI tool description';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            'http://lti.launch1.url',
            secret,
            '12345',
            title,
            description,
            function(err, tool1) {
              assert.ok(!err);
              RestAPI.LtiTool.createLtiTool(
                camAdminRestContext,
                group.id,
                'http://lti.launch2.url',
                secret,
                '12346',
                title,
                description,
                function(err, tool2) {
                  assert.ok(!err);
                  // Get the LTI tools for the group
                  RestAPI.LtiTool.getLtiTools(
                    camAdminRestContext,
                    group.id,
                    function(err, ltiTools) {
                      assert.ok(!err);
                      assert.equal(ltiTools.results.length, 2);
                      var tool = ltiTools.results[0];
                      assert.equal(tool.groupId, group.id);
                      // Check that OAUTH secret is not included in the returned object
                      assert.ok(!tool.secret);
                      var ids = _.pluck(ltiTools.results, 'id');
                      assert.ok(_.contains(ids, tool1.id));
                      assert.ok(_.contains(ids, tool2.id));
                      return callback();
                    },
                  );
                },
              );
            },
          );
        },
      );
    });

    /**
     * Test that verifies that LTI tools are not retrieved for erroneous groups
     */
    it('verify retrieving LTI tools are not retrieved for erroneous groups', function(callback) {
      // Test that tools are not retrieved for non-existing groups
      var notExists = 'g:camtest:not-exists';
      RestAPI.LtiTool.getLtiTools(camAdminRestContext, notExists, function(
        err,
        ltiTools,
      ) {
        assert.ok(err);
        assert.equal(err.code, 404);
        assert.equal(err.msg, 'Could not find principal with id ' + notExists);
        // Test that tools are not retrieved for deleted groups
        RestAPI.Group.createGroup(
          camAdminRestContext,
          'This is a group',
          null,
          'public',
          'yes',
          [],
          [],
          function(err, group) {
            var secret = 'secret';
            var title = 'LTI tool title';
            var description = 'LTI tool description';
            RestAPI.LtiTool.createLtiTool(
              camAdminRestContext,
              group.id,
              'http://lti.launch1.url',
              secret,
              '12345',
              title,
              description,
              function(err, tool1) {
                assert.ok(!err);
                RestAPI.LtiTool.createLtiTool(
                  camAdminRestContext,
                  group.id,
                  'http://lti.launch2.url',
                  secret,
                  '12346',
                  title,
                  description,
                  function(err, tool2) {
                    assert.ok(!err);
                    RestAPI.Group.deleteGroup(
                      camAdminRestContext,
                      group.id,
                      function(err) {
                        assert.ok(!err);
                        RestAPI.LtiTool.getLtiTools(
                          camAdminRestContext,
                          group.id,
                          function(err, ltiTools) {
                            assert.ok(err);
                            assert.equal(err.code, 404);
                            assert.equal(
                              err.msg,
                              "Couldn't find group: " + group.id,
                            );
                            // Test that an empty array is returned for a group with no tools
                            RestAPI.Group.createGroup(
                              camAdminRestContext,
                              'This is a group',
                              null,
                              'public',
                              'yes',
                              [],
                              [],
                              function(err, group) {
                                RestAPI.LtiTool.getLtiTools(
                                  camAdminRestContext,
                                  group.id,
                                  function(err, ltiTools) {
                                    assert.ok(!err);
                                    assert.equal(ltiTools.results.length, 0);
                                    return callback();
                                  },
                                );
                              },
                            );
                          },
                        );
                      },
                    );
                  },
                );
              },
            );
          },
        );
      });
    });
  });

  describe('Delete LTI tool', function() {
    /**
     * Test that verifies that LTI tools can be deleted
     */
    it('verify that LTI tools can be deleted', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var launchUrl = 'http://lti.launch.url';
          var secret = 'secret';
          var key = '12345';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            launchUrl,
            secret,
            key,
            'LTI tool title',
            'LTI tool description',
            function(err, tool) {
              assert.ok(!err);
              var id = tool.id;
              // Assert the tool exists and can be fetched
              RestAPI.LtiTool.getLtiTool(
                camAdminRestContext,
                group.id,
                id,
                function(err, data) {
                  assert.ok(!err);
                  var ltiLaunchData = data.launchParams;
                  assert.equal(ltiLaunchData['oauth_consumer_key'], key);
                  assert.equal(ltiLaunchData['resource_link_id'], id);
                  RestAPI.LtiTool.deleteLtiTool(
                    camAdminRestContext,
                    group.id,
                    id,
                    function(err) {
                      assert.ok(!err);
                      // Assert the tool can no longer be fetched
                      RestAPI.LtiTool.getLtiTool(
                        camAdminRestContext,
                        group.id,
                        id,
                        function(err, data) {
                          assert.ok(err);
                          assert.equal(err.code, 404);
                          assert.equal(
                            err.msg,
                            util.format(
                              'Could not find LTI tool %s for group %s',
                              id,
                              group.id,
                            ),
                          );
                          return callback();
                        },
                      );
                    },
                  );
                },
              );
            },
          );
        },
      );
    });

    /**
     * Test that verifies that a non-manager of a group can not delete a LTI tool
     */
    it('verify that a non-manager can not delete LTI tool', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          var launchUrl = 'http://lti.launch.url';
          var secret = 'secret';
          var key = '12345';
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            launchUrl,
            secret,
            key,
            'LTI tool title',
            'LTI tool description',
            function(err, tool) {
              assert.ok(!err);
              RestAPI.LtiTool.deleteLtiTool(
                anonymousRestContext,
                group.id,
                tool.id,
                function(err) {
                  assert.ok(err);
                  assert.equal(err.code, 401);
                  assert.equal(
                    err.msg,
                    'The current user does not have access to manage this resource',
                  );
                  return callback();
                },
              );
            },
          );
        },
      );
    });

    /**
     * Test that verifies LTI tools can not be deleted in deleted groups
     */
    it('verify that a LTI tool can not be deleted in a deleted group', function(callback) {
      RestAPI.Group.createGroup(
        camAdminRestContext,
        'This is a group',
        null,
        'public',
        'yes',
        [],
        [],
        function(err, group) {
          assert.ok(!err);
          RestAPI.LtiTool.createLtiTool(
            camAdminRestContext,
            group.id,
            'http://lti.launch.url',
            'secret',
            '12345',
            'LTI tool title',
            'LTI tool description',
            function(err, tool) {
              assert.ok(!err);
              RestAPI.Group.deleteGroup(camAdminRestContext, group.id, function(
                err,
              ) {
                assert.ok(!err);
                RestAPI.LtiTool.deleteLtiTool(
                  camAdminRestContext,
                  group.id,
                  tool.id,
                  function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 404);
                    assert.equal(
                      err.msg,
                      util.format("Couldn't find group: %s", group.id),
                    );
                    return callback();
                  },
                );
              });
            },
          );
        },
      );
    });
  });
});
