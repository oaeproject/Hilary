/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var IngesterPublication = require('oae-publications/lib/model').IngesterPublication;
var Publication = require('oae-publications/lib/model').Publication;
var PublicationsConstants = require('oae-publications/lib/constants').PublicationsConstants;

var SymplecticPublication = module.exports.SymplecticPublication = function(entry, authorName) {
    // Some publications can be marked as invisible (ex: animal testing)
    // We should respect this and not ingest the publication
    var isVisible = (entry['api:relationship'][0]['api:is-visible'][0] === 'true')
    if (!isVisible) {
        return null;
    }

    var publicationType = entry['api:relationship'][0]['api:related'][0]['api:object'][0]['$']['type'];

    var publication = null;
    switch (publicationType) {
        case 'artefact':
            publication = new Artefact(entry, authorName);
            break;
        case 'book':
            publication = new Book(entry, authorName);
            break;
        case 'chapter':
            publication = new Chapter(entry, authorName);
            break;
        case 'conference':
            publication = new Conference(entry, authorName);
            break;
        case 'journal-article':
            publication = new JournalArtical(entry, authorName);
            break;
        case 'report':
            publication = new Report(entry, authorName);
            break;

        case 'thesis-dissertation':
            publication = new Thesis(entry, authorName);
            break;

        default:
            publication = null;
            break;
    }

    return publication;
};

var Artefact = function(entry, authorName) {
    var data = getRecordData(entry);
    var record = data.preferredRecord;
    var sourceIds = data.sourceIds;
    var displayName = getRecordFieldValue(record, 'title');
    var date = getDateValue(entry, record, 'publication-date');

    var publication = new Publication(null, displayName, PublicationsConstants.publicationTypes.ARTEFACT, date);
    return new IngesterPublication(authorName, sourceIds, publication);
};

var Book = function(entry, authorName) {
    var data = getRecordData(entry);
    var record = data.preferredRecord;
    var sourceIds = data.sourceIds;
    var displayName = getRecordFieldValue(record, 'title');
    var date = getDateValue(entry, record, 'publication-date');
    var authors = getAuthors(record, 'authors');
    var publisher = getRecordFieldValue(record, 'publisher');

    var extra = {};
    var pagination = getPagination(record);
    if (pagination.pageBegin) {
        extra.pageBegin = pagination.pageBegin;
    }
    if (pagination.pageEnd) {
        extra.pageEnd = pagination.pageEnd;
    }
    var issue = getIssue(record);
    if (issue) {
        extra.issue = issue;
    }

    var publication = new Publication(null, displayName, PublicationsConstants.publicationTypes.BOOK, date, null, authors, publisher, extra);
    return new IngesterPublication(authorName, sourceIds, publication);
};

var Chapter = function(entry, authorName) {
    var data = getRecordData(entry);
    var record = data.preferredRecord;
    var sourceIds = data.sourceIds;
    var displayName = getRecordFieldValue(record, 'title');
    var date = getDateValue(entry, record, 'publication-date');
    var authors = getAuthors(record, 'authors');
    var publisher = getRecordFieldValue(record, 'publisher');

    var extra = {};
    var pagination = getPagination(record);
    if (pagination.pageBegin) {
        extra.pageBegin = pagination.pageBegin;
    }
    if (pagination.pageEnd) {
        extra.pageEnd = pagination.pageEnd;
    }
    var issue = getIssue(record);
    if (issue) {
        extra.issue = issue;
    }
    var publication = new Publication(null, displayName, PublicationsConstants.publicationTypes.CHAPTER, date, null, authors, publisher, extra);
    return new IngesterPublication(authorName, sourceIds, publication);
};

var Conference = function(entry, authorName) {
    var data = getRecordData(entry);
    var record = data.preferredRecord;
    var sourceIds = data.sourceIds;
    var displayName = getRecordFieldValue(record, 'title');
    var date = getDateValue(entry, record, 'publication-date');
    var authors = getAuthors(record, 'authors');
    

    var publisher = getRecordFieldValue(record, 'name-of-conference');
    if (!publisher) {
        // Symplectic sticks published proceedings under the Conference type, so we can fallback to the journal if that's the case here
        publisher = getRecordFieldValue(record, 'journal');
    }

    var extra = {};
    var pagination = getPagination(record);
    if (pagination.pageBegin) {
        extra.pageBegin = pagination.pageBegin;
    }
    if (pagination.pageEnd) {
        extra.pageEnd = pagination.pageEnd;
    }
    var issue = getIssue(record);
    if (issue) {
        extra.issue = issue;
    }
    var publication = new Publication(null, displayName, PublicationsConstants.publicationTypes.CONFERENCE, date, null, authors, publisher, extra);
    return new IngesterPublication(authorName, sourceIds, publication);
};

var JournalArtical = function(entry, authorName) {
    var data = getRecordData(entry);
    var record = data.preferredRecord;
    var sourceIds = data.sourceIds;
    var displayName = getRecordFieldValue(record, 'title');
    var date = getDateValue(entry, record, 'publication-date');
    var authors = getAuthors(record, 'authors');
    var publisher = getRecordFieldValue(record, 'journal');

    var extra = {};
    var pagination = getPagination(record);
    if (pagination.pageBegin) {
        extra.pageBegin = pagination.pageBegin;
    }
    if (pagination.pageEnd) {
        extra.pageEnd = pagination.pageEnd;
    }
    var issue = getIssue(record);
    if (issue) {
        extra.issue = issue;
    }
    var publication = new Publication(null, displayName, PublicationsConstants.publicationTypes.JOURNAL_ARTICLE, date, null, authors, publisher, extra);
    return new IngesterPublication(authorName, sourceIds, publication);
};


var Report = function(entry, authorName) {
    var data = getRecordData(entry);
    var record = data.preferredRecord;
    var sourceIds = data.sourceIds;
    var displayName = getRecordFieldValue(record, 'title');
    var date = getDateValue(entry, record, 'publication-date');
    var authors = getAuthors(record, 'authors');
    var publisher = getRecordFieldValue(record, 'publisher');

    var extra = {};

    var confidential = getRecordField(record, 'confidential');
    if (confidential && confidential['api:boolean'] && confidential['api:boolean'][0] === 'true') {
        return null;
    }
    var publication = new Publication(null, displayName, PublicationsConstants.publicationTypes.REPORT, date, null, authors, publisher, extra);
    return new IngesterPublication(authorName, sourceIds, publication);
};

var Thesis = function(entry, authorName) {
    var data = getRecordData(entry);
    var record = data.preferredRecord;
    var sourceIds = data.sourceIds;
    var displayName = getRecordFieldValue(record, 'title');
    var date = getDateValue(entry, record, 'publication-date');
    var authors = getAuthors(record, 'authors');
    var publisher = getRecordFieldValue(record, 'name-of-conference');

    var extra = {};
    var publication = new Publication(null, displayName, PublicationsConstants.publicationTypes.THESIS, date, null, authors, publisher, extra);
    return new IngesterPublication(authorName, sourceIds, publication);
};


//////////////////
//  UTILITIES   //
//////////////////

var getRecordData = function(entry) {
    var preferredSourceId = entry['api:relationship'][0]['api:preferred-source-id'][0];
    var records = entry['api:relationship'][0]['api:related'][0]['api:object'][0]['api:records'][0]['api:record'];
    if (!_.isArray(records)) {
        records = [records];
    }
    var preferredRecord = null;
    var sourceIds = [];
    _.each(records, function(record) {
        if (record['$']['source-id'] === preferredSourceId) {
            preferredRecord = record;
        }

        // Add a source ID for each record. Source IDs will look like `pubmed:123456`, `wos:1234`, `symplectic-manual:uuid`...
        var sourceName = record['$']['source-name'];

        // `manual` is the name for data that was entered into symplectic by hand. In order to not confuse this with
        // other ingesters, we change it to `symplectic-manual`
        if (sourceName === 'manual') {
            sourceName = 'symplectic-manual';
        }
        sourceIds.push(util.format('%s#%s', sourceName, record['$']['id-at-source']));
    });

    return {
        'sourceIds': sourceIds,
        'preferredRecord': preferredRecord
    };
};

var getRecordField = function(record, fieldName) {
    var field = _.find(record['api:native'][0]['api:field'], function(field) {
        return (field['$']['name'] === fieldName);
    });
    return field;
};

var getRecordFieldByType = function(record, typeValue) {
    var field = _.find(record['api:native'][0]['api:field'], function(field) {
        return (field['$']['type'] === typeValue);
    });
    return field;
};

var getRecordFieldValue = function(record, fieldName) {
    var field = getRecordField(record, fieldName);
    if (field) {
        return field['api:text'][0];
    } else {
        return null;
    }
};

var getIssue = function(record) {
    var volumeField = getRecordField(record, 'volume');
    var issueField = getRecordField(record, 'issue');
    var volumeText = (volumeField) ? volumeField['api:text'] : '';
    var issueText = (issueField) ? issueField['api:text'] : '';
    return util.format('vol %s issue %s', volumeText, issueText);
};

var getPagination = function(record) {
    var paginationField = getRecordField(record, 'pagination');
    if (!paginationField) {
        return {};
    }

    var pagination = {};
    if (paginationField['begin-page'] && paginationField['begin-page'] !== 'n/a') {
        pagination.pageBegin = paginationField['begin-page'];
    }
    if (paginationField['end-page'] && paginationField['end-page'] !== 'n/a') {
        pagination.pageEnd = paginationField['end-page'];
    }
    return pagination;
};

var getDateValue = function(entry, record, fieldName) {
    // Try to get it from the preferred record
    var dateField = getRecordField(record, fieldName);

    // If there is no date field in the preferred record, we can check the other sources
    // We only do this as its vital to store the publication
    if (!dateField) {
        var records = entry['api:relationship'][0]['api:related'][0]['api:object'][0]['api:records'][0]['api:record'];
        if (!_.isArray(records)) {
            records = [records];
        }
        for (var i = 0; i < records.length && !dateField; i++) {
            dateField = getRecordField(records[i], fieldName);
        }
    }

    if (dateField) {
        var date = new Date(0);
        if (dateField['api:date'][0]['api:year']) {
            date.setFullYear(parseInt(dateField['api:date'][0]['api:year'][0], 10));
        }
        if (dateField['api:date'][0]['api:month']) {
            date.setMonth(parseInt(dateField['api:date'][0]['api:month'][0], 10) - 1);
        }
        if (dateField['api:date'][0]['api:day']) {
            date.setDate(parseInt(dateField['api:date'][0]['api:day'][0], 10));
        }
        return date.getTime();
    }
    return null;
};

var getAuthors = function(record, fieldName) {
    var authorsField = getRecordFieldByType(record, 'person-list');
    var authors = [];
    if (authorsField) {
        _.each(authorsField['api:people'][0]['api:person'], function(person) {
            authors.push(person['api:last-name'] + ' ' + person['api:initials']);
        });
    }
    return authors;
};
