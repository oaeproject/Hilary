/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');
var Validator = require('oae-util/lib/validator').Validator;
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');

var PrincipalsUtil = require('./util');
var Visibility = require('./model').VISIBILITY_OPTIONS;

var Constants = {

    // role and permission management constants
    PRINCIPAL_TYPE_GROUP: 'g',
    roles: {
        MEMBER: 'member',
        MANAGER: 'manager'
    }
};

/**
 * Get the basic profile for a group.
 *
 * @param  {Context}  context   The current context.
 * @param  {String}   group_id  An identifier for a group. ex: g:cam:oae-team
 * @param  {Function} callback  Standard callback method where the first argument is an error object
 *                              that contains a code suitable as http statuscode and a corresponding message.
 *                              The second argument holds the group information.
 */
var getGroup = module.exports.getGroup = function(context, group_id, callback) {
    if (!PrincipalsUtil.isGroup(group_id)) {
        return callback({'code': 400, 'msg': 'The provided group_id is not a group identifier.'});
    }

    PrincipalsUtil.getPrincipal(context, group_id, callback);
};

/**
 * Get all the members of a group.
 *
 * @param  {Context}                context                 The current execution context.
 * @param  {String}                 group_id                An identifier for a group. ex: g:cam-oae-team
 * @param  {String}                 start                   The principal_id that comes just before the first principal you wish to have in your results.
 * @param  {Number}                 limit                   The number of members you wish to retrieve.
 * @param  {Function(err, members)} callback                Standard callback method that has an array of the direct members of a group.
 */
var getGroupMembers = module.exports.getGroupMembers = function(context, group_id, start, limit, callback) {
    // Defaults.
    limit = limit || 100;
    callback = callback || function(err, members) {};

    if (isNaN(limit)) {
        return callback({'code': 400, 'msg': 'The limit parameter needs to be a number'});
    }

    // Ensure that this group exists.
    getGroup(context, group_id, function(err, group) {
        if (err) {
            return callback(err);
        }

        AuthzAPI.getGroupMembers(group_id, start, limit, function(err, members) {
            if (err) {
                return callback(err);
            }

            PrincipalsUtil.getPrincipals(context, members, function(err, membersObject, missingMembers) {
                if (err) {
                    return callback(err);
                }

                var memberList = [];
                for (var i = 0, j = members.length; i < j; i++) {
                    if (membersObject[members[i]]) {
                        memberList.push(membersObject[members[i]]);
                    }
                }
                callback(false, memberList);
            });
        });
    });
};

/**
 * Gets all the groups a principal (both user or groups) is a member of. This includes all group ancestors to which the user is indicrectly
 * a member.
 *
 * @param {Context}                 context                 The principal to retrieve all the groups for.
 * @param {String}                  start (NOT IMPLEMENTED) The principal_id that comes just before the first principal you wish to have in your results.
 * @param {Number}                  limit (NOT IMPLEMENTED) The number of parent principals you wish to retrieve (default: 10)
 * @param {Function(err, groups)}   callback                Standard callback method invoked when the process completes
 * @param {Object}                  callback.err            An error that occured, if any
 * @param {Array<String>}           callback.groups         An (inconsistently ordered) array of groups to which the user belongs, either directly or indirectly
 */
var memberOf = module.exports.memberOf = function(context, start, limit, callback) {
    // Anonymous isn't member of any groups.
    if (context.user() === null) {
        return callback(false, []);
    }

    AuthzAPI.getMemberOf(context.user().id, function(err, groups) {
        if (!err) {
            PrincipalsUtil.getPrincipals(context, groups, callback);
        } else {
            callback(err);
        }
    });
};

/**
 * Adds a principal to a group.
 * 
 * @param {Context}         ctx             The current execution context
 * @param {String}          groupUuid       The groupUuid of the group
 * @param {String}          memberUuid      The principalUuid of the principal to add
 * @param {String}          role            The role to assign to the member in the group
 * @param {Function(err)}   callback        A function that is executed when the member has been added
 * @param {Object}          callback.err    An error that occured, if any
 */
var addGroupMember = module.exports.addGroupMember = function(ctx, groupUuid, memberUuid, role, callback) {
    callback = callback || function() {};
    role = role || Constants.roles.MEMBER;

    // ensure that the user is allowed to perform the action
    canManage(ctx, groupUuid, function(err) {
        if (!err) {
            // ensure we don't add a member to itself
            if (groupUuid !== memberUuid) {
                //ensure the aspiring member exists
                PrincipalsUtil.getPrincipal(ctx, memberUuid, function(err) {
                    if (!err) {
                        addMembers(groupUuid, [memberUuid], role, callback);
                    } else {
                        // the principal did not exist, probably
                        callback(err);
                    }
                });
            } else {
                callback({code: 400, msg: 'Cannot add a group to itself'});
            }
        } else {
            callback(err);
        }
    });
};

/**
 * Adds multiple principals to a group.
 *
 * @param {Context}                 ctx             The current execution context
 * @param {String}                  groupUuid       The identifier of a group. ex: g:cam:oae-team
 * @param {Array<String>}           principalsToAdd An array of principal identifiers you wish to add. ex: [g:cam:ui-team, g:cam:backend-team]
 * @param {String}                  role            The role to assign to the members in the group
 * @param {Function(err, added)}    callback        A function executed when the process has completed
 * @param {Object}                  callback.err    The error that occured, if any
 * @param {Array<String>}           callback.added  An array of principal UUIDs that were successfully added. If there was an error, this will be a partial array.
 */
var addGroupMembers = module.exports.addGroupMembers = function(ctx, groupUuid, principalsToAdd, role, callback) {
    callback = callback || function() {};
    role = role || Constants.roles.MEMBER;

    // Check if group and whether or not we have access to edit.
    canManage(ctx, groupUuid, function(err) {
        if (!err) {
            // Check the prefixes of each member we wish to add.
            var proceed = true;
            for (var i = 0; i < principalsToAdd.length;i++) {
                if ( (principalsToAdd[i].slice(0, 2) !== "g:" && principalsToAdd[i].slice(0, 2) !== "u:") || (principalsToAdd[i] === groupUuid)) {
                    proceed = false;
                    break;
                }
            }

            if (!proceed) {
                return callback({'code': 400, 'msg': "You can only add users and/or groups and not the group itself."});
            }

            // Verify that the provided principals actually exist in the database. only need to grab one column to determine this
            Cassandra.runQuery('SELECT tenant FROM Principals USING CONSISTENCY QUORUM WHERE principal_id IN (?)', [principalsToAdd], function (err, rows) {
                if (err) {
                    return callback({'code': 500, 'msg': err});
                }

                // validate that all returned rows are real users
                rows.forEach(function(row) {
                    if (row.count === 0) {
                        return callback({'code': 400, 'msg': 'Not all the provided principals exist!'});
                    }
                });

                // finally add each member to the group
                addMembers(groupUuid, principalsToAdd, role, callback);
            });
        } else {
            callback(err);
        }
    });
};

/**
 * Create a new group within this tenant.
 *
 * @param {Context}             ctx             The current execution context
 * @param {String}              title           The title for this group. This will be stemmed down to something that we can use in
 *                                              Cassandra and prefixed with g:tenant.alias:
 * @param {String}              description     A description for this group.
 * @param {String}              visibility      The visibility that should be set for this group. If left undefined,
 *                                              it defaults to public. Valid values are: public, loggedin or private
 * @param {Function(err, uuid)} callback        A function invoked when the process is complete
 * @param {Object}              callback.err    An error that occured, if any. It contains a code suitable as http statuscode and a
 *                                              corresponding message.
 * @param {String}              callback.uuid   The UUID of the group created.
 */
var createGroup = module.exports.createGroup = function(ctx, title, description, visibility, callback) {
    callback = callback || function() {};
    visibility = visibility || Visibility.PUBLIC;
    var tenant = ctx.tenant();
    var groupId = PrincipalsUtil.cleanName(title);
    var id = AuthzUtil.toUuid(Constants.PRINCIPAL_TYPE_GROUP, tenant.alias, groupId);

    canCreateGroup(ctx, id, function(err) {
        if (!err) {
            // Create the group.
            Cassandra.runQuery('INSERT INTO Principals (principal_id, tenant, group_title, group_description, visibility) VALUES (?, ?, ?, ?, ?) USING CONSISTENCY QUORUM',
                [id, tenant.alias, title, description, visibility], function (err) {

                if (err) {
                    return callback({'code': 500, 'msg': err});
                } else {
                    var currentUserUuid = userUuid(ctx);
                    // immediately add the current user as a manager
                    addMembers(id, [currentUserUuid], Constants.roles.MANAGER, function(err) {
                        if (!err) {
                            callback(null, id);
                        } else {
                            callback(err);
                        }
                    });
                }
            });
        } else {
            return callback(err);
        }
    });
};

/**
 * Set the visibility of a group.
 * @param {Context}         context         The current execution context.
 * @param {String}          group_id        The ID of the group.
 * @param {String}          visibility      The new visibility for this group. @see model/VISIBILITY_OPTIONS.
 * @param {Function(err)}   callback        A callback method
 * @param {Obect}           callback.err    An error object (if any).
 */
var setGroupVisibility = module.exports.setGroupVisibility = function(context, group_id, visibility, callback) {
    var validator = new Validator();
    validator.check(group_id, {'code': 400, 'msg': 'A group id must be provided'}).notEmpty();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to manage groups'}).isLoggedInUser(context);
    validator.check(visibility, {'code': 400, 'msg': 'Please provide a valid visibility setting.'}).isIn(_.values(Visibility));
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    canManage(context, group_id, function(err) {
        if (err) {
            return callback(err);
        }

        // update the visibility.
        Cassandra.runQuery('UPDATE Principals USING CONSISTENCY QUORUM SET visibility = ? WHERE principal_id = ?', [visibility, group_id], function(err) {
            if (err) {
                return callback(err);
            }
            callback(err);
        });
    });
};

/**
 * Determine whether or not the user in the context is allowed to create the given group.
 * 
 * @param {Context}         ctx          The current execution context
 * @param {String}          groupUuid    The group to check
 * @param {Function(err)}   callback     The function to invoke when the process completes
 * @param {Object}          callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var canCreateGroup = function(ctx, groupUuid, callback) {
    if (userUuid(ctx) !== null) {
        getGroup(ctx, groupUuid, function(err, group) {
            if (err && err.code === 404) {
                // we're expecting an error, indicating that the group does not exist  
                return callback();
            } else {
                return callback({'code': 400, 'msg': 'This name is not available.'});
            }
        });
    } else {
        return callback({code: 401, msg: 'Cannot create a group anonymously.'});
    }
};


/**
 * Determine whether or not the user in the context can manage a given group.
 *
 * @param {Context}         ctx          The current execution context
 * @param {String}          groupUuid    The group to check
 * @param {Function(err)}   callback     The function to invoke when the process completes
 * @param {Object}          callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var canManage = module.exports.canManage = function(ctx, groupUuid, callback) {
    var currentUserUuid = userUuid(ctx);

    if (currentUserUuid !== null) {
        getGroup(ctx, groupUuid, function(err, group) {
            if (err) {
                return callback(err);
            }
            _canManage(ctx, groupUuid, callback);
        });
    } else {
        return callback({code: 401, msg: 'Permission denied'});
    }
};

/**
 * Internal function that checks whether or not the current user can manage a group. This function assumes that
 * the passed in groupUuid actually exists
 *
 * @param {Context}         context         The current execution context.
 * @param {groupUuId}       groupUuid       The id of the group.
 * @param {callback}        callback        Callback method.
 * @param {Object}          callback.err    If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var _canManage = function(context, groupUuid, callback) {
    AuthzAPI.isAllowed(userUuid(context), Constants.roles.MANAGER, groupUuid, function(err, isAllowed) {
        if (!err) {
            if (isAllowed) {
               return callback();
            } else {
                return callback({code: 401, msg: 'Permission denied'});
            }
        } else {
            return callback({code: 500, msg: err});
        }
    });
};

/**
 * Add a list of members to a group. Note this internal function does no validation on the data. Please do
 * validation prior to send batches of additions to this method.
 * 
 * @param {String}                  groupUuid       The UUID of the group to which the members should be added
 * @param {Array<String>}           memberUuids     The UUIDs of all the members to add to the group
 * @param {String}                  role            The role to assign to all the members
 * @param {Function(err, added)}    callback        The Function called when the process is finished
 * @param {Object}                  callback.err    An error that occurred, if any
 */
var addMembers = function(groupUuid, memberUuids, role, callback) {
    var membershipChanges = {};

    // aggregate all membership changes then 
    memberUuids.forEach(function(memberUuid) {
        membershipChanges[memberUuid] = role;
    });
    AuthzAPI.applyGroupMembershipChanges(groupUuid, membershipChanges, callback);
};

/**
 * Get the current user UUID from the context, if any
 * 
 * @param {Context} The user context
 * @return {String} The UUID of the user in the context. Returns null if there is no active user (i.e., anonymous)
 */
var userUuid = function(ctx) {
    var user = ctx.user();
    return user ? user.id : null;
};
