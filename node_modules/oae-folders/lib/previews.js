/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var MQ = require('oae-util/lib/mq');
var PreviewProcessorAPI = require('oae-preview-processor');
var OaeUtil = require('oae-util/lib/util');

var FoldersAPI = require('oae-folders');
var FoldersAuthz = require('oae-folders/lib/authz');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');

/**
 * Regenerate the preview for a folder when content items have been added or removed
 *
 * @param  {Context}    ctx             Standard context object containing the current user and the current tenant
 * @param  {Folder}     folder          The folder that was changed
 * @param  {Content[]}  contentItems    The set of content items that were added or removed
 * @api private
 */
var _handleContentChange = function(ctx, folder, contentItems) {
    // Filter out those content items who have no preview items
    var contentItemsWithPreviews = _.filter(contentItems, function(contentItem) {
        return (contentItem.previews && contentItem.previews.status === 'done');
    });

    // If there are no content items with a preview there's no point in (re)generating a preview for the folder
    if (!_.isEmpty(contentItemsWithPreviews)) {
        PreviewProcessorAPI.submitFolderForProcessing(folder.id);
    }
};

/*!
 * If a content item gets added to a folder we need to generate previews for the folder
 */
FoldersAPI.on(FoldersConstants.events.ADDED_CONTENT_ITEMS, _handleContentChange);

/*!
 * If a content item gets removed from a folder, we need to regenerate the previews for the folder
 */
FoldersAPI.on(FoldersConstants.events.REMOVED_CONTENT_ITEMS, _handleContentChange);

/*!
 * If a content item's preview images are updated we need to generate previews for the folder
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_PREVIEW, function(content) {
    // Get all the folders this content item was part of
    FoldersAuthz.getFoldersForContent(content.id, function(err, folders) {
        if (err) {
            log().error({'err': err, 'contentId': content.id}, 'Unable to get the folders a piece of content resides in');
            return;
        }

        _reprocessFolders(folders);
    });
});

/*!
 * If a piece of content is removed from the system we need to regenerate previews for the folders it was located in
 */
ContentAPI.on(ContentConstants.events.DELETED_CONTENT, function(ctx, contentObj, members) {
    var lightWeightFolders = FoldersAuthz.authzPrincipalsToFolders(members);
    _reprocessFolders(lightWeightFolders);
});

/**
 * Reprocess a set of folders
 *
 * @param  {Object[]}   lightWeightFolders      A set of light-weight folders that need to be reprocessed
 */
var _reprocessFolders = function(lightWeightFolders) {
    if (_.isEmpty(lightWeightFolders)) {
        return;
    }

    // Get the actual folders
    var groupIds = _.pluck(lightWeightFolders, 'groupId');
    FoldersDAO.getFoldersByGroupIds(groupIds, function(err, folders) {
        if (err) {
            log().error({'err': err, 'groupIds': groupIds}, 'Unable to get the folders for the given group ids');
            return;
        }

        // Submit each folder for processing
        _.each(folders, function(folder) {
            PreviewProcessorAPI.submitFolderForProcessing(folder.id);
        });
    });
};
