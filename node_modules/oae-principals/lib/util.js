/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var sanitize = require('validator').sanitize;
var util = require('util');

var Signature = require('oae-util/lib/signature');
var TenantsUtil = require('oae-tenants/lib/util');
var TZ = require('oae-util/lib/tz');

var Group = require('./model').Group;
var PrincipalsDAO = require('./internal/dao');
var User = require('./model').User;
var VISIBILITY_OPTIONS = require('./model').VISIBILITY_OPTIONS;

/**
 * Gets a principal.
 * In case the principalId is a userId, Redis will be checked first. If it could not be
 * found there or if Redis failed to respond to the request, Cassandra will be checked.
 * 
 * @param  {Context}    ctx                 The current context
 * @param  {String}     principalId         The ID of the principal that should be retrieved.
 * @param  {Function}   callback            A callback method.
 * @param  {Object}     callback.err        An error object (if any)
 * @param  {Group|User} callback.principal  The asked for principal.
 */
var getPrincipal = module.exports.getPrincipal = function(ctx, principalId, callback) {
    PrincipalsDAO.getPrincipal(principalId, function(err, principal) {
        if (err) {
            return callback(err);
        } else if (!principal) {
            return callback({'code': 404, 'msg': 'Couldn\'t find principal: ' + principalId});
        }

        generatePictureURLs(ctx, principal);

        if (isUser(principalId)) {
            hideUserData(ctx, principal);
        }

        return callback(null, principal);
    });
};

/**
 * Gets a set of principals (user or groups). This method *will* return an error if some of the principals
 * don't exist.
 *
 * @param  {Context}   ctx                         The current context
 * @param  {String[]}  principalIds                The ID of the principal that should be retrieved.
 * @param  {Object}    callback.err                If an unexpected systemic error occurred, or if any of the given principals did not exist
 * @param  {String[]}  callback.err.existing       The ids of the principals that existed
 * @param  {String[]}  callback.err.missing        The ids of the principals that did not exist
 * @param  {Object}    callback.principals         Object representing the retrieved principals. The keys will be the principal ids and the values will be the principal basic profiles
 */
var getPrincipals = module.exports.getPrincipals = function(ctx, principalIds, callback) {
    PrincipalsDAO.getPrincipals(principalIds, function(err, principals) {
        if (err) {
            return callback(err);
        }

        var principalValues = _.values(principals);
        for (var i = 0; i < principalValues.length; i++) {
            var principal = principalValues[i];
            generatePictureURLs(ctx, principal);
            if (isUser(principal.id)) {
                hideUserData(ctx, principal);
            }
        }

        return callback(null, principals);
    });
};

/**
 * 
 * @param  {String}  principalId    An identifier
 * @return {Boolean}                Whether or not the provided identifier is a group identifier.
 */
var isGroup = module.exports.isGroup = function(principalId) {
    return PrincipalsDAO.isGroup(principalId);
};

/**
 * 
 * @param  {String}  principalId    An identifier
 * @return {Boolean}                Whether or not the provided identifier is a user identifier.
 */
var isUser = module.exports.isUser = function(principalId) {
    return PrincipalsDAO.isUser(principalId);
};

/**
 * Hides sensitive user information that the (possibly anonymous) user in context does not have access to see.
 *
 * @param {Context}     ctx     The current context
 * @param {User}        user    The user object to hide as necessary
 * @api private
 */
var hideUserData = module.exports.hideUserData = function(ctx, user) {
    var isAnon = !ctx.user();
    var isLoggedIn = TenantsUtil.isLoggedIn(ctx, user.tenant);
    var isTargetUser = (!isAnon && ctx.user().id === user.id);
    var isAdmin = (!isAnon && ctx.user().isAdmin && ctx.user().isAdmin(user.tenant));

    if (isAdmin || isTargetUser) {
        return user;
    }

    // Hide the sensitive profile information if needed
    if ((user.visibility === VISIBILITY_OPTIONS.LOGGEDIN && !isLoggedIn) ||
        (user.visibility === VISIBILITY_OPTIONS.PRIVATE && !isTargetUser)) {
        // the user does not have access to see the 'private' portion of this user's info
        user.displayName = user.publicAlias;
        delete user.publicAlias;
        delete user.timezone;
        delete user.locale;
        delete user.extra;
        delete user.smallPicture;
        delete user.smallPictureUri;
        delete user.mediumPicture;
        delete user.mediumPictureUri;
        delete user.largePicture;
        delete user.largePictureUri;
    } else {
        // they have access to see private but are not the target user, avoid exposing the public alias unnecessarily
        delete user.publicAlias;
    }
};

/**
 * Generates picture URLs for a principal. The urls will be signed with the current user his tenant alias.
 *
 * @param {Context}     ctx         The current context
 * @param {Group|User}  principal   The principal to generate the picture URLs for.
 */
var generatePictureURLs = function(ctx, principal) {
    if (principal.smallPictureUri) {
        principal.smallPicture = getSignedPictureUrl(ctx.tenant().alias, principal.smallPictureUri);
    }
    if (principal.mediumPictureUri) {
        principal.mediumPicture = getSignedPictureUrl(ctx.tenant().alias, principal.mediumPictureUri);
    }
    if (principal.largePictureUri) {
        principal.largePicture = getSignedPictureUrl(ctx.tenant().alias, principal.largePictureUri);
    }
}

/**
 * Generates a url on which the picture can be downloaded.
 * The download link will expire around the second day of the next month so it can be cached for a while.
 * The url will only be valid on the current tenant.
 *
 * @param  {String}     tenant  The tenant alias on which this signature is valid.
 * @param  {String}     uri     The URI of the picture.
 * @return {String}             An URL where the picture can be downloaded.
 */
var getSignedPictureUrl = module.exports.getSignedPictureUrl = function(tenant, uri) {
    var now = new Date();
    var expiresAt = new Date(now.getFullYear(), now.getMonth(), 32);
    var sig = Signature.createExpiresAtSignature(tenant, expiresAt, uri);
    return util.format('/api/download/signed?uri=%s&signature=%s&expires=%s', uri, sig.signature, sig.expires);
};
