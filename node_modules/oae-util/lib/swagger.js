/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var log = require('oae-logger').logger('oae-swagger');
var OAE = require('./oae');
var Server = require('./server');

var constants = module.exports.constants = {
    'apiVersion': '0.1',
    'swaggerVersion': '1.2',
    'basePath': '/api/',
    'paramTypes': [
        'path',
        'query',
        'body',
        'form',
        'header'
    ]
};

/**
 * Get the swagger resources list
 *
 * @param  {Context}         ctx    The context of the request
 * @return {ResourceList}           See https://github.com/wordnik/swagger-core/wiki/Resource-Listing
 */
var getResources = module.exports.getResources = function(ctx) {
    var resources = _getSwaggerResources(ctx);
    var swaggerResources = {
        'apiVersion': constants.apiVersion,
        'swaggerVersion': constants.swaggerVersion,
        'apis': []
    };
    _.each(resources, function(value, key) {
        var path = '/' + key;
        swaggerResources.apis.push({
            'path': path,
            'description': 'none'
        });
    });
    return swaggerResources;
};

/**
 * Get the swagger api declaration for a resource
 *
 * @param  {Context}       ctx                 The context of the request
 * @param  {String}        swaggerResourcePath The resource path
 * @return {ApiDeclaration}                    See https://github.com/wordnik/swagger-core/wiki/API-Declaration
 */
var getApi = module.exports.getApi = function(ctx, swaggerResourcePath) {
    var resources = _getSwaggerResources(ctx);
    var protocol = Server.useHttps() ? 'https://' : 'http://';
    var url = protocol + ctx.tenant().host + '/api';
    var api = _.clone(resources[swaggerResourcePath]);
    api.basePath = url;
    return api;
};

/**
 * Iterate over all resources and populate their models
 */
var addModelsToResources = module.exports.addModelsToResources = function() {
    var adminResources = OAE.globalAdminServer.locals['swagger-resources'];
    var tenantResources = OAE.tenantServer.locals['swagger-resources'];
    var adminModels = OAE.globalAdminServer.locals['swagger-models'];
    var tenantModels = OAE.tenantServer.locals['swagger-models'];

    _.each(adminResources, function(resource, resourcePath) {
        _addModelsToResource(resource, resourcePath, adminModels);
    });
    _.each(tenantResources, function(resource, resourcePath) {
        _addModelsToResource(resource, resourcePath, tenantModels);
    });
};

/**
 * Find all the models that a resource needs and add them to its model list
 *
 * @param  {Resource}         resource      The resource to process
 * @param  {String}           resourcePath  The path to this resource
 * @param  {Object}           allModels     All the models registered for this server
 */
var _addModelsToResource = function(resource, resourcePath, allModels) {
    resource.resourcePath = resourcePath + '/';
    var requiredModels = [];
    // Collect the list of models that this resource references
    _.each(resource.apis, function(api) {
        _.each(api.operations, function(operation) {
            _addModelsFromBody(operation, requiredModels);
            _addModelsFromResponse(operation, requiredModels);
            requiredModels = _.uniq(requiredModels);
        });
    });

    // Add required models to resource
    _.each(requiredModels, function(modelName) {
        var model = allModels[modelName];
        if (model) {
            resource.models[modelName] = model;
        }
    });

    // Now that we have the models that are referenced directly we need to iterate over them and add
    // any new ones that they reference
    _.each(resource.models, function(model) {
        if (model.properties) {
            _.each(model.properties, function (property) {
                var type = property.type;

                switch (type) {
                    case 'array':
                    case 'Array':
                        if (property.items) {
                            var ref = property.items.$ref;
                            if (ref && requiredModels.indexOf(ref) < 0) {
                                requiredModels.push(ref);
                            }
                        }
                        break;
                    case 'string':
                    case 'long':
                        break;
                    default:
                        if (requiredModels.indexOf(type) < 0) {
                            requiredModels.push(type);
                        }
                        break;
                }
            });
        }
    });
    _.each(requiredModels, function(modelName) {
        if (!resource.models[modelName]) {
            var model = allModels[modelName];
            if (model) {
                resource.models[modelName] = model;
            }
        }
    });
};

/**
 * Get all the swagger resources for the appropriate tenant
 *
 * @param  {Context}       ctx  The request context
 * @return {Object}             An object containing all the swagger resource info associated to the tenant
 * @api private
 */
var _getSwaggerResources = function(ctx) {
    return (ctx.tenant().isGlobalAdminServer) ? OAE.globalAdminServer.locals['swagger-resources'] : OAE.tenantServer.locals['swagger-resources'];
};

/**
 * Parse the body parameters and add all referenced models to the model list
 *
 * @param  {String}    operation   The operation object from the swagger api declaration to parse
 * @param  {String[]}  models      The list of referenced models, any newly referenced models will be appended
 * @api private
 */
var _addModelsFromBody = function(operation, models) {
    if (operation.parameters) {
        _.each(operation.parameters, function (param) {
            if (param.paramType === 'body' && param.dataType) {
                var model = param.dataType.replace(/^List\[/, '').replace(/\]/, '');
                models.push(model);
            }
        });
    }
};

/**
 * Parse the response type and add all referenced models to the model list
 *
 * @param  {String}    operation   The operation object from the swagger api declaration to parse
 * @param  {String[]}  models      The list of referenced models, any newly referenced models will be appended
 * @api private
 */
var _addModelsFromResponse = function(operation, models) {
    var responseModel = operation.responseClass;
    if (responseModel) {
        responseModel = responseModel.replace(/^List\[/, '').replace(/\]/, '');
        models.push(responseModel);
    }
};
