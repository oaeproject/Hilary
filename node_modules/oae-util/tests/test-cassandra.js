/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the 'License'); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an 'AS IS'
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Cassandra = require('oae-util/lib/cassandra');
var Util = require('oae-util/lib/util');


describe('Utilities', function() {

    describe('Cassandra', function() {

        /**
         * Test that will validate that keyspaces can be created, checked and dropped
         */
        it('verify keyspaces', function(callback) {
            // Create a key space
            var keyspace = 'keyspacetest' + Math.floor(Math.random() * 100000000);
            Cassandra.createKeyspace(keyspace, function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                // Check that the keyspace exists
                Cassandra.keyspaceExists(keyspace, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);

                    // Check that a non-existing keyspace doesn't exist
                    var nonExistingKeyspace = 'keyspacetest' + Math.floor(Math.random() * 100000000);
                    Cassandra.keyspaceExists(nonExistingKeyspace, function(err, exists) {
                        assert.ok(!err);
                        assert.ok(!exists);

                        // Drop the created keyspace
                        Cassandra.dropKeyspace(keyspace, function(err, dropped) {
                            assert.ok(!err);
                            assert.ok(dropped);

                            // Check that a non-existing keyspace can't be dropped
                            Cassandra.dropKeyspace(keyspace, function(err, dropped) {
                                assert.ok(err);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that it is possible to create, check and drop column families.
         */
        it('verify create, verify and drop column family', function(callback) {
            // Create a column family
            var name = 'cf' + Math.floor(Math.random() * 10000000);
            Cassandra.createColumnFamily(name, 'CREATE TABLE "' + name + '" ("keyId" text PRIMARY KEY, "value" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                // Try and create it again, ensuring nothing gets created
                Cassandra.createColumnFamily(name, 'CREATE TABLE "' + name + '" ("keyId" text PRIMARY KEY, "value" text) WITH COMPACT STORAGE', function(err, created) {
                    assert.ok(!err);
                    assert.ok(!created);

                    // Drop the table
                    Cassandra.dropColumnFamily(name, function(err) {
                        assert.ok(!err);

                        // Make sure it's gone by creating a new one in its place and see if something was created
                        Cassandra.createColumnFamily(name, 'CREATE TABLE "' + name + '" ("keyId" text PRIMARY KEY, "value" text) WITH COMPACT STORAGE', function(err, created) {
                            assert.ok(!err);
                            assert.ok(created);

                            // Drop it again
                            Cassandra.dropColumnFamily(name, function(err) {
                                assert.ok(!err);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that it is possible to create, check and drop multiple columnfamilies at once.
         */
        it('verify multiple column families', function(callback) {
            var name1 = 'cf' + Math.floor(Math.random() * 10000000);
            var name2 = 'cf' + Math.floor(Math.random() * 10000000);

            Cassandra.createColumnFamilies({
                name1: 'CREATE TABLE "' + name1 + '" ("keyId" text, "column" text, "value" text, PRIMARY KEY ("keyId", "column")) WITH COMPACT STORAGE',
                name2: 'CREATE TABLE "' + name2 + '" ("keyId" text, "column" text, "value" text, PRIMARY KEY ("keyId", "column")) WITH COMPACT STORAGE'
            }, function(err) {
                assert.ok(!err);

                // Ensure both column families exist
                Cassandra.columnFamilyExists(name1, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);

                    Cassandra.columnFamilyExists(name2, function(err, exists) {
                        assert.ok(!err);
                        assert.ok(exists);

                        // Drop them
                        Cassandra.dropColumnFamilies([name1, name2], function(err) {
                            assert.ok(!err);

                            // Ensure they no longer exist
                            Cassandra.columnFamilyExists(name1, function(err, exists) {
                                assert.ok(!err);
                                assert.ok(!exists);

                                Cassandra.columnFamilyExists(name2, function(err, exists) {
                                    assert.ok(!err);
                                    assert.ok(!exists);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test the runQuery function, making sure that null and undefined values are handled appropriately
         */
        it('verify run query', function(callback) {
            // Create a CF first
            Cassandra.createColumnFamily('testQuery', 'CREATE TABLE "testQuery" ("keyId" text PRIMARY KEY, "c1" text, "c2" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);
                // Check if the CF exists
                Cassandra.columnFamilyExists('testQuery', function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);
                    // Try to run a simple insert
                    Cassandra.runQuery('INSERT INTO "testQuery" ("keyId", "c1", "c2") VALUES (?, ?, ?)', ['key1', 'value1', 'value2'], function (err) {
                        assert.ok(!err);
                        // Try to run an invalid insert
                        Cassandra.runQuery('INSERT INTO "testQuery" ("keyId", "c1", "c2") VALUES (?, ?, ?)', ['key2', 'value', null], function (err) {
                            assert.ok(err);
                            // Try to run a simple select
                            Cassandra.runQuery('SELECT * FROM "testQuery" WHERE "keyId" = ?', ['key1'], function (err, rows) {
                                assert.ok(!err);
                                assert.equal(rows.length, 1);
                                assert.equal(rows[0].get('keyId').value, 'key1');
                                // Try to run an invalid select
                                Cassandra.runQuery('SELECT * FROM "testQuery" WHERE "keyId" = ?', [null], function (err, rows) {
                                    assert.ok(err);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies iterateAll on empty CF invokes callback only once
         */
        it('verify iterateAll on empty column family', function(callback) {
            Cassandra.createColumnFamily('testIterateAllEmpty', 'CREATE TABLE "testIterateAllEmpty" ("keyId" text PRIMARY KEY, "colOne" text, "colTwo" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                var numInvoked = 0;

                // Verify the callback is only invoked once, and when it does it is marked complete, without an error
                Cassandra.iterateAll(['colOne', 'colTwo'], 'testIterateAllEmpty', 'keyId', null, function(rows, done) {
                    assert.ok(!err, 'Did not expect an error');
                    assert.ok(!rows, 'Expected no rows to be specified');
                    assert.equal(++numInvoked, 1, 'Expected onEach to only be invoked once');
                    done();
                }, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });

        /**
         * Test that verifies iterateAll will return an exception as an error if one is thrown by the onEach
         */
        it('verify iterateAll on exception breaks out of iteration', function(callback) {
            Cassandra.createColumnFamily('testIterateAllException', 'CREATE TABLE "testIterateAllException" ("keyId" text PRIMARY KEY, "colOne" text, "colTwo" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                var invoked = false;
                var batch = [];
                batch.push(Cassandra.constructUpsertCQL('testIterateAllException', 'keyId', 'key1', {'colOne': 'one', 'colTwo': 'two'}));
                Cassandra.runBatchQuery(batch, function(err) {
                    assert.ok(!err);

                    Cassandra.iterateAll(null, 'testIterateAllException', 'keyId', null, function(rows, done) {
                        // Ensure we return only once, and then throw an error to ensure it gets caught
                        assert.ok(!invoked);
                        assert.ok(rows);

                        invoked = true;

                        throw {'message': 'I\'m an annoying error!'};
                    }, function(err) {
                        // Verify we got the error we threw from the onEach, and that we only invoked once
                        assert.ok(err);
                        assert.equal(err.code, 500);
                        assert.equal(err.msg, 'I\'m an annoying error!');
                        assert.ok(invoked);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies iterateAll with no column names or specified column names
         */
        it('verify iterateAll column names', function(callback) {
            Cassandra.createColumnFamily('testIterateAllAllColumns', 'CREATE TABLE "testIterateAllAllColumns" ("keyId" text PRIMARY KEY, "colOne" text, "colTwo" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                var batch = [];
                batch.push(Cassandra.constructUpsertCQL('testIterateAllAllColumns', 'keyId', 'key1', {'colOne': 'one', 'colTwo': 'two'}));
                Cassandra.runBatchQuery(batch, function(err) {
                    assert.ok(!err);

                    var numInvoked = 0;

                    /*!
                     * Verifies that the onEach is invoked only once and that only one row is returned
                     */
                    var _onEach = function(rows, done) {
                        assert.strictEqual(++numInvoked, 1, 'Expected onEach to only be invoked once');
                        assert.ok(rows, 'Expected there to be rows provided to the onEach');
                        assert.equal(rows.length, 1, 'Expected there to be exactly one row');

                        // Ensure all columns have been fetched
                        assert.equal(rows[0].get('keyId').value, 'key1', 'Invalid value for keyId');
                        assert.equal(rows[0].get('colOne').value, 'one', 'Invalid value for colOne');
                        assert.equal(rows[0].get('colTwo').value, 'two', 'Invalid value for colTwo');

                        done();
                    };

                    // Verify the callback is only invoked once, and when it does it is marked complete, without an error
                    Cassandra.iterateAll(null, 'testIterateAllAllColumns', 'keyId', null, _onEach, function(err) {
                        assert.ok(!err);

                        numInvoked = 0;

                        /*!
                         * Verifies that the onEach is invoked only once, that only one row is returned and it only contains
                         * the colOne column
                         */
                        var _onEach = function(rows, done) {
                            assert.strictEqual(++numInvoked, 1, 'Expected onEach to only be invoked once');
                            assert.ok(rows, 'Expected a rows object to be specified');
                            assert.equal(rows.length, 1, 'Expected there to be exactly one row');

                            // Verify only colOne is set
                            assert.ok(!rows[0].get('keyId') || !rows[0].get('keyId').value, 'Expected the keyId not to be fetched');
                            assert.ok(!rows[0].get('colTwo'), 'expected no colTwo column to be fetched');
                            assert.equal(rows[0].get('colOne').value, 'one', 'Invalid value for colOne');

                            done();
                        };

                        // Iterate all again with just one column specified and verify only the one column returns
                        Cassandra.iterateAll(['colOne'], 'testIterateAllAllColumns', 'keyId', null, _onEach, function(err) {
                            assert.ok(!err, JSON.stringify(err, null, 2));
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies exclusive paging in iterateAll
         */
        it('verify iterateAll paging', function(callback) {
            Cassandra.createColumnFamily('testIterateAllPaging', 'CREATE TABLE "testIterateAllPaging" ("keyId" text PRIMARY KEY, "colOne" text, "colTwo" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                // Create 10 rows to page through
                var batch = [];
                for (var i = 0; i < 10; i++) {
                    batch.push(Cassandra.constructUpsertCQL('testIterateAllPaging', 'keyId', 'key' + i, {'colOne': 'colOne' + i, 'colTwo': 'colTwo' + i}));
                }

                Cassandra.runBatchQuery(batch, function(err) {
                    assert.ok(!err);

                    var numInvoked = 0;
                    var allRows = {};

                    /*!
                     * Verifies that we receive exactly one row at a time, and aggregates them so we can inspect their
                     * data when finished.
                     */
                    var _onEach = function(rows, done) {
                        numInvoked++;
                        // Store the row so we can verify them all later
                        assert.equal(rows.length, 1, 'Expected to only get 1 row at a time');
                        allRows[rows[0].get('keyId').value] = rows[0];

                        done();
                    };

                    // Verify paging all 10 items by batches of size 1
                    Cassandra.iterateAll(null, 'testIterateAllPaging', 'keyId', {'batchSize': 1}, _onEach, function(err) {
                        assert.ok(!err, JSON.stringify(err, null, 4));
                        assert.equal(numInvoked, 10, 'Expected to have exactly 10 batches of data');

                        // Verify the contents of all the rows
                        assert.equal(_.keys(allRows).length, 10, 'Expected exactly 10 distinct rows');
                        for (var i = 0;  i < 10; i++) {
                            var key = 'key' + i;
                            assert.ok(allRows[key], 'Expected to get a row with key ' + key);
                            assert.equal(allRows[key].get('colOne').value, 'colOne' + i, 'Invalid colOne value');
                            assert.equal(allRows[key].get('colTwo').value, 'colTwo' + i, 'Invalid colTwo value');
                        }

                        // Verify paging of all 10 items by batches of size 5
                        numInvoked = 0;
                        allRows = {};

                        /*!
                         * Verifies that the onEach is invoked with 5 rows at a time, and aggregates them so we can
                         * inspect their data when finished.
                         */
                        var _onEach = function(rows, done) {
                            numInvoked++;
                            // Record the rows so we can verify their contents at the end
                            assert.equal(rows.length, 5);
                            for (var i = 0; i < 5; i++) {
                                allRows[rows[i].get('keyId').value] = rows[i];
                            }

                            done();
                        };

                        Cassandra.iterateAll(null, 'testIterateAllPaging', 'keyId', {'batchSize': 5}, _onEach, function(err) {
                            assert.ok(!err, JSON.stringify(err, null, 4));
                            assert.equal(numInvoked, 2, 'Expected the onEach to be invoked exactly 2 times');

                            // Verify the contents of all the rows
                            assert.equal(_.keys(allRows).length, 10);
                            for (var i = 0;  i < 10; i++) {
                                var key = 'key' + i;
                                assert.ok(allRows[key]);
                                assert.equal(allRows[key].get('colOne').value, 'colOne' + i);
                                assert.equal(allRows[key].get('colTwo').value, 'colTwo' + i);
                            }

                            // Verify paging of all 10 items by batches of size 7
                            numInvoked = 0;
                            allRows = {};

                            /*!
                             * Verifies that the onEach is called once with 7 rows, and then once with 3 rows, and aggregates
                             * them so we can inspect their data when finished.
                             */
                            var _onEach = function(rows, done) {
                                numInvoked++;
                                if (numInvoked === 1) {
                                    assert.ok(rows);

                                    // The first batch should contain exactly 7 rows. Record them to verify the data when done iterating.
                                    assert.equal(rows.length, 7);
                                    for (var i = 0; i < 7; i++) {
                                        allRows[rows[i].get('keyId').value] = rows[i];
                                    }
                                } else if (numInvoked === 2) {
                                    assert.ok(rows);

                                    // The second batch should contain exactly 3 rows. Record them to verify the data when done iterating.
                                    assert.equal(rows.length, 3);
                                    for (var ii = 0; ii < 3; ii++) {
                                        allRows[rows[ii].get('keyId').value] = rows[ii];
                                    }
                                }

                                done();
                            };

                            Cassandra.iterateAll(null, 'testIterateAllPaging', 'keyId', {'batchSize': 7}, _onEach, function(err) {
                                assert.ok(!err, JSON.stringify(err, null, 4));
                                assert.equal(numInvoked, 2, 'Expected the onEach callback to be invoked exactly twice');

                                // Verify the contents of all the rows
                                assert.equal(_.keys(allRows).length, 10);
                                for (var i = 0;  i < 10; i++) {
                                    var key = 'key' + i;
                                    assert.ok(allRows[key]);
                                    assert.equal(allRows[key].get('colOne').value, 'colOne' + i);
                                    assert.equal(allRows[key].get('colTwo').value, 'colTwo' + i);
                                }

                                // Finally complete
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test the runBatchQuery function, making sure that changes from both queries are persisted
         */
        it('verify run batch query', function(callback) {
            // Create a CF first
            Cassandra.createColumnFamily('testBatchQuery', 'CREATE TABLE "testBatchQuery" ("keyId" text PRIMARY KEY, "c1" text, "c2" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                // Check if the CF exists
                Cassandra.columnFamilyExists('testBatchQuery', function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);

                    // Run a batched query
                    var queries = [
                        {'query': 'INSERT INTO "testBatchQuery" ("keyId", "c1", "c2") VALUES (?, ?, ?)', 'parameters': ['key1', 'value1', 'value2']},
                        {'query': 'INSERT INTO "testBatchQuery" ("keyId", "c1", "c2") VALUES (?, ?, ?)', 'parameters': ['key2', 'value3', 'value4']}
                    ];
                    Cassandra.runBatchQuery(queries, function(err) {
                        assert.ok(!err);

                        // Verify all the rows are in the table
                        Cassandra.runQuery('SELECT * FROM "testBatchQuery" WHERE "keyId" IN (?)', [['key1', 'key2']], function (err, rows) {
                            assert.ok(!err);
                            assert.ok(rows.length, 2);
                            assert.equal(rows[0].count, 3);
                            assert.equal(rows[0].get('c1').value, 'value1');
                            assert.equal(rows[0].get('c2').value, 'value2');
                            assert.equal(rows[1].count, 3);
                            assert.equal(rows[1].get('c1').value, 'value3');
                            assert.equal(rows[1].get('c2').value, 'value4');

                            // Try running it without any queries
                            Cassandra.runBatchQuery([], function(err) {
                                assert.ok(!err);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test casting to a Boolean
         */
        it('verify casting to a Boolean', function(callback) {
            Cassandra.createColumnFamily('testBooleans', 'CREATE TABLE "testBooleans" ("keyId" text PRIMARY KEY, "testbool" text, "testnumbool" text, "teststring" text)', function(err, created) {
                assert.ok(!err);
                assert.ok(created);
                Cassandra.runQuery('INSERT INTO "testBooleans" ("keyId", "testbool", "testnumbool", "teststring") VALUES (?, ?, ?, ?)', ['testkey', 'true', '0', 'notaboolean'], function (err) {
                    assert.ok(!err);
                    Cassandra.runQuery('SELECT "testbool", "testnumbool", "teststring" FROM "testBooleans" WHERE "keyId" = ?', ['testkey'], function (err, rows) {
                        assert.ok(!err);
                        assert.equal(typeof Util.castToBoolean(rows[0][0].value), 'boolean');
                        assert.equal(typeof Util.castToBoolean(rows[0][1].value), 'boolean');
                        assert.equal(typeof Util.castToBoolean(rows[0][2].value), 'string');
                        callback();
                    });
                });
            });
        });

        /**
         * Test whether the constructUpsertCQL works as expected, making sure that invalid parameters
         * are handled appropriately
         */
        it('verify construct upsert', function(callback) {
            // Test an invalid call with no provided cf
            var query1 = Cassandra.constructUpsertCQL(null, 'testId', 'testValue', {'key1': 'value1'});
            assert.ok(!query1);

            // Test an invalid call with no provided values
            var query2 = Cassandra.constructUpsertCQL('testCF', 'testId', 'testValue', {});
            assert.ok(!query2);

            // Test a valid update with one key-value pair
            var query3 = Cassandra.constructUpsertCQL('testCF', 'testId', 'testValue', {'key1': 'value1'});
            assert.ok(query3);
            assert.equal(query3.query, 'UPDATE "testCF" SET "key1" = ? WHERE "testId" = ?');
            assert.equal(query3.parameters[0], 'value1');
            assert.equal(query3.parameters[1], 'testValue');

            // Test a valid update with multiple key-value pairs
            var query5 = Cassandra.constructUpsertCQL('testCF', 'testId', 'testValue', {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'});
            assert.ok(query5);
            assert.strictEqual(query5.query.indexOf('UPDATE "testCF" SET '), 0);
            assert.ok(query5.query.indexOf('"key1" = ?') !== -1);
            assert.ok(query5.query.indexOf('"key2" = ?') !== -1);
            assert.ok(query5.query.indexOf('"key3" = ?') !== -1);
            assert.ok(query5.query.indexOf(' WHERE "testId" = ?') !== -1);
            assert.ok(_.contains(query5.parameters, 'value1'));
            assert.ok(_.contains(query5.parameters, 'value2'));
            assert.ok(_.contains(query5.parameters, 'value3'));
            assert.equal(query5.parameters[3], 'testValue');

            // Verify TTL is added to the query with proper syntax
            var query7 = Cassandra.constructUpsertCQL('testCF', 'testId', 'testValue', {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}, 500);
            assert.ok(query7);
            assert.strictEqual(query7.query.indexOf('UPDATE "testCF" USING TTL 500 SET '), 0);
            assert.ok(query7.query.indexOf('"key1" = ?') !== -1);
            assert.ok(query7.query.indexOf('"key2" = ?') !== -1);
            assert.ok(query7.query.indexOf('"key3" = ?') !== -1);
            assert.ok(query7.query.indexOf(' WHERE "testId" = ?') !== -1);
            assert.ok(_.contains(query7.parameters, 'value1'));
            assert.ok(_.contains(query7.parameters, 'value2'));
            assert.ok(_.contains(query7.parameters, 'value3'));
            assert.equal(query7.parameters[3], 'testValue');

            // Verify a JSON object and JSON array are stringified
            var query8 = Cassandra.constructUpsertCQL('testCF', 'testId', 'testValue', {'key1': {'anobject': 'a value'}, 'key2': ['index0', 'index1'], 'key3': 'value3'}, 500);
            assert.ok(query8);
            assert.strictEqual(query8.query.indexOf('UPDATE "testCF" USING TTL 500 SET '), 0);
            assert.ok(query8.query.indexOf('"key1" = ?') !== -1);
            assert.ok(query8.query.indexOf('"key2" = ?') !== -1);
            assert.ok(query8.query.indexOf('"key3" = ?') !== -1);
            assert.ok(query8.query.indexOf(' WHERE "testId" = ?') !== -1);
            assert.ok(_.contains(query8.parameters, 'value3'));
            assert.ok(query8.parameters[3], 'testValue');

            var hasObject = false;
            var hasArray = false;

            _.each(query8.parameters, function(param) {
                try {
                    param = JSON.parse(param);
                } catch (ex) {
                    return;
                }

                if (_.isArray(param)) {
                    hasArray = true;
                    assert.equal(param[0], 'index0');
                    assert.equal(param[1], 'index1');
                } else if (_.isObject(param)) {
                    hasObject = true;
                    assert.equal(param['anobject'], 'a value');
                }
            });

            // Ensure we did have both the object and array in the parameters list
            assert.ok(hasObject);
            assert.ok(hasArray);

            return callback();
        });

        /**
         * Test that verifies the functionality of paging rows in a dynamic column family
         */
        it('verify paging rows of compact storage tables', function(callback) {

            // Set up column family and data used for paging
            Cassandra.createColumnFamily('VerifyPagedColumnQueryStartAndEnd', 'CREATE TABLE "VerifyPagedColumnQueryStartAndEnd" ("keyId" text, "columnName" text, "value" text, PRIMARY KEY("keyId", "columnName")) WITH COMPACT STORAGE', function(err, created) {
                assert.ok(!err);

                // Need to at least have values beyond 'k' to avoid we overlook 'keyId'
                var batch = _.map(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'], function(columnName) {
                    return Cassandra.constructUpsertCQL('VerifyPagedColumnQueryStartAndEnd', ['keyId', 'columnName'], ['key', columnName], {'value': '1'});
                });

                Cassandra.runBatchQuery(batch, function(err) {
                    assert.ok(!err);

                    // Verify inclusive end works with unbounded start (forward)
                    Cassandra.runPagedQuery('VerifyPagedColumnQueryStartAndEnd', 'keyId', 'key', 'columnName', null, 8, {'end': 'a'}, function(err, rows, nextToken, startMatched) {
                        assert.ok(!err);
                        assert.ok(rows);
                        assert.strictEqual(startMatched, false);

                        assert.equal(rows.length, 1);
                        assert.equal(rows[0].get('columnName').value, 'a');

                        // Verify inclusive end works with bounded start, multiple results full page (forward)
                        Cassandra.runPagedQuery('VerifyPagedColumnQueryStartAndEnd', 'keyId', 'key', 'columnName', null, 8, {'end': 'j'}, function(err, rows, nextToken, startMatched) {
                            assert.ok(!err);
                            assert.ok(rows);
                            assert.strictEqual(startMatched, false);

                            assert.equal(rows.length, 8);
                            assert.equal(rows[0].get('columnName').value, 'a');
                            assert.equal(rows[1].get('columnName').value, 'b');
                            assert.equal(rows[2].get('columnName').value, 'c');
                            assert.equal(rows[3].get('columnName').value, 'd');
                            assert.equal(rows[4].get('columnName').value, 'e');
                            assert.equal(rows[5].get('columnName').value, 'f');
                            assert.equal(rows[6].get('columnName').value, 'g');
                            assert.equal(rows[7].get('columnName').value, 'h');
                            assert.equal(nextToken, 'h');

                            // Verify inclusive end works with unbounded start (reversed)
                            Cassandra.runPagedQuery('VerifyPagedColumnQueryStartAndEnd', 'keyId', 'key', 'columnName', null, 8, {'reversed': true, 'end': 'm'}, function(err, rows, nextToken, startMatched) {
                                assert.ok(!err);
                                assert.ok(rows);
                                assert.strictEqual(startMatched, false);

                                assert.equal(rows.length, 1);
                                assert.equal(rows[0].get('columnName').value, 'm');

                                // Verify inclusive end works with bounded start, multiple results full page (forward)
                                Cassandra.runPagedQuery('VerifyPagedColumnQueryStartAndEnd', 'keyId', 'key', 'columnName', null, 8, {'reversed': true, 'end': 'c'}, function(err, rows, nextToken, startMatched) {
                                    assert.ok(!err);
                                    assert.ok(rows);
                                    assert.strictEqual(startMatched, false);

                                    assert.equal(rows.length, 8);
                                    assert.equal(rows[0].get('columnName').value, 'm');
                                    assert.equal(rows[1].get('columnName').value, 'l');
                                    assert.equal(rows[2].get('columnName').value, 'k');
                                    assert.equal(rows[3].get('columnName').value, 'j');
                                    assert.equal(rows[4].get('columnName').value, 'i');
                                    assert.equal(rows[5].get('columnName').value, 'h');
                                    assert.equal(rows[6].get('columnName').value, 'g');
                                    assert.equal(rows[7].get('columnName').value, 'f');
                                    assert.equal(nextToken, 'f');

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that ensures the CQL3 bug: https://issues.apache.org/jira/browse/CASSANDRA-6330 is fixed
         */
        it('verify a strict upper bound on range query does not result in one less item than requested with limit', function(callback) {
            Cassandra.createColumnFamily('VerifyCassandra6330', 'CREATE TABLE "VerifyCassandra6330" ("keyId" text, "column" text, "value" text, PRIMARY KEY ("keyId", "column")) WITH COMPACT STORAGE', function(err, created) {
                assert.ok(!err);

                // Need to at least have values beyond 'k' to avoid we overlook 'keyId'
                var batch = _.map(['a', 'b', 'c', 'd', 'e'], function(columnName) {
                    return Cassandra.constructUpsertCQL('VerifyCassandra6330', ['keyId', 'column'], ['key', columnName], {'value': '1'});
                });

                Cassandra.runBatchQuery(batch, function(err) {
                    assert.ok(!err);

                    Cassandra.runQuery('SELECT "column" FROM "VerifyCassandra6330" WHERE "keyId" = ? AND "column" < ? ORDER BY "column" DESC LIMIT 2', ['key', 'c'], function(err, rows) {
                        assert.ok(!err);

                        // We asked for 2 items, and there were 2 to fetch (a and b), we get both. If the bug were still in effect we'd get 1 as
                        // described in https://issues.apache.org/jira/browse/CASSANDRA-6330
                        assert.strictEqual(rows.length, 2);

                        return callback();
                    });
                });
            });
        });

        /**
         * Some versions of Cassandra in the 2.0 series return an extra row on queries that use LIMIT
         *
         * @see https://issues.apache.org/jira/browse/CASSANDRA-7052
         */
        it('verify a strict upper bound on range query results in one more item than requested with limit', function(callback) {
            Cassandra.createColumnFamily('VerifyCassandra7052', 'CREATE TABLE "VerifyCassandra7052" ("keyId" text, "column" text, "value" text, PRIMARY KEY ("keyId", "column")) WITH COMPACT STORAGE', function(err, created) {
                assert.ok(!err);

                var batch = _.map(['a', 'b', 'c', 'd', 'e'], function(columnName) {
                    return Cassandra.constructUpsertCQL('VerifyCassandra7052', ['keyId', 'column'], ['key', columnName], {'value': '1'});
                });

                Cassandra.runBatchQuery(batch, function(err) {
                    assert.ok(!err);

                    Cassandra.runQuery('SELECT "column" FROM "VerifyCassandra7052" WHERE "keyId" = ? AND "column" > ? AND "column" <= ? LIMIT 2', ['key', '', 'e'], function(err, rows) {
                        assert.ok(!err);

                        // We asked for 2 items, if the bug is present we get 3.
                        // described in https://issues.apache.org/jira/browse/CASSANDRA-7052
                        assert.strictEqual(rows.length, 2);

                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies the paged column query handles multi-byte characters properly. This is a regression test for
         * https://github.com/oaeproject/Hilary/issues/443
         */
        it('verify multi-byte character in paged column query', function(callback) {
            Cassandra.createColumnFamily('VerifyMultiBytePagedColumnQuery', 'CREATE TABLE "VerifyMultiBytePagedColumnQuery" ("keyId" text, "column1" text, "value" text, PRIMARY KEY ("keyId", "column1")) WITH COMPACT STORAGE', function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                var stringWithMultiByte = 'Foo O’bar';

                Cassandra.runQuery('INSERT INTO "VerifyMultiBytePagedColumnQuery" ("keyId", "column1", "value") VALUES (?, ?, ?)', ['key1', stringWithMultiByte, '1'], function(err) {
                    assert.ok(!err);

                    Cassandra.runPagedQuery('VerifyMultiBytePagedColumnQuery', 'keyId', 'key1', 'column1', null, 10, null, function(err, rows, nextToken, startMatched) {
                        assert.ok(!err);
                        assert.strictEqual(rows.length, 1);
                        assert.ok(!nextToken);
                        assert.ok(!startMatched);
                        assert.equal(rows[0].get('column1').value, stringWithMultiByte);
                        return callback();
                    });
                });
            });
        });
    });
});
