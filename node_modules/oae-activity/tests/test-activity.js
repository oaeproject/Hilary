/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context/lib/api').Context;
var log = require('oae-logger').logger('test-activity');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var ActivityAPI = require('oae-activity');
var ActivityDAO = require('oae-activity/lib/internal/dao');
var ActivitySeed = require('oae-activity/lib/model').ActivitySeed;
var ActivitySeedResource = require('oae-activity/lib/model').ActivitySeedResource;
var ActivityTestsUtil = require('oae-activity/lib/test/util');

describe('Activity', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;

    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    // API context that can be used to execute anonymous API calls on the cambridge tenant
    var anonymousCamApiContext = null;

    /*!
     * Create a default activity configuration object, overridden with the given `overlay` object.
     *
     * @param  {Object}    overlay     Configuration properties with which to overide the default.
     * @return {Object}                An object that represents the default configuration for unit tests, overridden by the overlay.
     */
    var createDefaultConfig = function(overlay) {
        return _.extend({'collectionPollingFrequency': -1}, overlay);
    };

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        anonymousCamApiContext = new Context(global.oaeTests.tenants.cam);
        callback();
    });

    afterEach(function(callback) {
        // Ensure activities are set back to enabled in case of test failures
        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-activity/activity/enabled', true, function(err) {
            assert.ok(!err);

            ActivityAPI.refreshConfiguration(createDefaultConfig(), function(err) {
                assert.ok(!err);
                callback();
            });
        });
    });

    describe('Activity API', function() {

        describe('#refreshConfiguration()', function() {

            /**
             * Test that verifies that refreshing configuration to disable activities works properly. This test assumes that an activity is
             * generated when a content item is created.
             */
            it('verify disabling and enabling activity worker', function(callback) {

                // First disable the activity worker and ensure no activities are processed
                ActivityAPI.refreshConfiguration(createDefaultConfig({'processActivityJobs': false}), function(err) {
                    assert.ok(!err);

                    // Create the user we will use as the activity stream
                    var jackUsername = TestsUtil.generateTestUserId('jack');
                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        // Try to generate an activity for Jack's feed
                        RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                            assert.ok(!err);

                            // Verify no activity is generated, because we don't have any bound workers
                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(activityStream);
                                assert.ok(activityStream.items);
                                assert.equal(activityStream.items.length, 0);

                                // Re-enable the worker
                                ActivityAPI.refreshConfiguration(createDefaultConfig(), function(err) {
                                    assert.ok(!err);

                                    // Generate a 2nd activity for Jack's feed
                                    RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                                        assert.ok(!err);

                                        // Verify both the first activity and the 2nd are collected into the stream, as the first one should have been queued until
                                        // we were finally enabled.
                                        ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                            assert.ok(!err);
                                            assert.ok(activityStream);
                                            assert.ok(activityStream.items);
                                            assert.equal(activityStream.items.length, 1);
                                            assert.equal(activityStream.items[0].object['oae:collection'].length, 2);

                                            // Re-enable the worker (again) and verify activities are still being routed
                                            ActivityAPI.refreshConfiguration(createDefaultConfig(), function(err) {
                                                assert.ok(!err);

                                                // Create a 3rd activity to verify routing
                                                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                                                    assert.ok(!err);

                                                    // Verify it was routed: now we should have 3 activities aggregated
                                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                                        assert.ok(!err);
                                                        assert.ok(activityStream);
                                                        assert.ok(activityStream.items);
                                                        assert.equal(activityStream.items.length, 1);
                                                        assert.equal(activityStream.items[0].object['oae:collection'].length, 3);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that activities delivered to activity feeds disappear after the configured `activityTtl` time has
             * expired.
             */
            it('verify activity ttl deletes an activity after the expiry time', function(callback) {
                // Set expiry to the smallest possible, 1 second
                ActivityAPI.refreshConfiguration(createDefaultConfig({'activityTtl': 1}), function(err) {
                    assert.ok(!err);

                    var jackUsername = TestsUtil.generateTestUserId('jack');
                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        // Try to generate an activity for Jack's feed
                        RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                            assert.ok(!err);

                            // Verify the activity is generated immediately
                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(activityStream);
                                assert.ok(activityStream.items);
                                assert.equal(activityStream.items.length, 1);

                                // Now wait for the expiry and verify it has disappeared
                                setTimeout(ActivityTestsUtil.collectAndGetActivityStream, 1100, jackCtx, null, null, function(err, activityStream) {
                                    assert.ok(!err);
                                    assert.ok(activityStream);
                                    assert.ok(activityStream.items);
                                    assert.equal(activityStream.items.length, 0);

                                    // Hooray! Set the TTL back to the default.
                                    ActivityAPI.refreshConfiguration(createDefaultConfig(), function(err) {
                                        assert.ok(!err);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#registerActivityEntityProducer()', function() {

            /**
             * Test that verifies you cannot register duplicate activity object producers
             */
            it('verify registering duplicate activity object producers results in an error', function(callback) {
                var testId = TestsUtil.generateTestUserId();
                ActivityAPI.registerActivityEntityProducer(testId, function() { });
                assert.throws(function() {
                    ActivityAPI.registerActivityEntityProducer(testId, function() { });
                });
                callback();
            });
        });

        describe('#registerActivityEntityRouter()', function() {

            /**
             * Test that verifies you cannot register duplicate activity routers
             */
            it('verify registering duplicate activity routers results in an error', function(callback) {
                var testId = TestsUtil.generateTestUserId();
                ActivityAPI.registerActivityRouter(testId, function() { });
                assert.throws(function() {
                    ActivityAPI.registerActivityRouter(testId, function() { });
                });
                callback();
            });

            /**
             * Test that verifies that when an seed resource with no associated producer is posted, the resourceData is used as the
             * persistent entity.
             */
            it('verify default producer persists just the activity seed resource data', function(callback) {
                var testActivityType = TestsUtil.generateTestUserId();
                var testResourceType = TestsUtil.generateTestUserId();
                var testResourceId = TestsUtil.generateTestUserId();
                var testResourceId2 = TestsUtil.generateTestUserId();
                var testResourceId3 = TestsUtil.generateTestUserId();

                var routerExecuted = false;
                var hadActor = false;
                var hadObject = false;
                var hadTarget = false;

                // Actor and target resource should not have any data. Will verify that no resourceData does not through a wrench into routing
                var actorResource = new ActivitySeedResource(testResourceType, testResourceId);
                var objectResource = new ActivitySeedResource(testResourceType, testResourceId2, {'testData': 'Testing'});
                var targetResource = new ActivitySeedResource(testResourceType, testResourceId3);
                var seed = new ActivitySeed(testActivityType, Date.now(), 'whistle', actorResource, objectResource, targetResource);

                // Simply trigger the activity. Assertion and continuation will be handled in the registered router function below
                ActivityAPI.postActivity(anonymousCamApiContext, seed);

                var continued = false;

                // Register a router for our unknown type. The persistent entity is given to the router, so we can verify it there
                ActivityAPI.registerActivityRouter(testResourceType, function(activityType, entityType, persistentEntity, routerCallback) {
                    assert.ok(persistentEntity);

                    // Verify the resourceId and resourceType have been stripped away as they are specific to the seed
                    assert.ok(!persistentEntity.resourceId);
                    assert.ok(!persistentEntity.resourceType);

                    // Verify the oae:id and objectType have been added in their place
                    assert.equal(persistentEntity.objectType, testResourceType);

                    if (entityType === 'actor') {
                        hadActor = true;
                        assert.equal(persistentEntity['oae:id'], testResourceId);
                        assert.equal(_.keys(persistentEntity).length, 2);
                    } else if (entityType === 'object') {
                        hadObject = true;
                        assert.equal(persistentEntity['oae:id'], testResourceId2);
                        assert.equal(_.keys(persistentEntity).length, 3);
                        assert.equal(persistentEntity.testData, 'Testing');
                    } else if (entityType === 'target') {
                        hadTarget = true;
                        assert.equal(persistentEntity['oae:id'], testResourceId3);
                        assert.equal(_.keys(persistentEntity).length, 2);
                    }

                    routerCallback();

                    if (!continued && hadActor && hadObject && hadTarget) {
                        continued = true;
                        return callback();
                    }
                });
            });
        });

        describe('#registerActivityType()', function() {

            /**
             * Test that verifies you cannot register duplicate activity types
             */
            it('verify registering duplicate activity types results in an error', function(callback) {
                var testId = TestsUtil.generateTestUserId();
                ActivityAPI.registerActivityType(testId, {});
                assert.throws(function() {
                    ActivityAPI.registerActivityType(testId, {});
                });
                callback();
            });
        });

        describe('#registerActivityTransformer()', function() {

            /**
             * Test that verifies you cannot register duplicate activity types
             */
            it('verify registering duplicate activity transformers results in an error', function(callback) {
                var testId = TestsUtil.generateTestUserId();
                ActivityAPI.registerActivityEntityTransformer(testId, function() {});
                assert.throws(function() {
                    ActivityAPI.registerActivityEntityTransformer(testId, function() {});
                });
                callback();
            });

            /**
             * Test that verifies that the default activity transformer will return just the oae:id, oae:tenant and objectType of an entity
             */
            it('verify default activity transformer returns objectType, oae:tenant and oae:id', function(callback) {
                var username = TestsUtil.generateTestUserId('jack');
                var testActivityType = TestsUtil.generateTestUserId();
                var testResourceType = TestsUtil.generateTestUserId();
                var testResourceId = 'foo:camtest:' + TestsUtil.generateTestUserId();

                var jackUsername = TestsUtil.generateTestUserId('jack');
                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    var actorResource = new ActivitySeedResource('user', jack.id);
                    var objectResource = new ActivitySeedResource(testResourceType, testResourceId, {'secret': 'My secret data!'});
                    var seed = new ActivitySeed(testActivityType, Date.now(), 'whistle', actorResource, objectResource);

                    // Post the activity and handle the result through the router.
                    ActivityAPI.postActivity(anonymousCamApiContext, seed);
                    ActivityAPI.registerActivityRouter(testResourceType, function(activityType, entityType, persistentEntity, routerCallback) {

                        // Sanity check the post to ensure that we received the secret parameter to be persisted
                        assert.equal(activityType, testActivityType);
                        assert.equal(entityType, 'object');
                        assert.ok(persistentEntity);
                        assert.equal(persistentEntity.secret, 'My secret data!');

                        // Continue the activity posting process now. We route to jack to ensure he receives this entity in his activity stream
                        routerCallback(null, {'activity': [jack.id]});

                        // Collect the persisted activity, and make sure its transformation contains the id and type, but not the secret
                        ActivityTestsUtil.collectAndGetActivityStream(jackCtx, jack.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            assert.equal(activityStream.items.length, 1);
                            assert.ok(activityStream.items[0].object);
                            assert.equal(activityStream.items[0].object.objectType, testResourceType);
                            assert.equal(activityStream.items[0].object['oae:id'], testResourceId);
                            assert.ok(activityStream.items[0].object['oae:tenant']);
                            assert.equal(activityStream.items[0].object['oae:tenant'].alias, global.oaeTests.tenants.cam.alias);
                            assert.equal(activityStream.items[0].object['oae:tenant'].displayName, global.oaeTests.tenants.cam.displayName);


                            // Make sure the extra property did not get delivered to the stream
                            assert.ok(!activityStream.items[0].object.secret);

                            return callback();
                        });
                    });
                });
            });
        });

        describe('#postActivity()', function() {

            /**
             * Test that postActivity validates input properly
             */
            it('verify postActivity validation', function(callback) {
                var jackUsername = TestsUtil.generateTestUserId('jack');
                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    // Generate an activity for Jack's feed
                    RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                        assert.ok(!err);

                        /*!
                         * @return a valid activity seed that can be overlayed with invalid values for testing.
                         */
                        var _createActivitySeed = function(seedOverlay, actorOverlay, objectOverlay, targetOverlay) {
                            if (!seedOverlay) {
                                return null;
                            }

                            var seed = {
                                'activityType': 'content-share',
                                'verb': 'share',
                                'published': Date.now()
                            };
                            var actor = {'resourceType': 'user', 'resourceId': jack.id};
                            var object = {'resourceType': 'content', 'resourceId': link.id};
                            var target = {'resourceType': 'user', 'resourceId': jack.id};

                            seed = _.extend(seed, seedOverlay);

                            if (actorOverlay) {
                                seed.actorResource = _.extend(actor, actorOverlay);
                            }

                            if (objectOverlay) {
                                seed.objectResource = _.extend(object, objectOverlay);
                            }

                            if (targetOverlay) {
                                seed.targetResource = _.extend(target, targetOverlay);
                            }

                            return seed;
                        };

                        // Verify no seed
                        ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed(), function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            // Verify no activity type
                            ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({'activityType': ''}), function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Verify no verb
                                ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({'verb': ''}), function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Verify no publish date
                                    ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({'published': ''}), function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);

                                        // Verify no actor
                                        ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}), function(err) {
                                            assert.ok(err);
                                            assert.equal(err.code, 400);

                                            // Verify no actor resource type
                                            ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}, {'resourceType': ''}), function(err) {
                                                assert.ok(err);
                                                assert.equal(err.code, 400);

                                                // Verify no actor resource id
                                                ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}, {'resourceId': ''}), function(err) {
                                                    assert.ok(err);
                                                    assert.equal(err.code, 400);

                                                    // Verify object with no resource type
                                                    ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}, {}, {'resourceType': ''}), function(err) {
                                                        assert.ok(err);
                                                        assert.equal(err.code, 400);

                                                        // Verify object with no resource id
                                                        ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}, {}, {'resourceId': ''}), function(err) {
                                                            assert.ok(err);
                                                            assert.equal(err.code, 400);

                                                            // Verify target with no resource type
                                                            ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}, {}, {}, {'resourceType': ''}), function(err) {
                                                                assert.ok(err);
                                                                assert.equal(err.code, 400);

                                                                // Verify target with no resource id
                                                                ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}, {}, {}, {'resourceId': ''}), function(err) {
                                                                    assert.ok(err);
                                                                    assert.equal(err.code, 400);

                                                                    // Sanity check successfull post
                                                                    ActivityAPI.postActivity(anonymousCamApiContext, _createActivitySeed({}, {}, {}, {}), function(err) {
                                                                        assert.ok(!err);
                                                                        callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies activities stop being posted when it is disabled in the admin console.
             */
            it('verifies disabling activity posting', function(callback) {
                var jackUsername = TestsUtil.generateTestUserId('jack');
                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    // Generate an activity for Jack's feed
                    RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                        assert.ok(!err);

                        // Disable activity posting
                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-activity/activity/enabled', false, function(err) {
                            assert.ok(!err);

                            // Try and generate an activity, but this should actually not be posted
                            RestAPI.Content.createLink(jackCtx, 'Yahoo', 'Yahoo', 'public', 'http://www.yahoo.ca', [], [], function(err, link2) {
                                assert.ok(!err);

                                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-activity/activity/enabled', true, function(err) {
                                    assert.ok(!err);

                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                        assert.ok(!err);

                                        // Verify only one activity and it is not an aggregation
                                        assert.equal(activityStream.items.length, 1);
                                        assert.equal(activityStream.items[0].object['objectType'], 'content');
                                        assert.equal(activityStream.items[0].object['oae:id'], link.id);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Activity Stream Permissions and Validation', function() {

        /**
         * Test that verifies getting an activity stream is validated properly.
         */
        it('verify getActivityStream validation', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Try anonymous user
                ActivityTestsUtil.collectAndGetActivityStream(anonymousCamRestContext, jack.id, null, function(err, activityStream) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.ok(!activityStream);

                    // Try empty id
                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, '  ', null, function(err, activityStream) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!activityStream);

                        // Try invalid principal id
                        ActivityTestsUtil.collectAndGetActivityStream(jackCtx, 'c:cam:someContent', null, function(err, activityStream) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            assert.ok(!activityStream);

                            // Sanity-check valid query
                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, jack.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies you cannot view another user's activity stream
         */
        it('verify a user activity stream can only be seen by the user themselves', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Generate an activity for Jack's feed
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                    assert.ok(!err);

                    // Sanity check that Jack can view his own feed
                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                        assert.ok(!err);
                        assert.ok(activityStream);
                        assert.ok(activityStream.items);
                        assert.equal(activityStream.items.length, 1);

                        // Create Jane and make sure she cannot see Jack's feed
                        RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                            assert.ok(!err);
                            var janeCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                            ActivityTestsUtil.collectAndGetActivityStream(janeCtx, jack.id, null, function(err, activityStream) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                                assert.ok(!activityStream);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies only members of a group can see the group's activity feed
         */
        it('verify a group activity stream can only be seen by its members', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Create Jane, she should not be able to see the group's feed as she will not be a member of the group
                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                    assert.ok(!err);
                    var janeCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                    // Create a group with which to share content
                    RestAPI.Group.createGroup(jackCtx, TestsUtil.generateTestUserId('group'), TestsUtil.generateTestUserId('group'), 'public', 'no', [], [], function(err, group) {
                        assert.ok(!err);

                        // Create a content item in the group library, this should route a "content created" activity to the group's activity feed
                        RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [group.id], function(err, link) {
                            assert.ok(!err);

                            // Verify Jack can see the activity in the group feed
                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, group.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(activityStream);
                                assert.equal(activityStream.items.length, 2);

                                ActivityTestsUtil.collectAndGetActivityStream(janeCtx, group.id, null, function(err, activityStream) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                                    assert.ok(!activityStream);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting Activity Stream', function() {

        /**
         * Test that verifies the tenant information gets associated with each activity entity.
         */
        it('verify activities have tenant information', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                var jack = _.values(users)[0].user;
                var jackCtx = _.values(users)[0].restContext;
                var jane = _.values(users)[1].user;

                // Jack creates a link and shares it with Jane.
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.com', [], [], function(err, link) {
                    assert.ok(!err);
                    RestAPI.Content.shareContent(jackCtx, link.id, [jane.id], function(err) {
                        assert.ok(!err);

                        ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                            assert.ok(!err);
                            assert.ok(activityStream.items.length > 0);

                            /**
                             * Verifies that the oae:tenant object is present on the activity entity.
                             *
                             * @param  {ActivityEntity} entity The activity entity
                             */
                            var assertActivityEntity = function(entity) {
                                assert.ok(entity['oae:tenant']);
                                assert.equal(entity['oae:tenant'].alias, global.oaeTests.tenants.cam.alias);
                                assert.equal(entity['oae:tenant'].displayName, global.oaeTests.tenants.cam.displayName);
                            };

                            // Make sure that both the actor, object and target (if one is available) have an oae:tenant object.
                            _.each(activityStream.items, function(activity) {
                                assertActivityEntity(activity.actor);
                                assertActivityEntity(activity.object);
                                if (activity['oae:activityType'] === 'content-share') {
                                    assertActivityEntity(activity.target);
                                }
                            });
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the tenant information gets associated with each activity entity when they appear in collections.
         */
        it('verify activities with collections have tenant information', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users) {
                var jack = _.values(users)[0].user;
                var jackCtx = _.values(users)[0].restContext;
                var jane = _.values(users)[1].user;
                var jill = _.values(users)[2].user;

                // Jack creates a link and shares it with Jane and Jill.
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.com', [], [], function(err, link) {
                    assert.ok(!err);
                    RestAPI.Content.shareContent(jackCtx, link.id, [jane.id, jill.id], function(err) {
                        assert.ok(!err);

                        ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                            assert.ok(!err);
                            assert.ok(activityStream.items.length > 0);

                            /**
                             * Verifies that the oae:tenant object is present on the activity entity.
                             *
                             * @param  {ActivityEntity} entity The activity entity
                             */
                            var assertActivityEntity = function(entity) {
                                assert.ok(entity['oae:tenant']);
                                assert.equal(entity['oae:tenant'].alias, global.oaeTests.tenants.cam.alias);
                                assert.equal(entity['oae:tenant'].displayName, global.oaeTests.tenants.cam.displayName);
                            };

                            // Make sure that both the actor, object and target (if one is available) have an oae:tenant object.
                            _.each(activityStream.items, function(activity) {
                                assertActivityEntity(activity.actor);
                                assertActivityEntity(activity.object);
                                if (activity['oae:activityType'] === 'content-share') {
                                    _.each(activity.target['oae:collection'], function(entity) {
                                        assertActivityEntity(entity);
                                    });
                                }
                            });
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies paging of activity feeds
         */
        it('verify paging of activity feeds', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                    assert.ok(!err);
                    var janeCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                    // Generate 2 activities for jack's feed
                    RestAPI.Content.createLink(jackCtx, 'A', 'A', 'public', 'http://www.google.ca', [], [], function(err, link) {
                        assert.ok(!err);

                        RestAPI.Content.shareContent(jackCtx, link.id, [jane.id], function(err) {
                            assert.ok(!err);

                            // Get the items, ensure there are 2
                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.equal(activityStream.items.length, 2);

                                var firstId = activityStream.items[0]['oae:activityId'];
                                var secondId = activityStream.items[1]['oae:activityId'];

                                // Verify when you query with limit=1, you get the first and only the first activity
                                ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, {'limit': 1}, function(err, activityStream) {
                                    assert.ok(!err);
                                    assert.equal(activityStream.items.length, 1);
                                    assert.equal(activityStream.items[0]['oae:activityId'], firstId);

                                    // Verify when you query with the firstId as the start point, you get just the second activity
                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, {'start': firstId}, function(err, activityStream) {
                                        assert.ok(!err);
                                        assert.equal(activityStream.items.length, 1);
                                        assert.equal(activityStream.items[0]['oae:activityId'], secondId);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Activity Stream Aggregation', function() {

        /**
         * Test that verifies when the aggregation expiry time has exceeded, a new activity will be created when it matches a pivot
         * rather than continuing to aggregate in the previous activity.
         */
        it('verify aggregation idle expiry time', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');

            // Set the aggregate expiry time to 1 second. This should give us enough time to aggregate 2 activities, wait for expiry, then create a 3rd to verify it does not aggregate.
            ActivityAPI.refreshConfiguration(createDefaultConfig({'aggregateIdleExpiry': 1}), function(err) {
                assert.ok(!err);

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.Content.createLink(jackCtx, 'A', 'A', 'public', 'http://www.google.ca', [], [], function(err, linkA) {
                        assert.ok(!err);

                        RestAPI.Content.createLink(jackCtx, 'B', 'B', 'public', 'http://www.google.ca', [], [], function(err, linkB) {
                            assert.ok(!err);

                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                assert.ok(!err);

                                // Verify both creates are aggregated into 1 activity
                                assert.equal(activityStream.items.length, 1);

                                var hasA = false;
                                var hasB = false;

                                var entity = activityStream.items[0].object;
                                assert.ok(entity['oae:collection']);
                                _.each(entity['oae:collection'], function(collectedEntity) {
                                    if (collectedEntity['oae:id'] === linkA.id) {
                                        hasA = true;
                                    } else if (collectedEntity['oae:id'] === linkB.id) {
                                        hasB = true;
                                    }
                                });

                                assert.ok(hasA);
                                assert.ok(hasB);

                                // Let the aggregation timeout expire and create a new link
                                setTimeout(RestAPI.Content.createLink, 1100, jackCtx, 'C', 'C', 'public', 'http://www.google.ca', [], [], function(err, linkC) {
                                    assert.ok(!err);

                                    // Re-collect and verify that the aggregate expired, thus making the link a new activity, not an aggregate
                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                        assert.ok(!err);

                                        // Reset the activity configuration to the defaults
                                        ActivityAPI.refreshConfiguration(createDefaultConfig(), function(err) {
                                            assert.ok(!err);

                                            // Now validate the activity stream contents
                                            assert.equal(activityStream.items.length, 2);

                                            entity = activityStream.items[0].object;
                                            assert.equal(entity['oae:id'], linkC.id);

                                            hasA = false;
                                            hasB = false;

                                            entity = activityStream.items[1].object;
                                            assert.ok(entity['oae:collection']);
                                            _.each(entity['oae:collection'], function(collectedEntity) {
                                                if (collectedEntity['oae:id'] === linkA.id) {
                                                    hasA = true;
                                                } else if (collectedEntity['oae:id'] === linkB.id) {
                                                    hasB = true;
                                                }
                                            });

                                            assert.ok(hasA);
                                            assert.ok(hasB);

                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the maximum aggregate expiry time will cause a new aggregate to be created even if the aggregate
         * does not fall idle.
         */
        it('verify aggregation max expiry time', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');

            // Set the aggregate max time to 1s and the idle time higher to 5s, this is to rule out the possibility of idle expiry messing up this test
            ActivityAPI.refreshConfiguration(createDefaultConfig({'aggregateIdleExpiry': 5, 'aggregateMaxExpiry': 1}), function(err) {
                assert.ok(!err);

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    // This is when the createLink aggregate is born
                    RestAPI.Content.createLink(jackCtx, 'A', 'A', 'public', 'http://www.google.ca', [], [], function(err, linkA) {
                        assert.ok(!err);

                        // Drop an aggregate in. The when collected the aggregate is 600ms old
                        setTimeout(RestAPI.Content.createLink, 600, jackCtx, 'B', 'B', 'public', 'http://www.google.ca', [], [], function(err, linkB) {
                            assert.ok(!err);

                            // Collect, then wait for expiry
                            ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                assert.ok(!err);

                                // When this content item is created, it should have crossed max expiry, causing this content create activity to be delivered individually
                                setTimeout(RestAPI.Content.createLink, 1500, jackCtx, 'C', 'C', 'public', 'http://www.google.ca', [], [], function(err, linkC) {
                                    assert.ok(!err);

                                    ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                                        assert.ok(!err);

                                        // Reset the activity configuration to the defaults
                                        ActivityAPI.refreshConfiguration(createDefaultConfig(), function(err) {
                                            assert.ok(!err);

                                            // Now validate the activity stream contents
                                            assert.equal(activityStream.items.length, 2);

                                            // The most recent is the individual content-create entity activity
                                            var entity = activityStream.items[0].object;
                                            assert.equal(entity['oae:id'], linkC.id);

                                            // The next oldest is the aggregated with a and b in it
                                            var hasA = false;
                                            var hasB = false;
                                            entity = activityStream.items[1].object;
                                            assert.ok(entity['oae:collection']);
                                            entity['oae:collection'].forEach(function(collectedEntity) {
                                                if (collectedEntity['oae:id'] === linkA.id) {
                                                    hasA = true;
                                                } else if (collectedEntity['oae:id'] === linkB.id) {
                                                    hasB = true;
                                                }
                                            });

                                            assert.ok(hasA);
                                            assert.ok(hasB);

                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * Test that verifies that when the aggregateIdleExpiry expires, the aggregate data disappears from storage.
         */
        it('verify aggregated data is automatically deleted after the idle expiry time time', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');

            // Set the aggregate max time to 1s, if we add aggregate data then wait this period of time, queries to the DAO should show that this data has
            // been automatically cleaned out
            ActivityAPI.refreshConfiguration(createDefaultConfig({'aggregateIdleExpiry': 1, 'aggregateMaxExpiry': 5}), function(err) {
                assert.ok(!err);

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    // Create a link then collect, which creates the aggregates
                    RestAPI.Content.createLink(jackCtx, 'A', 'A', 'public', 'http://www.google.ca', [], [], function(err, link) {
                        assert.ok(!err);

                        // Drop an aggregate in. This is when the aggregate should be initially persisted, so should expire 1s from this time
                        ActivityTestsUtil.collectAndGetActivityStream(jackCtx, null, null, function(err, activityStream) {
                            assert.ok(!err);

                            // Verify that the DAO reports the aggregate status is indeed there.
                            var aggregateKey = util.format('content-create#%s#user:%s##', jack.id, jack.id);

                            ActivityDAO.getAggregateStatus([aggregateKey], function(err, aggregateStatus) {
                                assert.ok(!err);
                                assert.ok(aggregateStatus[aggregateKey]);
                                assert.ok(aggregateStatus[aggregateKey].lastActivity);

                                // Verify that the DAO reports the aggregated entity is indeed there at this time
                                ActivityDAO.getAggregatedEntities([aggregateKey], function(err, aggregatedEntities) {
                                    assert.ok(!err);
                                    assert.ok(aggregatedEntities[aggregateKey]);
                                    assert.ok(aggregatedEntities[aggregateKey]['actors']['user:' + jack.id]);
                                    assert.ok(aggregatedEntities[aggregateKey]['objects']['content:' + link.id]);

                                    // Wait the max expiry (1s) to let them disappear and verify there is no status
                                    setTimeout(ActivityDAO.getAggregateStatus, 1100, [aggregateKey], function(err, aggregateStatus) {
                                        assert.ok(!err);
                                        assert.ok(_.isEmpty(aggregateStatus));

                                        // Verify the entities disappeared
                                        ActivityDAO.getAggregatedEntities([aggregateKey], function(err, aggregatedEntities) {
                                            assert.ok(!err);
                                            assert.ok(_.isEmpty(aggregatedEntities['actors']));
                                            assert.ok(_.isEmpty(aggregatedEntities['objects']));
                                            assert.ok(_.isEmpty(aggregatedEntities['targets']));

                                            ActivityAPI.refreshConfiguration(createDefaultConfig({}), callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
