/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var exec = require('child_process').exec;
var fs = require('fs');
var Path = require('path');
var util = require('util');

var log = require('oae-logger').logger('oae-preview-processor');
var ImageUtil = require('oae-util/lib/image');
var IO = require('oae-util/lib/io');
var OaeUtil = require('oae-util/lib/util');

var PreviewConstants = require('oae-preview-processor/lib/constants');
var PreviewUtil = require('oae-preview-processor/lib/util');

var _pdftkBinary = null;
var _pdftkTimeout = 120000;

var _pdf2htmlEXBinary = null;
var _pdf2htmlEXTimeout = 120000;

/**
 * Initializes the PDF Processor. This method will check if the configuration has been set up correctly to deal with PDF files
 *
 * @param  {Object}     config          The config object containing the `pdftk` and `pdf2htmlEX` configuration. See the `config.previews` object in the base `./config.js` for more information
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    Standard error object (if any)
 */
var init = module.exports.init = function(config, callback) {
    if (!config || !config.pdftk || !config.pdftk.binary || !config.pdf2htmlEX || !config.pdf2htmlEX.binary) {
        return callback({'code': 400, 'msg': 'Missing configuration for the pdftk and/or pdf2htmlEX binary'});
    }

    // Try to execute `pdftk --help`
    var cmd = util.format('"%s" --help', config.pdftk.binary);
    log().trace('Executing %s to verify if the path to the pdftk binary is configured correctly.', cmd);
    exec(cmd, {'timeout': 10000}, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'stdout': stdout, 'stderr': stderr}, 'Could not properly execute the pdftk binary.');
            return callback({'code': 500, 'msg': 'The path for the pdftk binary is misconfigured.'});
        }

        _pdftkBinary = config.pdftk.binary;
        _pdftkTimeout = OaeUtil.getNumberParam(config.pdftk.timeout, _pdftkTimeout);

        // Try to execute `pdf2htmlEX --version`
        cmd = util.format('"%s" --version', config.pdf2htmlEX.binary);
        log().trace('Executing %s to verify if the path to the pdf2htmlEX binary is configured correctly.', cmd);
        exec(cmd, {'timeout': 10000}, function (err, stdout, stderr) {
            if (err) {
                log().error({'err': err, 'stdout': stdout, 'stderr': stderr}, 'Could not properly execute the pdf2htmlEX binary.');
                return callback({'code': 500, 'msg': 'The path for the pdf2htmlEX binary is misconfigured.'});
            }

            _pdf2htmlEXBinary = config.pdf2htmlEX.binary;
            _pdf2htmlEXTimeout = OaeUtil.getNumberParam(config.pdf2htmlEX.timeout, _pdf2htmlEXTimeout);

            callback();
        });
    });
};

/**
 * @borrows Interface.test as PDF.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    if (contentObj.resourceSubType === 'file' && PreviewConstants.TYPES.PDF.indexOf(ctx.revision.mime) !== -1) {
        callback(null, 10);
    } else {
        callback(null, -1);
    }
};

/**
 * @borrows Interface.generatePreviews as PDF.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {
    // Download the file
    ctx.download(function(err, path) {
        if (err) {
            return callback(err);
        }

        // Generate the previews for it
        previewPDF(ctx, path, callback);
    });
};

/**
 * Generates previews for a PDF file.
 * 1 html will be generated for each page.
 *
 * @param  {PreviewContext}      ctx             The preview context associated to this file
 * @param  {String}              path            The path where the PDF file is stored
 * @param  {Function}            callback        Standard callback method
 * @param  {Object}              callback.err    Standard error object (if any)
 */
var previewPDF = module.exports.previewPDF = function(ctx, path, callback) {
    // Create a directory where we can store the files
    var pagesDir = ctx.baseDir + '/pages';
    fs.mkdir(pagesDir, function(err) {
        if (err) {
            log().error({'err': err, 'contentId': ctx.contentId}, 'Could not create a directory %s to store the pages in', pagesDir);
            return callback({'code': 500, 'msg': 'Could not create a directory to store the splitted pages in'});
        }

        _convertPDFToHTMLPages(ctx, path, pagesDir, function(err) {
            if (err) {
                return callback(err);
            }

            _generateThumbnail(ctx, path, pagesDir, callback);
        });
    });
};

/**
 * Converts a PDF file at `path` to a set of HTML files.
 * An HTML file will be generated for each page in the pdf, aptly named `page.<i>.html`.
 * A single CSS file will be generated that will contain the positioning for *all* the pages.
 * All HTML and CSS files will be added to the preview context, as will as the `pageCount` metadata.
 *
 * @param  {PreviewContext}      ctx             The preview context associated to this file
 * @param  {String}              path            The path where the PDF file is stored
 * @param  {String}              pagesDir        The directory where the pages can be stored in
 * @param  {Function}            callback        Standard callback method
 * @param  {Object}              callback.err    Standard error object (if any)
 * @api private
 */
var _convertPDFToHTMLPages = function(ctx, path, pagesDir, callback) {
    var cmd = util.format('"%s" --split-pages=1 --page-filename=page..html --embed-css=0 --css-filename=lines.css --embed-javascript=0 --fit-width=700 --dest-dir "%s" "%s"', _pdf2htmlEXBinary, pagesDir, path);
    exec(cmd, {'timeout': _pdf2htmlEXTimeout}, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'stdout': stdout, 'stderr': stderr}, 'Could not convert page to html.');
            return callback({'code': 500, 'msg': 'Could not convert page to html'});
        }

        // Converting was succesful, get a list of files we generated
        fs.readdir(pagesDir, function(err, files) {
            if (err) {
                log().error({'err': err, 'contentId': ctx.contentId}, 'Could not read the %s directory to list the files', pagesDir);
                return callback({'code': 500, 'msg': 'Could not read the directory'});
            }

            // Only return the page HTML files, ie: page.i.html
            var htmlFiles = _.filter(files, function(file) {
                return (file.split('.')[0] === 'page' && file.split('.').pop() === 'html');
            });

            // Add each HTML to the list of previews that should be stored.
            _.each(htmlFiles, function(htmlFile) {
                ctx.addPreview(pagesDir + '/' + htmlFile, 'html');
            });

            // The CSS files need to be included in the preview data as it's these files
            // that contain all the offset to obtain a pixel-perfect replica of the PDF file.
            var baseMinCssPath = pagesDir + '/base.min.css';
            var fancyMinCssPath = pagesDir + '/fancy.min.css';
            var baseCssPath = pagesDir + '/base.css';
            var fancyCssPath = pagesDir + '/fancy.css';
            var linesCssPath = pagesDir + '/lines.css';

            fs.rename(baseMinCssPath, baseCssPath, function(err) {
                if (err) {
                    log().error({'err': err}, 'Error renaming base.min.css to base.css');
                    return callback({'code': 500, 'msg': 'Error renaming base.min.css to base.css'});
                }

                fs.rename(fancyMinCssPath, fancyCssPath, function(err) {
                    if (err) {
                        log().error({'err': err}, 'Error renaming fancy.min.css to fancy.css');
                        return callback({'code': 500, 'msg': 'Error renaming fancy.min.css to fancy.css'});
                    }

                    ctx.addPreview(baseCssPath, 'css');
                    ctx.addPreview(fancyCssPath, 'css');
                    ctx.addPreview(linesCssPath, 'css');

                    // The amount of pages should be stored as metadata
                    ctx.addPreviewMetadata('pageCount', htmlFiles.length);

                    return callback();
                });
            });
        });
    });
};

/**
 * Splits one PDF file into a PDF file per page.
 * ie: If a PDF file has 5 pages in it, this method will generate 5 pdf files in a directory.
 * The files will be named 'page.i.pdf'.
 *
 * @param  {PreviewContext}      ctx             The preview context associated to this file
 * @param  {String}              path            The path where the PDF file is stored
 * @param  {String}              pagesDir        The directory where the pages can be stored in
 * @param  {Function}            callback        Standard callback method
 * @param  {Object}              callback.err    Standard error object (if any)
 * @param  {String[]}            callback.files  An array of file names that were generated and stored in `pagesDir`. The array will be sorted from the first page to the last page
 * @api private
 */
var _generateThumbnail = function(ctx, path, pagesDir, callback) {
    // Split off the first page in the PDF
    var cmd = util.format('"%s" "%s" cat 1 output "%s/page.1.pdf"', _pdftkBinary, path, pagesDir);
    log().trace({'contentId': ctx.contentId}, 'Executing %s', cmd);
    exec(cmd, {'timeout': _pdftkTimeout}, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'contentId': ctx.contentId, 'stdout': stdout, 'stderr': stderr}, 'Could not split the PDF.');
            return callback({'code': 500, 'msg': 'Could not split the PDF file.'});
        }

        // Convert that PDF to a PNG
        var inputPdf = pagesDir + '/page.1.pdf';
        var outputPng = pagesDir + '/page.1.png';
        _convertToPNG(ctx, inputPdf, outputPng, PreviewConstants.SIZES.PDF.LARGE, function(err) {
            if (err) {
                return callback(err);
            }

            // Crop the PNG to a size that is suitable for thumbnails
            PreviewUtil.generatePreviewsFromImage(ctx, outputPng, {'cropMode': 'TOP'}, callback);
        });
    });
};

/**
 * Convert a PDF file to a PNG file.
 * The outputted PNG file will have a width of 1000px.
 *
 * @param  {PreviewContext}      ctx             The preview context associated to this file
 * @param  {String}              input           The PDF file to convert
 * @param  {String}              output          The path where the PNG file should be written
 * @param  {Number}              width           The desired width of the PNG file
 * @param  {Function}            callback        Standard callback method
 * @param  {Object}              callback.err    Standard error object (if any)
 * @api private
 */
var _convertToPNG = function(ctx, input, output, width, callback) {
    var cmd = util.format('gm convert +adjoin -define pdf:use-cropbox=true -density 150 -resize %s -quality 100 "%s" "%s"', width, input, output);
     // Execute the command
    log().trace({'contentId': ctx.contentId}, 'Executing %s', cmd);
    var options = {
        'timeout': _pdftkTimeout,
        'env': _.defaults({'OMP_NUM_THREADS': 2}, process.env)
    };
    exec(cmd, options, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'contentId': ctx.contentId, 'stdout': stdout, 'stderr': stderr}, 'Could not convert a PDF page to a PNG.');
            return callback({'code': 500, 'msg': 'Could not convert a PDF page to a PNG.'});
        }

        return callback();
    });
};
