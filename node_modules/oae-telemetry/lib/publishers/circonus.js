/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var request = require('request');

var Redis = require('oae-util/lib/redis');
var TelemetryAPI = require('oae-telemetry');
var log = require('oae-logger').logger('telemetry-circonus');

var Config = require('../../../../config.js').config;

var redisClient = null;

/**
 * Will push data into redis and publish histogram data to circonus via HTTPTrap
 */
module.exports.init = function() {
    if (redisClient === null) {
        redisClient = Redis.createClient();
    }
    setInterval(pushCountsToRedis, Config.telemetry.circonus.redisInterval);
    setInterval(pushHistogramsToCirconus, Config.telemetry.circonus.circonusInterval);
};

/**
 * Iterates over the counters and sends each key to redis.
 * Run once to start the interval.
 *
 * @api private
 */
var pushCountsToRedis = function() {
    var counters = TelemetryAPI.getTelemetryData().counts;
    var modules = Object.keys(counters);
    var redisTodo = 0;
    var totalItems = 0;

    /*!
     * Logs an error if one has been passed in.
     *
     * @param  {Object}     [err]   The error that should be logged.
     * @param  {Object}     [res]   The redis response.
     * @api private
     */
    var _logError = function(err, res) {
        if (err) {
            log().error('Problem pushing telemetry data into redis.');
        }
    };

    for (var i = 0; i < modules.length; i++) {
        var module = modules[i];

        var keys = Object.keys(counters[module]);
        for (var j = 0; j < keys.length;j++) {
            var key = keys[j];

            if (counters[module][key] > 0) {
                totalItems++;
                redisTodo++;
                redisClient.hincrby('telemetry', module + '.' + key, counters[module][key], _logError);

                counters[module][key] = 0;
            }
        }
    }
};


var pushHistogramsToCirconus = function() {
    // Get the histogram data.
    var histograms = TelemetryAPI.getTelemetryData().histograms;

    // Format it so it's suitable for circonus consumption.
    // Circonus expects histogram data to be of the form:
    // { "_value": [12, 2, 44, 1], "_type": "I"}
    var circonusData = {};
    var histogramsToSend = 0;
    var modules = Object.keys(histograms);
    for (var i = 0; i < modules.length; i++) {
        var module = modules[i];
        circonusData[module] = {};

        var keys = Object.keys(histograms[module]);
        for (var j = 0; j < keys.length;j++) {
            var key = keys[j];
            if (histograms[module][key].length > 0) {
                histogramsToSend++;
                circonusData[module][key] = {
                    '_value': histograms[module][key],
                    '_type': 'I'
                };
            }
        }
    }

    if (histogramsToSend !== 0) {
        // If we have something to send, PUT it to circonus.
        request({
            'method': 'PUT',
            'uri': Config.telemetry.circonus.url,
            'body': JSON.stringify(circonusData)
        }, function(err, response, body) {
            if (err) {
                log().warn('Couldn\'t publish telemetry data to circonus.');
            } else if (response.statusCode !== 200) {
                log().warn('Couldn\'t publish telemetry data to circonus: ' + body);
            } else {
                // We published our histograms, reset them.
                // Warning: Because of the latency between publishing,
                // we might delete a couple of append()'s that we didn't publish
                var modules = Object.keys(histograms);
                for (var i = 0; i < modules.length; i++) {
                    var module = modules[i];

                    var keys = Object.keys(histograms[module]);
                    for (var j = 0; j < keys.length;j++) {
                        var key = keys[j];
                        histograms[module][key] = [];
                    }
                }
                log().info('Sent %d histograms to circonus', histogramsToSend);
            }
        });
    }
};
