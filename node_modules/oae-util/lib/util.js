/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * Checks if the passed in value is a stringified Boolean and returns a Boolean type if there's a match.
 * If the value passed in is not a stringified Boolean the original value is returned.
 *
 * @param  {String}           value   String that will be converted to Boolean if it matches: 'true', 'false', '1' or '0' or returned if there's no match.
 * @return {Boolean|String}           Returns true, false or the original value
 */
var castToBoolean = module.exports.castToBoolean = function(value) {
    if (value === 'true' || value === '1') {
        return true;
    } else if (value === 'false' || value === '0') {
        return false;
    }
    return value;
};

/**
 * Get the number parameter as specified by `val`. If `val` is not a valid number (i.e., it cannot be converted to one),
 * then `defaultVal` will be return instead.
 *
 * @param   {String|Number}     val         The value to try and convert to an integer
 * @param   {String|Number}     defaultVal  The value to return if `val` is not a valid integer
 * @return  {String|Number}                 `val` converted to an integer, if possible. If not possible `defaultVal` is returned
 */
var getNumberParam = module.exports.getNumberParam = function(val, defaultVal) {
    val = parseInt(val, 10);
    return (isNaN(val)) ? defaultVal : val;
};
