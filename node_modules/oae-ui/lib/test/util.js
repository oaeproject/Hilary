/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var RestAPI = require('oae-rest');

var UIAPI = require('oae-ui');

/**
 * Updates the skin variables for a tenant and waits till the CSS has been regenerated.
 *
 * @param  {RestContext}    restCtx             The RestContext to make to post with. This should be a global or tenant admin.
 * @param  {String}         tenantAlias         The alias of the tenant for which the skin should be changed.
 * @param  {Object}         skinConfig          The config that contains the CSS variables.
 * @param  {Function}       callback            Standard callback method.
 * @param  {Object}         callback.err        Standard error object.
 * @param  {Object}         callback.response   The response from the Config REST API.
 */
var updateSkinAndWait = module.exports.updateSkinAndWait = function(restCtx, tenantAlias, skinConfig, callback) {

    var calledBack = false;
    var requestReturned = false;
    var skinFileParsed = false;

    var responseArgs = null;

    /*!
     * Monitors the result of both the updateConfig web request and the internal `skinParsed` event
     * to only callback when both the request has executed completely and the asynchronous parse process
     * has completed.
     *
     * @param  {Object}     err     An error that occured in either request
     */
    var _callback = function(err) {
        if (calledBack) {
            // Already called back, do nothing
            return;
        }

        if (err) {
            // Received an error from either rest endpoint or skin parse, throw the error
            calledBack = true;
            return callback(err);
        }

        if (requestReturned && skinFileParsed) {
            // Call the callback with the arguments from the web request
            calledBack = true;
            callback(null, responseArgs);
        }
    };

    if (skinConfig && _.isObject(skinConfig)) {
        skinConfig = JSON.stringify(skinConfig);
    }
    RestAPI.Config.updateConfig(restCtx, tenantAlias, 'oae-ui/skin/variables', skinConfig, function(err) {
        if (err) {
            // Remove this listener, since it may not be invoked and "leak" due to this error
            UIAPI.removeListener('skinParsed', _updateListener);
            return _callback(err);
        }

        responseArgs = arguments;
        requestReturned = true;
        _callback();
    });

    /*!
     * Handles the `skinParsed` event, simply notifying the `_callback` that the skin has been parsed.
     *
     * @see UIAPI events for parameter description
     */
    var _updateListener = function() {
        skinFileParsed = true;
        _callback();
    };

    UIAPI.once('skinParsed', _updateListener);

};