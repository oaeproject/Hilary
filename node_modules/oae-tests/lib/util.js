/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var bodyParser = require('body-parser');
var clone = require('clone');
var express = require('express');
var ShortId = require('shortid');
var stream = require('stream');
var util = require('util');

var Cassandra = require('oae-util/lib/cassandra');
var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context').Context;
var multipart = require('oae-util/lib/middleware/multipart');
var MQ = require('oae-util/lib/mq');
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');
var PreviewAPI = require('oae-preview-processor/lib/api');
var Redis = require('oae-util/lib/redis');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var RestUtil = require('oae-rest/lib/util');
var TenantsTestUtil = require('oae-tenants/lib/test/util');
var User = require('oae-principals/lib/model').User;

var log = require('oae-logger').logger('before-tests');

/**
 * Create a new express test server on some port between 2500 and 3500
 *
 * @param  {Function}   callback            Standard callback function
 * @param  {Express}    callback.app        The ExpressJS app object
 * @param  {HttpServer} callback.server     The HTTP Server object that is listening
 * @param  {Number}     callback.port       The port on which the server is listening
 */
var createTestServer = module.exports.createTestServer = function(callback, _attempts) {
    _attempts = OaeUtil.getNumberParam(_attempts, 0);
    if (_attempts === 10) {
        assert.fail('Could not start a test web server in 10 attempts');
    }

    var port = 2500 + Math.floor(Math.random() * 1000);
    var app = express();

    app.use(bodyParser.urlencoded({'extended': true}));
    app.use(bodyParser.json());
    app.use(multipart());

    // Try and listen on the specified port
    var server = app.listen(port + _attempts);

    // When the server successfully begins listening, invoke the callback
    server.once('listening', function() {
        server.removeAllListeners('error');
        return callback(app, server, port + _attempts);
    });

    // If there is an error connecting, try another port
    server.once('error', function(err) {
        server.removeAllListeners('listening');
        return createTestServer(callback, _attempts + 1);
    });
};

/**
 * Generate a number of random users that can be used inside of tests
 *
 * @param  {RestContext}    restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {Number}         total               The total number of test groups that need to be created. If not provided, a single test group will be created
 * @param  {Function}       callback            Standard callback method
 * @param  {Object}         callback.err        Error object containing error code and error message
 * @param  {Object}         callback.response   Object where the keys are the user ids of the created users and the values are objects with a key 'user' that contains the user object and a key 'restContext' that contains the Rest Context object for that user
 * @param  {Object}         callback.user1      An object with key `user` containing the User object, and `restContext` containing that user's rest context for one of the users that was created
 * @param  {Object}         [callback.user2]    Another user that was created
 * @param  {Object}         [callback....]      Each user that was generated as new callback arguments
 */
var generateTestUsers = module.exports.generateTestUsers = function(restCtx, total, callback, _createdUsers) {
    total = OaeUtil.getNumberParam(total, 1);
    _createdUsers = _createdUsers || [];
    if (total === 0) {
        var callbackArgs = [];
        callbackArgs.push(null);
        callbackArgs.push(_.indexBy(_createdUsers, function(user) { return user.user.id; }));
        callbackArgs = _.union(callbackArgs, _createdUsers);
        return callback.apply(callback, callbackArgs);
    }

    // Ensure that the provided rest context has been authenticated before trying to use it to
    // create users
    _ensureAuthenticated(restCtx, function(err) {
        if (err) {
            return callback(err);
        }

        var username = generateTestUserId('random-user');
        var displayName = generateTestGroupId('random-user');
        var email = generateTestEmailAddress(username);
        RestAPI.User.createUser(restCtx, username, 'password', displayName, {'email': email}, function(err, user) {
            if (err) {
                return callback(err);
            }

            _createdUsers.push({
                'user': user,
                'restContext': new RestContext(restCtx.host, {
                    'hostHeader': restCtx.hostHeader,
                    'username': username,
                    'userPassword': 'password',
                    'strictSSL': restCtx.strictSSL
                })
            });

            // Recursively continue creating users
            return generateTestUsers(restCtx, --total, callback, _createdUsers);

        });
    });
};

/**
 * Generate a number of random groups that can be used inside of tests
 *
 * @param  {RestContext}  restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {Number}       total               The total number of test groups that need to be created. If not provided, a single test group will be created
 * @param  {Function}     callback            Standard callback method
 * @param  {Object}       callback.err        Error object containing error code and error message
 * @param  {Object}       callback.response   Object where the keys are the group ids of the created groups and the values are the actual group objects
 */
var generateTestGroups = module.exports.generateTestGroups = function(restCtx, total, callback) {
    total = total || 1;
    var createdGroups = {};

    var groupCreated = function(err, groupObj) {
        if (err) {
            return callback({'code': 500, 'msg': 'An error occured whilst creating random test groups'});
        }
        createdGroups[groupObj.id] = groupObj;
        if (_.keys(createdGroups).length === total) {
            var callbackArgs = _.union([null, createdGroups], _.values(createdGroups));
            callback.apply(callback, callbackArgs);
        }
    };

    // We first have to make sure that the user creating the groups is logged in, otherwise the asynchronous
    // nature will confuse the cookie jar management in OAE Rest
    RestAPI.User.getMe(restCtx, function(err, meObj) {
        if (err) {
            return callback({'code': 500, 'msg': 'An error occured whilst trying to log in the user'});
        }
        for (var g = 0; g < total; g++) {
            RestAPI.Group.createGroup(restCtx, generateTestGroupId('random-title'), generateTestGroupId('random-description'), 'public', 'yes', [], [], groupCreated);
        }
    });
};

/**
 * Create a new tenant with a tenant administrator user.
 *
 * @param  {String}        tenantAlias                     The tenant alias of the tenant to create
 * @param  {String}        tenantHost                      The host of the tenant to create
 * @param  {Function}      callback                        Invoked when the process completes
 * @param  {Object}        callback.err                    An error that occurred, if any
 * @param  {Object}        callback.tenant                 The tenant data object
 * @param  {RestContext}   callback.tenantAdminRestContext The rest context that can be used to make requests on behalf of the tenant administrator
 * @param  {User}          callback.tenantAdmin            The user object representing the tenant
 */
var createTenantWithAdmin = module.exports.createTenantWithAdmin = function(tenantAlias, tenantHost, callback) {
    var adminCtx = createGlobalAdminRestContext();
    TenantsTestUtil.createTenantAndWait(adminCtx, tenantAlias, tenantAlias, tenantHost, function(err, tenant) {
        if (err) {
            return callback(err);
        }

        // Disable recaptcha so we can create a user
        ConfigTestUtil.updateConfigAndWait(adminCtx, tenantAlias, {'oae-principals/recaptcha/enabled': false}, function(err) {
            if (err) {
                return callback(err);
            }

            // Create the user and make them admin
            var anonymousCtx = createTenantRestContext(tenantHost);
            RestAPI.User.createUser(anonymousCtx, 'administrator', 'administrator', 'Tenant Administrator', null, function(err, tenantAdmin) {
                if (err) {
                    return callback(err);
                }

                RestAPI.User.setTenantAdmin(adminCtx, tenantAdmin.id, true, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    // Re-enable captcha
                    var tenantAdminRestCtx = createTenantAdminRestContext(tenantHost);
                    ConfigTestUtil.updateConfigAndWait(tenantAdminRestCtx, null, {'oae-principals/recaptcha/enabled': true}, function(err) {
                        if (err) {
                            return callback(err);
                        }

                        return callback(null, tenant, tenantAdminRestCtx, tenantAdmin);
                    });
                });
            });
        });
    });
};

/**
 * Create a group hierarchy, starting from the 0th group in the array as the highest level down to the last group as the lowest level.
 *
 * @param  {Context}     restCtx         The context of the REST request
 * @param  {String[]}    groupIds        An array of group IDs that describe the hierarchy to create. If there are 0 or 1 groupIds, this method effectively does nothing. If there are 2 groupIds, the group at groupId[1] becomes a member of groupId[0]. And so on.
 * @param  {String}      role            The role to assign to the group membership
 * @param  {Function}    callback        Standard callback method
 * @param  {Object}      callback.err    An error that occurred, if any
 */
var generateGroupHierarchy = module.exports.generateGroupHierarchy = function(restCtx, groupIds, role, callback) {
    if (groupIds.length <= 1) {
        return callback();
    }

    var membershipChanges = {};
    membershipChanges[groupIds[1]] = role;

    RestAPI.Group.setGroupMembers(restCtx, groupIds[0], membershipChanges, function(err) {
        if (err) {
            return callback(err);
        }

        // Recurse, removing the first group
        generateGroupHierarchy(restCtx, groupIds.slice(1), role, callback);
    });

};

/**
 * Generate a unique Cassandra object name. This will ensure a unique name that does not contain
 * any `-` characters as per Cassandra naming requirements (keyspace, CF, etc...)
 *
 * @param  {String}     [seed]  The seed / prefix of the name. Defaults to "name"
 * @return {String}             A unique Cassandra object name
 */
var generateTestCassandraName = module.exports.generateTestCassandraName = function(seed) {
    seed = seed || 'name';
    return util.format('%s_%s', seed, ShortId.generate().replace(/-/g, '_'));
};

/**
 * Generate a unique ElasticSearch object name. This will ensure a unique name that does not contain
 * any upper-case characters as per ElasticSearch naming requirements (indexes, etc...)
 *
 * @param  {String}     [seed]  The seed / prefix of the name. Defaults to "name"
 * @return {String}             A unique ElasticSearch object name
 */
var generateTestElasticSearchName = module.exports.generateTestElasticSearchName = function(seed) {
    seed = seed || 'name';
    return util.format('%s_%s', seed, ShortId.generate().toLowerCase());
};

/**
 * Generate a random unique user id that can be used inside of tests
 *
 * @param  {String}     [seed]  String that should be used as the first part of the generated user id. Defaults to "user"
 * @return {String}             A random user id
 */
var generateTestUserId = module.exports.generateTestUserId = function(seed) {
    seed = seed || 'user';
    return util.format('%s-%s', seed, ShortId.generate());
};

/**
 * Generate a random unique group id that can be used inside of tests
 *
 * @param  {String}     [seed]  String that should be used as the first part of the generated group id. Defaults to "group"
 * @return {String}             A random group id
 */
var generateTestGroupId = module.exports.generateTestGroupId = function(seed) {
    seed = seed || 'group';
    return util.format('%s-%s', seed, ShortId.generate());
};

/**
 * Generate a unique and random email address based on an optional seed
 *
 * @param  {String}     [seed]      The seed / prefix of the email address. Defaults to "email"
 * @param  {String}     [domain]    The domain on which to put the email. Defaults to "oae-email.com"
 * @return {String}                 A random email address
 */
var generateTestEmailAddress = module.exports.generateTestEmailAddress = function(seed, domain) {
    seed = seed || 'email';
    domain = domain || 'oae-email.com';
    return util.format('%s_%s@%s', seed, ShortId.generate(), domain);
};

/**
 * Create a Rest Context object that represents an anonymous or logged in user and can be used for tests
 *
 * @param  {String}         host             Tenant URL for the tenant on which we want to perform a REST call
 * @param  {String}         [username]       Username for the user performing the request. This should be null for an anonymous user
 * @param  {String}         [password]       Password for the user performing the request. This should be null for an anonymous user
 * @return {RestContext}                     Rest Context object that represents the anonymous or logged in user user on the provided tenant
 */
var createTenantRestContext = module.exports.createTenantRestContext = function(host, username, password) {
    return new RestContext('http://localhost:2001', {
        'username': username,
        'userPassword': password,
        'hostHeader': host
    });
};

/**
 * Create a Rest Context object that represents an admin user for a teant and can be used for tests
 *
 * @param  {String}         host             Tenant URL for the tenant on which we want to perform a REST call
 * @return {RestContext}                     Rest Context object that represents the admin user on the provided tenant
 */
var createTenantAdminRestContext = module.exports.createTenantAdminRestContext = function(host) {
    return createTenantRestContext(host, 'administrator', 'administrator');
};

/**
 * Create a Rest Context object that represents an anonymous or logged in user on the global admin server
 * and can be created for tests
 *
 * @param  {String}         [username]       Username for the user performing the request. This should be null for an anonymous user.
 * @param  {String}         [password]       Password for the user performing the request. This should be null for an anonymous user
 * @return {RestContext}                     Rest Context object that represents the anonymous or logged in user on the global admin server
 */
var createGlobalRestContext = module.exports.createGlobalRestContext = function(username, password) {
    return new RestContext('http://localhost:2000', {
        'username': username,
        'userPassword': password
    });
};

/**
 * Create a Rest Context object that represents the admin user on the global admin server and can be created
 * for tests
 *
 * @return {RestContext}                     Rest Context object that represents the global admin user on the provided tenant
 */
var createGlobalAdminRestContext = module.exports.createGlobalAdminRestContext = function() {
    return createGlobalRestContext('administrator', 'administrator');
};

/**
 * Create an API Context object that represents a tenant admin of the given tenant.
 *
 * @param  {Tenant}    tenant  The tenant for which the context should be an administrator
 * @return {Context}           The api context that represents an administrator of the tenant
 */
var createTenantAdminContext = module.exports.createTenantAdminContext = function(tenant) {
    return new Context(tenant, new User(tenant.alias, 'u:' + tenant.alias + ':admin', 'Tenant Administrator', {'isTenantAdmin': true}));
};

/**
 * Create an API Context object that represents a global administrator.
 *
 * @return {Context}           The api context that represents an administrator of the tenant
 */
var createGlobalAdminContext = module.exports.createGlobalAdminContext = function() {
    var globalTenant = global.oaeTests.tenants.global;
    return new Context(globalTenant, new User(globalTenant.alias, 'u:' + globalTenant.alias + ':admin', 'Global Administrator', {'isGlobalAdmin': true}));
};

/**
 * Given a rest context, get the user object of the user associated to it.
 *
 * @param  {RestContext}    restCtx         The rest context of the user to fetch
 * @param  {Function}       callback        Standard callback function
 * @param  {User}           callback.user   The user associated to the request context
 * @throws {Error}                          Throws an assertion error if there is an issue fetching the user
 */
var getUserFromRestContext = module.exports.getUserFromRestContext = function(restCtx, callback) {
    RestAPI.User.getMe(restCtx, function(err, me) {
        assert.ok(!err);
        RestAPI.User.getUser(restCtx, me.id, function(err, user) {
            assert.ok(!err);
            return callback(user);
        });
    });
};

/**
 * Generate a string that contains `numberOfWords` words.
 * The words are random alphanumerical strings of 12 characters.
 *
 * @param  {Number} [numberOfWords]     The amount of words you wish to generate. Default: 1
 * @return {String}                     A randomly generated string with `numberOfWords` in it
 */
var generateRandomText = module.exports.generateRandomText = function(numberOfWords) {
    numberOfWords = OaeUtil.getNumberParam(numberOfWords, 1, 1);
    var alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var text = [];
    for (var i = 0; i < numberOfWords; i++) {
        var wordLength = 12;
        var word = '';
        for (var l = 0; l < wordLength; l++) {
            var letter = Math.floor(Math.random() * alphabet.length);
            word += alphabet[letter];
        }
        text.push(word);
    }
    return text.join(' ');
};

/**
 * Returns a function that returns a readable stream that will emit data until
 * the provided number of bytes has been emitted. This stream can be used in
 * requestjs to perform file upload requests.
 *
 * @param  {String}     filename    A filename that should be set on the stream
 * @param  {Number}     bytes       The number of bytes that should be published over the stream
 * @return {Function}               A function that returns the stream
 */
var createFileReadableStream = module.exports.createFileReadableStream = function(filename, size) {
    return function() {
        // We'll implement a readable stream that generates the data
        var rs = new stream.Stream();

        // RequestJS uses the `path` property of `fs.streams` to determine the filename, so we fake one
        rs.path = '/foo/bar/' + filename;

        // When we add a stream to request it gets delayed first, so we need to implement the `pause` method
        rs.pause = function() {};

        // Once `resume` has been called we can start emitting data
        rs.resume = function() {

            /**
             * Generate dummy data to be written out in the stream
             *
             * @param  {Number} toGenerate   The amount of data to generate
             * @return {String}              A string with exactly `toGen` characters in it
             */
            var generateData = function(toGenerate) {
                var data = '';
                for (var i = 0; i < toGenerate; i++) {
                    data += '0';
                }
                return data;
            };

            // Generate 1K of data (if `size` is larger than 1024) as it is a lot faster to emit 10 * 1024 of a largish string
            // than it is to emit 10 * 1024 * 1024 of a character
            var toGenerate = (size > 1024 ? 1024 : 1);
            var data = generateData(toGenerate);

            // Emit data in increments of 1024 or 1 byte(s)
            var bytes = 0;
            for (bytes = 0; bytes < size; bytes += data.length) {
                rs.emit('data', data);
            }

            // If we were emitting data in increments of 1024 bytes there is a possibility that we still need to emit some data
            if (bytes < size) {
                rs.emit('data', generateData(size - bytes));
            }

            // Signal to the listener that we're done emitting data
            rs.emit('end');
        };

        return rs;
    };
};

/**
 * Set up 2 public tenants and 2 private tenants, each with a public, loggedin and private set of users.
 * The resulting model looks like:
 *
 * ```
 *  {
 *      "publicTenant": {
 *          "tenant": <Tenant>,
 *          "anonymousRestContext": <RestContext>,
 *          "adminRestContext": <RestContext> (of the tenant admin),
 *          "publicUser": {
 *              "user": <User>,
 *              "restContext": <RestContext>
 *          },
 *          "loggedinUser": { ... },
 *          "privateUser": { ... },
 *          "publicGroup": <Group>,
 *          "loggedinGroup": <Group>,
 *          "privateGroup": <Group>
 *      },
 *      "publicTenant1": { ... },
 *      "privateTenant": { ... },
 *      "privateTenant1": { ... }
 *  }
 * ```
 *
 * @param  {Function}   callback    Invoked when all the entities are set up. See method summary for return parameter details
 * @throws {Error}                  An assertion error is thrown if something does not get created properly
 */
var setupMultiTenantPrivacyEntities = module.exports.setupMultiTenantPrivacyEntities = function(callback) {
    _createMultiPrivacyTenants(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
        _setupTenant(publicTenant, function() {
            _setupTenant(publicTenant1, function() {
                _setupTenant(privateTenant, function() {
                    _setupTenant(privateTenant1, function() {
                        return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                    });
                });
            });
        });
    });
};


/**
 * Set up tenants of all privacies
 *
 * @param  {Function}   callback                Invoked when all entities are setup
 * @param  {Tenant}     callback.publicTenant   A public tenant
 * @param  {Tenant}     callback.publicTenant1  Another public tenant
 * @param  {Tenant}     callback.privateTenant  A private tenant
 * @param  {Tenant}     callback.privateTenant1 Another private tenant
 * @throws {Error}                              An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createMultiPrivacyTenants = function(callback) {
    var randomId = ShortId.generate();
    var publicTenantAlias = util.format('public-%s', randomId);
    var publicTenant1Alias = util.format('public1-%s', randomId);
    var privateTenantAlias = util.format('private-%s', randomId);
    var privateTenant1Alias = util.format('private1-%s', randomId);

    _createPublicTenant(publicTenantAlias, function(tenant, tenantAdminRestContext) {
        var publicTenant = {'tenant': tenant, 'adminRestContext': tenantAdminRestContext, 'anonymousRestContext': createTenantRestContext(tenant.host)};
        _createPublicTenant(publicTenant1Alias, function(tenant, tenantAdminRestContext) {
            var publicTenant1 = {'tenant': tenant, 'adminRestContext': tenantAdminRestContext, 'anonymousRestContext': createTenantRestContext(tenant.host)};
            _createPrivateTenant(privateTenantAlias, function(tenant, tenantAdminRestContext) {
                var privateTenant = {'tenant': tenant, 'adminRestContext': tenantAdminRestContext, 'anonymousRestContext': createTenantRestContext(tenant.host)};
                _createPrivateTenant(privateTenant1Alias, function(tenant, tenantAdminRestContext) {
                    var privateTenant1 = {'tenant': tenant, 'adminRestContext': tenantAdminRestContext, 'anonymousRestContext': createTenantRestContext(tenant.host)};
                    return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                });
            });
        });
    });
};


/**
 * Prepare the given tenant according to the spec from #setupMultiTenantPrivacyEntities
 *
 * @param  {Tenant}     tenant          The tenant to setup
 * @param  {Function}   callback        Invoked when all the entities are set up
 * @throws {Error}                      An assertion error is thrown if something does not get created properly
 * @api private
 */
var _setupTenant = function(tenant, callback) {
    _createMultiPrivacyUsers(tenant.adminRestContext, function(publicUser, loggedinUser, privateUser) {
        tenant.publicUser = publicUser;
        tenant.loggedinUser = loggedinUser;
        tenant.privateUser = privateUser;
        _createMultiPrivacyGroups(tenant, function(publicGroup, loggedinGroup, privateGroup) {
            tenant.publicGroup = publicGroup;
            tenant.loggedinGroup = loggedinGroup;
            tenant.privateGroup = privateGroup;
            return callback();
        });
    });
};

/**
 * Set up users of all privacies using the given rest context.
 *
 * @param  {RestContext}    restCtx         The rest context to use
 * @param  {Function}       callback        Invoked when all the entities are set up
 * @throws {Error}                          An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createMultiPrivacyUsers = function(restCtx, callback) {
    _createUserWithVisibility(restCtx, 'public', function(publicUser) {
        _createUserWithVisibility(restCtx, 'loggedin', function(loggedinUser) {
            _createUserWithVisibility(restCtx, 'private', function(privateUser) {
                return callback(publicUser, loggedinUser, privateUser);
            });
        });
    });
};

/**
 * Create a user with the specified visibility
 *
 * @param  {RestContext}    restCtx             The rest context to use
 * @param  {String}         visibility          The visibility of the user
 * @param  {Function}       callback            Invoked when all the entities are set up
 * @param  {User}           callback.user       The created user
 * @param  {RestContext}    callback.restCtx    The RestContext of the user
 * @throws {Error}                              An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createUserWithVisibility = function(restCtx, visibility, callback) {
    var randomId = util.format('%s-%s', visibility, ShortId.generate());
    var username = 'username-' + randomId;
    var password = 'password-' + randomId;
    var displayName = 'displayName-' + randomId;
    var publicAlias = 'publicAlias-' + randomId;
    RestAPI.User.createUser(restCtx, username, password, displayName, {'visibility': visibility, 'publicAlias': publicAlias}, function(err, user) {
        assert.ok(!err);
        return callback({'user': user, 'restContext': createTenantRestContext(restCtx.hostHeader, username, password)});
    });
};

/**
 * Set up groups of all privacies using the given rest context.
 *
 * @param  {Tenant}         tenant          The tenant on which to create the groups
 * @param  {Function}       callback        Invoked when all the entities are set up
 * @throws {Error}                          An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createMultiPrivacyGroups = function(tenant, callback) {
    _createGroupWithVisibility(tenant, 'public', tenant.publicUser.user.id, function(publicGroup) {
        _createGroupWithVisibility(tenant, 'loggedin', tenant.loggedinUser.user.id, function(loggedinGroup) {
            _createGroupWithVisibility(tenant, 'private', tenant.privateUser.user.id, function(privateGroup) {
                return callback(publicGroup, loggedinGroup, privateGroup);
            });
        });
    });
};

/**
 * Create a group with the specified visibility.
 * The group will be created by the tenant admin and an extra member can be specified
 * with the `memberPrincipalId` parameter.
 *
 * @param  {Tenant}         tenant              The tenant on which to create the groups
 * @param  {String}         visibility          The visibility of the user
 * @param  {String}         memberPrincipalId   The ID of the principal which should be added as a member.
 * @param  {Function}       callback            Invoked when all the entities are set up
 * @param  {User}           callback.group      The created group
 * @throws {Error}                              An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createGroupWithVisibility = function(tenant, visibility, memberPrincipalId, callback) {
    var randomId = util.format('%s-%s', visibility, ShortId.generate());
    var displayName = 'displayName-' + randomId;
    var description = 'description-' + randomId;
    RestAPI.Group.createGroup(tenant.adminRestContext, displayName, description, visibility, 'request', [], [memberPrincipalId], function(err, newGroup) {
        assert.ok(!err);
        return callback(newGroup);
    });
};

/**
 * Create a private tenant with the given alias
 *
 * @param  {String}         tenantAlias                 The alias of the tenant
 * @param  {Function}       callback                    Invoked when the tenant is created
 * @param  {Tenant}         callback.tenant             The created tenant object
 * @param  {RestContext}    callback.tenantAdminRestCtx The rest context of the tenant administrator
 * @throws {Error}                                      An assertion error is thrown if there is an issue creating the tenant
 * @api private
 */
var _createPrivateTenant = function(tenantAlias, callback) {
    _createPublicTenant(tenantAlias, function(tenant, tenantAdminRestCtx) {
        // Only global admins can update tenant privacy, so use that
        ConfigTestUtil.updateConfigAndWait(createGlobalAdminRestContext(), tenant.alias, {'oae-tenants/tenantprivacy/tenantprivate': true}, function(err) {
            assert.ok(!err);
            return callback(tenant, tenantAdminRestCtx);
        });
    });
};

/**
 * Create a public tenant with the given alias
 *
 * @param  {String}         tenantAlias                 The alias of the tenant
 * @param  {Function}       callback                    Invoked when the tenant is created
 * @param  {Tenant}         callback.tenant             The created tenant object
 * @param  {RestContext}    callback.tenantAdminRestCtx The rest context of the tenant administrator
 * @throws {Error}                                      An assertion error is thrown if there is an issue creating the tenant
 * @api private
 */
var _createPublicTenant = function(tenantAlias, callback) {
    createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestCtx) {
        assert.ok(!err);
        return callback(tenant, tenantAdminRestCtx);
    });
};

/**
 * Ensure the provided rest context is authenticated by executing a request to the me feed
 *
 * @param  {RestContext}    restCtx         The REST context to ensure is authenticated
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred authenticating the REST context, if any
 * @api private
 */
var _ensureAuthenticated = function(restCtx, callback) {
    if (restCtx.cookieJar) {
        return callback();
    }

    RestAPI.User.getMe(restCtx, function(err, me) {
        if (err) {
            return callback(err);
        }

        return callback();
    });
};

/**
 * Create the initial test configuration
 *
 * @return {Object}    config    JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 */
var createInitialTestConfig = module.exports.createInitialTestConfig = function() {
    // Require the configuration file, from here on the configuration should be
    // passed around instead of required
    var config = require('../../../config').config;
    // Streams can't be deep copied so we stash them in a variable, delete them from the config
    // and add them to the final config
    var logConfig = config.log;
    delete config.log;
    config = clone(config);
    config.log = logConfig;

    // The Cassandra connection config that should be used for unit tests, using
    // a custom keyspace for just the tests
    config.cassandra.keyspace = 'oaeTest';

    // We'll stick all our redis data in a separate DB index.
    config.redis.dbIndex = 1;

    // log everything (except mocha output) to tests.log
    config.log.streams = [{
        'level': 'trace',
        'path': './tests.log'
    }];

    // Unit test will purge the rabbit mq queues when they're connected
    config.mq.purgeQueuesOnStartup = true;

    // In order to speed up some of the tests and to avoid mocha timeouts, we reduce the default time outs
    config.previews.office.timeout = 30000;
    config.previews.pdftk.timeout = 10000;
    config.previews.pdf2htmlEX.timeout = 10000;
    config.previews.link.renderDelay = 200;
    config.previews.link.renderTimeout = 15000;
    config.previews.link.embeddableCheckTimeout = 5000;

    config.search.index.name = 'oaetest';
    config.search.index.settings.number_of_shards = 1;
    config.search.index.settings.number_of_replicas = 0;
    config.search.index.settings.store = {'type': 'memory'};
    config.search.index.destroyOnStartup = true;

    // Disable the poller so it only collects manually
    config.activity.collectionPollingFrequency = -1;
    config.activity.numberOfProcessingBuckets = 1;

    config.servers.globalAdminHost = 'localhost:2000';

    // Force emails into debug mode
    config.email.debug = true;

    return config;
};

/**
 * Bind request logging for oae-rest unit test debugging.
 *
 * @api private
 */
var _bindRequestLogger = function() {
    var requestLog = require('oae-logger').logger('request-log');

    RestUtil.on('request', function(restCtx, url, method, data) {
        requestLog().trace({
            'restCtx': restCtx,
            'url': url,
            'method': method,
            'data': data
        }, 'Performing REST request');
    });

    RestUtil.on('response', function(body, res) {
        requestLog().trace({ 'res': res, 'body': body }, 'REST Request complete');
    });

    RestUtil.on('error', function(err, body, res) {
        requestLog().error({
            'err': err,
            'res': res,
            'body': body
        }, 'An error occurred sending a REST request');
    });
};

/**
 * Set up Hilary so tests can be executed.
 *     - Initialize Cassandra
 *     - Drop the Cassandra keyspace if required
 *     - Flush the Redis DB index
 *     - Initialize the application modules
 *     - Disable the preview processor
 *
 * @param  {Object}      config                    JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 * @param  {Boolean}     dropKeyspaceBeforeTest    Whether or not we should drop the keyspace before the test.
 * @param  {Function}    callback                  Standard callback function
 */
var setUpBeforeTests = module.exports.setUpBeforeTests = function(config, dropKeyspaceBeforeTest, callback) {
    Cassandra.init(config.cassandra, function(err) {
        if (err) {
            return callback(new Error(err.msg || err.message));
        }

        // Drop the keyspace before starting if specified to do so
        if (dropKeyspaceBeforeTest) {
            log().info('Dropping keyspace "%s" to clean up before tests', config.cassandra.keyspace);
        }

        OaeUtil.invokeIfNecessary(dropKeyspaceBeforeTest, Cassandra.dropKeyspace, config.cassandra.keyspace, function(err) {
            if (err) {
                return callback(new Error(err.msg));
            }

            Cassandra.close(function() {
                Redis.init(config.redis);

                log().info('Flushing redis DB index "%d" to clean up before tests', config.redis.dbIndex);
                Redis.flush(function(err) {
                    if (err) {
                        return callback(new Error(err.msg));
                    }

                    // Initialize the application modules
                    OAE.init(config, function(err) {
                        if (err) {
                            return callback(new Error(err.msg));
                        }
                        _bindRequestLogger();
                    });

                    // Defer the test setup until after the task handlers are successfully bound and all the queues are drained.
                    // This will always be fired after OAE.init has successfully finished.
                    MQ.on('ready', function(err) {
                        if (err) {
                            return callback(new Error(err.msg));
                        }

                        log().info('Disabling the preview processor during tests');
                        PreviewAPI.disable(function(err) {
                            if (err) {
                                return callback(new Error(err.msg));
                            }

                            return callback();
                        });
                    });
                });
            });
        });
    });
};

/**
 * Flush the Redis DB index and purge Rabbit MQ after the tests complete
 *
 * @param  {Function}    callback    Standard callback function
 */
var cleanUpAfterTests = module.exports.cleanUpAfterTests = function(callback) {
    // Clean up after ourselves
    Redis.flush(function(err) {
        if (err) {
           log().error({err: err}, 'Error flushing Redis data after test completion');
        }

        // Purge all the task queues
        MQ.purgeAll(function(err) {
            if (err) {
                log().error({err: err}, 'Error purging the RabbitMQ queues');
            }

            return callback();
        });
    });
};

/*
 * Whether or not the current process is part of an integration test. An integration
 * test can be disabled by setting the environment variable `OAE_TEST_INTEGRATION` to
 * `false`. Unless the environment variable is set to false, an integration test is
 * assumed and this  method will return `true`
 *
 * @return {Boolean}    `true` when the current process is part of an integration test, `false` otherwise
 */
var isIntegrationTest = module.exports.isIntegrationTest = function() {
    return (process.env.OAE_TEST_INTEGRATION !== 'false');
};
