/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var TestsUtil = require('oae-tests/lib/util');

var AuthzAPI = require('oae-authz');
var AuthzTestUtil = require('oae-authz/lib/test/util');
var AuthzUtil = require('oae-authz/lib/util');

describe('Authz Groups', function() {

    /**
     * Verifies that the user does not have any membership in the provided group
     *
     * @param  {String}      groupId    The id of the group to check
     * @param  {String}      memberId   The id of the principal to check
     * @param  {Function}    callback   Standard callback function
     */
    var verifyNoBidirectionalGroupMembership = function(groupId, memberId, callback) {
        AuthzAPI.hasAnyRole(memberId, groupId, function(err, hasRole) {
            assert.ok(!err);
            assert.ok(!hasRole);

            AuthzAPI.getAuthzMembers(groupId, undefined, undefined, function(err, members) {
                assert.ok(!err);
                assert.ok(members);
                assert.ok(!_.find(members, function(member){ if (member.id === memberId) { return member.role; }}));
                callback();
            });
        });
    };

    /**
     * Verifies that the user has membership in the provided group both by group memberships and
     * role checks
     *
     * @param  {String}      groupId    The id of the group to check
     * @param  {String}      memberId   The id of the principal to check
     * @param  {Function}    callback   Standard callback function
     */
    var verifyBidirectionalGroupMembership = function(groupId, memberId, role, callback) {
        AuthzAPI.hasRole(memberId, groupId, role, function(err, hasRole) {
            assert.ok(!err);
            assert.ok(hasRole);

            // also verify from the group membership
            AuthzAPI.getAuthzMembers(groupId, undefined, undefined, function(err, members) {
                assert.ok(!err);
                assert.ok(members);
                assert.ok(_.find(members, function(member) {
                    if (member.id === memberId) {
                        return member.role;
                    }
                }));
                callback();
            });
        });
    };

    /**
     * Make a single membership change object to apply to a group membership.
     *
     * @param  {String} principalId   The principalId whose membership to change
     * @param  {String} role          The role to change to
     * @return {Object}               The change JSON Object to apply to the group
     */
    var makeMembershipChange = function(principalId, role) {
        var change = {};
        change[principalId] = role;
        return change;
    };

    describe('Add group member', function() {
        it('verify invalid group id error', function(callback) {
            AuthzAPI.updateRoles('not a valid id', makeMembershipChange('u:cam:mrvisser', 'member'), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify non-group group id error', function(callback) {
            AuthzAPI.updateRoles('u:cam:mrvisser', makeMembershipChange('u:cam:mrvisser', 'member'), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify invalid member id error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', makeMembershipChange('not a valid id', 'member'), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify non-principal member id error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', makeMembershipChange('c:content:id', 'member'), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify null role error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', makeMembershipChange('u:cam:mrvisser', null), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify undefined role error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', makeMembershipChange('u:cam:mrvisser', undefined), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify user gets added to group', function(callback) {
            var groupId = 'g:agm-add-user:oae-team';
            var memberId = 'u:agm-add-user:mrvisser';
            AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 1);
                assert.strictEqual(usersInvalidated[0], memberId);
                return verifyBidirectionalGroupMembership(groupId, memberId, 'member', callback);
            });
        });

        it('verify update user membership role', function(callback) {
            var groupId = 'g:agm-update-user:oae-team';
            var memberId = 'u:agm-update-user:mrvisser';
            AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 1);
                assert.strictEqual(usersInvalidated[0], memberId);

                verifyBidirectionalGroupMembership(groupId, memberId, 'member', function() {
                    AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, 'manager'), function(err, usersInvalidated) {
                        assert.ok(!err);
                        assert.strictEqual(usersInvalidated.length, 1);
                        assert.strictEqual(usersInvalidated[0], memberId);

                        verifyBidirectionalGroupMembership(groupId, memberId, 'manager', function() {
                            // also ensure that the number of members in the group is still 1
                            AuthzAPI.getAuthzMembers(groupId, undefined, undefined, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.length, 1);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify group gets added to group', function(callback) {
            var groupId = 'g:agm-add-group:oae-team';
            var memberId = 'g:agm-add-group:mrvisser';
            AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 0);

                // verify membership exists VIA roles api (bottom-to-top association)
                AuthzAPI.hasRole(memberId, groupId, 'member', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(hasRole);

                    // verify membership exists VIA groups api (top-to-bottom association)
                    AuthzAPI.getAuthzMembers(groupId, undefined, undefined, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.length, 1);
                        return callback();
                    });
                });
            });
        });
    });

    describe('Remove group member', function() {

        it('verify invalid group id error', function(callback) {
            AuthzAPI.updateRoles('not a valid id', makeMembershipChange('u:cam:mrvisser', false), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify non-group group id error', function(callback) {
            AuthzAPI.updateRoles('u:cam:mrvisser', makeMembershipChange('u:cam:mrvisser', false), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify invalid member id error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', makeMembershipChange('not a valid id', false), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify non-principal member id error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', makeMembershipChange('c:content:id', false), function(err, usersInvalidated) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);
                assert.ok(!usersInvalidated);
                return callback();
            });
        });

        it('verify user gets removed from group', function(callback) {
            var groupId = 'g:rgm-remove-user:oae-team';
            var memberId = 'u:rgm-remove-user:mrvisser';

            // 1. add the user
            AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 1);
                assert.strictEqual(usersInvalidated[0], memberId);

                // 2. sanity check the membership
                verifyBidirectionalGroupMembership(groupId, memberId, 'member', function() {

                    // 3. remove the user
                    AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, false), function(err, usersInvalidated) {
                        assert.ok(!err);
                        assert.strictEqual(usersInvalidated.length, 1);
                        assert.strictEqual(usersInvalidated[0], memberId);

                        // verify they are removed
                        verifyNoBidirectionalGroupMembership(groupId, memberId, callback);
                    });
                });
            });
        });

        it('verify group gets removed from group', function(callback) {
            var groupId = 'g:rgm-remove-user:oae-team';
            var memberId = 'g:rgm-remove-user:mrvisser';

            // 1. add the group
            AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 0);

                // 2. sanity check group is added
                verifyBidirectionalGroupMembership(groupId, memberId, 'member', function() {

                    // 3. remove the group
                    AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, false), function(err, usersInvalidated) {
                        assert.ok(!err);
                        assert.strictEqual(usersInvalidated.length, 0);

                        // 4. verify the user is removed
                        verifyNoBidirectionalGroupMembership(groupId, memberId, callback);
                    });
                });
            });
        });
    });

    describe('#updateAuthzGroupMembers()', function() {

        it('verify invalid group id error', function(callback) {
            AuthzAPI.updateRoles('not a valid id', {'u:cam:mrvisser': 'member'}, function(err, usersInvalidated) {
                assert.ok(err);
                assert.ok(!usersInvalidated);
                assert.strictEqual(err.code, 400);
                return callback();
            });
        });

        it('verify non-group group id error', function(callback) {
            AuthzAPI.updateRoles('u:cam:mrvisser', {'u:cam:mrvisser': 'member'}, function(err, usersInvalidated) {
                assert.ok(err);
                assert.ok(!usersInvalidated);
                assert.strictEqual(err.code, 400);
                return callback();
            });
        });

        it('verify invalid member id error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', {'not a valid id': 'member'}, function(err, usersInvalidated) {
                assert.ok(err);
                assert.ok(!usersInvalidated);
                assert.strictEqual(err.code, 400);
                return callback();
            });
        });

        it('verify non-principal member id error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', {'c:oae:mrvisser': 'member'}, function(err, usersInvalidated) {
                assert.ok(err);
                assert.ok(!usersInvalidated);
                assert.strictEqual(err.code, 400);
                return callback();
            });
        });

        it('verify null role error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', {'u:cam:mrvisser': null}, function(err, usersInvalidated) {
                assert.ok(err);
                assert.ok(!usersInvalidated);
                assert.strictEqual(err.code, 400);
                return callback();
            });
        });

        it('verify undefined role error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', {'u:cam:mrvisser': undefined}, function(err, usersInvalidated) {
                assert.ok(err);
                assert.ok(!usersInvalidated);
                assert.strictEqual(err.code, 400);
                return callback();
            });
        });

        it('verify blank role error', function(callback) {
            AuthzAPI.updateRoles('g:oae:oae-team', {'u:cam:mrvisser': '  '}, function(err, usersInvalidated) {
                assert.ok(err);
                assert.ok(!usersInvalidated);
                assert.strictEqual(err.code, 400);
                return callback();
            });
        });

        it('verify general functionality', function(callback) {
            var groupId = 'g:agmc-general:oae-team';
            var mrvisserId = 'u:agmc-general:mrvisser';
            var simongId = 'u:agmc-general:simong';
            var bertId = 'u:agmc-general:physx';
            var nicoId = 'u:agmc-general:nicolaas';

            var changes = {};
            changes[mrvisserId] = 'member';
            changes[simongId] = 'manager';
            changes[bertId] = 'manager';
            changes[nicoId] = 'member';

            AuthzAPI.updateRoles(groupId, changes, function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 4);

                verifyBidirectionalGroupMembership(groupId, mrvisserId, 'member', function() {
                    verifyBidirectionalGroupMembership(groupId, simongId, 'manager', function() {
                        verifyBidirectionalGroupMembership(groupId, bertId, 'manager', function() {
                            verifyBidirectionalGroupMembership(groupId, nicoId, 'member', function() {

                                // now inverse the group roles and check
                                changes[mrvisserId] = 'manager';
                                changes[simongId] = 'member';
                                changes[bertId] = 'member';
                                changes[nicoId] = 'manager';

                                AuthzAPI.updateRoles(groupId, changes, function(err, usersInvalidated) {
                                    assert.ok(!err);
                                    assert.strictEqual(usersInvalidated.length, 4);

                                    verifyBidirectionalGroupMembership(groupId, mrvisserId, 'manager', function() {
                                        verifyBidirectionalGroupMembership(groupId, simongId, 'member', function() {
                                            verifyBidirectionalGroupMembership(groupId, bertId, 'member', function() {
                                                verifyBidirectionalGroupMembership(groupId, nicoId, 'manager', function() {

                                                    // now remove mrvisser and nico, while setting bert and simon back to manager
                                                    changes[mrvisserId] = false;
                                                    changes[simongId] = 'manager';
                                                    changes[bertId] = 'manager';
                                                    changes[nicoId] = false;

                                                    AuthzAPI.updateRoles(groupId, changes, function(err, usersInvalidated) {
                                                        assert.ok(!err);
                                                        assert.strictEqual(usersInvalidated.length, 4);

                                                        verifyNoBidirectionalGroupMembership(groupId, mrvisserId, function() {
                                                            verifyNoBidirectionalGroupMembership(groupId, nicoId, function() {
                                                                verifyBidirectionalGroupMembership(groupId, simongId, 'manager', function() {
                                                                    verifyBidirectionalGroupMembership(groupId, bertId, 'manager', callback);
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getAuthzMembers()', function() {

        it('verify invalid group id error', function(callback) {
            AuthzAPI.getAuthzMembers('not a valid id', undefined, undefined, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-group group id error', function(callback) {
            AuthzAPI.getAuthzMembers('u:cam:mrvisser', undefined, undefined, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify get user from group', function(callback) {
            var groupId = 'g:ggm-get:oae-team';
            var memberId = 'u:ggm-get:mrvisser';
            AuthzAPI.updateRoles(groupId, makeMembershipChange(memberId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.getAuthzMembers(groupId, undefined, undefined, function(err, members) {
                    assert.ok(!err);
                    assert.ok(members);
                    assert.equal(members.length, 1);
                    assert.equal(members[0].id, memberId);
                    callback();
                });
            });
        });

        it('verify user paging', function(callback) {
            var groupId = 'g:ggm-paging:oae-team';
            var memberIds = TestsUtil.generateResourceIds(11, 'u', 'ggm-paging');

            var changes = {};
            for (var i = 0; i < memberIds.length; i++) {
                changes[memberIds[i]] = 'member';
            }

            AuthzAPI.updateRoles(groupId, changes, function(err) {
                assert.ok(!err);
                AuthzAPI.getAuthzMembers(groupId, undefined, 10, function(err, members, nextToken) {
                    assert.ok(!err);
                    assert.equal(members.length, 10);
                    assert.equal(nextToken, members[9].id);

                    AuthzAPI.getAuthzMembers(groupId, members[9].id, 10, function(err, members, nextToken) {
                        assert.ok(!err);
                        assert.equal(members.length, 1);
                        assert.ok(!nextToken);
                        callback();
                    });
                });
            });
        });
    });

    describe('#getIndirectPrincipalMemberships()', function() {

        /**
         * Create a reverse membership chain, ensuring that the latest lexical group is closer
         * to the user in membership, and the closest lexical group is the furthest away
         *
         * @param  {Function}   callback            Standard callback function
         * @param  {String}     callback.userId     The user that will create group 5
         * @param  {String}     callback.groupId1   The first (and top-level) group
         * @param  {String}     callback.groupId2   The second group who is a member of group1
         * @param  {String}     callback.groupId3   The third group who is a member of group2
         * @param  {String}     callback.groupId4   The fourth group who is a member of group3
         * @param  {String}     callback.groupId5   The bottom group of which the user is a member
         * @throws {Error}                          An assertion error is thrown if the membership chain could not be setup
         */
        var setupMembershipChain = function(callback) {
            var tenantAlias = _.random(0, 11);
            var groupId1 = AuthzUtil.toId('g', 'ipm-order', '1');
            var groupId2 = AuthzUtil.toId('g', 'ipm-order', '2');
            var groupId3 = AuthzUtil.toId('g', 'ipm-order', '3');
            var groupId4 = AuthzUtil.toId('g', 'ipm-order', '4');
            var groupId5 = AuthzUtil.toId('g', 'ipm-order', '5');
            var userId = AuthzUtil.toId('u', 'ipm-order', 'mrvisser');

            AuthzAPI.updateRoles(groupId5, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId4, makeMembershipChange(groupId5, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId4, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.updateRoles(groupId1, makeMembershipChange(groupId2, 'member'), function(err) {
                                assert.ok(!err);

                                return callback(userId, groupId1, groupId2, groupId3, groupId4, groupId5);
                            });
                        });
                    });
                });
            });
        };

        /**
         * Retrieve the indirect memberships for a principal and assert they match a given set of group ids
         *
         * @param  {String}         principalId             The principal for which to retrieve the indirect group memberships
         * @param  {String}         start                   Determines the point at which indirect group memberships members are returned for paging purposes.  If not provided, the first x elements will be returned
         * @param  {Number}         limit                   Number of indirect group memberships to return. Will default to 10 if not provided
         * @param  {Function}       callback                Standard callback function
         * @param  {String[]}       callback.groups         An array of group ids representing the indirect groups to which the user belongs
         * @param  {String}         callback.nextToken      The value to provide in the `start` parameter to get the next set of results
         * @throws {Error}                                  An assertion error is thrown if an error occurs or the retrieved groups don't match the expected groups
         */
        var assertIndirectMemberships = function(principalId, start, limit, expectedGroups, callback) {
            AuthzAPI.getIndirectPrincipalMemberships(principalId, start, limit, function(err, groupIds, nextToken) {
                assert.ok(!err);
                assert.deepEqual(groupIds, expectedGroups);
                return callback(groupIds, nextToken);
            });
        };

        /**
         * Test that ensures that the initial request of loading up the authz memberships indirect
         * cache results in a list of ids that are equivalent in lexigraphical order and also return
         * the correct nextToken
         */
        it('verify paging on freshly cached authz memberships indirect cache', function(callback) {
            setupMembershipChain(function(userId, groupId1, groupId2, groupId3, groupId4, groupId5) {

                // Get 3 memberships for our user for the first time, ensuring we get the first 3 lexical groups
                assertIndirectMemberships(userId, null, 3, [groupId1, groupId2, groupId3], function(groupIds, nextToken) {

                    // Ensure subsequent request gets the last indirect group membership
                    assertIndirectMemberships(userId, nextToken, 3, [groupId4], function(groupIds, nextToken) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies the indirect membership cache is invalidated on updates
         */
        it('verify cache invalidation', function(callback) {
            setupMembershipChain(function(userId, groupId1, groupId2, groupId3, groupId4, groupId5) {
                // Get the indirect memberships for our user and a group so they get cached
                assertIndirectMemberships(userId, null, null, [groupId1, groupId2, groupId3, groupId4], function(groupIds, nextToken) {
                    assertIndirectMemberships(groupId5, null, null, [groupId1, groupId2, groupId3], function(groupIds, nextToken) {

                        // Remove group4 as a member of group3. This will leave the user with
                        // only 1 indirect group membership (group4) and group5 with 0 indirect memberships
                        AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId4, false), function(err, usersInvalidated) {
                            assert.ok(!err);
                            assert.strictEqual(usersInvalidated.length, 1);
                            assert.strictEqual(usersInvalidated[0], userId);

                            // Get all the indirect memberships for the user, he should only be an indirect member of group4
                            assertIndirectMemberships(userId, null, null, [groupId4], function(groupIds, nextToken) {
                                // Get all the indirect memberships for group5, it should have no indirect memberships
                                assertIndirectMemberships(groupId5, null, null, [], function(groupIds, nextToken) {
                                    // Restore the link between group3 and group4
                                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId4, 'member'), function(err, usersInvalidated) {
                                        assert.ok(!err);
                                        assert.strictEqual(usersInvalidated.length, 1);
                                        assert.strictEqual(usersInvalidated[0], userId);

                                        // Get all the indirect memberships for the user, he should be an indirect member of all 4 groups again
                                        assertIndirectMemberships(userId, null, null, [groupId1, groupId2, groupId3, groupId4], function(groupIds, nextToken) {
                                            // Get all the indrect memberships for group5, it should be an indirect member of group 1, 2 and 3
                                            assertIndirectMemberships(groupId5, null, null, [groupId1, groupId2, groupId3], function(groupIds, nextToken) {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies invalid principal ids result in a validation error
         */
        it('verify invalid principal id', function(callback) {
            AuthzAPI.getIndirectPrincipalMemberships('not an id', undefined, undefined, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                return callback();
            });
        });

        /**
         * Test that verifies non principal ids result in a validation error
         */
        it('verify non-principal id', function(callback) {
            AuthzAPI.getIndirectPrincipalMemberships('c:cam:Foo.docx', undefined, undefined, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                return callback();
            });
        });

        /**
         * Test that verifies an empty membership is returned as an empty array
         */
        it('verify empty membership is an empty array', function(callback) {
            var userId = AuthzUtil.toId('u', 'ipm-empty', 'mrvisser');
            AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                assert.ok(!err);
                assert.ok(groupIds);
                assert.equal(groupIds.length, 0);
                return callback();
            });
        });

        /**
         * Test that verifies that only being a direct member of a single that is itself not a member
         * of other groups returns an empty array
         */
        it('verify single group membership results in empty indirect membership', function(callback) {
            var groupId = AuthzUtil.toId('g', 'ipm-single', 'oae-team');
            var userId = AuthzUtil.toId('u', 'ipm-single', 'mrvisser');
            AuthzAPI.updateRoles(groupId, makeMembershipChange(userId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 1);
                assert.strictEqual(usersInvalidated[0], userId);

                // Get the indirect memberships uncached
                AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                    assert.ok(!err);
                    assert.ok(groupIds);
                    assert.strictEqual(groupIds.length, 0);

                    // Get the indirect memberships cached
                    AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                        assert.ok(!err);
                        assert.ok(groupIds);
                        assert.strictEqual(groupIds.length, 0);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that being a direct member of groups without a membership returns an empty array
         */
        it('verify two direct group memberships results in empty indirect membership', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'ipm-two', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'ipm-two', 'oae-backend-team');
            var userId = AuthzUtil.toId('u', 'ipm-two', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 1);
                assert.strictEqual(usersInvalidated[0], userId);

                AuthzAPI.updateRoles(groupId2, makeMembershipChange(userId, 'member'), function(err, usersInvalidated) {
                    assert.ok(!err);
                    assert.strictEqual(usersInvalidated.length, 1);
                    assert.strictEqual(usersInvalidated[0], userId);

                    // Get the memberships uncached
                    AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                        assert.ok(!err);
                        assert.ok(groupIds);
                        assert.strictEqual(groupIds.length, 0);

                        // Get the memberships cached
                        AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                            assert.ok(!err);
                            assert.ok(groupIds);
                            assert.strictEqual(groupIds.length, 0);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that a simple group hierarchy can be resolved and returns the correct indirect membership results
         */
        it('verify simple group hierarchy', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'ipm-hier', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'ipm-hier', 'oae-backend-team');
            var nonMemberGroupId3 = AuthzUtil.toId('g', 'ipm-hier', 'non-member');
            var userId = AuthzUtil.toId('u', 'ipm-hier', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 1);
                assert.strictEqual(usersInvalidated[0], userId);

                AuthzAPI.updateRoles(groupId1, makeMembershipChange(nonMemberGroupId3, 'member'), function(err, usersInvalidated) {
                    assert.ok(!err);
                    assert.strictEqual(usersInvalidated.length, 0);

                    AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId1, 'member'), function(err, usersInvalidated) {
                        assert.ok(!err);
                        assert.strictEqual(usersInvalidated.length, 1);
                        assert.strictEqual(usersInvalidated[0], userId);

                        // Get the indirect memberships uncached
                        AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                            assert.ok(!err);
                            assert.ok(groupIds);
                            assert.strictEqual(groupIds.length, 1);
                            assert.strictEqual(groupIds[0], groupId2);

                            // Get the indirect memberships cached
                            AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                                assert.ok(!err);
                                assert.ok(groupIds);
                                assert.strictEqual(groupIds.length, 1);
                                assert.strictEqual(groupIds[0], groupId2);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that circular group hierarchies can be dealt with
         */
        it('verify circular group hierarchy', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'ipm-circ', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'ipm-circ', 'oae-backend-team');
            var groupId3 = AuthzUtil.toId('g', 'ipm-circ', 'oae-ui-team');
            var userId = AuthzUtil.toId('u', 'ipm-circ', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err, usersInvalidated) {
                assert.ok(!err);
                assert.strictEqual(usersInvalidated.length, 1);
                assert.strictEqual(usersInvalidated[0], userId);

                AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId1, 'member'), function(err, usersInvalidated) {
                    assert.ok(!err);
                    assert.strictEqual(usersInvalidated.length, 1);
                    assert.strictEqual(usersInvalidated[0], userId);
                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId2, 'member'), function(err, usersInvalidated) {
                        assert.ok(!err);
                        assert.strictEqual(usersInvalidated.length, 1);
                        assert.strictEqual(usersInvalidated[0], userId);
                        AuthzAPI.updateRoles(groupId1, makeMembershipChange(groupId3, 'member'), function(err, usersInvalidated) {
                            assert.ok(!err);
                            assert.strictEqual(usersInvalidated.length, 1);
                            assert.strictEqual(usersInvalidated[0], userId);

                            // Get the indirect memberships uncached
                            AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                                assert.ok(!err);
                                assert.ok(groupIds);

                                // The indirect memberships does not contain groupId1 because, while the user is indirectly
                                // a member VIA circular hierarchy, they are actually directly a member, therefore it is
                                // not part of the strict indirect memberships list
                                assert.strictEqual(groupIds.length, 2);
                                assert.ok(_.contains(groupIds, groupId2));
                                assert.ok(_.contains(groupIds, groupId3));

                                // Get the indirect memberships cached
                                AuthzAPI.getIndirectPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                                    assert.ok(!err);
                                    assert.ok(groupIds);
                                    assert.strictEqual(groupIds.length, 2);
                                    assert.ok(_.contains(groupIds, groupId2));
                                    assert.ok(_.contains(groupIds, groupId3));
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the list of user memberships is properly paged
         */
        it('verify paging', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'ipm-pag', 'oae-group1');
            var groupId2 = AuthzUtil.toId('g', 'ipm-pag', 'oae-group2');
            var groupId3 = AuthzUtil.toId('g', 'ipm-pag', 'oae-group3');
            var groupId4 = AuthzUtil.toId('g', 'ipm-pag', 'oae-group4');
            var groupId5 = AuthzUtil.toId('g', 'ipm-pag', 'oae-group5');
            var groupId6 = AuthzUtil.toId('g', 'ipm-pag', 'oae-group6');
            var groupId7 = AuthzUtil.toId('g', 'ipm-pag', 'oae-group7');
            var userId = AuthzUtil.toId('u', 'ipm-pag', 'mrvisser');

            // Make an indirect membership chain
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId1, 'manager'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId1, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId4, makeMembershipChange(groupId1, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.updateRoles(groupId5, makeMembershipChange(groupId1, 'manager'), function(err) {
                                assert.ok(!err);
                                AuthzAPI.updateRoles(groupId6, makeMembershipChange(groupId1, 'member'), function(err) {
                                    assert.ok(!err);
                                    AuthzAPI.updateRoles(groupId7, makeMembershipChange(groupId1, 'manager'), function(err) {
                                        assert.ok(!err);

                                        // Get the paged indirect memberships uncached
                                        AuthzAPI.getIndirectPrincipalMemberships(userId, groupId3, 3, function(err, groupIds, nextToken) {
                                            assert.ok(!err);
                                            assert.ok(groupIds);
                                            assert.strictEqual(groupIds.length, 3);
                                            assert.ok(_.contains(groupIds, groupId4));
                                            assert.ok(_.contains(groupIds, groupId5));
                                            assert.ok(_.contains(groupIds, groupId6));
                                            assert.equal(nextToken, groupIds[2]);

                                            // Get the paged indirect memberships cached
                                            AuthzAPI.getIndirectPrincipalMemberships(userId, groupId3, 3, function(err, groupIds, nextToken) {
                                                assert.ok(!err);
                                                assert.ok(groupIds);
                                                assert.strictEqual(groupIds.length, 3);
                                                assert.ok(_.contains(groupIds, groupId4));
                                                assert.ok(_.contains(groupIds, groupId5));
                                                assert.ok(_.contains(groupIds, groupId6));
                                                assert.equal(nextToken, groupIds[2]);
                                                return  callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getAuthzMembersGraph()', function() {

        /**
         * Test that verifies that an empty members graph contains just the requested principal
         */
        it('verify group with no members results in single node graph', function(callback) {
            TestsUtil.generateResourceIds(3, 'g', 'oae', function(groupId1, groupId2, groupId3) {

                // Test empty members graph for a single group
                AuthzTestUtil.assertAuthzMembersGraphIdsEqual([groupId1], [[groupId1]], function(graph) {

                    // Test empty members graph for multiple groups
                    AuthzTestUtil.assertAuthzMembersGraphIdsEqual([groupId3, groupId2, groupId1], [[groupId3], [groupId2], [groupId1]], function(graph) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a group with a complex members hierarchy results in the expected
         * members graph
         */
        it('verify group members hierarchy', function(callback) {
            TestsUtil.generateResourceIds(1, 'u', 'oae', function(userId) {
                TestsUtil.generateResourceIds(4, 'g', 'oae', function(groupId1, groupId2, groupId3, groupId4) {

                    // The user is a member of Group1 and Group2
                    AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId2, makeMembershipChange(userId, 'manager'), function(err) {
                            assert.ok(!err);

                            // Group1 and Group2 are both members of Group3
                            var change = {};
                            change[groupId1] = 'manager';
                            change[groupId2] = 'member';
                            AuthzAPI.updateRoles(groupId3, change, function(err) {
                                assert.ok(!err);

                                // Group3 is a member of Group4
                                AuthzAPI.updateRoles(groupId4, makeMembershipChange(groupId3, 'member'), function(err) {
                                    assert.ok(!err);

                                    // Verify all the members edges exist and have the expected role for a single group
                                    AuthzTestUtil.assertAuthzMembersGraphIdsEqual([groupId4], [[userId, groupId1, groupId2, groupId3, groupId4]], function(graph) {
                                        assert.strictEqual(graph.getEdge(userId, groupId1).role, 'member');
                                        assert.strictEqual(graph.getEdge(userId, groupId2).role, 'manager');
                                        assert.strictEqual(graph.getEdge(groupId1, groupId3).role, 'manager');
                                        assert.strictEqual(graph.getEdge(groupId2, groupId3).role, 'member');
                                        assert.strictEqual(graph.getEdge(groupId3, groupId4).role, 'member');

                                        // Verify all the members edges exist and have the expected role for multiple groups
                                        AuthzTestUtil.assertAuthzMembersGraphIdsEqual([groupId4, groupId1], [[userId, groupId1, groupId2, groupId3, groupId4], [userId, groupId1]], function(graph) {
                                            assert.strictEqual(graph.getEdge(userId, groupId1).role, 'member');
                                            assert.strictEqual(graph.getEdge(userId, groupId2).role, 'manager');
                                            assert.strictEqual(graph.getEdge(groupId1, groupId3).role, 'manager');
                                            assert.strictEqual(graph.getEdge(groupId2, groupId3).role, 'member');
                                            assert.strictEqual(graph.getEdge(groupId3, groupId4).role, 'member');

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getPrincipalMembershipsGraph()', function() {

        /**
         * Test that verifies that a group with no memberships results in graph containing just the
         * group id
         */
        it('verify group with no memberships results in single node graph', function(callback) {
            TestsUtil.generateResourceIds(1, 'g', 'oae', function(groupId) {
                AuthzTestUtil.assertPrincipalMembershipsGraphIdsEqual(groupId, [groupId], function(graph) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that a group with a complex memberships structure results in the
         * expected memberships graph
         */
        it('verify group membership hierarchy', function(callback) {
            TestsUtil.generateResourceIds(1, 'u', 'oae', function(userId) {
                TestsUtil.generateResourceIds(4, 'g', 'oae', function(groupId1, groupId2, groupId3, groupId4) {

                    // Group0 is a member of Group1 and Group2
                    AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId2, makeMembershipChange(userId, 'manager'), function(err) {
                            assert.ok(!err);

                            // Group1 and Group2 are both members of Group3
                            var change = {};
                            change[groupId1] = 'manager';
                            change[groupId2] = 'member';
                            AuthzAPI.updateRoles(groupId3, change, function(err) {
                                assert.ok(!err);

                                // Group3 is a member of Group4
                                AuthzAPI.updateRoles(groupId4, makeMembershipChange(groupId3, 'member'), function(err) {
                                    assert.ok(!err);

                                    // Verify all the memberships edges exist and have the expected role. This request rebuilds the memberships graph cache on the fly
                                    AuthzTestUtil.assertPrincipalMembershipsGraphIdsEqual(userId, [userId, groupId1, groupId2, groupId3, groupId4], function(graph) {
                                        assert.strictEqual(graph.getEdge(userId, groupId1).role, 'member');
                                        assert.strictEqual(graph.getEdge(userId, groupId2).role, 'manager');
                                        assert.strictEqual(graph.getEdge(groupId1, groupId3).role, 'manager');
                                        assert.strictEqual(graph.getEdge(groupId2, groupId3).role, 'member');
                                        assert.strictEqual(graph.getEdge(groupId3, groupId4).role, 'member');

                                        // Get the memberships graph once more to have it accessed directly from the cache and ensure it is the same
                                        AuthzTestUtil.assertPrincipalMembershipsGraphIdsEqual(userId, [userId, groupId1, groupId2, groupId3, groupId4], function(graph) {
                                            assert.strictEqual(graph.getEdge(userId, groupId1).role, 'member');
                                            assert.strictEqual(graph.getEdge(userId, groupId2).role, 'manager');
                                            assert.strictEqual(graph.getEdge(groupId1, groupId3).role, 'manager');
                                            assert.strictEqual(graph.getEdge(groupId2, groupId3).role, 'member');
                                            assert.strictEqual(graph.getEdge(groupId3, groupId4).role, 'member');

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getPrincipalMemberships()', function() {

        /**
         * Test that ensures that the initial request of loading up the authz memberships cache
         * results in a list of ids that are equivalent in lexigraphical order and also return the
         * correct nextToken
         */
        it('verify paging on freshly cached authz memberships cache', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'gmo-order', 'a');
            var groupId2 = AuthzUtil.toId('g', 'gmo-order', 'b');
            var groupId3 = AuthzUtil.toId('g', 'gmo-order', 'c');
            var groupId4 = AuthzUtil.toId('g', 'gmo-order', 'd');
            var groupId5 = AuthzUtil.toId('g', 'gmo-order', 'e');
            var userId = AuthzUtil.toId('u', 'gmo-order', 'mrvisser');

            var membershipChange = {};
            membershipChange[groupId5] = 'member';
            membershipChange[groupId4] = 'member';
            membershipChange[groupId3] = 'member';

            // Create a reverse membership chain, ensuring that the latest lexical group is closer
            // to the user in membership, and the closest lexical group is the furthest away
            AuthzAPI.updateRoles(groupId5, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId4, makeMembershipChange(groupId5, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId4, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.updateRoles(groupId1, makeMembershipChange(groupId2, 'member'), function(err) {
                                assert.ok(!err);

                                // Get 3 membership for mrvisser for the first time, ensuring we get the first 3 lexical groups
                                AuthzAPI.getPrincipalMemberships(userId, null, 3, function(err, groupIds, nextToken) {
                                    assert.ok(!err);
                                    assert.strictEqual(groupIds.length, 3);
                                    assert.strictEqual(groupIds[0], groupId1);
                                    assert.strictEqual(groupIds[1], groupId2);
                                    assert.strictEqual(groupIds[2], groupId3);

                                    // Ensure subsequent request gets the next 2
                                    AuthzAPI.getPrincipalMemberships(userId, nextToken, 3, function(err, groupIds, nextToken) {
                                        assert.ok(!err);
                                        assert.strictEqual(groupIds.length, 2);
                                        assert.strictEqual(groupIds[0], groupId4);
                                        assert.strictEqual(groupIds[1], groupId5);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify invalid principal id', function(callback) {
            AuthzAPI.getPrincipalMemberships('not an id', undefined, undefined, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal id', function(callback) {
            AuthzAPI.getPrincipalMemberships('c:cam:Foo.docx', undefined, undefined, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify empty membership is empty array', function(callback) {
            var userId = AuthzUtil.toId('u', 'gmo-empty', 'mrvisser');
            AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                assert.ok(!err);
                assert.ok(groupIds);
                assert.equal(groupIds.length, 0);
                callback();
            });
        });

        it('verify single group membership', function(callback) {
            var groupId = AuthzUtil.toId('g', 'gmo-single', 'oae-team');
            var userId = AuthzUtil.toId('u', 'gmo-single', 'mrvisser');
            AuthzAPI.updateRoles(groupId, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);

                // Get the memberships uncached
                AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                    assert.ok(!err);
                    assert.ok(groupIds);
                    assert.equal(groupIds.length, 1);
                    assert.equal(groupIds[0], groupId);

                    // Get the memberships cached
                    AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                        assert.ok(!err);
                        assert.ok(groupIds);
                        assert.equal(groupIds.length, 1);
                        assert.equal(groupIds[0], groupId);
                        callback();
                    });
                });
            });
        });

        it('verify two direct group membership', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'gmo-two', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'gmo-two', 'oae-backend-team');
            var userId = AuthzUtil.toId('u', 'gmo-two', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeMembershipChange(userId, 'member'), function(err) {
                    assert.ok(!err);

                    // Get the memberships uncached
                    AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                        assert.ok(!err);
                        assert.ok(groupIds);
                        assert.equal(groupIds.length, 2);
                        assert.ok(_.contains(groupIds, groupId1));
                        assert.ok(_.contains(groupIds, groupId2));

                        // Get the memberships cached
                        AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                            assert.ok(!err);
                            assert.ok(groupIds);
                            assert.equal(groupIds.length, 2);
                            assert.ok(_.contains(groupIds, groupId1));
                            assert.ok(_.contains(groupIds, groupId2));
                            callback();
                        });
                    });
                });
            });
        });

        it('verify simple group hierarchy', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'gmo-hier', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'gmo-hier', 'oae-backend-team');
            var nonMemberGroupId3 = AuthzUtil.toId('g', 'gmo-hier', 'non-member');
            var userId = AuthzUtil.toId('u', 'gmo-hier', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId1, makeMembershipChange(nonMemberGroupId3, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId1, 'member'), function(err) {
                        assert.ok(!err);

                        // Get the memberships uncached
                        AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                            assert.ok(!err);
                            assert.ok(groupIds);
                            assert.equal(groupIds.length, 2);
                            assert.ok(_.contains(groupIds, groupId1));
                            assert.ok(_.contains(groupIds, groupId2));

                            // Get the memberships cached
                            AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                                assert.ok(!err);
                                assert.ok(groupIds);
                                assert.equal(groupIds.length, 2);
                                assert.ok(_.contains(groupIds, groupId1));
                                assert.ok(_.contains(groupIds, groupId2));
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'gmo-circ', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'gmo-circ', 'oae-backend-team');
            var groupId3 = AuthzUtil.toId('g', 'gmo-circ', 'oae-ui-team');
            var userId = AuthzUtil.toId('u', 'gmo-circ', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId2, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId1, makeMembershipChange(groupId3, 'member'), function(err) {
                            assert.ok(!err);

                            // Get the memberships uncached
                            AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                                assert.ok(!err);
                                assert.ok(groupIds);
                                assert.equal(groupIds.length, 3);
                                assert.ok(_.contains(groupIds, groupId1));
                                assert.ok(_.contains(groupIds, groupId2));
                                assert.ok(_.contains(groupIds, groupId3));

                                // Get the memberships cached
                                AuthzAPI.getPrincipalMemberships(userId, undefined, undefined, function(err, groupIds) {
                                    assert.ok(!err);
                                    assert.ok(groupIds);
                                    assert.equal(groupIds.length, 3);
                                    assert.ok(_.contains(groupIds, groupId1));
                                    assert.ok(_.contains(groupIds, groupId2));
                                    assert.ok(_.contains(groupIds, groupId3));
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the list of user memberships is properly paged
         */
        it('verify paging', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'gmo-pag', 'oae-group1');
            var groupId2 = AuthzUtil.toId('g', 'gmo-pag', 'oae-group2');
            var groupId3 = AuthzUtil.toId('g', 'gmo-pag', 'oae-group3');
            var groupId4 = AuthzUtil.toId('g', 'gmo-pag', 'oae-group4');
            var groupId5 = AuthzUtil.toId('g', 'gmo-pag', 'oae-group5');
            var groupId6 = AuthzUtil.toId('g', 'gmo-pag', 'oae-group6');
            var groupId7 = AuthzUtil.toId('g', 'gmo-pag', 'oae-group7');
            var userId = AuthzUtil.toId('u', 'gmo-pag', 'mrvisser');

            // Make him a member of all groups
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeMembershipChange(userId, 'manager'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(userId, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId4, makeMembershipChange(userId, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.updateRoles(groupId5, makeMembershipChange(userId, 'manager'), function(err) {
                                assert.ok(!err);
                                AuthzAPI.updateRoles(groupId6, makeMembershipChange(userId, 'member'), function(err) {
                                    assert.ok(!err);
                                    AuthzAPI.updateRoles(groupId7, makeMembershipChange(userId, 'manager'), function(err) {
                                        assert.ok(!err);

                                        // Get the paged memberships uncached
                                        AuthzAPI.getPrincipalMemberships(userId, groupId3, 3, function(err, groupIds, nextToken) {
                                            assert.ok(!err);
                                            assert.ok(groupIds);
                                            assert.equal(groupIds.length, 3);
                                            assert.ok(_.contains(groupIds, groupId4));
                                            assert.ok(_.contains(groupIds, groupId5));
                                            assert.ok(_.contains(groupIds, groupId6));
                                            assert.equal(nextToken, groupIds[2]);

                                            // Get the paged memberships cached
                                            AuthzAPI.getPrincipalMemberships(userId, groupId3, 3, function(err, groupIds, nextToken) {
                                                assert.ok(!err);
                                                assert.ok(groupIds);
                                                assert.equal(groupIds.length, 3);
                                                assert.ok(_.contains(groupIds, groupId4));
                                                assert.ok(_.contains(groupIds, groupId5));
                                                assert.ok(_.contains(groupIds, groupId6));
                                                assert.equal(nextToken, groupIds[2]);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Is Authz group member', function() {
        it('verify invalid principal id', function(callback) {
            AuthzAPI.hasAnyRole('not an id', 'g:oae:mrvisser', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal id', function(callback) {
            AuthzAPI.hasAnyRole('c:cam:Foo.docx', 'g:oae:mrvisser', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify invalid group id error', function(callback) {
            AuthzAPI.hasAnyRole('u:oae:mrvisser', 'not an id', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-group group id error', function(callback) {
            AuthzAPI.hasAnyRole('u:oae:mrvisser', 'u:oae:mrvisser', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });


        it('verify empty membership', function(callback) {
            var userId = AuthzUtil.toId('u', 'imo-empty', 'mrvisser');
            AuthzAPI.hasAnyRole(userId, 'g:oae:oae-team', function(err, hasAnyRole) {
                assert.ok(!err);
                assert.ok(!hasAnyRole);
                callback();
            });
        });

        it('verify single group membership', function(callback) {
            var groupId = AuthzUtil.toId('g', 'imo-single', 'oae-team');
            var userId = AuthzUtil.toId('u', 'imo-single', 'mrvisser');
            AuthzAPI.updateRoles(groupId, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.hasAnyRole(userId, groupId, function(err, hasAnyRole) {
                    assert.ok(!err);
                    assert.ok(hasAnyRole);
                    callback();
                });
            });
        });

        it('verify two direct group membership', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'imo-two', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'imo-two', 'oae-backend-team');
            var userId = AuthzUtil.toId('u', 'imo-two', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeMembershipChange(userId, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.hasAnyRole(userId, groupId1, function(err, hasAnyRole) {
                        assert.ok(!err);
                        assert.ok(hasAnyRole);
                        AuthzAPI.hasAnyRole(userId, groupId2, function(err, hasAnyRole) {
                            assert.ok(!err);
                            assert.ok(hasAnyRole);
                            callback();
                        });
                    });
                });
            });
        });

        it('verify simple group hierarchy', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'gmo-hier', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'gmo-hier', 'oae-backend-team');
            var nonMemberGroupId3 = AuthzUtil.toId('g', 'gmo-hier', 'non-member');
            var userId = AuthzUtil.toId('u', 'gmo-hier', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId1, makeMembershipChange(nonMemberGroupId3, 'member'), function(err) {
                    AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId1, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.hasAnyRole(userId, groupId1, function(err, hasAnyRole) {
                            assert.ok(!err);
                            assert.ok(hasAnyRole);
                            AuthzAPI.hasAnyRole(userId, groupId2, function(err, hasAnyRole) {
                                assert.ok(!err);
                                assert.ok(hasAnyRole);
                                AuthzAPI.hasAnyRole(userId, nonMemberGroupId3, function(err, hasAnyRole) {
                                    assert.ok(!err);
                                    assert.ok(!hasAnyRole);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'gmo-circ', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'gmo-circ', 'oae-backend-team');
            var groupId3 = AuthzUtil.toId('g', 'gmo-circ', 'oae-ui-team');
            var userId = AuthzUtil.toId('u', 'gmo-circ', 'mrvisser');
            AuthzAPI.updateRoles(groupId1, makeMembershipChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeMembershipChange(groupId1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeMembershipChange(groupId2, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId1, makeMembershipChange(groupId3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.hasAnyRole(userId, groupId1, function(err, hasAnyRole) {
                                assert.ok(!err);
                                assert.ok(hasAnyRole);
                                AuthzAPI.hasAnyRole(userId, groupId2, function(err, hasAnyRole) {
                                    assert.ok(!err);
                                    assert.ok(hasAnyRole);
                                    AuthzAPI.hasAnyRole(userId, groupId3, function(err, hasAnyRole) {
                                        assert.ok(!err);
                                        assert.ok(hasAnyRole);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#computeMemberRolesAfterChanges()', function() {

        /**
         * Test that verifies the functionality of compute member roles after changes when taking
         * into account all operations
         */
        it('verify functionality when taking into account adds, removes and updates', function(callback) {
            var groupId = AuthzUtil.toId('g', 'cmac', 'oae-team');
            var mrvisser = AuthzUtil.toId('u', 'cmac', 'mrvisser');
            var simong = AuthzUtil.toId('u', 'cmac', 'simong');
            var rolesBefore = {};
            rolesBefore[mrvisser] = 'member';
            rolesBefore[simong] = 'member';
            AuthzAPI.updateRoles(groupId, rolesBefore, function(err) {
                assert.ok(!err);

                // Verify adding a principal by adding bert as a member
                var bert = AuthzUtil.toId('u', 'cmac', 'bert');
                var addBertChange = makeMembershipChange(bert, 'member');
                AuthzAPI.computeMemberRolesAfterChanges(groupId, addBertChange, null, function(err, idChangeInfo) {
                    assert.ok(!err);
                    assert.deepEqual(idChangeInfo.changes, addBertChange);
                    assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                    assert.deepEqual(idChangeInfo.roles.after, _.extend({}, rolesBefore, addBertChange));
                    assert.deepEqual(idChangeInfo.ids.added, [bert]);
                    assert.deepEqual(idChangeInfo.ids.updated, []);
                    assert.deepEqual(idChangeInfo.ids.removed, []);

                    // Verify a role change by making mrvisser a manager
                    var mrvisserManagerChange = makeMembershipChange(mrvisser, 'manager');
                    AuthzAPI.computeMemberRolesAfterChanges(groupId, mrvisserManagerChange, null, function(err, idChangeInfo) {
                        assert.ok(!err);
                        assert.deepEqual(idChangeInfo.changes, mrvisserManagerChange);
                        assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                        assert.deepEqual(idChangeInfo.roles.after, _.extend({}, rolesBefore, mrvisserManagerChange));
                        assert.deepEqual(idChangeInfo.ids.added, []);
                        assert.deepEqual(idChangeInfo.ids.updated, [mrvisser]);
                        assert.deepEqual(idChangeInfo.ids.removed, []);

                        // Verify a non-update by making simong a member (he already is a member)
                        var simonMemberChange = makeMembershipChange(simong, 'member');
                        AuthzAPI.computeMemberRolesAfterChanges(groupId, simonMemberChange, null, function(err, idChangeInfo) {
                            assert.ok(!err);
                            assert.deepEqual(idChangeInfo.changes, {});
                            assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                            assert.deepEqual(idChangeInfo.roles.after, rolesBefore);
                            assert.deepEqual(idChangeInfo.ids.added, []);
                            assert.deepEqual(idChangeInfo.ids.updated, []);
                            assert.deepEqual(idChangeInfo.ids.removed, []);

                            // Verify removing a principal by removing simong
                            var simonRemoveChange = makeMembershipChange(simong, false);
                            AuthzAPI.computeMemberRolesAfterChanges(groupId, simonRemoveChange, null, function(err, idChangeInfo) {
                                assert.ok(!err);
                                assert.deepEqual(idChangeInfo.changes, simonRemoveChange);
                                assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                                assert.deepEqual(idChangeInfo.roles.after, _.omit(rolesBefore, simong));
                                assert.deepEqual(idChangeInfo.ids.added, []);
                                assert.deepEqual(idChangeInfo.ids.updated, []);
                                assert.deepEqual(idChangeInfo.ids.removed, [simong]);

                                // Trying to remove the membership for a principal that has no permission should result in no change.
                                var unknownUser = AuthzUtil.toId('u', 'cmac', 'unknown');
                                var unknownUserRemoveChange = makeMembershipChange(unknownUser, false);
                                AuthzAPI.computeMemberRolesAfterChanges(groupId, unknownUserRemoveChange, null, function(err, idChangeInfo) {
                                    assert.ok(!err);
                                    assert.deepEqual(idChangeInfo.changes, {});
                                    assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                                    assert.deepEqual(idChangeInfo.roles.after, rolesBefore);
                                    assert.deepEqual(idChangeInfo.ids.added, []);
                                    assert.deepEqual(idChangeInfo.ids.updated, []);
                                    assert.deepEqual(idChangeInfo.ids.removed, []);

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the functionality of compute member roles after changes when taking
         * into account only add operations
         */
        it('verify functionality when taking into account only promotions', function(callback) {
            var groupId = AuthzUtil.toId('g', 'cmaca', 'oae-team');
            var mrvisser = AuthzUtil.toId('u', 'cmaca', 'mrvisser');
            var simong = AuthzUtil.toId('u', 'cmaca', 'simong');
            var stephen = AuthzUtil.toId('u', 'cmaca', 'stephen');
            var rolesBefore = {};
            rolesBefore[mrvisser] = 'member';
            rolesBefore[simong] = 'member';
            rolesBefore[stephen] = 'editor';
            AuthzAPI.updateRoles(groupId, rolesBefore, function(err) {
                assert.ok(!err);

                // Verify adding a principal by adding bert as a member
                var bert = AuthzUtil.toId('u', 'cmaca', 'bert');
                var addBertChange = makeMembershipChange(bert, 'member');
                AuthzAPI.computeMemberRolesAfterChanges(groupId, addBertChange, {'promoteOnly': true}, function(err, idChangeInfo) {
                    assert.ok(!err);
                    assert.deepEqual(idChangeInfo.changes, addBertChange);
                    assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                    assert.deepEqual(idChangeInfo.roles.after, _.extend({}, rolesBefore, addBertChange));
                    assert.deepEqual(idChangeInfo.ids.added, [bert]);
                    assert.deepEqual(idChangeInfo.ids.updated, []);
                    assert.deepEqual(idChangeInfo.ids.removed, []);

                    // Verify a role change by making mrvisser an editor. It should cause a change
                    // because mrvisser is currently a lowly member
                    var mrvisserEditorChange = makeMembershipChange(mrvisser, 'editor');
                    AuthzAPI.computeMemberRolesAfterChanges(groupId, mrvisserEditorChange, {'promoteOnly': true}, function(err, idChangeInfo) {
                        assert.ok(!err);
                        assert.deepEqual(idChangeInfo.changes, mrvisserEditorChange);
                        assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                        assert.deepEqual(idChangeInfo.roles.after, _.extend({}, rolesBefore, mrvisserEditorChange));
                        assert.deepEqual(idChangeInfo.ids.added, []);
                        assert.deepEqual(idChangeInfo.ids.updated, [mrvisser]);
                        assert.deepEqual(idChangeInfo.ids.removed, []);

                        // Verify a role change by demoting stephen to a viewer. It should not
                        // result in a change because stephen's editor role is superior
                        var stephenViewerChange = makeMembershipChange(stephen, 'viewer');
                        AuthzAPI.computeMemberRolesAfterChanges(groupId, stephenViewerChange, {'promoteOnly': true}, function(err, idChangeInfo) {
                            assert.ok(!err);
                            assert.deepEqual(idChangeInfo.changes, {});
                            assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                            assert.deepEqual(idChangeInfo.roles.after, rolesBefore);
                            assert.deepEqual(idChangeInfo.ids.added, []);
                            assert.deepEqual(idChangeInfo.ids.updated, []);
                            assert.deepEqual(idChangeInfo.ids.removed, []);

                            // Verify a non-update by making simong a member (he already is a member),
                            // should result in no change
                            var simonMemberChange = makeMembershipChange(simong, 'member');
                            AuthzAPI.computeMemberRolesAfterChanges(groupId, simonMemberChange, {'promoteOnly': true}, function(err, idChangeInfo) {
                                assert.ok(!err);
                                assert.deepEqual(idChangeInfo.changes, {});
                                assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                                assert.deepEqual(idChangeInfo.roles.after, rolesBefore);
                                assert.deepEqual(idChangeInfo.ids.added, []);
                                assert.deepEqual(idChangeInfo.ids.updated, []);
                                assert.deepEqual(idChangeInfo.ids.removed, []);

                                // Verify removing a principal by removing simong, should result in no
                                // change
                                var simonRemoveChange = makeMembershipChange(simong, false);
                                AuthzAPI.computeMemberRolesAfterChanges(groupId, simonRemoveChange, {'promoteOnly': true}, function(err, idChangeInfo) {
                                    assert.ok(!err);
                                    assert.deepEqual(idChangeInfo.changes, {});
                                    assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                                    assert.deepEqual(idChangeInfo.roles.after, rolesBefore);
                                    assert.deepEqual(idChangeInfo.ids.added, []);
                                    assert.deepEqual(idChangeInfo.ids.updated, []);
                                    assert.deepEqual(idChangeInfo.ids.removed, []);

                                    // Trying to remove the membership for a principal that has no
                                    // permission should result in no change
                                    var unknownUser = AuthzUtil.toId('u', 'cmaca', 'unknown');
                                    var unknownUserRemoveChange = makeMembershipChange(unknownUser, false);
                                    AuthzAPI.computeMemberRolesAfterChanges(groupId, unknownUserRemoveChange, {'promoteOnly': true}, function(err, idChangeInfo) {
                                        assert.ok(!err);
                                        assert.deepEqual(idChangeInfo.changes, {});
                                        assert.deepEqual(idChangeInfo.roles.before, rolesBefore);
                                        assert.deepEqual(idChangeInfo.roles.after, rolesBefore);
                                        assert.deepEqual(idChangeInfo.ids.added, []);
                                        assert.deepEqual(idChangeInfo.ids.updated, []);
                                        assert.deepEqual(idChangeInfo.ids.removed, []);

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
