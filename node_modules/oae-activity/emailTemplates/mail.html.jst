<%
    /**
     * Render the email header
     */
    var renderHeader = function() {
        var institutionalLogoURL = shared.ensureAbsoluteLink(util.ui.getHashedPath(skinVariables['institutional-logo-url'].replace(/\'/g, '')), baseUrl);
        var greeting = util.i18n.translate('__MSG__ACTIVITY_EMAIL_GREETING__', {'displayName': util.html.encodeForHTML(user.displayName)});
        greeting = shared.ensureAbsoluteLinks(greeting, baseUrl);

        var str = '';
        str += '<tr id="header" class="row">';
        str += '    <td align="center">';
        str += '        <table cellpadding="0" cellspacing="0">';
        str += '            <tr id="logo">';
        str += '                <td><img src="' + institutionalLogoURL + '" /></td>';
        str += '            </tr>';
        str += '            <tr id="greeting">';
        str += '                <td><h1>' + greeting + '</h1></td>';
        str += '            </tr>';
        str += '            <tr id="summary" class="muted">';
        str += '                <td class="wrapped">' + shared.getEmailSummary(util, user.emailPreference, activities, baseUrl) + '</td>';
        str += '            </tr>';
        str += '        </table>';
        str += '    </td>';
        str += '</tr>';

        print(str);
    };
%>

<%
    /**
     * Render the email footer
     */
    var renderFooter = function() {
        var copyrightSymbolI18n = util.i18n.translate('__MSG__COPYRIGHT_SYMBOL__');
        var apereoFoundationI18n = util.i18n.translate('__MSG__APEREO_FOUNDATION__');
        var url = baseUrl + '/me?emailpreferences';

        var str = '';
        str += '<tr id="footer" class="row">';
        str +=   '<td align="center">';
        str +=       util.i18n.translate('__MSG__ACTIVITY_EMAIL_CHANGE_PREFRENCES__', {'url': url}) + '<br />';
        str +=       copyrightSymbolI18n + ' ' + new Date().getFullYear() + ' ' + apereoFoundationI18n;
        str +=   '</td>';
        str += '</tr>';

        print(str);
    };
%>

<%
    /**
     * Render a user thumbnail picture
     *
     * @param  {ActivityViewThumbnail|ActivityEntity}    userProfile        The user profile information
     */
    var renderUserThumbnail = function(userProfile) {
        var thumbnailUrl = shared.ensureAbsoluteLink(util.ui.getHashedPath('/ui/img/icons/user_small.png'), baseUrl);
        if (userProfile && userProfile.thumbnailUrl) {
            thumbnailUrl = shared.ensureAbsoluteLink(userProfile.thumbnailUrl, baseUrl);
        } else if (userProfile && userProfile['oae:thumbnail']) {
            thumbnailUrl = shared.ensureAbsoluteLink(userProfile['oae:thumbnail'].url, baseUrl);
        }

        var profilePath = null;
        if (userProfile && userProfile.profilePath) {
            profilePath = shared.ensureAbsoluteLink(userProfile.profilePath, baseUrl);
        } else if (userProfile && userProfile['oae:profilePath']) {
            profilePath = shared.ensureAbsoluteLink(userProfile['oae:profilePath'], baseUrl);
        }

        var str = '<img src="' + thumbnailUrl + '" alt="' + util.html.encodeForHTMLAttribute(userProfile.displayName) + '" />';

        // If the profile path is defined, we will make the thumbnail a link to it
        if (profilePath) {
            str =
                '<a class="thumbnail-user" href="' + profilePath +  '" title="' + util.html.encodeForHTMLAttribute(userProfile.displayName) + '">' +
                    str +
                '</a>';
        }

        print(str);
    };
%>

<%
    /**
     * Render a preview tile
     *
     * @param  {Object}    entity    The preview entity
     * @param  {Boolean}   wide      Whether or not to render the wide content preview, defaults to `false`
     */
    var renderPreviewTile = function(entity, wide) {
        var thumbnailUrl = '';

        // Determine the correct image url
        if (wide && entity.wideImageUrl) {
            thumbnailUrl = shared.ensureAbsoluteLink(entity.wideImageUrl, baseUrl);
        } else {
            wide = false;

            if (entity.thumbnailUrl) {
                thumbnailUrl = shared.ensureAbsoluteLink(entity.thumbnailUrl, baseUrl);
            } else {
                var resourceType = entity.resourceType;
                if (resourceType === 'content') {
                    resourceType = entity.resourceSubType;
                }
                thumbnailUrl = shared.ensureAbsoluteLink(util.ui.getHashedPath('/ui/img/icons/' + resourceType + '.png'), baseUrl);
            }
        }

        // Determine the correct subscript for in the tile
        var resourceType = entity.resourceType;
        if (entity.resourceType === 'user') {
            resourceType = util.text.truncate(entity.tenant.displayName, 25);
        } else if (entity.resourceType === 'group') {
            resourceType = '__MSG__GROUP__';
        } else if (entity.resourceType === 'discussion') {
            resourceType = '__MSG__DISCUSSION__';
        } else if (entity.resourceType === 'content') {
            resourceType = util.text.getMimetypeDescription(entity.resourceSubType, entity.mime)
        }

        // The tile's title depends on whether we're rendering a wide title or not
        var title = util.html.encodeForHTML(util.text.truncate(entity.displayName, 30));
        if (wide) {
            title = util.html.encodeForHTML(util.text.truncate(entity.displayName, 90));
        }

        // Generate the visibility text and icon url
        var key = '__MSG__PUBLIC__';
        if (entity.visibility === 'loggedin') {
            key = '__MSG__LOGGEDIN__';
        } else if (entity.visibility === 'private') {
            key = '__MSG__PRIVATE__';
        }
        var i18nVisibility = util.i18n.translate(key);
        var icon = util.ui.getHashedPath('/ui/img/icons/' + entity.visibility + '.png');

        var str = '';
        str += '<td class="preview-tile-container' + (wide ? ' preview-tile-container-wide' : '') + ' ' + entity.resourceSubType + '" style="background-image: url(' + thumbnailUrl + ');" background="' + thumbnailUrl + '" valign="bottom">';

        // Private users should not be linked
        if (entity.resourceType === 'user' && entity.visibility === 'private') {
            str += '<span>';
        } else {
            str += '<a href="' + shared.ensureAbsoluteLink(entity.profilePath, baseUrl) + '" title="' + util.html.encodeForHTMLAttribute(entity.displayName) + '" target="_blank">';
        }
        str += '        <table cellpadding="0" cellspacing="0" class="preview-tile-container-inner">';
        str += '            <tr>';
        str += '                <td valign="bottom">';
        str += '                    <div class="preview-tile-metadata">';
        str += '                        <table cellpadding="0" cellspacing="0">';
        str += '                            <tr valign="top">';
        str += '                                <td><h3>';

        // We add the link in here again as some mail clients will remove the outer link. We do not link
        // the entity if it's a private user
        if (entity.resourceType === 'user' && entity.visibility === 'private') {
            str += '                                <span class="preview-tile-title wrapped">' + title + '</span>';
        } else {
            str += '                                <a href="' + shared.ensureAbsoluteLink(entity.profilePath, baseUrl) + '" title="' + util.html.encodeForHTMLAttribute(entity.displayName) + '" target="_blank" class="preview-tile-title wrapped">' + title + '</a>';
        }
        str += '                                </h3></td>';
        if (entity.resourceType !== 'user') {
            str += '                            <td><img src="' + shared.ensureAbsoluteLink(icon, baseUrl) + '" alt="' + i18nVisibility + '" class="preview-tile-metadata-visibility" /></td>';
        }
        str += '                            </tr>';
        str += '                            <tr>';
        str += '                                <td colspan="2"><small class="preview-tile-metadata-description">' + resourceType + '</small></td>';
        str += '                            </tr>';
        str += '                        </table>';
        str += '                    </div>';
        str += '                </td>';
        str += '            </tr>';
        str += '        </table>';
        if (entity.resourceType === 'user' && entity.visibility === 'private') {
            str += '</span>';
        } else {
            str += '</a>';
        }
        str += '</td>';

        print(str);
    };
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http: //www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http: //www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width" />
        <style>

            /*************
             * CORE CSS **
             *************/

            body {
                background-color: <%= skinVariables['body-background-color'] %>;
                color: <%= skinVariables['text-color'] %>;
                font-size: 13px;
                height: 100%;
                padding: 20px;
                -webkit-font-smoothing: antialiased;
                -webkit-text-size-adjust: 150%;
            }

            body, h1, h2, h3, h4, h5, h6, a, span, td, div {
                font-family: HelveticaNeue-Light, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
            }

            body > table {
                margin: 0 auto;
            }

            a {
                color: <%= skinVariables['link-color'] %>;
                text-decoration: none;
            }

            a:hover {
                color: <%= skinVariables['link-hover-color'] %>;
            }

            h1, h2, h3, h4, h5, h6 {
                color: <%= skinVariables['text-color']%>;
                line-height: 1.1;
            }

            h1, h2 {
                font-weight: 200;
            }

            h3 {
                font-weight: 500;
            }

            img {
                border: 0;
            }

            .muted {
                color: <%= skinVariables['secondary-text-color'] %>;
                font-size: 12px;
            }

            .wrapped {
                word-wrap: break-word;
            }

            .row > td {
                max-width: 700px;
                min-width:400px;
            }


            /************
             ** HEADER **
             ************/

            #header table {
                width: 100%;
            }

            #header td {
                text-align: center;
                max-width: 650px;
            }

            #header #logo img {
                margin: 0 0 30px;

                /* GMail always converts `height` to `min-height` on at least images, so use
                   `min-height` with `max-height` for some client consistency */
                max-height: 50px;
                min-height: 50px;
            }

            #header #greeting h1 {
                font-size: 24px;
                font-weight: bold;
                margin: 0 0 5px;
                word-wrap: break-word;
            }

            #header #summary td {
                font-size: 15px;
                padding-bottom: 10px;
            }


            /***********
             ** TILES **
             ***********/

            .preview-tile-container {
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
                border: 1px solid #EEEDEB;
                height: 162px;
                padding: 0px;
                width: 162px;
            }

            .preview-tile-container.collabdoc {
                background-position: top left;
            }

            .preview-tile-container-wide {
                width: 520px;
            }

            .preview-tile-container-inner {
                height: 162px;
            }

            .preview-tile-container-wide .preview-tile-container-inner {
                height: 223px;
            }

            .preview-tile-container .preview-tile-metadata {
                background: #000000;
                background-color: <%= skinVariables['tile-background-color'] %> !important;
                padding: 7px;
                width: 148px;
            }

            .preview-tile-container-wide .preview-tile-metadata {
                width: 520px;
            }

            .preview-tile-container .preview-tile-metadata img.preview-tile-metadata-visibility {
                height: 18px;
                width: 18px;
            }

            .preview-tile-container .preview-tile-metadata h3 {
                display: block;
                font-size: 14px;
                font-weight: 600;
                line-height: 1.4;
                margin: 0;
                max-width: 135px;
                width: 130px;
            }

            .preview-tile-container-wide .preview-tile-metadata h3 {
                width: 493px;
                max-width: 493px;
            }

            .preview-tile-container .preview-tile-metadata h3 .preview-tile-title {
                color: <%= skinVariables['tile-title-color'] %>;
            }

            .preview-tile-container .preview-tile-metadata .preview-tile-metadata-description {
                color: <%= skinVariables['tile-description-color'] %>;
                text-transform: uppercase;
                font-size: 13px;
            }


            /****************
             ** THUMBNAILS **
             ****************/

            .thumbnail-user img {
                height: 40px;
                width: 40px;
            }


            /****************
             ** ACTIVITIES **
             ****************/

            .activity-row > td {
                background-color: #FFF;
                border: 1px solid #EDEDEC;
                font-size: 14px;
                margin: 10px auto;
                padding: 30px;
            }

            .activity-row > table {
                clear: both;
            }

            .activity-row .activity-thumbnail-container {
                float: left;
            }

            .activity-row .activity-summary-container {
                padding-left: 52px;
                max-width: 620px;
            }

            .activity-row .activity-summary-container .activity-date {
                margin-top: 5px;
            }

            .activity-row .activity-previews-container {
                margin: 25px 0 0 -10px;
            }

            .activity-row .activity-comment-container {
                margin-top: 25px;
                min-height: 40px;
            }

            .activity-row .activity-comment-container.comment-level-1 {
                margin-left: 40px;
            }

            .activity-row .activity-comment-container.comment-level-2 {
                margin-left: 80px;
            }

            .activity-row .activity-comment-container .activity-comment-thumbnail-container {
                float: left;
            }

            .activity-row .activity-comment-container .activity-comment {
                padding-left: 52px;
                max-width: 650px;
            }

            .activity-row .activity-comment-container.comment-level-1 .activity-comment {
                max-width: 610px;
            }
            .activity-row .activity-comment-container.comment-level-2 .activity-comment {
                max-width: 570px;
            }

            .activity-row .activity-comment-container .activity-comment .activity-comment-message {
                margin-top: 7px;
            }


            /************
             ** FOOTER **
             ************/

            #footer {
                font-size: 10px;
                margin: 40px auto 0;
            }

        </style>
    </head>
    <body>
        <table cellspacing="10" cellpadding="0">
            <tbody>
                <% renderHeader(); %>

                <%
                _.each(activities, function(activity) {
                    var summary = util.i18n.translate(activity.summary.i18nKey, activity.summary.i18nArguments) ;
                    summary = shared.ensureAbsoluteLinks(summary, baseUrl);
                %>
                    <tr class="row activity-row" data-activity-id="<%= activity.originalActivity['oae:activityId'] %>">
                        <td>
                            <table cellpadding="0" cellspacing="0">
                                <tbody>
                                    <tr>
                                        <td>
                                            <div class="activity-thumbnail-container">
                                                <% renderUserThumbnail(activity.primaryActor); %>
                                            </div>
                                            <div class="activity-summary-container">
                                                <div class="wrapped"><%= summary %></div>
                                                <div class="activity-date muted"><%= util.i18n.formatDate(new Date(activity.published), 'f') %></div>
                                            </div>
                                            <table class="activity-previews-container" cellspacing="10" cellpadding="0">
                                                <tbody>
                                                    <%
                                                        // We only need to display the first 6 thumbnails
                                                        activity.activityItems = activity.activityItems.slice(0, 6);

                                                        // Display 3 thumbnails per row
                                                        _.each(activity.activityItems, function(thumbnail, index) {
                                                            // Start a new row every fourth thumbnail (or for the initial one)
                                                            if (index % 3 === 0) {
                                                                print('<tr>');
                                                            }

                                                            renderPreviewTile(thumbnail, activity.activityItems.length === 1);

                                                            // Close the row after 3 thumbnails or when we've iterated over all the thumbnails
                                                            if (index % 3 === 2 || index === (activity.activityItems.length - 1)) {
                                                                print('</tr>');
                                                            }
                                                        });
                                                    %>
                                                </tbody>
                                            </table>
                                            <% _.each(activity.allComments, function(item) {
                                                %>
                                                <div class="activity-comment-container comment-level-<%= item.level %>">
                                                    <div class="activity-comment-thumbnail-container">
                                                        <% renderUserThumbnail(item.comment.author); %>
                                                    </div>
                                                    <div class="activity-comment">
                                                        <%
                                                            var authorLink = shared.ensureAbsoluteLink(item.comment.author['oae:profilePath'], baseUrl);
                                                            if (authorLink) {
                                                                print('<a href="' + authorLink + '" title="' +  util.html.encodeForHTMLAttribute(item.comment.author.displayName) + '" class="wrapped">');
                                                            }
                                                        %>
                                                            <%= util.html.encodeForHTML(item.comment.author.displayName) %>
                                                        <%
                                                            if (authorLink) {
                                                                print('</a>');
                                                            }
                                                        %>
                                                        <span class="activity-date muted"><%= util.i18n.formatDate(new Date(item.comment.published), 'f') %></span>
                                                        <div class="activity-comment-message wrapped"><%= util.text.toHtml(item.comment.content) %></div>
                                                    </div>
                                                </div>
                                            <% }); %>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                <% }); %>

                <% renderFooter(); %>
            </tbody>
        </table>
    </body>
</html>
