/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var ActivityTestsUtil = require('oae-activity/lib/test/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var log = require('oae-logger').logger('test-activity');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var EmailAPI = require('oae-email');
var EmailConfig = require('oae-config').config('oae-email');
var EmailTestsUtil = require('oae-email/lib/test/util');

describe('Emails', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    // Keep track of how many mails we've sent across all tests
    var emailsSent = 0;

    /**
     * Generate an object suitable for use to configure the Email API
     *
     * @param  {Object}     overrides   A set of overrides that should go in the config
     * @return {Object}                 Object that can be used to configure the Email API
     */
    var _createDefaultConfig = function(overrides) {
        // Construct the email config
        return _.extend({'debug': true}, overrides);
    };

    /**
     * Generate a unique hash across all tests
     *
     * @return {String}    String that can be used as the hash value for an email
     */
    var _uniqueHash = function() {
        emailsSent++;
        return 'oae-emails:tests:' + emailsSent;
    };

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        return callback();
    });

    beforeEach(function(callback) {
        EmailAPI.init(_createDefaultConfig(), function(err) {
            assert.ok(!err);

            // Flush the pending mails
            EmailTestsUtil.clearEmailCollections(callback);
        });
    });

    afterEach(function(callback) {
        // Return the email api to its default test configuration
        EmailAPI.init(_createDefaultConfig(), callback);
    });

    describe('Templates', function() {

        /**
         * Test that verifies validation of the sendEmail method
         */
        it('verifies sendEmail validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);

                // Verify error when there is no email
                delete mrvisser.user.email;
                EmailTestsUtil.sendEmail('oae-email', 'test', mrvisser.user, null, null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    mrvisser.user.email = 'blah blah blah';

                    // Verify error when there is invalid email
                    EmailTestsUtil.sendEmail('oae-email', 'test', mrvisser.user, null, null, function(err, message) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Verify error when there is no user
                        EmailTestsUtil.sendEmail('oae-email', 'test', null, null, null, function(err, message) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            mrvisser.user.email = 'my.email@my.email.com';

                            // Verify error when there is no module
                            EmailTestsUtil.sendEmail(null, 'test', mrvisser.user, null, null, function(err, message) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Verify error when there is no template id
                                EmailTestsUtil.sendEmail('oae-email', null, mrvisser.user, null, null, function(err, message) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Verify error with non-existent module
                                    EmailTestsUtil.sendEmail('oae-non-existent', 'test', mrvisser.user, null, null, function(err, message) {
                                        assert.ok(err);
                                        assert.equal(err.code, 500);

                                        // Verify error with non-existent template id
                                        EmailTestsUtil.sendEmail('oae-email', 'TemplateDoesNotExist', mrvisser.user, null, null, function(err, message) {
                                            assert.ok(err);
                                            assert.equal(err.code, 500);

                                            // Sanity check
                                            EmailTestsUtil.sendEmail('oae-email', 'test', mrvisser.user, null, null, function(err, message) {
                                                assert.ok(!err);
                                                assert.ok(message);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that emails get internationalized
         */
        it('verifies email templates are internationalized', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';
                mrvisser.user.locale = 'en_CA';

                var nico = _.values(users)[1];
                nico.user.email = 'nico@email.address.com';
                nico.user.locale = 'fr_FR';

                // Verify mrvisser gets the email
                EmailTestsUtil.sendEmail('oae-email', 'test_locale', mrvisser.user, null, null, function(err, message) {
                    assert.ok(!err);
                    var mrvisserMessage = message;
                    assert.ok(mrvisserMessage.subject);
                    assert.ok(mrvisserMessage.text);

                    // Verify nico gets the email
                    EmailTestsUtil.sendEmail('oae-email', 'test_locale', nico.user, null, null, function(err, message) {
                        assert.ok(!err);
                        var nicoMessage = message;
                        assert.ok(nicoMessage.subject);
                        assert.ok(nicoMessage.text);

                        // Because of the locale difference, the subject and body of the mails should be different
                        assert.notEqual(mrvisserMessage.subject, nicoMessage.subject);
                        assert.notEqual(mrvisserMessage.text, nicoMessage.text);
                        return callback();
                    });

                });
            });
        });

        /**
         * Verifies a 500 error is thrown when there is no meta template available for a template, even if there are
         * content templates.
         */
        it('verifies error with no meta template', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                // Verify error when there is no meta template
                EmailTestsUtil.sendEmail('oae-email', 'TestNoMeta', mrvisser.user, null, null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 500);
                    assert.strictEqual(err.msg.indexOf('No email metadata'), 0);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies an error is given when a template is chosen that has only metadata and no content.
         */
        it('verifies error with no html or txt template', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                // Verify error when there is no email
                EmailTestsUtil.sendEmail('oae-email', 'test_meta_only', mrvisser.user, null, null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 500);
                    assert.strictEqual(err.msg.indexOf('No email content'), 0);
                    return callback();
                });
            });
        });

        /**
         * Verifies the combinations of templates that have only html, only txt and both html and txt.
         */
        it('verifies html and txt templates', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                // Verify HTML only
                EmailTestsUtil.sendEmail('oae-email', 'test_html_only', mrvisser.user, null, null, function(err, message) {
                    assert.ok(!err);

                    assert.equal(message.from[0].name, 'Apereo OAE');
                    assert.equal(message.from[0].address, util.format('noreply@%s', mrvisser.restContext.hostHeader));
                    assert.equal(message.subject, 'test html only');
                    assert.equal(message.to[0].address, mrvisser.user.email);
                    assert.equal(message.html, '<html><body><b>test html only</b></body></html>\n');
                    assert.equal(message.text, 'test html only');

                    // Verify text only
                    EmailTestsUtil.sendEmail('oae-email', 'test_txt_only', mrvisser.user, null, null, function(err, message) {
                        assert.ok(!err);

                        assert.equal(message.from[0].name, 'Apereo OAE');
                        assert.equal(message.from[0].address, util.format('noreply@%s', mrvisser.restContext.hostHeader));
                        assert.equal(message.subject, 'test txt only');
                        assert.equal(message.to[0].address, mrvisser.user.email);
                        assert.ok(!message.html);
                        assert.equal(message.text, '**test txt only**');

                        // Verify contents with both html and text
                        EmailTestsUtil.sendEmail('oae-email', 'test_html_and_txt', mrvisser.user, null, null, function(err, message) {
                            assert.ok(!err);

                            assert.equal(message.from[0].name, 'Apereo OAE');
                            assert.equal(message.from[0].address, util.format('noreply@%s', mrvisser.restContext.hostHeader));
                            assert.equal(message.subject, 'test html and txt');
                            assert.equal(message.to[0].address, mrvisser.user.email);
                            assert.equal(message.html, '<html><body><b>test html and text</b></body></html>\n');
                            assert.equal(message.text, '**test html and txt**');
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies how errors are handled when templates trigger exceptions:
         *
         *  * When the meta template throws exception, the email fails to send
         *  * When the html template throws exception but there is a text template, the email sends with the text
         *  * When the text template throws exception but there is an html template, the email sends with the html
         *  * When both html and text templates throw exception, the email fails
         */
        it('verifies exception handling from template rendering', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                var _mailData = function(throwMeta, throwHtml, throwTxt, throwContent) {
                    return {
                        'throwMeta': throwMeta,
                        'throwHtml': throwHtml,
                        'throwTxt': throwTxt,
                        'throwContent': throwContent
                    };
                };

                // Verify we get an error when exception thrown from meta
                EmailTestsUtil.sendEmail('oae-email', 'test_throw_error', mrvisser.user, _mailData(true, false, false, false), null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 500);
                    assert.strictEqual(err.msg.indexOf('Error parsing email metadata'), 0);

                    // Verify if an error is thrown from HTML but we still have a valid text, a message is still sent
                    EmailTestsUtil.sendEmail('oae-email', 'test_throw_error', mrvisser.user, _mailData(false, true, false, false), null, function(err, message) {
                        assert.ok(!err);

                        assert.ok(!message.html);
                        assert.ok(message.text);
                        assert.ok(message.text.indexOf('OK') > -1);

                        // Verify if an error is thrown from HTML but we still have a valid text, a message is still sent
                        EmailTestsUtil.sendEmail('oae-email', 'test_throw_error', mrvisser.user, _mailData(false, false, true, false), null, function(err, message) {
                            assert.ok(!err);

                            assert.ok(message.html);
                            assert.ok(message.html.indexOf('OK') > -1);

                            // The HTML template gets auto-converted to text if it does not exist
                            assert.ok(message.text);
                            assert.ok(message.text.indexOf('OK') > -1);

                            // Verify we get an error when exception thrown from meta
                            EmailTestsUtil.sendEmail('oae-email', 'test_throw_error', mrvisser.user, _mailData(false, false, false, true), null, function(err, message) {
                                assert.ok(err);
                                assert.equal(err.code, 500);
                                assert.strictEqual(err.msg.indexOf('Could not parse a suitable content template'), 0);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that shared logic can be used in the email templates
         */
        it('verify shared logic can be used', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                EmailTestsUtil.sendEmail('oae-email', 'test_shared', mrvisser.user, {}, null, function(err, message) {
                    assert.ok(!err);
                    assert.equal(message.subject, 'foo');
                    assert.equal(message.text, 'bar');
                    return callback();
                });
            });
        });
    });

    describe('Email configuration', function() {

        /**
         * A test that verifies the email transport config property gets validated.
         */
        it('verify transport validation', function(callback) {
            EmailAPI.init(_createDefaultConfig({'debug': false, 'transport': 'wrong'}), function(err) {
                assert.equal(err.code, 400);

                // We should be able to check the sendmail transport from the unit tests.
                var mailConfigOverrides = {
                    'debug': false,
                    'transport': 'sendmail',
                    'sendmailTransport': {
                        'path': '/usr/sbin/sendmail'
                    }
                };
                EmailAPI.init(_createDefaultConfig(mailConfigOverrides), function(err) {
                    assert.ok(!err);

                    // Let the after() method take care of resetting the config properly.
                    return callback();
                });
            });
        });

        /**
         * A test that verifies that a legit `from` header is constructed if not specified in the tenant configuration
         */
        it('verify noreply from header', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, camUsers, simong, coenego) {
                assert.ok(!err);

                // Set the `from` header for the email module
                ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-email/general/from': 'noreply@blahblahblah.com'}, function(err) {
                    assert.ok(!err);

                    // Create a new link with the coenego user. The simong user will receive an email
                    RestAPI.Content.createLink(coenego.restContext, 'Google', 'Google', 'private', 'http://www.google.com', [], [simong.user.id], [], function(err, link) {
                        assert.ok(!err);
                        assert.ok(link);

                        // Assert that simong receives an email with `noreply@blahblahblah.com` as the the configured `from` header
                        EmailTestsUtil.collectAndFetchAllEmails(function(messages) {
                            assert.ok(messages);
                            assert.ok(!_.isEmpty(messages));
                            assert.strictEqual(messages[0].to[0].address, simong.user.email);
                            assert.strictEqual(messages[0].from[0].address, 'noreply@blahblahblah.com');

                            // Clear the `from` header configuration in the email module. This allows the application to compose a tenant based `from` header
                            RestAPI.Config.clearConfig(camAdminRestContext, null, ['oae-email/general/from'], function(err) {
                                assert.ok(!err);

                                // Create a comment with the simong user. The coenego user will receive an email
                                RestAPI.Content.createComment(simong.restContext, link.id, 'I have never seen something like this before!', null, function(err, comment) {
                                    assert.ok(!err);
                                    assert.ok(comment);

                                    // Assert that coenego receives an email with `"camtest" <noreply@cambridge.oae.com>` as the composed `from` header
                                    EmailTestsUtil.collectAndFetchAllEmails(function(messages) {
                                        assert.ok(messages);
                                        assert.ok(messages.length);
                                        assert.strictEqual(messages[0].to[0].address, coenego.user.email);
                                        assert.equal(messages[0].from[0].name, 'Apereo OAE');
                                        assert.equal(messages[0].from[0].address, util.format('noreply@%s', coenego.restContext.hostHeader));
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

    describe('Spam Prevention', function() {

        /**
         * Test that ensures the Message-Id of email messages are in a format that SpamAssassin will
         * not score as being spam
         */
        it('verify emails have a trustworthy message id', function(callback) {

            // Plucking SpamAssassin's host allowance rule from property __MSGID_OK_HOST:
            // http://cpansearch.perl.org/src/FELICITY/Mail-SpamAssassin-3.0.2/rules/20_head_tests.cf
            var MSGID_OK = /\@(?:\D{2,}|(?:\d{1,3}\.){3}\d{1,3})>/;

            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                // Create a content item which should trigger an email to the Gaeremonster
                RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'private', 'http://www.google.com', [], [simong.user.id], [], function(err, link) {
                    assert.ok(!err);
                    assert.ok(link);

                    // Ensure the email has an ID that is not fishy to SpamAssassin
                    EmailTestsUtil.collectAndFetchAllEmails(function(messages) {
                        assert.ok(messages);
                        assert.ok(!_.isEmpty(messages));
                        assert.ok(messages[0].messageId);
                        assert.ok(MSGID_OK.test(messages[0].headers['message-id']));
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that ensures we have the userid in the messageid so we can find the source of a message
         */
        it('verify emails have a userid in their message id', function(callback) {

            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                // Create a content item which should trigger an email
                RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'private', 'http://www.google.com', [], [simong.user.id], [], function(err, link) {
                    assert.ok(!err);
                    assert.ok(link);

                    // Ensure the email has an ID that contains the userid
                    EmailTestsUtil.collectAndFetchAllEmails(function(messages) {
                        assert.ok(messages);
                        assert.ok(!_.isEmpty(messages));
                        assert.ok(messages[0].messageId);
                        // `:` can't appear in email headers
                        var transformedUserId = simong.user.id.replace(/:/g, '-');

                        assert.ok(messages[0].headers['message-id'].match(transformedUserId));
                        return callback();
                    });
                });
            });
        });

    });

    describe('Email de-duplication', function() {

        /**
         * Test that verifies that a provided fingerprint can be used to perform de-duplication
         */
        it('verify a provided hash can be used to perform de-duplication', function(callback) {
            EmailTestsUtil.collectAndFetchAllEmails(function() {
                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                    assert.ok(!err);

                    // The user needs an email address
                    simong.user.email = TestsUtil.generateTestEmailAddress();

                    // Send out the first e-mail
                    EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, {'hash': 'u:cam:simong#123456'}, function(err, message) {
                        assert.ok(!err);
                        assert.ok(message);

                        // Re-using the same hash should result in test failure
                        EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, {'hash': 'u:cam:simong#123456'}, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 403);

                            // Re-using the same hash, but with the same mail should result in a failure
                            // We generate a "different" mail by passing in a data object
                            EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, {'data': 'test'}, {'hash': 'u:cam:simong#123456'}, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 403);

                                // Using another hash (but otherwise the same mail) should work
                                EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, {'hash': 'u:cam:mrvisser#000000'}, function(err, message) {
                                    assert.ok(!err);
                                    assert.ok(message);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the email info gets used when performing the deduplication
         */
        it('verify omitting the hash uses the email info for de-duplication', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // The user needs an email address
                simong.user.email = TestsUtil.generateTestEmailAddress();

                // Send out the first e-mail
                EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err, message) {
                    assert.ok(!err);
                    assert.ok(message);

                    // Sending out the same email should result in a failure
                    EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 403);

                        // Sanity check that sending out a different email works
                        EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, {'data': 'test'}, null, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 403);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the de-duplication interval is configurable
         */
        it('verify de-duplication is limited to a configurable interval', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // The user needs an email address
                simong.user.email = TestsUtil.generateTestEmailAddress();

                EmailAPI.init(_createDefaultConfig({'deduplicationInterval': 2}), function(err) {
                    assert.ok(!err);
                    // Send out the first e-mail
                    EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err, message) {
                        assert.ok(!err);
                        assert.ok(message);

                        // Sending out the same email should result in a failure
                        EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 403);

                            // If we wait till the deduplication interval has passed, we should be able to send out the same email again
                            setTimeout(function() {
                                EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err) {
                                    assert.ok(!err);
                                    assert.ok(message);

                                    // Sanity-check that sending the same email again is now not allowed
                                    EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 403);
                                        return callback();
                                    });
                                });
                            }, 2500);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the same email can be sent to multiple users
         */
        it('verify the same email can be sent to multiple users', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, simong, nico) {
                assert.ok(!err);

                // The users need an email address
                simong.user.email = TestsUtil.generateTestEmailAddress();
                nico.user.email = TestsUtil.generateTestEmailAddress();

                EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err, message) {
                    assert.ok(!err);
                    assert.ok(message);
                    EmailTestsUtil.sendEmail('oae-email', 'test', nico.user, null, null, function(err, message) {
                        assert.ok(!err);
                        assert.ok(message);

                        // Sanity-check we cannot send it twice
                        EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, null, function(err, message) {
                            assert.ok(err);
                            assert.equal(err.code, 403);
                            EmailTestsUtil.sendEmail('oae-email', 'test', nico.user, null, null, function(err, message) {
                                assert.ok(err);
                                assert.equal(err.code, 403);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Throttling', function() {

        /**
         * Test that verifies that emails get throttled
         */
        it('verify email throttling', function(callback) {
            // Throttle when more than 2 mails to the same user are sent in a timespan of 2 seconds. We give 2 seconds because we need
            // at least 2 buckets to cover our interval to avoid interval roll-overs resetting our count and intermittently failing the test
            EmailAPI.init(_createDefaultConfig({'throttling': {'timespan': 2, 'count': 2}}), function(err) {
                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                    assert.ok(!err);

                    // The user needs an email address
                    simong.user.email = TestsUtil.generateTestEmailAddress();

                    EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, {'hash': _uniqueHash()}, function(err, message) {
                        assert.ok(!err);
                        EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, {'hash': _uniqueHash()}, function(err, message) {
                            assert.ok(!err);
                            EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, {'hash': _uniqueHash()}, function(err, message) {
                                assert.ok(err);
                                assert.equal(err.code, 403);

                                // If we wait longer than the throttle timespan, we should be able to send an e-mail to this user
                                setTimeout(function() {
                                    EmailTestsUtil.sendEmail('oae-email', 'test', simong.user, null, {'hash': _uniqueHash()}, function(err, message) {
                                        assert.ok(!err);
                                        return callback();
                                    });
                                }, 2250);
                            });
                        });
                    });
                });
            });
        });
    });
});
