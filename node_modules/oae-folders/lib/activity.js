/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var PrincipalsUtil = require('oae-principals/lib/util');
var TenantsUtil = require('oae-tenants/lib/util');

var FoldersAPI = require('oae-folders');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');

///////////////////
// FOLDER-CREATE //
///////////////////

ActivityAPI.registerActivityType(FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, {
    'groupBy': [{'actor': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self', 'followers'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['members']
            }
        },
        'email': {
            'router': {
                'object': ['members']
            }
        }
    }
});

/*!
 * Post a folder-create activity when a user creates a folder
 */
FoldersAPI.on(FoldersConstants.events.CREATED_FOLDER, function(ctx, folder, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('folder', folder.id, {'folder': folder});
    var activitySeed = new ActivityModel.ActivitySeed(FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////////
// FOLDER-ADD-TO-FOLDER //
//////////////////////////

ActivityAPI.registerActivityType(FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, {
    'groupBy': [{'actor': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self', 'followers'],
                'object': ['managers'],
                'target': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'target': ['members']
            }
        },
        'email': {
            'router': {
                'target': ['members']
            }
        }
    }
});

/*!
 * Post a folder-add-to-folder activity when a user adds content items to a folder
 */
FoldersAPI.on(FoldersConstants.events.ADDED_CONTENT_ITEMS, function(ctx, folder, contentItems) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var targetResource = new ActivityModel.ActivitySeedResource('folder', folder.id, {'folder': folder});
    _.each(contentItems, function(content) {
        var objectResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
        var activitySeed = new ActivityModel.ActivitySeed(FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, millis, ActivityConstants.verbs.ADD, actorResource, objectResource, targetResource);
        ActivityAPI.postActivity(ctx, activitySeed);
    });
});


///////////////////////////////////////////////
// FOLDER-UPDATE and FOLDER-UPDATE-VISIBILITY//
///////////////////////////////////////////////

ActivityAPI.registerActivityType(FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, {
    'groupBy': [{'actor': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['managers']
            }
        },
        'email': {
            'router': {
                'object': ['managers']
            }
        }
    }
});

ActivityAPI.registerActivityType(FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, {
    'groupBy': [{'actor': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members']
            }
        },
        'notification': {
            'router': {
                'object': ['managers']
            }
        },
        'email': {
            'router': {
                'object': ['managers']
            }
        }
    }
});

/*!
 * Post a folder-update activity when a user updates a folder
 */
FoldersAPI.on(FoldersConstants.events.UPDATED_FOLDER, function(ctx, oldFolder, updatedFolder) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('folder', updatedFolder.id, {'folder': updatedFolder});

    var activityType = null;
    if (updatedFolder.visibility !== oldFolder.visibility) {
        activityType = FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY;
    } else {
        activityType = FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE;
        
    }
    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


////////////////////////////////////////////////
// FOLDER-SHARE and FOLDER-UPDATE-MEMBER-ROLE //
////////////////////////////////////////////////

ActivityAPI.registerActivityType(FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_LIBRARY, {
    // "Branden Visser added 5 folders to his library"
    'groupBy': [{'actor': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self', 'followers'],
                'object': ['managers']
            }
        }
    }
});

ActivityAPI.registerActivityType(FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, {
    'groupBy': [
        // "Branden Visser shared Folder with 5 users and groups"
        {'actor': true, 'object': true},

        // "Branden Visser shared 8 folders with OAE Team"
        {'actor': true, 'target': true}
    ],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['managers'],
                'target': ['self', 'members', 'followers']
            }
        },
        'notification': {
            'router': {
                'target': ['self']
            }
        },
        'email': {
            'router': {
                'target': ['self']
            }
        }
    }
});

ActivityAPI.registerActivityType(FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, {
    'groupBy': [{'actor': true, 'target': true}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self', 'members'],
                'target': ['managers']
            }
        }
    }
});

FoldersAPI.on(FoldersConstants.events.UPDATED_FOLDER_MEMBERS, function(ctx, folder, roleChanges, newMemberIds) {
    newMemberIds = newMemberIds || [];
    roleChanges = roleChanges || {};

    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var folderResource = new ActivityModel.ActivitySeedResource('folder', folder.id, {'folder': folder});

    // When a user is added, it is considered either a folder-share or a folder-add-to-library activity, depending on if the
    // added user is the current user in context
    _.each(newMemberIds, function(memberId) {
        if (memberId === ctx.user().id) {
            // Users can't "share" with themselves, they actually "add it to their library"
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_LIBRARY, millis, ActivityConstants.verbs.ADD, actorResource, folderResource));
        } else {
            // A user shared a folder with some other user, fire the folder share activity
            var principalResourceType = (PrincipalsUtil.isGroup(memberId)) ? 'group' : 'user';
            var principalResource = new ActivityModel.ActivitySeedResource(principalResourceType, memberId);
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, millis, ActivityConstants.verbs.SHARE, actorResource, folderResource, principalResource));
        }
    });

    // When a user's role is updated, we fire a "folder-update-member-role" activity
    _.each(roleChanges, function(role, memberId) {
        var principalResourceType = (PrincipalsUtil.isGroup(memberId)) ? 'group' : 'user';
        var principalResource = new ActivityModel.ActivitySeedResource(principalResourceType, memberId);
        ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, millis, ActivityConstants.verbs.UPDATE, actorResource, principalResource, folderResource));
    });
});


///////////////////////////
// ACTIVITY ENTITY TYPES //
///////////////////////////

/*!
 * Produces a persistent 'folder' activity entity
 * @see ActivityAPI#registerActivityEntityType
 */
var _folderProducer = function(resource, callback) {
    var folder = (resource.resourceData && resource.resourceData.folder) ? resource.resourceData.folder : null;

    // If the folder was fired with the resource, use it instead of fetching
    if (folder) {
        return callback(null, _createPersistentFolderActivityEntity(folder));
    }

    FoldersDAO.getFolder(resource.resourceId, function(err, folder) {
        if (err) {
            return callback(err);
        }

        return callback(null, _createPersistentFolderActivityEntity(folder));
    });
};

/*!
 * Transform the folder persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _folderTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            transformedActivityEntities[activityId][entityId] = _transformPersistentFolderActivityEntity(ctx, entity);
        });
    });

    return callback(null, transformedActivityEntities);
};



ActivityAPI.registerActivityEntityType('folder', {
    'producer': _folderProducer,
    'transformer': {
        'activitystreams': _folderTransformer,
        'internal': _folderTransformer
    },
    'propagation': function(associationsCtx, entity, callback) {
        ActivityUtil.getStandardResourcePropagation(entity.folder.visibility, AuthzConstants.joinable.NO, callback);
    }
});

//////////////////////////////////
// ACTIVITY ENTITY ASSOCIATIONS //
//////////////////////////////////

/*!
 * Register an association that presents the folder
 */
ActivityAPI.registerActivityEntityAssociation('folder', 'self', function(associationsCtx, entity, callback) {
    return callback(null, [entity[ActivityConstants.properties.OAE_ID]]);
});

/*!
 * Register an association that presents the members of a folder categorized by role
 */
ActivityAPI.registerActivityEntityAssociation('folder', 'members-by-role', function(associationsCtx, entity, callback) {
    ActivityUtil.getAllAuthzMembersByRole(entity[FoldersConstants.activity.PROP_OAE_GROUP_ID], callback);
});

/*!
 * Register an association that presents all the indirect members of a folder
 */
ActivityAPI.registerActivityEntityAssociation('folder', 'members', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, _.flatten(_.values(membersByRole)));
    });
});

/*!
 * Register an association that presents all the managers of a content item
 */
ActivityAPI.registerActivityEntityAssociation('folder', 'managers', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, membersByRole[FoldersConstants.roles.MANAGER]);
    });
});

/**
 * Create the persistent folder entity that can be transformed into an activity entity for the UI.
 *
 * @param  {Folder}     folder      The folder that provides the data for the entity
 * @return {Object}                 An object containing the entity data that can be transformed into a UI folder activity entity
 * @api private
 */
var _createPersistentFolderActivityEntity = function(folder) {
    var persistentEntity = {'objectType': 'folder', 'folder': folder};
    persistentEntity[ActivityConstants.properties.OAE_ID] = folder.id;
    persistentEntity[FoldersConstants.activity.PROP_OAE_GROUP_ID] = folder.groupId;
    return persistentEntity;
};

/**
 * Transform a folder object into an activity entity suitable to be displayed in an activity stream.
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityTransformer
 *
 * @param  {Context}            ctx                 The context of the current request
 * @param  {Object}             entity              The persisted activity entity to transform
 * @return {ActivityEntity}                         The activity entity that represents the given folder
 */
var _transformPersistentFolderActivityEntity = function(ctx, entity) {
    var folder = entity.folder;
    var tenant = ctx.tenant();
    var principalId = (ctx.user() ? ctx.user().id : null);

    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var globalId = baseUrl + '/api/folder/' + folder.id;
    var profileUrl = baseUrl + folder.profilePath;

    var opts = {
        'displayName': folder.displayName,
        'url': profileUrl,
        'ext': {}
    };
    opts.ext[ActivityConstants.properties.OAE_ID] = folder.id;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = folder.visibility;
    opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = folder.profilePath;

    return new ActivityModel.ActivityEntity('folder', globalId, opts);
};
