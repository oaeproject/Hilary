/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var url = require('url');

var ActivityTestsUtil = require('oae-activity/lib/test/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var RestUtil = require('oae-rest/lib/util');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

describe('File previews', function() {

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin on the created tenant.
    var globalAdminOnTenantRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user on the created tenant
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin on the cambridge tenant.
    var camAdminRestContext = null;


    var suitable_files = null;
    var suitable_sizes = null;

    /**
     * Fill up the contexts
     */
    before(function(callback) {
        // Fill up global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the anonymous context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.localhost.host);
        // Cambridge tenant admin context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // An object that adheres to the RestAPI.Content.setPreviewItems.files parameter.
        suitable_files = {
            'file.small.jpg': getFileStream,
            'file.medium.jpg': getOAELogoStream,
            'thumbnail.png': getFileStream
        };
        suitable_sizes = {
            'file.small.jpg': 'small',
            'file.medium.jpg': 'medium',
            'thumbnail.png': 'thumbnail'
        };

        // Login on the camtest tenant
        RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', function(err, ctx) {
            assert.ok(!err);
            globalAdminOnTenantRestContext = ctx;

            RestAPI.User.getMe(globalAdminOnTenantRestContext, function(err, user) {
                assert.ok(!err);
                assert.ok(!user.anon);
                callback();
            });
        });
    });

    /**
     * Some of these tests modify the expiration preview settings.
     * Ensure it gets reset.
     */
    after(function(callback) {
        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-content/previews/expiration_minimum', 15*60, function(err) {
            assert.ok(!err);
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-content/previews/expiration_maximum', 30*60, function(err) {
                assert.ok(!err);
                callback();
            });
        });
    });

    /**
     * Utility method that returns a stream that points to an OAE animation thumbnail.
     *
     * @return {Stream}     A stream that points to an OAE animation thumbnail that can be uploaded.
     */
    var getFileStream = function() {
        var file = __dirname + '/data/oae-video.png';
        return fs.createReadStream(file);
    };

    /**
     * Utility method that returns a stream that points to the OAE logo.
     *
     * @return {Stream}     A stream that points to the OAE logo that can be uploaded.
     */
    var getOAELogoStream = function() {
        var file = __dirname + '/data/oae-logo.png';
        return fs.createReadStream(file);
    };

    /**
     * Creates a file and adds 2 preview items
     *
     * @param  {Function}    callback                Standard callback method.
     * @param  {Object}      callback.contexts       contexts object.
     * @param  {Object}      callback.content        Content object as returned by `RestAPI.ContentcreateFile`.
     * @param  {Object}      callback.previews       Previews object as returned by `RestAPI.ContentgetPreviewItems`.
     */
    var createPreviews = function(callback) {
        TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 2, function(err, users) {
            assert.ok(!err);

            var contexts = {};
            var keys = Object.keys(users);
            contexts['nicolaas'] = users[keys[0]];
            contexts['simon'] = users[keys[1]];

            RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.id);
                assert.equal(contentObj.previews.status, 'pending');

                // Add some preview items.
                RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, contentObj.id, contentObj.latestRevisionId, 'done', suitable_files, suitable_sizes, {}, {}, function(err) {
                    assert.ok(!err);

                    // Get a list of preview items.
                    RestAPI.Content.getPreviewItems(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, function(err, previews) {
                        assert.ok(!err);
                        assert.equal(previews.files.length, 2);

                        // Ensure that the thumbnail and status parameters are set.
                        RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.id, function(err, updatedContentObj) {
                            assert.ok(!err);
                            assert.ok(updatedContentObj.previews.thumbnailUrl);
                            assert.equal(updatedContentObj.previews.status, 'done');
                            assert.ok(updatedContentObj.previews.smallUrl);
                            assert.ok(updatedContentObj.previews.mediumUrl);
                            callback(contexts, updatedContentObj, previews);
                        });
                    });
                });
            });
        });
    };

    /**
     * Verify that only the global admin can upload a preview item and
     * that the preview links are tied to the context of the user
     * who requested the link.
     */
    it('verify uploading a preview', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {
            // Only global admins should be allowed to create previews.
            RestAPI.Content.setPreviewItems(anonymousRestContext, contentObj.id, contentObj.latestRevisionId, 'done', suitable_files, suitable_sizes, {}, {}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);

                // Download one.
                RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, previews.files[0].filename, previews.signature, function(err, body, response) {
                    assert.ok(!err);
                    assert.ok(!body); // Nginx streams the actual file body, the app server just returns a 204.
                    assert.equal(response.statusCode, 204);
                    assert.ok(response.headers['x-accel-redirect']);

                    // Make sure that nobody else can see a private item, even if they have the signature.
                    RestAPI.Content.downloadPreviewItem(contexts['simon'].restContext, contentObj.id, contentObj.latestRevisionId, previews.files[0].filename, previews.signature, function(err, body, response) {
                        assert.equal(err.code, 401);
                        assert.ok(!body);
                        callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that when a revision is restored, the previews are properly carried over from the source revision, and are accessible by the user
     */
    it('verify downloading preview of a restored revision', function(callback) {
        createPreviews(function(contexts, content, previews) {
            var firstRevisionId = content.latestRevisionId;

            // Get the previews of the first revision. We will ensure that the restored revision are the same
            RestAPI.Content.getPreviewItems(contexts['nicolaas'].restContext, content.id, firstRevisionId, function(err, firstRevisionPreviews) {
                assert.ok(!err);

                // Update the file body, creating a new revision
                RestAPI.Content.updateFileBody(contexts['nicolaas'].restContext, content.id, getFileStream, function(err, content) {
                    assert.ok(!err);

                    // Finish processing the previews for the new revision
                    RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, content.id, content.latestRevisionId, 'done', suitable_files, suitable_sizes, {}, {}, function(err) {
                        assert.ok(!err);

                        // Restore to the first revision
                        RestAPI.Content.restoreRevision(contexts['nicolaas'].restContext, content.id, firstRevisionId, function(err, revision3) {
                            assert.ok(!err);

                            // Get the preview items of the 3rd revision (restored from first), and verify that the model is the same
                            RestAPI.Content.getPreviewItems(contexts['nicolaas'].restContext, content.id, revision3.revisionId, function(err, thirdRevisionPreviews) {
                                assert.ok(!err);
                                assert.strictEqual(firstRevisionPreviews.files.length, thirdRevisionPreviews.files.length);

                                // Get the medium picture of the first and third revisions
                                var firstRevisionMediumPicture = _.filter(firstRevisionPreviews.files, function(file) { return (file.size === 'medium'); })[0];
                                var thirdRevisionMediumPicture = _.filter(thirdRevisionPreviews.files, function(file) { return (file.size === 'medium'); })[0];

                                assert.ok(firstRevisionMediumPicture);
                                assert.ok(thirdRevisionMediumPicture);
                                assert.equal(firstRevisionMediumPicture.filename, thirdRevisionMediumPicture.filename);
                                assert.equal(firstRevisionMediumPicture.uri, thirdRevisionMediumPicture.uri);

                                // Verify that we can download the preview pictures of the new revision
                                RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, content.id, revision3.revisionId, thirdRevisionMediumPicture.filename, thirdRevisionPreviews.signature, function(err, body, response) {
                                    assert.ok(!err);
                                    assert.equal(response.statusCode, 204);
                                    assert.ok(response.headers['x-accel-redirect']);

                                    // Nginx streams the file body, so there will be no body to this response here
                                    assert.ok(!body);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Downloading a preview item that doesn't exist, should result in a 404.
     */
    it('verify download non-existing previews is handled correctly', function(callback) {
        TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 1, function(err, users) {
            assert.ok(!err);

            var simon = _.values(users)[0];
            RestAPI.Content.createFile(simon.restContext, 'Test Content 2', 'Test content description 2', 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.id);
                assert.equal(contentObj.previews.status, 'pending');

                // Get a list of preview items.
                RestAPI.Content.getPreviewItems(simon.restContext, contentObj.id, contentObj.latestRevisionId, function(err, previews) {
                    assert.ok(!err);
                    assert.equal(previews.files.length, 0);

                    // Downloading a preview item that doesn't exist, should result in a 404.
                    RestAPI.Content.downloadPreviewItem(simon.restContext, contentObj.id, contentObj.latestRevisionId, 'does-not-exist.png', previews.signature, function(err, body, response) {
                        assert.equal(err.code, 404);
                        assert.ok(!body);
                        callback();
                    });
                });
            });
        });
    });

    /**
     * Verify that the request parameters of adding preview items are validated.
     */
    it('verify uploading preview parameter validation', function(callback) {
        TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 1, function(err, users) {
            var simon = _.values(users)[0];
            assert.ok(!err);

            RestAPI.Content.createFile(simon.restContext, 'Test Content', 'Test content description', 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.id);
                assert.equal(contentObj.previews.status, 'pending');

                RestAPI.Content.getRevisions(simon.restContext, contentObj.id, null, 1, function(err, revisions) {
                    assert.ok(!err);
                    var revisionId = revisions[0].revisionId;

                    // A valid call as a sanity check.
                    RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, contentObj.id, revisionId, 'done', {}, {}, {}, {}, function(err) {
                        assert.ok(!err);

                        // Invalid contentId.
                        RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, 'blah', revisionId, 'foo', {}, {}, {}, {}, function(err) {
                            assert.equal(err.code, 400);

                            // Bad status parameter.
                            RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, contentObj.id, revisionId, 'foo', {}, {}, {}, {}, function(err) {
                                assert.equal(err.code, 400);

                                // Non existing piece of content.
                                RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, 'c:foo:bar', revisionId, 'done', {}, {}, {}, {}, function(err) {
                                    assert.equal(err.code, 404);

                                    // Missing revision
                                    RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, 'c:foo:bar', null, 'done', {}, {}, {}, {}, function(err) {
                                        assert.equal(err.code, 404);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Verify that setting the preview status gets propaged to the content objects.
     */
    it('verify setting preview status', function(callback) {
        TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 1, function(err, users) {
            var simon = _.values(users)[0];
            assert.ok(!err);

            RestAPI.Content.createFile(simon.restContext, 'Test Content', 'Test content description', 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.id);
                assert.equal(contentObj.previews.status, 'pending');

                RestAPI.Content.getRevisions(globalAdminOnTenantRestContext, contentObj.id, null, 1, function(err, revisions) {
                    assert.ok(!err);
                    var revisionId = revisions[0].revisionId;

                    RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, contentObj.id, revisionId, 'ignored', {}, {}, {}, {}, function(err) {
                        assert.ok(!err);

                        RestAPI.Content.getContent(simon.restContext, contentObj.id, function(err, updatedContentObj) {
                            assert.ok(!err);
                            assert.equal(updatedContentObj.previews.status, 'ignored');
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Verify that only setting the preview status removes older preview items
     */
    it('verify setting preview status removes older preview items', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {
            RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, contentObj.id, contentObj.latestRevisionId, 'error', {}, {}, {}, {}, function(err) {
                assert.ok(!err);

                // Get a list of preview items,
                // there should be none.
                RestAPI.Content.getPreviewItems(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, function(err, previews) {
                    assert.ok(!err);
                    assert.equal(previews.files.length, 0);

                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.id, function(err, content) {
                        assert.ok(!err);
                        assert.equal(content.previews.total, 0);
                        assert.equal(content.previews.status, 'error');
                        assert.ok(!content.previews.thumbnailUri);
                        assert.ok(!content.previews.thumbnailUrl);
                        callback();
                    });
                });
            });
        });
    });

    /**
     * Verify that uploading new preview items removes the old ones.
     */
    it('verify uploading new preview items removes older preview items and the thumbnailUri', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {
            var files = {'new_file.small.jpg': getFileStream};
            var sizes = {'new_file.small.jpg': 'small'};
            RestAPI.Content.setPreviewItems(globalAdminOnTenantRestContext, contentObj.id, contentObj.latestRevisionId, 'done', files, sizes, {}, {}, function(err) {
                assert.ok(!err);

                // Get a list of preview items,
                // there should only be one.
                RestAPI.Content.getPreviewItems(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, function(err, previews) {
                    assert.ok(!err);
                    assert.equal(previews.files.length, 1);

                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.id, function(err, content) {
                        assert.ok(!err);
                        assert.equal(content.previews.total, 1);
                        assert.ok(!content.previews.thumbnailUri);
                        assert.ok(!content.previews.thumbnailUrl);
                        assert.ok(content.previews.smallUrl);
                        callback();
                    });
                });
            });
        });
    });

    /**
     * Verifies that the request parameters when downloading a preview are validated.
     */
    it('verify preview download parameter validation', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {

            // Ensure that the file can be downloaded.
            RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, previews.files[0].filename, previews.signature, function(err, body, response) {
                assert.ok(!err);
                assert.equal(response.statusCode, 204);

                // Missing parameters.
                RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, previews.files[0].filename, { 'signature': previews.signature.signature, 'expires': previews.signature.expires, 'lastModified': '' }, function(err, body, response) {
                    assert.equal(err.code, 400);
                    assert.ok(!body);

                    RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, previews.files[0].filename, { 'signature': previews.signature.signature, 'expires': '', 'lastModified': previews.signature.lastModified }, function(err, body, response) {
                        assert.equal(err.code, 400);
                        assert.ok(!body);

                        RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.id, contentObj.latestRevisionId, previews.files[0].filename, { 'signature': previews.signature.signature, 'expires': '', 'lastModified': previews.signature.lastModified }, function(err, body, response) {
                            assert.equal(err.code, 400);
                            assert.ok(!body);

                            // Bad signature.
                            RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.id,contentObj.latestRevisionId, previews.files[0].filename, { 'signature': 'wrong', 'expires': previews.signature.expires, 'lastModified': previews.signature.lastModified }, function(err, body, response) {
                                assert.ok(err.code, 401);
                                assert.ok(!body);

                                // Malformed ids.
                                RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, 'invalid content id', contentObj.latestRevisionId, previews.files[0].filename, previews.signature, function(err, body, response) {
                                    assert.equal(err.code, 400);
                                    assert.ok(!body);

                                    RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.id, 'invalid revision id', previews.files[0].filename, previews.signature, function(err, body, response) {
                                        assert.equal(err.code, 400);
                                        assert.ok(!body);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Sets the minimum and maximum expiration window for preview signatures
     * and checks if the signatures are still generated with expiration dates that are in the future.
     *
     * @param  {RestContext}    restCtx     The RestContext that can be used to retrieve the content object metadata.
     * @param  {String}         contentId   The ID of the content item that needs to be checked.
     * @param  {Number}         min         The minimum value
     * @param  {Number}         max         The maximum value
     * @param  {Function}       callback    Standard callback method.
     */
    var checkPreviewsConfigExpiration = function(restCtx, contentId, min, max, callback) {
        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-content/previews/expiration_minimum', min, function(err) {
            assert.ok(!err);
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-content/previews/expiration_maximum', max, function(err) {
                assert.ok(!err);
                RestAPI.Content.getContent(restCtx, contentId, function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj.signature.expires > Date.now());
                    callback();
                });
            });
        });
    };

    /**
     * TODO: Remove/Adjust this test once the Config API has validation.
     * (Don't forget to remove the after block)
     *
     * Verifies that a preview cannot have an expiration date that is in the past.
     * Due to the Config API having no validation just yet, it's possible that
     * the min/max settings can be misconfigured which could lead to expiration dates
     * in the past. Verify that this is not possible.
     */
    it('verify negative preview expires are not possible', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {
            var contentId = contentObj.id;

            // min > max --> should result in defaults.
            checkPreviewsConfigExpiration(contexts['nicolaas'].restContext, contentId, 100, 5, function() {
                // negative settings --> should result in defaults
                checkPreviewsConfigExpiration(contexts['nicolaas'].restContext, contentId, -10, 500, function() {
                    checkPreviewsConfigExpiration(contexts['nicolaas'].restContext, contentId, 100, -500, function () {
                        // Setting expiration with an offset of 2 and a duration of 5 should at most be valid for 7 seconds.
                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-content/previews/expiration_minimum', 2, function(err) {
                            assert.ok(!err);
                            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-content/previews/expiration_maximum', 5, function(err) {
                                assert.ok(!err);

                                RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentId, function(err, contentObj) {
                                    assert.ok(!err);
                                    assert.ok(contentObj.signature.expires > Date.now());
                                    assert.ok(contentObj.signature.expires < (Date.now() + 7001));
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Verifies that the `downloadUrl` can in fact be downloaded.
     *
     * @param  {RestContext}    restContext     The RestContext that we should use to download the file.
     * @param  {String}         downloadUrl     The signed URL that should be verified.
     * @param  {Function}       callback        Standard callback method.
     */
    var verifySignedUriDownload = function(restContext, downloadUrl, callback) {
        // Verify we can download it.
        var parsedUrl = url.parse(downloadUrl, true);
        RestUtil.RestRequest(restContext, '/api/download/signed', 'GET', parsedUrl.query, function(err, body, response) {
            assert.ok(!err);
            assert.equal(response.statusCode, 204);
            callback();
        });
    };

    /**
     * A test that verifies that thumbnail originating from another tenant are downlaoded.
     */
    it('verify previews are downloadable from another tenant', function(callback) {
        // Create a tenant on the localhost tenant.
        // We need to create it on the localhost tenant as that's the only one
        // we can verify the actual downloading of images works during unit tests.
        createPreviews(function(contexts, contentObj, previews) {

            // Share the item with Bert, who is a user in the Cambridge tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var bert = _.values(users)[0];
                RestAPI.Content.shareContent(contexts['nicolaas'].restContext, contentObj.id, [bert.user.id], function(err) {
                    assert.ok(!err);

                    // Bert should receive an activity that Nicolaas shared a piece of content with him.
                    ActivityTestsUtil.collectAndGetActivityStream(bert.restContext, bert.user.id, null, function(err, activityStream) {
                        assert.ok(!err);

                        var activity = _.find(activityStream.items, function(activity) { return activity.object['oae:id'] === contentObj.id; });
                        assert.ok(activity);

                        // Verify the activity
                        verifySignedUriDownload(bert.restContext, activity.object.image.url, function() {

                            // Verify the thumbnailUri on the content profile.
                            RestAPI.Content.getContent(bert.restContext, contentObj.id, function(err, contentObjOnCamTenant) {
                                assert.ok(!err);
                                assert.ok(contentObjOnCamTenant.previews.thumbnailUrl);
                                verifySignedUriDownload(bert.restContext, contentObjOnCamTenant.previews.thumbnailUrl, function() {

                                    // Verify the thumbnailUrl in search results.
                                    var randomText = TestsUtil.generateRandomText(5);
                                    RestAPI.Content.updateContent(contexts['nicolaas'].restContext, contentObj.id, {'displayName': randomText}, function(err, updatedContentObj) {
                                        assert.ok(!err);
                                        SearchTestsUtil.searchAll(bert.restContext, 'general', null, {'resourceTypes': 'content', 'q': randomText}, function(err, results) {
                                            assert.ok(!err);
                                            var doc = _.find(results.results, function(doc) { return doc.id === contentObj.id; });
                                            assert.ok(doc);

                                            verifySignedUriDownload(bert.restContext, doc.thumbnailUrl, callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * A test that verifies whether or not thumbnail URLs are present on a revision object.
     */
    it('verify thumbnail and medium URLs are present on the revision object', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {

            // Verify a list of revisions
            RestAPI.Content.getRevisions(contexts['nicolaas'].restContext, contentObj.id, null, null, function(err, revisions) {
                assert.ok(!err);
                assert.ok(revisions[0].thumbnailUrl);
                assert.ok(revisions[0].mediumUrl);
                verifySignedUriDownload(contexts['nicolaas'].restContext, revisions[0].thumbnailUrl, function() {
                    verifySignedUriDownload(contexts['nicolaas'].restContext, revisions[0].mediumUrl, function() {

                        // Verify a single revision
                        RestAPI.Content.getRevision(contexts['nicolaas'].restContext, contentObj.id, revisions[0].revisionId, function(err, revision) {
                            assert.ok(!err);
                            assert.ok(revision.thumbnailUrl);
                            assert.ok(revision.mediumUrl);
                            verifySignedUriDownload(contexts['nicolaas'].restContext, revision.thumbnailUrl, function() {
                                verifySignedUriDownload(contexts['nicolaas'].restContext, revision.mediumUrl, function() {

                                    // Restore the revision
                                    RestAPI.Content.restoreRevision(contexts['nicolaas'].restContext, contentObj.id, revisions[0].revisionId, function(err, restoredRevisionObj) {
                                        assert.ok(!err);

                                        // Make sure the restored revision contains all the image urls.
                                        assert.ok(restoredRevisionObj);
                                        assert.ok(restoredRevisionObj.thumbnailUrl);
                                        assert.ok(restoredRevisionObj.mediumUrl);
                                        assert.equal(restoredRevisionObj.previews.status, 'done');
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
