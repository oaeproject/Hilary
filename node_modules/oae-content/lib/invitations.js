/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var AuthzInvitationsDAO = require('oae-authz/lib/invitations/dao');
var AuthzUtil = require('oae-authz/lib/util');
var Context = require('oae-context').Context;
var Invitation = require('oae-authz/lib/invitations/model').Invitation;
var ResourceActions = require('oae-resource/lib/actions');
var ResourceConstants = require('oae-resource/lib/constants').ResourceConstants;

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');

var log = require('oae-logger').logger('oae-content-invitations');

/*!
 * When an invitation is accepted, pass on the events to update content members and then feed back
 * the content item resources into the event emitter
 */
ResourceActions.when(ResourceConstants.events.ACCEPTED_INVITATION, function(ctx, invitationHashes, memberChangeInfosByResourceId, inviterUsersById, callback) {
    // Filter the invitations and changes down to only content invitations
    var contentIds = _.chain(memberChangeInfosByResourceId)
        .keys()
        .filter(_isContentId)
        .value();
    if (_.isEmpty(contentIds)) {
        return callback();
    }

    // Get all the content profiles
    ContentDAO.Content.getMultipleContentItems(contentIds, null, function(err, contentItems) {
        if (err) {
            log().warn({
                'err': err,
                'contentIds': contentIds
            }, 'An error occurred while getting content items to update content libraries after an invitation was accepted');
            return callback();
        }

        // Invoke the "accept invitation" handler with the resources when we have them. We
        // invoke this after the get principals call for test synchronization
        callback(null, contentItems);

        // Fire members update tasks for each content item
        _.each(contentItems, function(contentItem) {
            var invitationHash = _.findWhere(invitationHashes, {'resourceId': contentItem.id});
            var inviterUser = inviterUsersById[invitationHash.inviterUserId];

            var invitationCtx = Context.fromUser(inviterUser);
            var invitation = Invitation.fromHash(invitationHash, contentItem, inviterUser);
            var memberChangeInfo = memberChangeInfosByResourceId[contentItem.id];

            return ContentAPI.emit(ContentConstants.events.UPDATED_CONTENT_MEMBERS, invitationCtx, contentItem, memberChangeInfo, {'invitation': invitation});
        });
    });
});

/*!
 * When content is deleted, delete all its invitations as well
 */
ContentAPI.when(ContentConstants.events.DELETED_CONTENT, function(ctx, content, members, callback) {
    AuthzInvitationsDAO.deleteInvitationsByResourceId(content.id, function(err) {
        if (err) {
            log().warn({
                'err': err,
                'contentId': content.id
            }, 'An error occurred while removing invitations after a content item was deleted');
        }

        return callback();
    });
});

/**
 * Determine if the given id is a content id
 *
 * @param  {String}     contentId   The id to check
 * @return {Boolean}                Whether or not the string was a content id
 * @api private
 */
var _isContentId = function(contentId) {
    return (AuthzUtil.isResourceId(contentId) && contentId.indexOf('c:') === 0);
};
