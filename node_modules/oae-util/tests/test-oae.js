/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');

var OAE = require('oae-util/lib/oae');


describe('Utilities', function() {    
    describe('OAE', function() {
        describe('Tenants', function() {

            it('Test retrieving all tenants succeeds', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/tenants'
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test tenant creation requires port', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/create'
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    assert.equal(body, 'The port and id for a tenant need to be specified');
                    callback();
                });
            });

            it('Test tenant creation on running port fails', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/create',
                    'json': {
                        'id': 'cam',
                        'name': 'Cambridge University',
                        'description': 'The University of Cambridge',
                        'port': 2001
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    assert.equal(body, 'A tenant is already running on port 2001');
                    callback();
                });
            });

            it('Test tenant creation with same alias fails', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/create',
                    'json': {
                        'id': 'camtest',
                        'name': 'Cambridge University',
                        'description': 'The University of Cambridge',
                        'port': 2099
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    assert.equal(body, 'A tenant with the alias camtest already exists');
                    callback();
                });
            });

            it('Test tenant creation succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/create',
                    'json': {
                        'id': 'cam',
                        'name': 'Cambridge University',
                        'description': 'The University of Cambridge',
                        'port': 2100
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    assert.equal(body, 'New tenant "Cambridge University" has been fired up on port 2100');
                    callback();
                });
            });

            it('Test putting tenant in maintenance mode succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/stop',
                    'json': {
                        "cam": {
                            'port': 2100
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test port is provided when putting tenant in maintenance mode', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/stop',
                    'json': {
                        "cam": {
                            'id': 'camtest'
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    callback();
                });
            });

            it('Test taking tenant out of maintenance mode succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/start',
                    'json': {
                        "cam": {
                            'port': 2100
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test port is provided when taking tenant out of maintenance mode', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/start',
                    'json': {
                        "cam": {
                            'id': 'camtest'
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    callback();
                });
            });

            it('Test port is provided when deleting a tenant', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/delete',
                    'json': {
                        "cam": {
                            'id': 'camtest'
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    callback();
                });
            });

            it('Test deleting a tenant succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/api/tenant/delete',
                    'json': {
                        "cam": {
                            'port': 2100
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

        });
        
        describe('Admin UI', function() {

            it('Test accessing the admin UI succeeds', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/admin'
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

        });

        describe('Configuration', function() {

            it('Test configuration retrieval requires tenant ID', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration'
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    assert.equal(body, 'A tenant ID is required to get the configuration.');
                    callback();
                });
            });

            it('Test configuration retrieval succeeds', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration',
                    'qs': {
                        'tenantid': 'camtest'
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test persisting a global configuration value succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/admin/update',
                    'json': {
                        "oae-authentication/twitter-authentication/twitter-authentication-enabled":{
                            "tenantid": "global",
                            "option": "oae-authentication/twitter-authentication/twitter-authentication-enabled",
                            "value": "testvalue"
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test global configuration value overrides config.json value', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration',
                    'qs': {
                        'tenantid': 'global'
                    }
                }, function(err, response, modules) {
                    var val = false;
                    modules = JSON.parse(modules);
                    for (var i = 0, l = modules.length; i < l; i++) {
                        if (modules[i].id === 'oae-authentication') {
                            for (var ii = 0, ll = modules[i].config.options.length; ii < ll; ii++) {
                                if (modules[i].config.options[ii].id === 'twitter-authentication') {
                                    for (var iii = 0, lll = modules[i].config.options[ii].elements.length; iii < lll; iii++) {
                                        if (modules[i].config.options[ii].elements[iii].id === 'twitter-authentication-enabled') {
                                            if (modules[i].config.options[ii].elements[iii].value === 'testvalue') {
                                                val = modules[i].config.options[ii].elements[iii].value;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    assert.equal(val, 'testvalue');
                    callback();
                });
            });

            it('Test persisting a tenant configuration value succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/admin/update',
                    'json': {
                        "oae-authentication/twitter-authentication/twitter-authentication-enabled":{
                            "tenantid": "camtest",
                            "option": "oae-authentication/twitter-authentication/twitter-authentication-enabled",
                            "value": "camtestvalue"
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test tenant configuration value overrides global value', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration',
                    'qs': {
                        'tenantid': 'camtest'
                    }
                }, function(err, response, modules) {
                    var val = false;
                    modules = JSON.parse(modules);
                    for (var i = 0, l = modules.length; i < l; i++) {
                        if (modules[i].id === 'oae-authentication') {
                            for (var ii = 0, ll = modules[i].config.options.length; ii < ll; ii++) {
                                if (modules[i].config.options[ii].id === 'twitter-authentication') {
                                    for (var iii = 0, lll = modules[i].config.options[ii].elements.length; iii < lll; iii++) {
                                        if (modules[i].config.options[ii].elements[iii].id === 'twitter-authentication-enabled') {
                                            if (modules[i].config.options[ii].elements[iii].value === 'camtestvalue') {
                                                val = modules[i].config.options[ii].elements[iii].value;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    assert.equal(val, 'camtestvalue');
                    callback();
                });
            });

        });
    });
});
