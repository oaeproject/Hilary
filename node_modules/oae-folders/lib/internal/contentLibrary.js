/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var LibraryAPI = require('oae-library');
var log = require('oae-logger').logger('oae-folders-contentlibrary');

var FoldersConstants = require('../constants').FoldersConstants;

/**
 * Get the ids of the content items in the content library of a folder
 *
 * @param  {Folder}         folder                  The folder whose content library to list
 * @param  {String}         visibility              The effective library visibility to list
 * @param  {Object}         [opts]                  Optional arguments for listing the library items
 * @param  {String}         [opts.start]            The token that indicates from where to start listing items
 * @param  {Number}         [opts.limit]            The maximum number of items to list
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {String[]}       callback.contentIds     The content ids in the specified library
 * @param  {String}         callback.nextToken      The token to use for the `start` parameter for the next invocation to get the next page of results. If `null`, indicates that there are no more items to list
 */
var list = module.exports.list = function(folder, visibility, opts, callback) {
    LibraryAPI.Index.list(FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME, folder.groupId, visibility, {'start': opts.start, 'limit': opts.limit}, callback);
};

/**
 * Insert all content items into the library of the provided folder
 *
 * @param  {Folder}         folder          The folder in which to insert the content items
 * @param  {Content[]}      contentItems    The content items to add to the folder content library
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 */
var insert = module.exports.insert = function(folder, contentItems, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'contentIds': _.pluck(contentItems, 'id'),
                'folderId': folder.id,
                'folderGroupId': folder.groupId
            }, 'Error inserting content items into folder library');
        }
    };

    _insert(folder, contentItems.slice(), callback);
};

/**
 * Remove the content items from the content library of the specified folder
 *
 * @param  {Folder}         folder          The folder from which to remove the content items
 * @param  {String[]}       contentIds      The content item ids to remove from the folder
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 */
var remove = module.exports.remove = function(folder, contentIds, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'contentIds': contentIds,
                'folderId': folder.id,
                'folderGroupId': folder.groupId
            }, 'Error removing content items from folder library');
        }
    };

    _remove(folder, contentIds.slice(), callback);
};

/**
 * Purge the content library for a folder. It wil be rebuilt the next
 * time the library is listed
 *
 * @param  {Folder}         folder          The folder that should be purged
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 */
var purge = module.exports.purge = function(folder, callback) {
    LibraryAPI.Index.purge(FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME, folder.groupId, callback);
};

/**
 * Insert all content items into the library of the provided folder. This function is
 * destructive to the `contentItems` parameter as it iterates through content items to insert
 *
 * @param  {Folder}         folder          The folder in which to insert the content items
 * @param  {Content[]}      contentItems    The content items to add to the folder content library
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 * @api private
 */
var _insert = function(folder, contentItems, callback) {
    if (_.isEmpty(contentItems)) {
        // When there are no more items to insert, return to the caller
        return callback();
    }

    // Insert the item into the library index
    var contentItem = contentItems.pop();
    var effectiveLibraryVisibilities = LibraryAPI.Authz.resolveEffectiveLibraryVisibilities([folder.groupId], contentItem);
    LibraryAPI.Index.insert(FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME, effectiveLibraryVisibilities, contentItem.id, null, function(err) {
        if (err) {
            log().warn({
                'err': err,
                'indexName': FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME,
                'folderId': folder.id,
                'folderGroupId': folder.groupId,
                'contentId': contentItem.id,
                'visibilities': effectiveLibraryVisibilities
            }, 'An error occurred while inserting a content item into a folder library');
        }

        // Recursively insert the next item
        return _insert(folder, contentItems, callback);
    });
};

/**
 * Remove the content items from the content library of the specified folder. This function is
 * destructive to the `contentIds` parameter as it iterates through content ids to remove
 *
 * @param  {Folder}         folder          The folder from which to remove the content items
 * @param  {String[]}       contentIds      The content item ids to remove from the folder
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 * @api private
 */
var _remove = function(folder, contentIds, callback) {
    if (_.isEmpty(contentIds)) {
        // When there are no more items to remove, return to the caller
        return callback();
    }

    // Remove the item from the library index
    var contentId = contentIds.pop();
    LibraryAPI.Index.remove(FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME, [folder.groupId], contentId, null, function(err) {
        if (err) {
            log().warn({
                'err': err,
                'indexName': FoldersConstants.library.CONTENT_LIBRARY_INDEX_NAME,
                'folderId': folder.id,
                'folderGroupId': folder.groupId,
                'contentId': contentId
            }, 'An error occurred while removing a content item from a folder library');
        }

        // Recursively remove the next item
        return _remove(folder, contentIds, callback);
    });
};
