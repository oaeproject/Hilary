/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var EventEmitter = require('events').EventEmitter
var redis = require('redis');

var Validator = require('./validator').Validator;

/**
 * This module abstracts most of the redis publish/subscribe functions away.
 * It will listen to all channels and emit an event for each message it receives.
 * The redis channel name will be the event name and the message it's only argument.
 */


// Create the event emitter.
var emitter = module.exports = new EventEmitter();
var redisSubscriber = null;
var redisPublisher = null;


/**
 * Initializes the connection to redis.
 */
module.exports.init = function(config) {
    // Create 2 clients, one for publishing and one for subscriptions.
    redisSubscriber = redis.createClient(config.port, config.host);
    redisPublisher = redis.createClient(config.port, config.host);

    var redisErrorHandler = function(err) {
        console.warn("Got an error when dealing with redis:" + err);
    };

    redisSubscriber.on("error", redisErrorHandler);
    redisPublisher.on("error", redisErrorHandler);

    // Listen to all channels and emit them as events.
    redisSubscriber.on("pmessage", function (pattern, channel, message) {
        emitter.emit(channel, message);
    });
    redisSubscriber.psubscribe('*');
};


/**
 * Broadcast a message accross a channel.
 * This can be used to publish messages to all the app nodes.
 *
 * @param  {String}   channel  The channel you wish to publish on. ex: 'oae-tenants'
 * @param  {String}   message  The message you wish to send on a channel. ex: 'start 2000'
 */
var publish = module.exports.publish = function(channel, message) {
    var validator = new Validator();
    validator.check(channel, {'code': 400, 'msg': 'No channel was provided.'}).notNull().notEmpty();
    validator.check(message, {'code': 400, 'msg': 'No message was provided.'}).notNull().notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    redisPublisher.publish(channel, message);
};