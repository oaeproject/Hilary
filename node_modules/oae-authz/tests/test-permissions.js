/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');

describe('Authz-Permissions', function() {

    /**
     * Make a single membership or role change object to apply to a group membership or resource role.
     *
     * @param  {String} principalId   The principalId whose role to change
     * @param  {String} role          The role to change to
     * @return {Object}               The change JSON Object to apply
     */
    var makeChange = function(principalId, role) {
        var change = {};
        change[principalId] = role;
        return change;
    };

    describe('#hasRole()', function() {

        it('verify invalid principal id error', function(callback) {
            AuthzAPI.hasRole('not a id', 'c:cam:Foo.docx', 'member', function(err, hasRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify non-principal member id error', function(callback) {
            AuthzAPI.hasRole('c:cam:mrvisser', 'c:cam:Foo.docx', 'member', function(err, hasRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify null role error', function(callback) {
            AuthzAPI.hasRole('u:cam:mrvisser', 'c:cam:Foo.docx', null, function(err, hasRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify undefined role error', function(callback) {
            AuthzAPI.hasRole('u:cam:mrvisser', 'c:cam:Foo.docx', undefined, function(err, hasRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify false role error', function(callback) {
            AuthzAPI.hasRole('u:cam:mrvisser', 'c:cam:Foo.docx', false, function(err, hasRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify invalid resource id error', function(callback) {
            AuthzAPI.hasRole('u:cam:mrvisser', 'not a id', 'member', function(err, hasRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify empty data', function(callback) {
            var userId = AuthzUtil.toId('u', 'hr-empty', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-empty', 'SomeContent');
            AuthzAPI.hasRole(userId, resourceId, 'member', function(err, hasRole) {
                assert.ok(!err);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify direct permission', function(callback) {
            var userId = AuthzUtil.toId('u', 'hr-direct', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-direct', 'SomeContent');
            AuthzAPI.updateRoles(resourceId, makeChange(userId, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(hasRole);
                    callback();
                });
            });
        });

        it('verify no direct permission', function(callback) {
            var userId = AuthzUtil.toId('u', 'hr-no-direct', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-no-direct', 'SomeContent');
            AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                assert.ok(!err);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify direct single group permission', function(callback) {
            var groupId = AuthzUtil.toId('g', 'hr-single', 'oae-team');
            var userId = AuthzUtil.toId('u', 'hr-single', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-single', 'SomeContent');

            AuthzAPI.updateRoles(groupId, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(resourceId, makeChange(groupId, 'viewer'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                        assert.ok(!err);
                        assert.ok(hasRole);
                        callback();
                    });
                });
            });
        });

        it('verify no direct single group permission', function(callback) {
            var groupId = AuthzUtil.toId('g', 'hr-no-single', 'oae-team');
            var userId = AuthzUtil.toId('u', 'hr-no-single', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-no-single', 'SomeContent');

            AuthzAPI.updateRoles(groupId, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(!hasRole);
                    callback();
                });
            });
        });

        it('verify direct multi group permission', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'hr-multi', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'hr-multi', 'oae-backend-team');
            var userId = AuthzUtil.toId('u', 'hr-multi', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-multi', 'SomeContent');

            AuthzAPI.updateRoles(groupId1, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeChange(userId, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(resourceId, makeChange(groupId1, 'viewer'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(resourceId, makeChange(groupId2, 'manager'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                                assert.ok(!err);
                                assert.ok(hasRole);
                                AuthzAPI.hasRole(userId, resourceId, 'manager', function(err, hasRole) {
                                    assert.ok(!err);
                                    assert.ok(hasRole);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify no direct multi group permission', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'hr-no-multi', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'hr-no-multi', 'oae-backend-team');
            var userId = AuthzUtil.toId('u', 'hr-no-multi', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-no-multi', 'SomeContent');

            AuthzAPI.updateRoles(resourceId, makeChange(groupId1, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(resourceId, makeChange(groupId2, 'manager'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                        assert.ok(!err);
                        assert.ok(!hasRole);
                        AuthzAPI.hasRole(userId, resourceId, 'manager', function(err, hasRole) {
                            assert.ok(!err);
                            assert.ok(!hasRole);
                            callback();
                        });
                    });
                });
            });
        });

        it('verify multi group hierarchy permission', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'hr-hier', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'hr-hier', 'oae-backend-team');
            var userId = AuthzUtil.toId('u', 'hr-hier', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-hier', 'SomeContent');

            AuthzAPI.updateRoles(groupId1, makeChange(groupId2, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeChange(userId, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(resourceId, makeChange(groupId1, 'viewer'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                            assert.ok(!err);
                            assert.ok(hasRole);
                            AuthzAPI.hasRole(userId, resourceId, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.ok(!hasRole);
                                AuthzAPI.updateRoles(resourceId, makeChange(groupId2, 'manager'), function(err) {
                                    assert.ok(!err);
                                    AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                                        assert.ok(!err);
                                        assert.ok(hasRole);
                                        AuthzAPI.hasRole(userId, resourceId, 'manager', function(err, hasRole) {
                                            assert.ok(!err);
                                            assert.ok(hasRole);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy permission', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'hr-circ', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'hr-circ', 'oae-backend-team');
            var groupId3 = AuthzUtil.toId('g', 'hr-circ', 'oae-ui-team');
            var userId = AuthzUtil.toId('u', 'hr-circ', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'hr-circ', 'SomeContent');

            AuthzAPI.updateRoles(groupId1, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeChange(groupId1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeChange(groupId2, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId1, makeChange(groupId3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.updateRoles(resourceId, makeChange(groupId1, 'viewer'), function(err) {
                                assert.ok(!err);
                                AuthzAPI.updateRoles(resourceId, makeChange(groupId2, 'manager'), function(err) {
                                    assert.ok(!err);
                                    AuthzAPI.updateRoles(resourceId, makeChange(groupId3, 'editor'), function(err) {
                                        assert.ok(!err);
                                        AuthzAPI.hasRole(userId, resourceId, 'viewer', function(err, hasRole) {
                                            assert.ok(!err);
                                            assert.ok(hasRole);
                                            AuthzAPI.hasRole(userId, resourceId, 'manager', function(err, hasRole) {
                                                assert.ok(!err);
                                                assert.ok(hasRole);
                                                AuthzAPI.hasRole(userId, resourceId, 'editor', function(err, hasRole) {
                                                    assert.ok(!err);
                                                    assert.ok(hasRole);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#hasAnyRole()', function() {

        it('verify invalid principal id error', function(callback) {
            AuthzAPI.hasAnyRole('not a id', 'c:cam:Foo.docx', function(err, hasAnyRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasAnyRole);
                callback();
            });
        });

        it('verify non-principal id error', function(callback) {
            AuthzAPI.hasAnyRole('c:cam:mrvisser', 'c:cam:Foo.docx', function(err, hasAnyRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasAnyRole);
                callback();
            });
        });

        it('verify invalid resource id error', function(callback) {
            AuthzAPI.hasAnyRole('u:cam:mrvisser', 'not a id', function(err, hasAnyRole) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!hasAnyRole);
                callback();
            });
        });

        it('verify empty data', function(callback) {
            var userId = AuthzUtil.toId('u', 'har-empty', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'har-empty', 'SomeContent');
            AuthzAPI.hasAnyRole(userId, resourceId, function(err, hasAnyRole) {
                assert.ok(!err);
                assert.ok(!hasAnyRole);
                callback();
            });
        });

        it('verify direct permission', function(callback) {
            var userId = AuthzUtil.toId('u', 'har-direct', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'har-direct', 'SomeContent');
            AuthzAPI.updateRoles(resourceId, makeChange(userId, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.hasAnyRole(userId, resourceId, function(err, hasAnyRole) {
                    assert.ok(!err);
                    assert.ok(hasAnyRole);
                    callback();
                });
            });
        });

        it('verify no direct permission', function(callback) {
            var userId = AuthzUtil.toId('u', 'har-no-direct', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'har-no-direct', 'SomeContent');
            AuthzAPI.hasAnyRole(userId, resourceId, function(err, hasAnyRole) {
                assert.ok(!err);
                assert.ok(!hasAnyRole);
                callback();
            });
        });

        it('verify direct single group permission', function(callback) {
            var groupId = AuthzUtil.toId('g', 'har-single', 'oae-team');
            var userId = AuthzUtil.toId('u', 'har-single', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'har-single', 'SomeContent');

            AuthzAPI.updateRoles(groupId, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(resourceId, makeChange(groupId, 'viewer'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.hasAnyRole(userId, resourceId, function(err, hasAnyRole) {
                        assert.ok(!err);
                        assert.ok(hasAnyRole);
                        callback();
                    });
                });
            });
        });

        it('verify no direct single group permission', function(callback) {
            var groupId = AuthzUtil.toId('g', 'har-no-single', 'oae-team');
            var userId = AuthzUtil.toId('u', 'har-no-single', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'har-no-single', 'SomeContent');

            AuthzAPI.updateRoles(resourceId, makeChange(groupId, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.hasAnyRole(userId, resourceId, function(err, hasAnyRole) {
                    assert.ok(!err);
                    assert.ok(!hasAnyRole);
                    callback();
                });
            });
        });
    });

});
