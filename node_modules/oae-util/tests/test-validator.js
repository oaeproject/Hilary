/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var User = require('oae-principals/lib/model.user').User;
var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;

var Validator = require('oae-util/lib/validator').Validator;

/**
 * Test whether or not the validator used to check for empty strings
 * is working as intended
 * @param {Object} test     Standard nodeunit test object
 */
module.exports.testEmptyValidator = function(test) {
    test.expect(10);

    // Single test successful
    var validator = new Validator();
    validator.check('Non-empty string').notEmpty();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Single test failed
    validator = new Validator();
    validator.check('').notEmpty();
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());

    validator = new Validator();
    validator.check(' ').notEmpty();
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    // Multiple success
    validator = new Validator();
    validator.check('Non').notEmpty();
    validator.check('Empty').notEmpty();
    validator.check('String').notEmpty();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Multiple fail
    validator = new Validator();
    validator.check('').notEmpty();
    validator.check(' ').notEmpty();
    validator.check('   ').notEmpty();
    validator.check('String').notEmpty();
    test.ok(validator.hasErrors());
    test.equal(validator.getErrors().length, 3);

    test.done();
};

/**
 * Test whether or not the validator used to check for valid integers
 * is working as intended
 * @param {Object} test     Standard nodeunit test object
 */
module.exports.testIntValidator = function(test) {
    test.expect(10);

    // Single test successful
    var validator = new Validator();
    validator.check(10).isInt();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    validator = new Validator();
    validator.check('20').isInt();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Single test failed
    validator = new Validator();
    validator.check('String').isInt();
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    // Multiple success
    validator = new Validator();
    validator.check(0).isInt();
    validator.check(1).isInt();
    validator.check(100).isInt();
    validator.check(-100).isInt();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Multiple fail
    validator = new Validator();
    validator.check('').isInt();
    validator.check('10').isInt();
    validator.check('String').isInt();
    validator.check(100).isInt();
    test.ok(validator.hasErrors());
    test.equal(validator.getErrors().length, 2);

    test.done();
};

/**
 * Test whether or not the validator used to check for valid email addresses
 * is working as intended
 * @param {Object} test     Standard nodeunit test object
 */
module.exports.testEmailValidator = function(test) {
    test.expect(10);

    // Single test successful
    var validator = new Validator();
    validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Single test failed
    validator = new Validator();
    validator.check('nicolaas matthijs@caret.cam.ac.uk').isEmail();
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    validator = new Validator();
    validator.check('http://www.google.co.uk').isEmail();
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    // Multiple success
    validator = new Validator();
    validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
    validator.check('bertpareyn@gmail.com').isEmail();
    validator.check('sfmorgan@btinternet.com').isEmail();
    validator.check('sally.phillips+unique_reference@gmail.com').isEmail();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Multiple fail
    validator = new Validator();
    validator.check('').isEmail();
    validator.check('String').isEmail();
    validator.check('nicolaas matthijs@caret.cam.ac.uk').isEmail();
    validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
    test.ok(validator.hasErrors());
    test.equal(validator.getErrors().length, 3);

    test.done();
};

/**
 * Test whether or not the validator used to check for valid URLs
 * is working as intended
 * @param {Object} test     Standard nodeunit test object
 */
module.exports.testUrlValidator = function(test) {
    test.expect(12);

    // Single test successful
    var validator = new Validator();
    validator.check('http://www.sakaiproject.org').isUrl();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    validator = new Validator();
    validator.check('http://example.com/test.html').isUrl();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Single test failed
    validator = new Validator();
    validator.check('String').isUrl();
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    validator = new Validator();
    validator.check('://www.google.co.uk').isUrl();
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    // Multiple success
    validator = new Validator();
    validator.check('https://oae-widgets.sakaiproject.org/sdk').isUrl();
    validator.check('http://support.google.com/docs/bin/answer.py?hl=en&answer=66343').isUrl();
    validator.check('http://www.w3.org/2004/02/skos/core#broader').isUrl();
    validator.check('https://wordpress.org/support/topic/plugin-addthis-odd-url-string?replies=5').isUrl();
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Multiple fail
    validator = new Validator();
    validator.check('').isUrl();
    validator.check('String').isUrl();
    validator.check('www.example.com').isUrl();
    validator.check('https://twimg0-a.akamaihd.net/profile_images/300425859/ls_1278_Nicolaas-website.jpg').isUrl();
    test.ok(validator.hasErrors());
    test.equal(validator.getErrors().length, 2);

    test.done();
};

/**
 * Test whether or not the validator used to check for a logged in Sakai OAE
 * User is working as intended
 * @param {Object} test     Standard nodeunit test object
 */
module.exports.testContextValidator = function(test) {
    // Valid tenant
    var tenant1 = new Tenant('cam', 'Cambridge University', 'Cambridge University Description', 2001);
    // Invalid tenant
    var tenant2 = new Tenant(null, 'Georgia Tech', 'Georgia Tech Description', 2002);
    // Valid users
    var user1 = new User(tenant1, 'u:cam:nm417', 'nm417', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
    var user2 = new User(tenant1, 'u:cam:nm417', 'nm417', 'private', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
    var user3 = new User(tenant1, 'u:cam:nm417', null, null, null, null, null);
    // Invalid users
    var user4 = new User(tenant1, null, 'nm417', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
    var user5 = new User(tenant1, '', 'nm417', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');

    test.expect(16);

    ////////////////////////////
    // Single test successful //
    ////////////////////////////

    var validator = new Validator();
    validator.check().isLoggedInUser(new Context(tenant1, user1));
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    ////////////////////////
    // Single test failed //
    ////////////////////////

    // Empty context
    validator = new Validator();
    validator.check().isLoggedInUser(null);
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    // Tenant, no user
    validator = new Validator();
    validator.check().isLoggedInUser(new Context(tenant1, null));
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());

    // Tenant, invalid user
    validator = new Validator();
    validator.check().isLoggedInUser(new Context(tenant1, user4));
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());

    // No tenant, user
    validator = new Validator();
    validator.check().isLoggedInUser(new Context(null, user1));
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    // Invalid tenant, user
    validator = new Validator();
    validator.check().isLoggedInUser(new Context(tenant2, user1));
    test.ok(validator.hasErrors());
    test.ok(validator.getErrors());
    
    //////////////////////
    // Multiple success //
    //////////////////////

    validator = new Validator();
    validator.check().isLoggedInUser(new Context(tenant1, user1));
    validator.check().isLoggedInUser(new Context(tenant1, user2));
    validator.check().isLoggedInUser(new Context(tenant1, user3));
    test.ok(!validator.hasErrors());
    test.ok(!validator.getErrors());

    // Multiple fail
    validator = new Validator();
    validator.check().isLoggedInUser(new Context(tenant1, user4));
    validator.check().isLoggedInUser(new Context(tenant1, user5));
    validator.check().isLoggedInUser(new Context(tenant2, user1));
    validator.check().isLoggedInUser(new Context(tenant2, user2));
    validator.check().isLoggedInUser(new Context(tenant1, user1));
    validator.check().isLoggedInUser(new Context(tenant1, user2));
    validator.check().isLoggedInUser(new Context(tenant1, user3));
    test.ok(validator.hasErrors());
    test.equal(validator.getErrors().length, 4);

    test.done();
};

module.exports.testLoggedin = function(test) {
    var tenant1 = new Tenant('cam', 'Cambridge University', 'Cambridge University Description', 2001);
    // Invalid tenant
    var tenant2 = new Tenant(null, 'Georgia Tech', 'Georgia Tech Description', 2002);
    // Valid users
    var user1 = new User(tenant1, 'u:cam:nm417', 'nm417', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');

    validator = new Validator();
    validator.check(new Context(tenant1, user1)).isLoggedInUser();
    test.done();
};