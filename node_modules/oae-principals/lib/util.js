/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var sanitize = require('validator').sanitize;

var bcrypt = require('bcrypt');
var rolesAPI = require('oae-roles/lib/api');
var RolesUtil = require('oae-roles/lib/util');
var cassandra = require('oae-util/lib/cassandra');
var GroupAPI = require('oae-principals/lib/api.group');
var PermissionsAPI = require('oae-permissions/lib/api');
var User = require('./model').User;
var Group = require('./model').Group;
var VISIBILITY_OPTIONS = require('./model').VISIBILITY_OPTIONS;


/**
 * Gets a principal from the DB and converts the returned data to the correct model (user or group).
 * @param  {Context}                    context             The current context
 * @param  {String}                     principal_id        The ID of the principal that should be retrieved.
 * @param  {Function(err, principal)}   callback            A callback method.
 * @param  {Object}                     callback.err        An error object (if any)
 * @param  {Object}                     callback.principal  The asked for principal.
 */
module.exports.getPrincipal = function(context, principal_id, callback) {
    cassandra.runQuery('SELECT * FROM Principals WHERE principal_id = ?', [principal_id], function (err, rows) {
        if (err) {
            return callback({'code': 500, 'msg': err});
        }

        // check if no users were returned
        if (rows[0].count === 1) {
            return callback({'code': 404, 'msg': "Couldn't find principal: " + principal_id});
        }

        getPrincipalFromRow(context, rows[0], callback);
    });
};

/**
 * Retrieves a principal from a row object. It performs all the visibility checks
 * and takes the current execution context into account. If a user is trying to
 * request a group he hasn't got access to, an error will be passed in the callback method
 *
 * @param  {Context}                    context             The current context
 * @param  {Row}                        row                 A Helenus row object.
 * @param  {Function(err, principal)}   callback            A standard callback method.
 * @param  {Object}                     callback.err        An error object. Gets passed if the current user has no access
 *                                                          to a private group or something went wrong. Check the error code
 *                                                          to determine which case it is.
 * @param  {Object}                     callback.principal  A user or group model object with the private data redacted in case
 *                                                          the visibility has been set to private/loggedin.
 */
var getPrincipalFromRow = function(context, row, callback) {
    if (module.exports.isGroup(row.get('principal_id').value)) {
        var group = rowToGroup(row);

        // Admins can see all groups.
        var groupResource = RolesUtil.getResourceFromUuid(group.id);
        if (context.user() && context.user().isAdmin(groupResource.tenantId)) {
            return callback(null, group);
        } else if (group.visibility !== VISIBILITY_OPTIONS.PUBLIC && context.user() === null) {
            // Anonymous users can't see private or logged in groups.
            return callback({'code': 403, 'msg': 'This group is not visible to you. Try logging in'});
        } else if (group.visibility === VISIBILITY_OPTIONS.PRIVATE) {
            // Check if the current user is a member of this group in case it's private.
            PermissionsAPI.isAllowedAny(context.user().id, group.id, function(err, isAllowedAny) {
                if (err) {
                    return callback(err);
                } else if (!isAllowedAny) {
                    return callback({'code': 403, 'msg': 'You don\'t have access to this group.'});
                }
                callback(null, group);
            });
        } else {
            // This group is public.
            callback(false, group);
        }
    } else {
        var user = rowToUser(row);

        // Admins can see all users.
        var principalResource = RolesUtil.getResourceFromUuid(user.id);
        if (context.user() && context.user().isAdmin(principalResource.tenantId)) {
            return callback(null, user);
        }

        /// Hide the sensitive profile information if needed.
        if ((user.visibility === VISIBILITY_OPTIONS.LOGGEDIN && context.user() === null) ||
            (user.visibility === VISIBILITY_OPTIONS.PRIVATE && (context.user() === null || context.user().id !== user.id))) {
            user.hide();
        }

        callback(false, user);
    }
};

/**
 * Gets a set of principals (user or groups). This method will *not* throw an error if some of the principals
 * don't exist or the current user has no access to them, instead those IDs will be passed as a third parameter.
 *
 * @param  {Context}                    context                     The current context
 * @param  {Array<String>}              principal_ids               The ID of the principal that should be retrieved.
 * @param  {Function(err, principals)}  callback                    Standard callback function
 * @param  {Object}                     callback.err                Error object containing the error message
 * @param  {Object}                     callback.principals         Object representing the retrieved principals. The keys will be the
 *                                                                  principal ids and the values will be the principal basic profiles
 * @param  {Object}                     callback.missingPrincipals  An array of principal ids that were not found.
 */
module.exports.getPrincipals = function(context, principal_ids, callback) {
    if (principal_ids.length === 0) {
        return callback(false, {});
    }
    cassandra.runQuery("SELECT * FROM Principals WHERE principal_id IN (?)", [principal_ids], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var retrievedPrincipals = 0;
        var principals = {};
        var retrievedPrincipal = function(err, principal) {
            retrievedPrincipals++;
            if (!err) {
                principals[principal.id] = principal;
            }

            if (retrievedPrincipals === principal_ids.length) {
                return callback(null, principals, _.difference(principal_ids, _.keys(principals)));
            }
        };

        rows.forEach(function(row) {
            // An empty row will come back for non-existing principals
            if (row.count > 1) {
                getPrincipalFromRow(context, row, retrievedPrincipal);
            } else {
                retrievedPrincipal(true);
            }
        });
    });
};

/**
 * Explodes an array of group_ids down to all the underlying principals.
 * @param  {String[]  group_ids   An array of group_ids that should be exploded.
 * @param  {Boolean}  only_users  Whether or not the results should only include the users.
 * @param  {Function} callback  Standard callback method where the first argument is an error object
 *                              that contains a code suitable as http statuscode and a corresponding message.
 *                              The second argument holds the principals in this group.
 */
module.exports.explodePrincipals = function(group_ids, only_users, callback) {
    // Use a hash so we don't have doubles (ie: fake a Set)
    var group_user_members = {};

    // Simple parallel tree recursion algorithm.
    // We multi-get all the groups on each level in the tree.
    // ie: This is breadth-first.
    cassandra.runQuery("SELECT * FROM GroupMembers WHERE group_id IN (?)", [group_ids], function(err, rows) {
        var new_groups = [];
        // Iterate over the groups.
        rows.forEach(function(row) {
            // Iterate over the members in this group.
            for (var c = 0; c < row.count; c++) {
                var principal = row[c].name;

                // exclude the row key column from the results
                if (principal === 'group_id')
                    continue;

                if (module.exports.isGroup(principal)) {
                    // Explode this group further.
                    new_groups.push(principal);
                    if (!only_users) {
                        group_user_members[principal] = true;
                    }
                } else {
                    group_user_members[principal] = true;
                }
            }
        });

        if (new_groups.length > 0) {
            module.exports.explodePrincipals(new_groups, only_users, function(err, principals) {
                for (var principal in principals) {
                    if (principals.hasOwnProperty(principal)) {
                        group_user_members[principal] = true;
                    }
                }
                callback(false, group_user_members);
            });
        }
        else {
            return callback(false, group_user_members);
        }
    });
};

/**
 * Check if an identifier really is a group identifier.
 * @param  {String}  group_id An identifier
 * @return {Boolean} Whether or not the provided identifier is a group identifier.
 */
module.exports.isGroup = function(group_id) {
    var principal = RolesUtil.getPrincipalFromUuid(group_id);
    return (principal.principalType === "g");
};

/**
 * Check if an identifier really is a user identifier.
 * @param  {String}  user_id An identifier
 * @return {Boolean} Whether or not the provided identifier is a user identifier.
 */
module.exports.isUser = function(user_id) {
    var principal = RolesUtil.getPrincipalFromUuid(user_id);
    return (principal.principalType === "u");
};

/**
 * Hashes a string with bcrypt.
 * @param  {String}   password The passwords that needs to be hashed.
 * @param  {Function(hash)} callback Gets executed when the hash has been generated.
 */
module.exports.hashPassword = function(password, callback) {
    bcrypt.genSalt(10, function(err, salt) {
        bcrypt.hash(password, salt, function(err, hash) {
            callback(hash);
        });
    });
};

/**
 * Removes wonky characters from a string so it can be used as user/group-name.
 * @param  {String} name The name that needs to be cleaned.
 * @return {String} A clean name.
 */
module.exports.cleanName = function(name) {
    return name.replace(/[:;<>#%{}|~`@%&!$,.="'\^\+\/\?\(\)\*\s\\\\\[\]]/gi, '-');
};

/**
 * Creates a Group from a Cassandra row.
 * @param  {Row} row Cassandra Row
 * @return {Group}
 */
var rowToGroup = function (row) {
    var hash = cassandra.rowToHash(row);
    return new Group(hash.tenant, hash.principal_id, hash.visibility, hash.group_title, hash.group_description);
};

/**
 * Creates a User from a Cassandra row.
 * @param  {Row} row Cassandra Row
 * @return {User}
 */
var rowToUser = function(row) {
    var hash = cassandra.rowToHash(row);
    var isGlobalAdmin = (row.get('admin:global') && sanitize(row.get('admin:global').value).toBooleanStrict());
    var isTenantAdmin = (row.get('admin:tenant') && sanitize(row.get('admin:tenant').value).toBooleanStrict());
    return new User(hash.tenant, hash.principal_id, hash.user_username, hash.visibility, hash.locale, hash.timezone, hash.user_first_name, hash.user_last_name, hash.user_display_name, isGlobalAdmin, isTenantAdmin);
};
