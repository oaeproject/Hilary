/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');
var util = require('util');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');
var log = require('oae-logger').logger('oae-zencoder');
var PreviewUtil = require('oae-preview-processor/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

var ZencoderDAO = require('./internal/dao');
var ZencoderUtil = require('./internal/util');

/**
 * Save data for the completed preview when encoding has been completed.
 *
 * @param  {Object}     notification    The notification data received from Zencoder
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */

var encodingCompleted = module.exports.encodingCompleted = function(notification, callback) {
    log().info('Received encoding completed notification: %s', notification);
    var job = notification.job;

    if (job.state === 'finished') {
        var zencoderId = job['pass_through'];

        ZencoderDAO.getContentRevisionId(zencoderId, function(err, contentRevisionId) {
            if (err) {
                return callback(err);
            } else if (!contentRevisionId || !contentRevisionId.contentId || !contentRevisionId.revisionId) {
                log().warn('No content review exists for zencoderId %s', zencoderId);
                return callback({'code': 404, 'msg': 'Non-existing Zencoder ID was provided'});
            }

            // Ensure the content item exists
            ContentDAO.Content.getContent(contentRevisionId.contentId, function(err, content) {
                if (err) {
                    return callback(err);
                }

                // Ensure the revision exists
                ContentDAO.Revisions.getRevision(contentRevisionId.revisionId, function(err, revision) {
                    if (err) {
                        return callback(err);
                    }

                    var output = notification.output;

                    var thumbnails = output.thumbnails;
                    var largeThumbnail = _.findWhere(thumbnails, {label: 'large'});
                    var smallThumbnail = _.findWhere(thumbnails, {label: 'small'});

                    var thumbnailUri = util.format('remote:%s', largeThumbnail.images[0].url);

                    var previewMetadata = {
                        'smallUri': util.format('remote:%s', smallThumbnail.images[0].url),
                        'mediumUri': thumbnailUri,
                        'largeUri': thumbnailUri,
                        'wideUri': thumbnailUri,
                        'zencoderId': zencoderId
                    };

                    var fileMetadata = [{
                        'video': util.format('video#remote:%s', output.url)
                    }];

                    // Store the thumbnail info on the content item
                    ContentDAO.Previews.storeMetadata(content, contentRevisionId.revisionId, ContentConstants.previews.DONE, thumbnailUri, null, previewMetadata, fileMetadata, function(err) {
                        if (err) {
                            return callback(err);
                        }

                        log().debug('Saving metadata for video');

                        // Indicate that we've just updated a preview
                        ContentAPI.emit(ContentConstants.events.UPDATED_CONTENT_PREVIEW, content);

                        return callback();
                    });
                });
            });
        });
    }

    // If the video was not encoded, try again
    else if (job.state === 'failed') {
    }

    else {
        log().warn('Could not process notification %s', notification);
    }
};
