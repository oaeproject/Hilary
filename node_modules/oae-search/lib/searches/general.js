/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var DiscussionsConstants = require('oae-discussions/lib/constants').DiscussionsConstants;
var OaeUtil = require('oae-util/lib/util');
var Telemetry = require('oae-telemetry').telemetry('search-general');
var TenantsAPI = require('oae-tenants');
var TenantsUtil = require('oae-tenants/lib/util');

var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var RESOURCE_TYPES_ACCESS_SCOPED = [SearchConstants.general.RESOURCE_TYPE_ALL,
        SearchConstants.general.RESOURCE_TYPE_CONTENT, SearchConstants.general.RESOURCE_TYPE_GROUP];

/**
 * General search that searches a 'general' analyzed field on content, scoping it by user access.
 *
 * In addition to the specific `opts` parameters documented here, there are more generic options available that impact all
 * searches. @see SearchAPI#search for more information.
 *
 * @param  {Context}        ctx                     The context of the current request
 * @param  {Object}         [opts]                  General search options
 * @param  {String}         [opts.scope]            The scope of the query (One of `SearchConstants.general.SCOPE_*`)
 * @param  {String[]}       [opts.resourceTypes]    An array of resource types to search (e.g., content, user). If not specified, then the search will not filter on resource type at all. Possible resource types are those that have registered producers in SearchAPI#registerSearchDocumentProducer.
 * @param  {String}         [opts.includeIndirect]  Whether or not to include private resources that the user has access to indirectly (Default: 'true');
 * @param  {Function}       callback                Invoked when the process completes
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {SearchResult}   callback.results        An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // Sanitize custom search options
    opts = opts || {};
    opts.includeIndirect = (opts.includeIndirect !== 'false');
    opts.limit = OaeUtil.getNumberParam(opts.limit, 10, 1, 25);
    opts.q = SearchUtil.getQueryParam(opts.q);
    opts.resourceTypes = _getResourceTypesParam(opts.resourceTypes);
    opts.searchAllResourceTypes = (_.isEmpty(opts.resourceTypes));

    return _search(ctx, opts, callback);
};

/**
 * Perform the search that searches a 'q' analyzed field on documents, scoping it by user access. This is delegated from the
 * `module.exports` function for convenience, as it will access the members array only if necessary.
 *
 * @param  {Context}       ctx                 The context of the current request
 * @param  {Object}        opts                General search options
 * @param  {Function}      callback            Invoked when the process completes
 * @param  {Object}        callback.err        An error that occurred, if any
 * @param  {SearchResult}  callback.results    An object that represents the results of the query
 */
var _search = function(ctx, opts, callback) {
    // The query and filter objects for the Query DSL
    var query = _createQuery(ctx, opts);
    var filterResources = SearchUtil.filterResources(opts.resourceTypes);
    
    SearchUtil.filterScopeAndAccess(ctx, opts.scope, _needsFilterByExplicitAccess(ctx, opts), opts.includeIndirect, function(err, filterScopeAndAccess) {
        if (err) {
            return callback(err);
        }

        var filter = SearchUtil.filterAnd(filterResources, filterScopeAndAccess);

        // Wrap the query and filter into the top-level Query DSL "query" object
        return callback(null, SearchUtil.createQuery(query, filter, opts));
    });
};

/**
 * Create the ElasticSearch query object for the general search.
 *
 * @param  {Context}    ctx     The context of the search request for which the query is being created
 * @param  {Object}     opts    The general search options, as per the `module.exports` function
 * @return {Object}             The ElasticSearch query
 * @api private
 */
var _createQuery = function(ctx, opts) {
    if (opts.q === SearchConstants.query.ALL) {
        return SearchUtil.createQueryStringQuery(opts.q);
    }

    var hasContent = _includesResourceType(opts, 'content');
    var hasDiscussion = _includesResourceType(opts, 'discussion');

    // If we will be including results that match child documents, we'll want to
    // boost the resource match to avoid the messages dominating resources
    var boost = (hasContent || hasDiscussion) ? 5 : null;
    var query = {
        'bool': {
            'should': [
                SearchUtil.createQueryStringQuery(opts.q, null, boost)
            ],
            'minimum_should_match': 1
        }
    };

    // For content items, include their comments
    if (hasContent) {
        query.bool.should.push(SearchUtil.createHasChildQuery(ContentConstants.search.MAPPING_CONTENT_COMMENT, SearchUtil.createQueryStringQuery(opts.q, ['body']), 'max'));
    }

    // For discussions, include their messages
    if (hasDiscussion) {
        query.bool.should.push(SearchUtil.createHasChildQuery(DiscussionsConstants.search.MAPPING_DISCUSSION_MESSAGE, SearchUtil.createQueryStringQuery(opts.q, ['body']), 'max'));
    }

    return query;
};

/**
 * Given a request `resourceTypes` parameter, resolve it into the `resourceTypes` array to
 * use for the ElasticSearch search filter. If an empty array is returned, all resource
 * types should be searched.
 *
 * @param  {String|String[]}    resourceTypes   The `resourceTypes` parameter of the general search
 * @return {String[]}                           The `resourceTypes` array to use in the search filter
 * @api private
 */
var _getResourceTypesParam = function(resourceTypes) {
    resourceTypes = resourceTypes || [];

    // Ensure it is an array by converting to an array if it's a single value
    if (!_.isArray(resourceTypes)) {
        resourceTypes = [resourceTypes];
    }

    // Remove any falsey values from the array
    return _.compact(resourceTypes);
};

/**
 * Determines whether or not the search needs to be scoped by the user's explicit access privileges. This is true when:
 *
 *  * The user is authenticated; and
 *  * The user is not a global administrator; and
 *  * The search includes content and groups (users are not filtered by access); and
 *  * The search is actually specifying a query (e.g., if the search is '*', then we only include implicit access)
 *
 * @param  {Context}   ctx         The context of the current request performing the search
 * @param  {Object}    opts        The (sanitized) search options
 * @return {Boolean}               Whether or not the query specified by this user and options requires filtering by access privileges
 * @api private
 */
var _needsFilterByExplicitAccess = function(ctx, opts) {
    var isAuthenticated = (ctx.user()) ? true : false;
    var isNotGlobalAdmin = (!isAuthenticated || !ctx.user().isGlobalAdmin());
    var includesContentOrGroups = (opts.searchAllResourceTypes || !_.chain(RESOURCE_TYPES_ACCESS_SCOPED).intersection(opts.resourceTypes).isEmpty().value());
    var hasTextQuery = (opts.q !== SearchConstants.query.ALL);
    return isAuthenticated && isNotGlobalAdmin && includesContentOrGroups && hasTextQuery;
};

/**
 * Determine whether or not the provided search options determine that the search will include resources of the
 * provided resource type.
 *
 * @param  {Object}     opts            The `opts` object constructed by the query
 * @param  {String}     resourceType    The resource type
 * @return {Boolean}                    `true` if the query will include resources of the provided `resourceType`. `false` otherwise
 * @api private
 */
var _includesResourceType = function(opts, resourceType) {
    return (opts.searchAllResourceTypes || _.contains(opts.resourceTypes, resourceType));
};

