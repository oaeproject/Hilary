/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var clone = require('clone');
var csv = require('csv');
var events = require('events');
var fs = require('fs');
var Path = require('path');
var sanitize = require('validator').sanitize;
var ShortId = require('shortid');
var util = require('util');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-principals');
var OaeUtil = require('oae-util/lib/util');
var Redis = require('oae-util/lib/redis');
var Validator = require('oae-util/lib/validator').Validator;
var TenantsAPI = require('oae-tenants');
var Signature = require('oae-util/lib/signature');
var Validator = require('oae-util/lib/validator').Validator;

var PrincipalsConfig = ConfigAPI.config('oae-principals');
var PrincipalsConstants = require('./constants').PrincipalsConstants;
var PrincipalsDAO = require('./internal/dao');
var PrincipalsEmitter = require('./internal/emitter');
var PrincipalsModel = require('./model');
var PrincipalsTermsAndConditionsAPI = require('./api.termsAndConditions');
var PrincipalsUtil = require('./util');

var fullUserProfileDecorators = {};

/**
 * Register a decorator for the full user profile. A decorator will, at read time, provide additional data about the user
 * that will be returned to the client
 *
 * @param  {String}     namespace                   The unique namespace for this decorator. This will be used as the actual property name on the full user profile object. If this namespace collides with an existing user profile property, it will be silently ignored
 * @param  {Function}   decorator                   The function that will provide additional data for the user profile
 * @param  {Context}    decorator.ctx               The context of the current request
 * @param  {User}       decorator.user              The user being decorated
 * @param  {Function}   decorator.callback          This function should be invoked with the decoration object when complete
 * @param  {Object}     decorator.callback.err      An error that occurred during decoration, if any
 * @param  {Object}     decorator.callback.data     The decoration data to bind to the full user profile
 */
var registerFullUserProfileDecorator = module.exports.registerFullUserProfileDecorator = function(namespace, decorator) {
    if (fullUserProfileDecorators[namespace]) {
        throw new Error(util.format('Attempted to register duplicate full user profile decorator with namespace "%s"', namespace));
    } else if (!_.isFunction(decorator)) {
        throw new Error(util.format('Attempted to register full user profile decorator for namespace "%s" without a decorator function', namespace));
    }

    fullUserProfileDecorators[namespace] = decorator;
};

/**
 * Create a new user record on a tenant. If the optional `tenantAlias` is not specified, the user
 * will be created on the current tenant. Note that you will still need to associate an
 * authentication strategy with this user record as the user would otherwise have no means
 * of logging onto the system.
 *
 * @param  {Context}   ctx                      The current context
 * @param  {String}    displayName              The display name for the user
 * @param  {Object}    [opts]                   Optional parameters for the user
 * @param  {String}    [opts.visibility]        The visibility of the user. One of AuthzConstants.visibility
 * @param  {String}    [opts.locale]            The locale for the user
 * @param  {String}    [opts.publicAlias]       The name to show when the user is inaccessible to a user
 * @param  {Boolean}   [opts.acceptedTC]        Whether or not the user has accepted the Terms & Conditions
 * @param  {String}    [opts.emailPreference]   The email preference for the user. One of PrincipalsConstants.emailPreference
 * @param  {String}    [opts.smallPictureUri]   The URI for the small picture
 * @param  {String}    [opts.mediumPictureUri]  The URI for the medium picture
 * @param  {String}    [opts.largePictureUri]   The URI for the large picture
 * @param  {Function}  callback                 Standard callback function
 * @param  {Object}    callback.err             Error object containing the error message
 * @param  {User}      callback.createdUser     The created user
 */
var createUser = module.exports.createUser = function(ctx, tenantAlias, displayName, opts, callback) {
    tenantAlias = tenantAlias || ctx.tenant().alias;
    opts = opts || {};
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'displayName': displayName
            }, 'Error creating user');
        }
    };

    // Resolve the initial locale for the new user
    if (!opts.locale) {
        // If a user is creating an account for themself (i.e., they are currently anonymous) then
        // we try and use the locale suggested by the request context (e.g., browser locale)
        if (!ctx.user()) {
            opts.locale = ctx.locale();
        }

        // If a user is creating a user on behalf of someone else or there was no suggested
        // locale, we fall back to the configured tenant default
        if (!opts.locale) {
            opts.locale = PrincipalsConfig.getValue(tenantAlias, 'user', 'defaultLanguage');
        }
    }

    opts.visibility = opts.visibility || PrincipalsConfig.getValue(tenantAlias, 'user', 'visibility');
    opts.publicAlias = opts.publicAlias || displayName;
    opts.acceptedTC = opts.acceptedTC || false;
    opts.emailPreference = opts.emailPreference || PrincipalsConfig.getValue(tenantAlias, 'user', 'emailPreference');

    var validator = new Validator();
    validator.check(displayName, {'code': 400, 'msg': 'A display name must be provided'}).notEmpty();
    validator.check(displayName, {'code': 400, 'msg': 'A display name can be at most 1000 characters long'}).isShortString();
    validator.check(opts.visibility, {'code': 400, 'msg': 'The specified visibility setting is unknown'}).isIn(_.values(AuthzConstants.visibility));
    validator.check(opts.emailPreference, {'code': 400, 'msg': 'The specified email preference is invalid'}).isIn(_.values(PrincipalsConstants.emailPreferences));

    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    var id = AuthzUtil.toId('u', tenantAlias, ShortId.generate());

    var values = {
        'tenantAlias': tenantAlias,
        'displayName': displayName,
        'visibility': opts.visibility,
        'email': opts.email,
        'emailPreference': opts.emailPreference,
        'locale': opts.locale,
        'publicAlias': opts.publicAlias,
        'smallPictureUri': opts.smallPictureUri,
        'mediumPictureUri': opts.mediumPictureUri,
        'largePictureUri': opts.lagePictureUri
    };

    // We store the timestamp at which the user accepted the Terms and Conditions
    // This allows for allowing users to re-accept the Terms and Conditions after they have been updated
    var tcEnabled = PrincipalsConfig.getValue(tenantAlias, 'termsAndConditions', 'enabled');
    if (tcEnabled && opts.acceptedTC) {
        // Store the acceptedTC on the return user object
        opts.acceptedTC = Date.now();

        // Also persist it, but it must be a String because that is the column data-type in Cassandra
        values.acceptedTC = opts.acceptedTC.toString();
    }

    var q = Cassandra.constructUpsertCQL('Principals', 'principalId', id, values);
    if (!q) {
        return callback({'code': 500, 'msg': 'Could not create a proper CQL query'});
    }

    // Create the user
    Cassandra.runQuery(q.query, q.parameters, function (err) {
        if (err) {
            return callback(err);
        }

        var createdUser = new PrincipalsModel.User(tenantAlias, id, displayName, opts);
        createdUser.needsToAcceptTC = false;

        PrincipalsEmitter.emit(PrincipalsConstants.events.CREATED_USER, ctx, createdUser);
        return callback(null, createdUser);
    });
};

/**
 * Import users using a CSV file. The CSV file should be formatted in the following way:
 *
 *  `externalId, lastName, firstName, email`
 *
 * When importing a set of users using the local authentication strategy, the CSV format should be the following:
 *
 *  `externalId, password, lastName, firstName, email`
 *
 * When an external id for the provided authentication strategy cannot be found, a new user will be created. When that
 * user can be found, no new user will be created. When that user's display name is the same as their external id and
 * a real display name is available in the CSV file, the user's display name will be updated to be the one in the CSV
 * file. When that user doesn't have an email address set and an email address is available in the CSV file, the user's
 * email address will be updated to be the one in the CSV file. This accounts for the scenario where an external authentication
 * provider that doesn't release the required basic profile attributes was configured and users signed into it before the
 * full user list with appropriate basic profile attributes was imported.
 *
 * When the `forceProfileUpdate` parameter is provided, the user's display name and email address will always be set to the values provided in the CSV file.
 *
 * @param  {Context}        ctx                     The current context
 * @param  {String}         [tenantAlias]           The alias of the tenant for which the users should imported
 * @param  {Object}         userCSV                 File object representing the uploaded CSV file as returned by express
 * @param  {String}         authenticationStrategy  The authentication strategy with which the provided external ids should be associated (One of AuthenticationConstants.providers)
 * @param  {Boolean}        [forceProfileUpdate]    Whether or not the user's display name, public alias and email should be updated with the value specified in the CSV file, even when the display name/public alais is different than the external id or an email address has been set. By default, this will be set to `false`
 * @param  {Function}       callback                Standard callback function. In case a valid request has been made, this will be called after the CSV file has been parsed and before the users are imported. Therefore, it does not take import failures into account
 * @param  {Object}         callback.err            Error object containing the error message
 */
var importUsers = module.exports.importUsers = function(ctx, tenantAlias, userCSV, authenticationStrategy, forceProfileUpdate, callback) {
    tenantAlias = tenantAlias || ctx.user().tenant.alias;
    forceProfileUpdate = forceProfileUpdate || false;
    callback = callback || function() {};

    var tenant = TenantsAPI.getTenant(tenantAlias);

    // Only global or tenant administrators should be able to import users
    if (!ctx.user() || !ctx.user().isAdmin(tenantAlias)) {
        return _cleanUpCSVFile(userCSV, function() {
            callback({'code': 401, 'msg': 'Only authorized admins can import users'});
        });
    }

    // Parameter validation
    var validator = new Validator();
    validator.check(tenant, {'code': 400, 'msg': 'An existing tenant alias must be provided'}).notNull();
    validator.check(userCSV, {'code': 400, 'msg': 'A CSV file must be provided'}).notNull();
    if (userCSV) {
        validator.check(userCSV.size, {'code': 400, 'msg': 'Missing size on the CSV file'}).notEmpty();
        validator.check(userCSV.size, {'code': 400, 'msg': 'Invalid size on the CSV file'}).isInt();
        validator.check(userCSV.size, {'code': 400, 'msg': 'Invalid size on the CSV file'}).min(0);
        validator.check(userCSV.name, {'code': 400, 'msg': 'Missing name on the CSV file'}).notEmpty();
    }
    validator.check(authenticationStrategy, {'code': 400, 'msg': 'An authentication strategy must be provided'}).notEmpty();
    validator.check(authenticationStrategy, {'code': 400, 'msg': 'The specified authentication strategy is unknown'}).isIn(_.values(AuthenticationConstants.providers));
    if (validator.hasErrors()) {
        return _cleanUpCSVFile(userCSV, function() {
            callback(validator.getFirstError());
        });
    }

    // Create a new context object on the request tenant
    var adminCtx = new Context(tenant, ctx.user());

    // Will contain an entry for each user in the CSV file
    var data = [];

    // The CSV module works with streams, so get a readable stream to the uploaded CSV file
    var input = fs.createReadStream(userCSV.path);

    // Pipe the stream to a CSV parser and keep track of the user records
    var parser = csv.parse({'trim': true});
    input.pipe(parser);
    parser.on('readable', function() {
        var user = parser.read();
        while (user) {
            data.push(user);
            user = parser.read();
        }
    });

    parser.on('finish', function() {
        // If the CSV parse was successful, we call the callback to prevent the request from timing out
        // whilst the users are being loaded
        PrincipalsEmitter.emit('preCSVUserImport');
        callback();

        // Remove the uploaded file
        _cleanUpCSVFile(userCSV, function() {
            log(ctx).info({
                'tenantAlias': tenantAlias,
                'authenticationStrategy': authenticationStrategy
            }, 'Starting user import from CSV');

            /*!
             * Process an invidual user from the CSV file and create a new user if no user exists for the provided
             * external id - authentication strategy combination.
             *
             * @param  {String[][]}     data        Parsed CSV file
             */
            var processUser = function(data) {
                // Get the next user from the stack
                var user = data.pop();

                // Extract the password in case local authentication is used
                var opts = {};
                var providerProperties = null;
                if (authenticationStrategy === AuthenticationConstants.providers.LOCAL) {
                    providerProperties = {'password': user.splice(1, 1)};
                }

                // Extract the basic profile data
                var externalId = user[0];
                // Construct the first name and last name into a display name
                var displayName = util.format('%s %s', user[2], user[1]).trim();
                opts.email = user[3];

                /*!
                 * Gets called when the user has been created or updated
                 *
                 * @param  {Object}     err     An error object that can be returned by the updateUser call
                 */
                var finishImportUser = function(err) {
                    if (err) {
                        log().error({'err': err, 'externalId': externalId}, 'Failed to import user');
                    }

                    if (_.isEmpty(data)) {
                        log(ctx).info({
                            'authenticationStrategy': authenticationStrategy,
                            'tenantAlias': tenantAlias
                        }, 'Finished user import from CSV');

                        // Send out an event indicating that the import has finished
                        return PrincipalsEmitter.emit('postCSVUserImport');
                    // Add a progress log statement every 25 imported users
                    } else if (data.length % 25 === 0) {
                        log(ctx).info({
                            'authenticationStrategy': authenticationStrategy,
                            'tenantAlias': tenantAlias
                        }, 'Importing users from CSV. ' + data.length + ' users left to import');
                    }
                    // Process the next user
                    processUser(data);
                };

                // Check if the user already exists and create a new user if it doesn't.
                // If the user already exists but has a different displayName from the one
                // in the CSV file, we update it
                // TODO: Fix cross-dependency between the Authentication API and the Principals API
                require('oae-authentication').getOrCreateUser(adminCtx, authenticationStrategy, externalId, providerProperties, displayName, opts, function(err, user, created) {
                    if (err) {
                        return finishImportUser(err);

                    // If the user already existed it's possible that we need to update it
                    } else if (!created) {
                        var update = {};

                        if (forceProfileUpdate) {
                            // Only perform the update if there's a difference
                            if (user.displayName !== displayName) {
                                update['displayName'] = displayName;
                            }
                            if (user.publicAlias !== displayName) {
                                update['publicAlias'] = displayName;
                            }
                            if (user.email !== opts.email) {
                                update['email'] = opts.email;
                            }
                        } else {
                            // Only update the user's displayname or email when their is value in doing it
                            if (user.displayName === externalId) {
                                update['displayName'] = displayName;
                            }
                            if (!user.publicAlias || user.publicAlias === externalId) {
                                update['publicAlias'] = displayName;
                            }
                            if (!user.email) {
                                update['email'] = opts.email;
                            }
                        }

                        if (!_.isEmpty(update)) {
                            log(ctx).info({
                                'externalId': externalId,
                                'user': user,
                                'update': update
                            }, 'Updating display name and/or email during import from CSV');
                            updateUser(adminCtx, user.id, update, finishImportUser);
                        } else {
                            finishImportUser();
                        }

                    // If the user was created, we can move on to the next one
                    } else {
                        finishImportUser();
                    }
                });
            };

            // Process the first user
            processUser(data);
        });

    // Parsing error
    }).on('error', function(err){
        // Remove the uploaded file
        _cleanUpCSVFile(userCSV, function() {
            callback({'code': 500, 'msg': err.message});
        });
    });
};

/**
 * Remove an uploaded user CSV file
 * TODO: Move this out into a utility as this functionality is needed in a number of places
 *
 * @param  {Object}         userCSV                 File object representing the uploaded CSV file as returned by express
 * @param  {Function}       callback                Standard callback function
 * @api private
 */
var _cleanUpCSVFile = function(userCSV, callback) {
    if (userCSV && userCSV.path) {
        fs.exists(userCSV.path, function(exists) {
            if (exists) {
                fs.unlink(userCSV.path, function(err) {
                    if (err) {
                        log().warn({'err': err, 'file': userCSV}, 'Could not remove the user import CSV file');
                    }
                    callback();
                });
            } else {
                callback();
            }
        });
    } else {
        callback();
    }
};

/**
 * Update a user
 *
 * @param  {Context}        ctx             The current context
 * @param  {String}         userId          TThe id of the user to update
 * @param  {Object}         profileFields   Object that represent the profile fields that should be updated. Possible keys are `visibility`, `displayName`, `publicAlias`, `locale`, `email` and `emailPreference`
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    Error object containing the error message
 * @param  {User}           callback.user   The updated user
 */
var updateUser = module.exports.updateUser = function(ctx, userId, profileFields, callback) {
    callback = callback || function() {};
    profileFields = profileFields || {};

    var profileFieldKeys = _.keys(profileFields);

    // Parameter validation
    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'A valid user id must be provided'}).notEmpty();
    validator.check(userId, {'code': 400, 'msg': 'A valid user id must be provided'}).isUserId();

    // Check that there is at least one updated profile field.
    validator.check(profileFieldKeys.length, {'code': 400, 'msg': 'At least one basic profile field should be specified'}).min(1);

    // verify that restricted properties aren't set here
    var invalidKeys = _.intersection(PrincipalsDAO.getRestrictedFields(), profileFieldKeys);
    validator.check(invalidKeys.length, {'code': 400, 'msg': 'Restricted property was attempted to be set.'}).max(0);

    if (profileFields['displayName']) {
        validator.check(profileFields['displayName'], {'code': 400, 'msg': 'A display name cannot be empty'}).notEmpty();
        validator.check(profileFields['displayName'], {'code': 400, 'msg': 'A display name can be at most 1000 characters long'}).isShortString();
    }

    // In case a new visibility has been passed in, we check for its validity
    if (profileFields['visibility']) {
        validator.check(profileFields['visibility'], {'code': 400, 'msg': 'An invalid visibility option has been specified'}).isIn(_.values(AuthzConstants.visibility));
    }
    if (profileFields['emailPreference']) {
        validator.check(profileFields['emailPreference'], {'code': 400, 'msg': 'The specified emailPreference is invalid'}).isIn(_.values(PrincipalsConstants.emailPreferences));
    }

    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to update a user'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Only the user themself or an admin can update a user
    var principalResource = AuthzUtil.getResourceFromId(userId);
    if (ctx.user().id !== userId && !ctx.user().isAdmin(principalResource.tenantAlias)) {
        return callback({'code': 401, 'msg': 'You are not authorized to update this user\'s profile.'});
    }

    // Only update existing users
    PrincipalsDAO.getPrincipal(userId, function(err, oldUser) {
        if (err) {
            return callback(err);
        }

        // Overlay the correct lastModified date
        profileFields = _.extend({}, profileFields, {'lastModified': Date.now()});
        PrincipalsDAO.updatePrincipal(userId, profileFields, function(err) {
            if (err) {
                return callback(err);
            }

            var newUser = PrincipalsUtil.createUpdatedUser(oldUser, profileFields);
            PrincipalsEmitter.emit(PrincipalsConstants.events.UPDATED_USER, ctx, newUser, oldUser);
            return getUser(ctx, userId, callback);
        });
    });
};

/**
 * Get a user from the DB
 *
 * @param  {Context}   ctx             The current context
 * @param  {String}    userId          The userId for the user you wish to retrieve
 * @param  {Function}  callback        Standard callback function
 * @param  {Object}    callback.err    Error object containing the error message
 * @param  {User}      callback.user   The user object
 */
var getUser = module.exports.getUser = function(ctx, userId, callback) {
    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'Must provide a user id'}).isValidId();
    validator.check(userId, {'code': 400, 'msg': 'The provided userId is not a user identifier'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    PrincipalsUtil.getPrincipal(ctx, userId, callback);
};

/**
 * Get the full user profile of a user. In addition to the basic profile, this also fetches the
 * decorated properties.
 *
 * @param  {Context}    ctx             The current context
 * @param  {String}     userId          The id of the user whose full profile to fetch
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    Error object containing the error code and message
 * @param  {Object}     callback.user   The decorated user object
 */
var getFullUserProfile = module.exports.getFullUserProfile = function(ctx, userId, callback) {

    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'Must provide a user id'}).isValidId();
    validator.check(userId, {'code': 400, 'msg': 'The provided userId is not a user identifier'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Get the basic user profile to decorate
    getUser(ctx, userId, function(err, user) {
        if (err) {
            return callback(err);
        }

        // Only add the `isGlobalAdmin` and `isTenantAdmin` if the user's profile is requested by a global admin or the tenant admin
        if (ctx.user() && ctx.user().isAdmin(user.tenant.alias)) {
            user.isGlobalAdmin = user.isGlobalAdmin();
            user.isTenantAdmin = user.isTenantAdmin(user.tenant.alias);
        }

        // Keep track of how many decorators still need to return
        var numDecorators = _.keys(fullUserProfileDecorators).length;
        if (numDecorators === 0) {
            return callback(null, user);
        }

        // Hold all decorations for the user profile until we've collected them all
        var decorations = {};

        /*!
         * Complete one iteration of the decorators loop. Will invoke the method callback when all decorations have completed
         */
        var _finishDecorator = function() {
            numDecorators--;
            if (numDecorators === 0) {
                // Apply all the decorations to the user object
                return callback(null, _.extend(user, decorations));
            }
        };

        // Concurrently apply all decorators to the user object
        _.each(fullUserProfileDecorators, function(decorator, namespace) {
            if (user[namespace] !== undefined) {
                log().warn('Skipping full user profile decorator "%s" which overwrites an existing user profile value', namespace);
                return _finishDecorator();
            }

            decorator(ctx, clone(user), function(err, decoration) {
                if (err) {
                    log().warn({'err': err}, 'Skipping decorator because of an error in the decoration method');
                    return _finishDecorator();
                } else if (decoration === undefined) {
                    // If the decoration wasn't specified, do not apply it to the decorations. However null is a valid
                    // value
                    return _finishDecorator();
                }

                decorations[namespace] = decoration;
                return _finishDecorator();
            });
        });
    });
};

/**
 * Get the me feed for the current user, if anonymous returns 'anon': true
 * If logged in returns structured me feed object in the callback
 *
 *     {
 *         "profilePath": "/person/u:global:bert",
 *         "id": "u:global:bert",
 *         "displayName": "Bert Pareyn",
 *         "publicAlias": "Bert the Merciful"
 *         "visibility": "private",
 *         "isTenantAdmin": true,
 *         "isGlobalAdmin": false,
 *         "resourceType": "user"
 *         "locale": "en_GB"
 *     }
 *
 * If error returns error object
 *
 * @param  {Context}   ctx            The current context
 * @param  {Function}  callback       Standard callback function
 * @param  {Object}    callback.err   Error object containing the error message
 * @param  {Object}    callback.data  The me feed for the current user
 */
var getMe = module.exports.getMe = function(ctx, callback) {
    if (!ctx.user()) {
        var anonMe = {
            'anon': true,
            'tenant': ctx.tenant().compact()
        };

        var locale = ctx.locale();
        if (locale) {
            anonMe.locale = locale;
        }

        return callback(null, anonMe);
    }

    getUser(ctx, ctx.user().id, function(err, data) {
        if (err) {
            return callback(err);
        }

        if (ctx.imposter()) {
            data.imposter = ctx.imposter();
        }

        data.isGlobalAdmin = ctx.user().isGlobalAdmin();
        data.isTenantAdmin = ctx.user().isTenantAdmin(ctx.user().tenant.alias);
        data.locale = ctx.user().locale;

        // Determine if the current user needs to accept terms and conditions
        data.needsToAcceptTC = PrincipalsTermsAndConditionsAPI.needsToAcceptTermsAndConditions(ctx);

        // Generate a signature that can be used to authenticate to one's self for push notifications
        data.signature = Signature.createExpiringResourceSignature(ctx, ctx.user().id);

        // Return the name of the strategy that the user used to log into the system
        data.authenticationStrategy = ctx.authenticationStrategy();

        return callback(null, data);
    });
};

/**
 * Set a flag that indicates whether a user is a tenant admin.
 * The ctx user must be a tenant or global admin to be able to do this.
 *
 * @param  {Context}   ctx             Context that holds the tenant
 * @param  {String}    userId          The id of the user to update the tenant administrator setting for
 * @param  {Boolean}   isAdmin         Whether or not the user should become a tenant administrator
 * @param  {Function}  callback        Standard callback function
 * @param  {Object}    callback.err    Error object containing the error message
 */
var setTenantAdmin = module.exports.setTenantAdmin = function(ctx, userId, isAdmin, callback) {
    var user = AuthzUtil.getResourceFromId(userId);
    if (ctx.user() && ctx.user().isAdmin(user.tenantAlias)) {
        _setAdmin(ctx, 'admin:tenant', isAdmin, userId, callback);
    } else {
        return callback({'code': 401, 'msg': 'You do not have sufficient rights to make someone an admin'});
    }
};

/**
 * Set a flag that indicates whether a user is a global admin. The user in context must be a global
 * admin to be able to do this
 *
 * @param  {Context}   ctx              Context that holds the tenant
 * @param  {String}    userId           The id of the user to update the global administrator setting for
 * @param  {Boolean}   isAdmin          Whether or not the user should become a global administrator
 * @param  {Function}  callback         Standard callback function
 * @param  {Object}    callback.err     An error that occurred, if any
 */
var setGlobalAdmin = module.exports.setGlobalAdmin = function(ctx, userId, isAdmin, callback) {
    if (ctx.user() && _.isFunction(ctx.user().isGlobalAdmin) && ctx.user().isGlobalAdmin()) {
        return _setAdmin(ctx, 'admin:global', isAdmin, userId, callback);
    } else {
        return callback({'code': 401, 'msg': 'You do not have sufficient rights to make someone an admin'});
    }
};

/**
 * Internal method that either promotes or demotes a user to or from being an admin. This method
 * will do all the necessary validation of the user in context and passed in parameters
 *
 * @param  {Context}    ctx             Context that holds the current user and tenant
 * @param  {String}     adminType       One of `admin:global` or `admin:tenant`
 * @param  {Boolean}    isAdmin         Flag that indicates whether this user should be an admin or not
 * @param  {String}     userId          The id of the user whose admin status to set or unset
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 * @api private
 */
var _setAdmin = function(ctx, adminType, isAdmin, principalId, callback) {
    if (!PrincipalsUtil.isUser(principalId)) {
        return callback({'code': 400, 'msg': 'The provided principalId is not a user'});
    }

    // Double-check that this user exists
    getUser(ctx, principalId, function(err, user) {
        if (err) {
            return callback(err);
        }

        return PrincipalsDAO.setAdmin(adminType, isAdmin, principalId, callback);
    });
};
