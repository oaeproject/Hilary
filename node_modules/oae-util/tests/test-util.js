/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the 'License'); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an 'AS IS'
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var OaeUtil = require('oae-util/lib/util');

describe('OAE Util', function() {

    describe('#getIntParam', function() {

        it('verifies a variety of inputs for getIntParam', function(callback) {

            // Verify valid inputs are successful
            assert.equal(OaeUtil.getIntParam(1), 1);
            assert.equal(OaeUtil.getIntParam('1'), 1);

            // Verify invalid inputs fall back to undefined when defaultVal is not defined
            assert.equal(OaeUtil.getIntParam(''), undefined);
            assert.equal(OaeUtil.getIntParam(' '), undefined);
            assert.equal(OaeUtil.getIntParam(true), undefined);
            assert.equal(OaeUtil.getIntParam(false), undefined);
            assert.equal(OaeUtil.getIntParam({}), undefined);
            assert.equal(OaeUtil.getIntParam([]), undefined);
            assert.equal(OaeUtil.getIntParam(null), undefined);
            assert.equal(OaeUtil.getIntParam(undefined), undefined);
            assert.equal(OaeUtil.getIntParam(), undefined);

            // Verify valid inputs do not fall back to valid defaultVal
            assert.equal(OaeUtil.getIntParam(1, 5), 1);
            assert.equal(OaeUtil.getIntParam('1', 5), 1);

            // Verify invalid inputs fall back to defaultVal when valid
            assert.equal(OaeUtil.getIntParam('', 5), 5);
            assert.equal(OaeUtil.getIntParam(' ', 5), 5);
            assert.equal(OaeUtil.getIntParam(true, 5), 5);
            assert.equal(OaeUtil.getIntParam(false, 5), 5);
            assert.equal(OaeUtil.getIntParam({}, 5), 5);
            assert.equal(OaeUtil.getIntParam([], 5), 5);
            assert.equal(OaeUtil.getIntParam(null, 5), 5);
            assert.equal(OaeUtil.getIntParam(undefined, 5), 5);

            // Verify invalid inputs fall back to defaultVal, regardless of its value
            assert.equal(OaeUtil.getIntParam(null, '1'), '1');
            assert.equal(OaeUtil.getIntParam(null, ''), '');
            assert.equal(OaeUtil.getIntParam(null, ' '), ' ');
            assert.equal(OaeUtil.getIntParam(null, true), true);
            assert.equal(OaeUtil.getIntParam(null, false), false);
            assert.equal(OaeUtil.getIntParam(null, {'test': 'worked'}).test, 'worked');
            assert.equal(OaeUtil.getIntParam(null, ['test'])[0], 'test');
            assert.equal(OaeUtil.getIntParam(null, null), null);
            assert.equal(OaeUtil.getIntParam(null, undefined), undefined);

            return callback();
        });
    });
});