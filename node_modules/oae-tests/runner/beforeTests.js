/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var argv = require('optimist')
    .usage('Run the Hilary tests.\nUsage: $0')
    .alias('m', 'module')
    .describe('m', 'Only run a specific module. Just specify the module name.')
    .argv;

var fs = require('fs');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var LoginId = require('oae-authentication/lib/model').LoginId;
var OAE = require('oae-util/lib/oae');
var PrincipalsAPI = require('oae-principals');
var Redis = require('oae-util/lib/redis');
var RestAPI = require('oae-rest');
var RestUtil = require('oae-rest/lib/util');
var SearchAPI = require('oae-search');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model.user').User;

var TestsUtil = require('oae-tests/lib/util');

var config = require('../../../config').config;
var log = require('oae-logger').logger('before-tests');

// When we are running the test coverage profile, we change the path to the UI repository as this
// will be run from the target folder, which contains the instrumented code
if (process.env['OAE_COVERING']) {
    config.ui.path = '../../3akai-ux';
}

// The Cassandra connection config that should be used for unit tests, using
// a custom keyspace for just the tests
config.cassandra.keyspace = 'oaeTest';

// We'll stick all our redis data in a separate DB index.
config.redis.dbIndex = 1;

// log everything (except mocha output) to tests.log
config.log.streams = [{
    'level': 'trace',
    'path': './tests.log'
}];

config.search.index.name = 'oaetest';
config.search.index.settings.number_of_shards = 1;
config.search.index.destroyOnStartup = true;
config.search.index.allowAnonRefresh = true;

/**
 * Create 2 default tenants that can be used for testing our REST endpoints.
 *
 * @param {Object}      err         Standard error object, containing the error message for the keyspace creation
 * @param {Function}    callback    Standard callback function that should be called when the tenants have been created and have started up
 */
var setUpTenants = function(err, callback) {
    if (err) {
        log().error({err: err}, 'Error on keyspace creation.');
        throw new Error('Error on keyspace creation. Aborting unit tests.');
    }
    global.oaeTests = {'tenants': {}};

    // Create the Global Tenant admin context to authenticate with
    global.oaeTests.tenants.global = new Tenant('admin', 'Global tenant', 'localhost:2000');
    var globalAdmin = new User('global', null, 'The global admin User', {
        visibility: 'private',
        isGlobalAdmin: true,
        isTenantAdmin: true
    });
    var globalContext = new Context(global.oaeTests.tenants.global, globalAdmin);

    // Create the Cambridge tenant
    TenantsAPI.createTenant(globalContext, 'camtest', 'Cambridge University Test', 'cambridge.oae.com', function(err, tenant) {
        if (err) {
            log().error({err: err});
            return callback(err);
        }

        global.oaeTests.tenants.cam = tenant;
        // Create the Georgia Tech tenant
        TenantsAPI.createTenant(globalContext, 'gttest', 'Georgia Tech Test', 'gt.oae.com', function(err, tenant) {
            if (err) {
                return callback(err);
            }

            global.oaeTests.tenants.gt = tenant;

            // Create a tenant with a hostname set to 'localhost:2001' (ie: the host/port combination where the server is running on)
            // This allows tests to use the cross tenant sign authentication.
            TenantsAPI.createTenant(globalContext, 'localhost', 'Tenant with a hostname set to localhost', 'localhost:2001', function(err, tenant) {
                if (err) {
                    return callback(err);
                }
                global.oaeTests.tenants.localhost = tenant;

                // Because the actual server startup is async from the createTenant request we wait a bit till they have started up.
                setUpTenantAdmins(callback);
            });
        });
    });
};

/**
 * Create a tenant admin for each of the created tenants
 * @param {Object}      callback    Standard callback function that should be called when the tenant
 *                                  admins have been created
 */
var setUpTenantAdmins = function(callback) {
    // Create the Cambridge Tenant admin
    var camTenant = global.oaeTests.tenants.cam;
    var gtTenant = global.oaeTests.tenants.gt;

    var camAdminLoginId = new LoginId(camTenant.alias, AuthenticationConstants.providers.LOCAL, 'administrator', { 'password': 'administrator' });
    var camAdmin = new User(camTenant.alias, null, 'The Cambridge admin User', {
        isGlobalAdmin: false,
        isTenantAdmin: true
    });
    var camContext = new Context(camTenant, camAdmin);

    AuthenticationAPI.createUser(camContext, camAdminLoginId, camAdmin.displayName, null, function(err, createdUser) {
        PrincipalsAPI.setTenantAdmin(camContext, createdUser.id, true, function(err) {

            // Create the Georgia Tech admin
            var gtAdminLoginId = new LoginId(gtTenant.alias, AuthenticationConstants.providers.LOCAL, 'administrator', { 'password': 'administrator' });
            var gtAdmin = new User(gtTenant.alias, null, 'The Georgia Tech admin User', {
                isGlobalAdmin: false,
                isTenantAdmin: true
            });
            var gtContext = new Context(gtTenant, gtAdmin);

            AuthenticationAPI.createUser(gtContext, gtAdminLoginId, gtAdmin.displayName, null, function(err, createdUser) {
                PrincipalsAPI.setTenantAdmin(gtContext, createdUser.id, true, callback);
            });
        });
    });
};

// If we are running the test runner in code coverage mode, we make sure that nothing is logged onto
// the console, as this would otherwise be incorporated inside of the report
if (process.env.OAE_COVERING) {
    console.log = function() {};
}

// First set up the keyspace and all of the column families required for all of the different OAE modules
before(function(callback) {
    // drop the keyspace before starting
    Cassandra.init(config.cassandra, function(err) {
        log().info('Dropping keyspace "%s" to clean up before tests.', config.cassandra.keyspace);
        Cassandra.dropKeyspace(config.cassandra.keyspace, function(err) {
            Cassandra.close(function() {
                Redis.init(config.redis);
                log().info('Flushing redis DB index "%d" to clean up before tests.', config.redis.dbIndex);
                Redis.flush(function(err) {
                    OAE.init(config, function(err) {
                        _bindRequestLogger();
                        setUpTenants(err, callback);
                    });
                });
            });
        });
    });
});

// Executed once all of the tests for all of the different modules have finished running or
// when one of the tests has caused an error. Drop the keyspace after all the tests are done.
after(function(callback) {
    // Clean up after ourselves
    Cassandra.dropKeyspace(config.cassandra.keyspace, function(err) {
        if (err) {
            log().error({err: err}, 'Error dropping keyspace after test completion.');
        }
        Redis.flush(function(err) {
            if (err) {
               log().error({err: err}, 'Error flushing Redis data after test completion.');
            }
            callback();
        });
    });
});

/**
 * Bind request logging for oae-rest unit test debugging.
 * @api private
 */
var _bindRequestLogger = function() {
    var requestLog = require('oae-logger').logger('request-log');

    RestUtil.on('request', function(restCtx, url, method, data) {
        requestLog().trace({
            'restCtx': restCtx,
            'url': url,
            'method': method,
            'data': data
        }, 'Performing REST request');
    });

    RestUtil.on('response', function(body, res) {
        requestLog().trace({ 'res': res, 'body': body }, 'REST Request complete.');
    });

    RestUtil.on('error', function(err, body, res) {
        requestLog().error({
            'err': err,
            'res': res,
            'body': body
        }, 'An error occurred sending a REST request.');
    });
};
