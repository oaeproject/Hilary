/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var argv = require('optimist')
    .usage('Run the Hilary tests.\nUsage: $0')
    .alias('m', 'module')
    .describe('m', 'Only run a specific module. Just specify the module name.')
    .argv;

// Set our bootstrapping log level before loading other modules that will use logging
process.env['OAE_BOOTSTRAP_LOG_LEVEL'] = 'trace';
process.env['OAE_BOOTSTRAP_LOG_FILE'] = './tests.log';

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var Context = require('oae-context').Context;
var LoginId = require('oae-authentication/lib/model').LoginId;
var PrincipalsAPI = require('oae-principals');
var RestUtil = require('oae-rest/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsTestUtil = require('oae-tenants/lib/test/util');
var User = require('oae-principals/lib/model.user').User;

var TestsUtil = require('oae-tests/lib/util');

var log = require('oae-logger').logger('before-tests');

// Determine whether or not we should drop the keyspace before the test. In cases
// where we want to set up the schema by another means (e.g., to test unit tests
// over migrations), it is handy to use a schema that was pre-arranged for the
// test
var dropKeyspaceBeforeTest = (process.env.OAE_TEST_DROP_KEYSPACE_BEFORE !== 'false');

/**
 * Create 2 default tenants that can be used for testing our REST endpoints.
 *
 * @param  {Object}      config      JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 * @param  {Function}    callback    Standard callback function that should be called when the tenants have been created and have started up
 */
var setUpTenants = function(config, callback) {
    global.oaeTests = {'tenants': {}};

    // Create the Global Tenant admin context to authenticate with
    global.oaeTests.tenants.global = new Tenant(config.servers.globalAdminAlias, 'Global tenant', config.servers.globalAdminHost, {'isGlobalAdminServer': true});
    var globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

    // Create the Cambridge tenant
    TenantsTestUtil.createTenantAndWait(globalAdminRestContext, 'camtest', 'Cambridge University Test', 'cambridge.oae.com', function(err, tenant) {
        if (err) {
            log().error({'err': err});
            return callback(err);
        }

        global.oaeTests.tenants.cam = tenant;
        // Create the Georgia Tech tenant
        TenantsTestUtil.createTenantAndWait(globalAdminRestContext, 'gttest', 'Georgia Tech Test', 'gt.oae.com', function(err, tenant) {
            if (err) {
                return callback(err);
            }

            global.oaeTests.tenants.gt = tenant;

            // Create a tenant with a hostname set to 'localhost:2001' (ie: the host/port combination where the server is running on)
            // This allows tests to use the cross tenant sign authentication.
            TenantsTestUtil.createTenantAndWait(globalAdminRestContext, 'localhost', 'Tenant with a hostname set to localhost', 'localhost:2001', function(err, tenant) {
                if (err) {
                    return callback(err);
                }
                global.oaeTests.tenants.localhost = tenant;

                // We set up the tenant admins
                setUpTenantAdmins(callback);
            });
        });
    });
};

/**
 * Create a tenant admin for the specified tenant.
 *
 * @param  {Tenant}     tenant        The tenant to create an admin on
 * @param  {Function}   callback      Standard callback function that should be called when the tenant has been created
 */
var setupTenantAdmin = function(tenant, callback) {
    var adminLoginId = new LoginId(tenant.alias, AuthenticationConstants.providers.LOCAL, 'administrator', { 'password': 'administrator' });
    var mockUserId = 'u:' + tenant.alias + ':admin';
    var adminUser = new User(tenant.alias, mockUserId, 'The admin User', {
        'isGlobalAdmin': false,
        'isTenantAdmin': true
    });

    var ctx = new Context(tenant, adminUser);
    AuthenticationAPI.createUser(ctx, adminLoginId, adminUser.displayName, null, function(err, createdUser) {
        if (err) {
            return callback(err);
        }

        return PrincipalsAPI.setTenantAdmin(ctx, createdUser.id, true, callback);
    });
};


/**
 * Create a tenant admin for each of the created tenants
 * @param  {Object}      callback    Standard callback function that should be called when the tenant admins have been created
 */
var setUpTenantAdmins = function(callback) {
    var camTenant = global.oaeTests.tenants.cam;
    var gtTenant = global.oaeTests.tenants.gt;
    var localTenant = global.oaeTests.tenants.localhost;

    setupTenantAdmin(camTenant, function(err) {
        if (err) {
            return callback(err);
        }
        setupTenantAdmin(gtTenant, function(err) {
            if (err) {
                return callback(err);
            }
            setupTenantAdmin(localTenant, callback);
        });
    });
};

// First set up the keyspace and all of the column families required for all of the different OAE modules
before(function(callback) {
    this.timeout(60000);

    // Create the configuration for the test
    var config = TestsUtil.createInitialTestConfig();

    TestsUtil.setUpBeforeTests(config, dropKeyspaceBeforeTest, function() {
        // Set up a couple of test tenants.
        setUpTenants(config, function(err) {
            if (err) {
                return callback(new Error(err.msg));
            }
            return callback();
        });
    });
});

beforeEach(function(callback) {
    log().info('Beginning test "%s"', this.currentTest.title);
    return callback();
});

afterEach(function(callback) {
    log().info('Finishing test "%s"', this.currentTest.title);
    return callback();
});

// Executed once all of the tests for all of the different modules have finished running or
// when one of the tests has caused an error. Drop the keyspace after all the tests are done.
after(function(callback) {
    TestsUtil.cleanUpAfterTests(callback);
});
