/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Recaptcha = require('recaptcha').Recaptcha;
var util = require('util');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var LoginId = require('oae-authentication/lib/model').LoginId;
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');
var PrincipalsConfig = require('oae-config').config('oae-principals');

var Context = require('oae-context').Context;
var TenantsAPI = require('oae-tenants');

var PrincipalsAPI = require('./api');


/**
 * @REST getUserTermsAndConditions
 *
 * Get the Terms and Conditions
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /user/termsAndConditions
 * @QueryParam  {string}                [locale]        The locale in which the Terms and Conditions should be retrieved. Defaults to the default Terms and Conditions
 * @Return      {TermsAndConditions}                    The Terms and Conditions
 */
OAE.tenantRouter.on('get', '/api/user/termsAndConditions', function(req, res) {
    var termsAndConditions = PrincipalsAPI.getTermsAndConditions(req.ctx, req.query.locale);
    res.send(200, termsAndConditions);
});

/**
 * @REST postUserUserIdTermsAndConditions
 *
 * Accept the Terms and Conditions
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/{userId}/termsAndConditions
 * @PathParam   {string}        userId                  The id of the user accepting the Terms and Conditions
 * @Return      {BasicUser}                             The updated user
 */
OAE.tenantRouter.on('post', '/api/user/:userId/termsAndConditions', function(req, res) {
    PrincipalsAPI.acceptTermsAndConditions(req.ctx, req.params.userId, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
});

/**
 * @REST postUserCreateGlobalAdminUser
 *
 * Create a new global administrator with local authentication
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/createGlobalAdminUser
 * @FormParam   {string}        displayName             The display name for the global administrator
 * @FormParam   {string}        password                The password for the global administrator
 * @FormParam   {string}        username                The unique username for the global administrator
 * @FormParam   {string}        [email]                 The email address for the global administrator
 * @FormParam   {string}        [emailPreference]       The email preference for the global administrator   [daily,immediate,weekly]
 * @FormParam   {string}        [locale]                The locale for the global administrator
 * @FormParam   {string}        [publicAlias]           The name to show when the global administrator is inaccessible to a user
 * @Return      {BasicUser}                             The created global administrator
 */
OAE.globalAdminRouter.on('post', '/api/user/createGlobalAdminUser', function(req, res) {
    var opts = _getOptionalProfileParameters(req.body);

    // Create the user as global admin
    AuthenticationAPI.getOrCreateGlobalAdminUser(req.ctx, req.body.username, req.body.password, req.body.displayName, opts, function(err, user, created) {
        if (err) {
            return res.send(err.code, err.msg);
        } else if (!created) {
            return res.send(400, util.format('A user with username "%s" already exists', req.body.username));
        }

        return res.send(201, user);
    });
});

/**
 * @REST postUserTenantAliasCreateTenantAdminUser
 *
 * Create a new tenant administrator with local authentication
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/{tenantAlias}/createTenantAdminUser
 * @PathParam   {string}        tenantAlias             The alias of the tenant for which to create a tenant administrator
 * @FormParam   {string}        displayName             The display name for the tenant administrator
 * @FormParam   {string}        password                The password for the tenant administrator
 * @FormParam   {string}        username                The unique username for the tenant administrator
 * @FormParam   {boolean}       [acceptedTC]            Whether or not the tenant administrator has accepted the Terms and Conditions
 * @FormParam   {string}        [email]                 The email address for the tenant administrator
 * @FormParam   {string}        [emailPreference]       The email preference for the tenant administrator   [daily,immediate,weekly]
 * @FormParam   {string}        [locale]                The locale for the tenant administrator
 * @FormParam   {string}        [publicAlias]           The name to show when the tenant administrator is inaccessible to a user
 * @Return      {BasicUser}                             The created tenant administrator
 */

/**
 * @REST postUserCreateTenantAdminUser
 *
 * Create a new tenant administrator with local authentication
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/createTenantAdminUser
 * @FormParam   {string}        displayName             The display name for the tenant administrator
 * @FormParam   {string}        password                The password for the tenant administrator
 * @FormParam   {string}        username                The unique username for the tenant administrator
 * @FormParam   {boolean}       [acceptedTC]            Whether or not the tenant administrator has accepted the Terms and Conditions
 * @FormParam   {string}        [email]                 The email address for the global administrator
 * @FormParam   {string}        [emailPreference]       The email preference for the tenant administrator   [daily,immediate,weekly]
 * @FormParam   {string}        [locale]                The locale for the tenant administrator
 * @FormParam   {string}        [publicAlias]           The name to show when the tenant administrator is inaccessible to a user
 * @Return      {BasicUser}                             The created tenant administrator
 */
var _handleCreateTenantAdminUser = function(req, res) {
    var ctx = req.ctx;
    var tenantAlias = req.params.tenantAlias || ctx.tenant().alias;
    var loginId = new LoginId(tenantAlias, AuthenticationConstants.providers.LOCAL, req.body.username, {'password': req.body.password});
    var opts = _getOptionalProfileParameters(req.body);

    // Create the user as a tenant admin
    AuthenticationAPI.createTenantAdminUser(ctx, loginId, req.body.displayName, opts, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, user);
    });
};


OAE.globalAdminRouter.on('post', '/api/user/:tenantAlias/createTenantAdminUser', _handleCreateTenantAdminUser);
OAE.tenantRouter.on('post', '/api/user/createTenantAdminUser', _handleCreateTenantAdminUser);

/**
 * @REST postUserTenantAliasCreate
 *
 * Create a new user with local authentication
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/{tenantAlias}/create
 * @PathParam   {string}        tenantAlias             The alias of the tenant for which to create a user
 * @FormParam   {string}        displayName             The display name for the user
 * @FormParam   {string}        password                The password for the user
 * @FormParam   {string}        username                The unique username for the user
 * @FormParam   {boolean}       [acceptedTC]            Whether or not the user has accepted the Terms and Conditions
 * @FormParam   {string}        [email]                 The email address for the user
 * @FormParam   {string}        [emailPreference]       The email preference for the user       [daily,immediate,weekly]
 * @FormParam   {string}        [locale]                The locale for the user
 * @FormParam   {string}        [publicAlias]           The name to show when the user is inaccessible to a user
 * @FormParam   {string}        [visibility]            The visibility of the user              [loggedin,private,public]
 * @Return      {BasicUser}                             The created user
 */
OAE.globalAdminRouter.on('post', '/api/user/:tenantAlias/create', function(req, res) {
    var loginId = new LoginId(req.params.tenantAlias, AuthenticationConstants.providers.LOCAL, req.body.username, {'password': req.body.password});
    var opts = {
        'visibility': req.body.visibility,
        'email': req.body.email,
        'emailPreference': req.body.emailPreference,
        'locale': req.body.locale || req.ctx.locale(),
        'timezone': req.body.timezone,
        'publicAlias': req.body.publicAlias,
        'acceptedTC': (req.body.acceptedTC === 'true')
    };

    AuthenticationAPI.createUser(req.ctx, loginId, req.body.displayName, opts, function(err, newUser) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, newUser);
    });
});

/**
 * @REST postUserCreate
 *
 * Create a new user with local authentication
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/create
 * @FormParam   {string}        displayName             The display name for the user
 * @FormParam   {string}        password                The password for the user
 * @FormParam   {string}        username                The unique username for the user
 * @FormParam   {boolean}       [acceptedTC]            Whether or not the user has accepted the Terms and Conditions
 * @FormParam   {string}        [email]                 The email address for the user
 * @FormParam   {string}        [emailPreference]       The email preference for the user       [daily,immediate,weekly]
 * @FormParam   {string}        [locale]                The locale for the user
 * @FormParam   {string}        [publicAlias]           The name to show when the user is inaccessible to a user
 * @FormParam   {string}        [visibility]            The visibility of the user              [loggedin,private,public]
 * @Return      {BasicUser}                             The created user
 */
OAE.tenantRouter.on('post', '/api/user/create', function(req, res) {
    var ctx = req.ctx;
    var tenant = ctx.tenant();
    var user = ctx.user();
    var opts = _getOptionalProfileParameters(req.body);

    /*!
     * Create a local user account
     */
    var createUser = function() {
        var loginId = new LoginId(tenant.alias, AuthenticationConstants.providers.LOCAL, req.body.username, { password: req.body.password });
        AuthenticationAPI.createUser(ctx, loginId, req.body.displayName, opts, function(err, newUser) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            return res.send(201, newUser);
        });
    };

    if (user) {
        if (user.isAdmin(tenant.alias)) {
            // If the current user is an admin, the reCaptcha verification can be skipped
            return createUser();
        } else {
            // Non-admin users cannot create accounts
            return res.send(401);
        }
    }

    // Check if the Terms and Conditions has been agreed to (if applicable)
    var needsTermsAndConditionsAgreement = PrincipalsConfig.getValue(tenant.alias, 'termsAndConditions', 'enabled');
    if (needsTermsAndConditionsAgreement && opts.acceptedTC !== true) {
        return res.send(400, 'You need to accept the Terms and Conditions');
    }

    // Check if we need to validate with reCaptcha
    var needsReCaptcha = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'enabled');
    if (!needsReCaptcha) {
        return createUser();
    }

    // An anonymous user, do the recaptcha check
    var recaptchaData = {
        'remoteip':  req.connection.remoteAddress,
        'challenge': req.body.recaptchaChallenge,
        'response':  req.body.recaptchaResponse
    };
    var recaptchaPublicKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'publicKey');
    var recaptchaPrivateKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'privateKey');
    var recaptcha = new Recaptcha(recaptchaPublicKey, recaptchaPrivateKey, recaptchaData);
    recaptcha.verify(function(success, error_code) {
        if (success) {
            return createUser();
        } else {
            return res.send(400, 'Invalid reCaptcha token');
        }
    });
});

/**
 * @REST getMe
 *
 * Get the me feed for the current user
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /me
 * @Return      {Me}            The me feed for the current user
 */
var _handleGetMe = function(req, res) {
    PrincipalsAPI.getMe(req.ctx, function(err, meData) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, meData);
    });
};

OAE.globalAdminRouter.on('get', '/api/me', _handleGetMe);
OAE.tenantRouter.on('get', '/api/me', _handleGetMe);

/**
 * @REST postUserImport
 *
 * Import users using a CSV file
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/import
 * @FormParam   {string}            authenticationStrategy  The authentication strategy with which the provided external ids should be associated        [cas,facebook,google,ldap,local,oauth,shibboleth,twitter]
 * @FormParam   {File}              file                    The CSV file to import
 * @FormParam   {string}            tenantAlias             The alias of the tenant for which the users should imported
 * @FormParam   {boolean}           [forceProfileUpdate]    Whether or not the user information should be updated, even when other user information is already present
 */

/**
 * @REST postUserImportTenant
 *
 * Import users using a CSV file
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/import
 * @FormParam   {string}            authenticationStrategy  The authentication strategy with which the provided external ids should be associated        [cas,facebook,google,ldap,local,oauth,shibboleth,signed,twitter]
 * @FormParam   {File}              file                    The CSV file to import
 * @FormParam   {boolean}           [forceProfileUpdate]    Whether or not the user information should be updated, even when other user information is already present
*/
var _handleImportUsers = function(req, res) {
    var forceProfileUpdate = (req.body.forceProfileUpdate === 'true');
    PrincipalsAPI.importUsers(req.ctx, req.body.tenantAlias, req.files.file, req.body.authenticationStrategy, forceProfileUpdate, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response
        res.set('Content-Type', 'text/plain');
        return res.send(200);
    });
};


OAE.globalAdminRouter.on('post', '/api/user/import', _handleImportUsers);
OAE.tenantRouter.on('post', '/api/user/import', _handleImportUsers);

/**
 * @REST postUserIdAdmin
 *
 * Update the tenant administrator status for a user
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /user/{userId}/admin
 * @PathParam   {string}        userId                      The id of the user to update the tenant administrator status for
 * @FormParam   {boolean}       admin                       Whether or not the user should become a tenant administrator
 * @Return      {void}
 */
var _handleSetTenantAdmin = function(req, res) {
    PrincipalsAPI.setTenantAdmin(req.ctx, req.params.userId, req.body.admin, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

OAE.globalAdminRouter.on('post', '/api/user/:userId/admin', _handleSetTenantAdmin);
OAE.tenantRouter.on('post', '/api/user/:userId/admin', _handleSetTenantAdmin);

/**
 * @REST postUserId
 *
 * Update a user
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /user/{userId}
 * @PathParam   {string}        userId                      The id of the user to update
 * @FormParam   {String}        [email]                     The updated email for the user
 * @FormParam   {string}        [emailPreference]           The updated email preference for the user      [daily,immediate,weekly]
 * @FormParam   {string}        [locale]                    The updated locale for the user
 * @FormParam   {string}        [publicAlias]               The updated name to show when the user is inaccessible to a user
 * @FormParam   {string}        [visibility]                The updated visibility of the user            [loggedin,private,public]
 * @Return      {BasicUser}                                 The updated user
 */
var _handleUpdateUser = function(req, res) {
    PrincipalsAPI.updateUser(req.ctx, req.params.userId, req.body, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
};

OAE.globalAdminRouter.on('post', '/api/user/:userId', _handleUpdateUser);
OAE.tenantRouter.on('post', '/api/user/:userId', _handleUpdateUser);

/**
 * @REST getUserId
 *
 * Get a full user profile
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /user/{userId}
 * @PathParam   {string}        userId                      The id of the user to get
 * @Return      {User}                                      Full user profile
 */
var _handleGetFullProfile = function(req, res) {
    PrincipalsAPI.getFullUserProfile(req.ctx, req.params.userId, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
};

OAE.globalAdminRouter.on('get', '/api/user/:userId', _handleGetFullProfile);
OAE.tenantRouter.on('get', '/api/user/:userId', _handleGetFullProfile);

/**
 * @REST getUserIdMemberships
 *
 * Get the group memberships of a principal
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /user/{userId}/memberships
 * @PathParam   {string}        userId                      The id of the principal for which to get the group memberships
 * @QueryParam  {number}        [limit]                     The maximum number of results to return. Default: 10
 * @QueryParam  {string}        [start]                     The paging token from which to start fetching group memberships
 * @Return      {MembershipsResponse}                       The principal's group memberships, either directly or indirectly
 */
OAE.tenantRouter.on('get', '/api/user/:userId/memberships', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    PrincipalsAPI.getMembershipsLibrary(req.ctx, req.params.userId, req.query.start, limit, function(err, memberships, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': memberships, 'nextToken': nextToken});
    });
});

/**
 * @REST postUserIdPicture
 *
 * Store the large picture for a user
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/{userId}/picture
 * @PathParam   {string}        userId                      The id of the user to store the large picture for
 * @FormParam   {File}          file                        Image that should be stored as the large user picture
 * @Return      {BasicUser}                                 The updated user
 */
OAE.tenantRouter.on('post', '/api/user/:userId/picture', function(req, res) {
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.userId, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response.
        res.set('Content-Type', 'text/plain');
        return res.send(200, principal);
    });
});

/**
 * Extract the optional user profile parameters from the given set of request parameters
 *
 * @param  {Object}     parameters  The parameters from which to extract the profile information
 * @return {Object}                 The relevant parameters for user profiles
 * @api private
 */
var _getOptionalProfileParameters = function(parameters) {
    return {
        'visibility': parameters.visibility,
        'email': parameters.email,
        'emailPreference': parameters.emailPreference,
        'locale': parameters.locale,
        'publicAlias': parameters.publicAlias,
        'acceptedTC': (parameters.acceptedTC === 'true')
    };
};
