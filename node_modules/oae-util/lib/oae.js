/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var express = require('express');
var fs = require('fs');

var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var PrincipalAPI = require('oae-principals');
var tenantAPI = require('oae-tenants');
var Tenant = require('oae-tenants/lib/model').Tenant;
var fs = require('fs');

var IO = require('./io');
var configAPI = require('oae-config-aggregator');


///////////////////////////
// Setting up the server //
///////////////////////////

/**
 * Start OAE and run the global administrative interface on port 2000 by default, as well as all tenants 
 * and REST end points
 * @param  {Object}     config      Configuration object contain Cassandra config information
 * @param  {Function}   callback    Standard callback function execute when Sakai OAE has finished starting up
 */
module.exports.init = function(config, callback) {
    callback = callback || function() {};
    var server = express();
    server.use(express.bodyParser());
    server.listen(2000);
    registerAPI(server, config, callback);
    console.log('Starting Sakai OAE');
};

/**
 * Register all necessary REST end points for the global admin interface
 * @param  {Server}     server      Express object representing the global admin interface
 * @param  {Object}     config      Configuration object contain Cassandra config information
 * @param  {Function}   callback    Standard callback function execute when Cassandra has been
 *                                  initialized and all column families have been created
 */
var registerAPI = function(server, config, callback) {

    server.use(express.static(__dirname + "/../../oae-config-aggregator/public"));

    server.get('/whoami', function(req, res, next) {
        res.send('Sakai OAE Global Admin Interface');
    });

    server.get('/api/modules', function(req, res, next) {
        configAPI.getModules(function(modules) {
            res.send(200, modules)
        });
    });

    server.post('/api/tenant/create', function(req, res, next) {
        if (req.body.port && req.body.id) {
            tenantAPI.createTenant(req.body.id, req.body.name, req.body.description, req.body.port, '', function(err) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(200, 'New tenant "' + req.body.name + '" has been fired up on port ' + req.body.port);
            });
        } else {
            res.send(400, 'The port and id for a tenant need to be specified');
        }
    });

    server.post('/api/tenant/start', function(req, res, next) {
        tenantAPI.putTenantsInMaintenanceMode(req.body, false, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send({'code': 200, 'msg': 'Tenant successfully taken out of maintenance mode.'});
        });
    });

    server.post('/api/tenant/stop', function(req, res, next) {
        tenantAPI.putTenantsInMaintenanceMode(req.body, true, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send({'code': 200, 'msg': 'Tenant successfully put in to maintenance mode.'});
        });
    });

    server.post('/api/tenant/delete', function(req, res, next) {
        tenantAPI.deleteTenants(req.body, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send({'code': 200, 'msg': 'Tenant successfully deleted.'});
        });
    });

    server.get('/admin', function(req, res, next) {
        var action = req.pathname;
        fs.readFile('node_modules/oae-config-aggregator/public/admin.html', 'binary', function(err, file) {
            if(err) {
                return res.send(err.code, "Page not found.");
            }

            res.writeHead(200, {'Content-Type': 'text/html'});
            res.write(file, 'binary');
            res.end();
        });
    });

    server.post('/admin/update', function(req, res, next) {
        configAPI.writeConfig(req.body, function(err) {
            if (err) {
                return res.send(err.code, err.body);
            }
            res.send(200, 'Config successfully stored.');
        });
    });

    server.get('/api/tenants', function(req, res, next) {
        tenantAPI.getAllTenants(function(err, tenants) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, tenants);
        });
    });

    server.get('/api/configuration', function(req, res, next) {
        if (req.query.tenantid) {
            configAPI.readConfig(req.query.tenantid, function(err, configuration) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(200, configuration);
            });
        } else {
            res.send(400, 'A tenant ID is required to get the configuration.');
        }
    });

    // Create Cassandra database.
    Cassandra.init(config, function(err) {
        if (err) {
            return callback(err);
        }
        
        // We'll create/get 1 global admin account in the fake tenant system that can be used
        // to create tenants/other global accounts.
        var globalTenant = new Tenant('global', 'Global tenant', 'A fake tenant that can be used for global administration', 2000, 'localhost');
        var globalContext = new Context(globalTenant, null);
        // Create a global admin if it doesn't exist.
        PrincipalAPI.createUser(globalContext, 'administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', function(err, user_id) {
            // An error occurred.
            if (!err) {
                console.log("Admin account with user_id '%s' created.", user_id);
            } else if (err && err.msg && !err.msg.indexOf('already exists') > 0) {
                return callback(err);
            }
            // Fire up the tenants (if any)
            startTenants(callback);
        });
    });

};

/**
 * Start up all of the registered tenants
 * @param  {Function}   callback    Standard callback function executed when the tenant has fully
 *                                  started up, including registration of all REST endpoints
 */
var startTenants = function(callback) {
    tenantAPI.getAllTenants(function(err, tenants) {
        if (err) {
            throw err;
        }
        if (tenants.length) {
            var tenantsStarted = 0;
            for (var t = 0; t < tenants.length; t++) {
                tenantAPI.startTenant(tenants[t], function() {
                    tenantsStarted++;
                    if (tenantsStarted === tenants.length) {
                        callback();
                    }
                });
            }
        } else {
            callback();
        }
    });
};

/////////////
// Modules //
/////////////

module.exports.getAvailableModules = function(callback) {
    IO.getFileListForFolder("node_modules", function(modules) {
        var finalModules = [];
        // Modules get loaded in order by priority
        // if no priority is specified they go in last
        modules.sort(function(a,b) {
            var getPriority = function(module){
                var filename = "./node_modules/" + module + "/package.json";
                var pkg = JSON.parse(fs.readFileSync(filename, 'utf-8'));
                if (pkg.oae && pkg.oae.priority) {
                    // found a priority in package.json at oae.priority
                    return pkg.oae.priority;
                } else {
                    // no priority found 
                    return Number.MAX_VALUE;
                }
            };
            return getPriority(a) - getPriority(b);
        });
        for (var m = 0; m < modules.length; m++) {
            if (modules[m].substring(0, 4) === "oae-") {
                finalModules.push(modules[m]);
            }
        }
        callback(finalModules);
    });
};
