/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var OAE = require('oae-util/lib/oae');

var AuthenticationAPI = require('oae-authentication');

//////////////////////////////
// AUTHENTICATION PROVIDERS //
//////////////////////////////

require('./strategies/cas/rest');
require('./strategies/facebook/rest');
require('./strategies/google/rest');
require('./strategies/ldap/rest');
require('./strategies/local/rest');
require('./strategies/oauth/rest');
require('./strategies/shibboleth/rest');
require('./strategies/signed/rest');
require('./strategies/twitter/rest');


/**
 * @REST postAuthLogout
 *
 * Log out
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /auth/logout
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/auth/logout', AuthenticationAPI.logout);
OAE.tenantRouter.on('post', '/api/auth/logout', AuthenticationAPI.logout);

/**
 * Add two endpoints for REST control
 */


var _getResetPasswordSecret = function(req, res){

	AuthenticationAPI.getResetPasswordSecret(req.ctx, req.params.tenantAlias, req.params.username, function(err, token){
	    if (err) {
	        return callback(err);
	    }

		return res.send(token);
	})
};

/**
 * @REST Globalresetinit
 *
 * generate an user token based on a existing username
 *
 * @Server      Admin
 * @Method      GET
 * @Path        /auth/local/reset/init/{tenatAlias}/{userId}
 * @PathParam   {string}        userId     			The userId for the user
 * @Return      {string}
 * @HttpResponse                200                     Configuration value cleared
 * @HttpResponse                400                     Missing configuration. Example configuration: `"oae-authentication/twitter/enabled"`
 * @HttpResponse                400                     Missing tenant alias
 * @HttpResponse                400                     You cannot mix clearing an entire element and an optionalKey
 * @HttpResponse                401                     Only authorized tenant admins can change config values
 * @HttpResponse                401                     User is not allowed to update config value ...
 * @HttpResponse                404                     Config value ... does not exist
 */
OAE.globalAdminRouter.on('post', '/api/auth/local/reset/init/:tenantAlias/:userId', _getResetPasswordSecret);

/**
 * @REST LocalResetInit
 *
 * generate an user token based on a existing username
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /auth/local/reset/init/{username}
 * @PathParam   {string}        username     			The username for the user
 * @Return      {string}
 * @HttpResponse                200                     Configuration value cleared
 * @HttpResponse                400                     Missing configuration. Example configuration: `"oae-authentication/twitter/enabled"`
 * @HttpResponse                400                     Missing tenant alias
 * @HttpResponse                400                     You cannot mix clearing an entire element and an optionalKey
 * @HttpResponse                401                     Only authorized tenant admins can change config values
 * @HttpResponse                401                     User is not allowed to update config value ...
 * @HttpResponse                404                     Config value ... does not exist
 */
OAE.tenantRouter.on('get', '/api/auth/local/reset/init/:username', _getResetPasswordSecret);


var _resetPassword = function(req, res){
	process.stdout.write("hello: ");
	AuthenticationAPI.resetPassword(req.ctx, req.params.tenantAlias, req.params.username, req.body.secret, req.body.newPassword, function(err, changed) {
	    if (err) {
	        return callback(err);
	    }
		
		return res.send(200);
	})
};



/**
 * @REST LocalResetChange
 *
 * Reset an user's password based on a existing username
 *
 * @Server      tenant
 * @Method      post
 * @Path        /auth/local/reset/change/{username}
 * @PathParam   {string}        username                The username for the user
 * @FormParam   {string}        newPassword             The password for the user
 * @FormParam   {string}        secret                  The secret for the user
 * @Return      {void}
 * @HttpResponse                200                     Configuration value cleared
 * @HttpResponse                400                     Missing configuration. Example configuration: `"oae-authentication/twitter/enabled"`
 * @HttpResponse                400                     Missing tenant alias
 * @HttpResponse                400                     You cannot mix clearing an entire element and an optionalKey
 * @HttpResponse                401                     Only authorized tenant admins can change config values
 * @HttpResponse                401                     User is not allowed to update config value ...
 * @HttpResponse                404                     Config value ... does not exist
 */
OAE.tenantRouter.on('post', '/api/auth/local/reset/change/:username', _resetPassword);
