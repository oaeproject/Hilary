/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var log = require('oae-logger').logger('test-activity');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var ActivityAPI = require('oae-activity');

describe('Activity', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    describe('Activity API', function() {

        describe('#refreshConfiguration()', function() {

            /**
             * Test that verifies that refreshing configuration to disable activities works properly. This test assumes that an activity is
             * generated when a content item is created.
             */
            it('verify disabling and enabling activity worker', function(callback) {

                // First disable the activity worker and ensure no activities are processed
                ActivityAPI.refreshConfiguration(false, null, function(err) {
                    assert.ok(!err);

                    var jackUsername = TestsUtil.generateTestUserId('jack');
                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        // Try to generate an activity for Jack's feed
                        RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                            assert.ok(!err);

                            // Verify no activity is generated
                            setTimeout(RestAPI.Activity.getCurrentActivityStream, 100, jackCtx, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(activityStream);
                                assert.ok(activityStream.items);
                                assert.equal(activityStream.items.length, 0);

                                // Re-enable the worker and verify activities get generated again
                                ActivityAPI.refreshConfiguration(true, null, function(err) {
                                    assert.ok(!err);

                                    // Try and generate another activity for Jack's feed
                                    RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                                        assert.ok(!err);

                                        // Verify it was generated
                                        setTimeout(RestAPI.Activity.getCurrentActivityStream, 100, jackCtx, null, function(err, activityStream) {
                                            assert.ok(!err);
                                            assert.ok(activityStream);
                                            assert.ok(activityStream.items);
                                            assert.equal(activityStream.items.length, 1);
                                            
                                            // Re-enable the worker (again) and verify activities still get generated
                                            ActivityAPI.refreshConfiguration(true, null, function(err) {
                                                assert.ok(!err);

                                                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                                                    assert.ok(!err);

                                                    // Verify it was generated. 2 activities should have been generated for that jack guy now
                                                    setTimeout(RestAPI.Activity.getCurrentActivityStream, 100, jackCtx, null, function(err, activityStream) {
                                                        assert.ok(!err);
                                                        assert.ok(activityStream);
                                                        assert.ok(activityStream.items);
                                                        assert.equal(activityStream.items.length, 2);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that the activity TTL expiry works.
             */
            it('verify activity ttl deletes an activity after the expiry time', function(callback) {
                // Set expiry to the smallest possible, 1 second
                ActivityAPI.refreshConfiguration(true, 1, function(err) {
                    assert.ok(!err);

                    var jackUsername = TestsUtil.generateTestUserId('jack');
                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        // Try to generate an activity for Jack's feed
                        RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                            assert.ok(!err);

                            // Verify the activity is generated immediately
                            setTimeout(RestAPI.Activity.getCurrentActivityStream, 100, jackCtx, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(activityStream);
                                assert.ok(activityStream.items);
                                assert.equal(activityStream.items.length, 1);

                                // Now wait for the expiry and verify it has disappeared
                                setTimeout(RestAPI.Activity.getCurrentActivityStream, 1000, jackCtx, null, function(err, activityStream) {
                                    assert.ok(!err);
                                    assert.ok(activityStream);
                                    assert.ok(activityStream.items);
                                    assert.equal(activityStream.items.length, 0);

                                    // Hooray! Set the TTL back to the default.
                                    ActivityAPI.refreshConfiguration(true, null, function(err) {
                                        assert.ok(!err);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('#registerActivityEntityProducer()', function() {
            /**
             * Test that verifies you cannot register duplicate activity object producers
             */
             it('verify registering duplicate activity object producers results in an error', function(callback) {
                var testId = TestsUtil.generateTestUserId();
                ActivityAPI.registerActivityEntityProducer(testId, function() { });
                assert.throws(function() {
                    ActivityAPI.registerActivityEntityProducer(testId, function() { });
                });
                callback();
             });
        });

        describe('#registerActivityEntityProducer()', function() {
            /**
             * Test that verifies you cannot register duplicate activity routers
             */
             it('verify registering duplicate activity routers results in an error', function(callback) {
                var testId = TestsUtil.generateTestUserId();
                ActivityAPI.registerActivityRouter(testId, function() { });
                assert.throws(function() {
                    ActivityAPI.registerActivityRouter(testId, function() { });
                });
                callback();
             });
        });
    });

    describe('Activity Stream Permissions', function() {

        /**
         * Test that verifies you cannot view another user's activity stream
         */
        it('verify a user activity stream can only be seen by the user themselves', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Generate an activity for Jack's feed
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                    assert.ok(!err);

                    // Sanity check that Jack can view his own feed
                    setTimeout(RestAPI.Activity.getCurrentActivityStream, 100, jackCtx, null, function(err, activityStream) {
                        assert.ok(!err);
                        assert.ok(activityStream);
                        assert.ok(activityStream.items);
                        assert.equal(activityStream.items.length, 1);

                        // Create Jane and make sure she cannot see Jack's feed
                        RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                            assert.ok(!err);
                            var janeCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                            RestAPI.Activity.getActivityStream(janeCtx, jack.id, null, function(err, activityStream) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                                assert.ok(!activityStream);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies only members of a group can see the group's activity feed
         */
        it('verify a group activity stream can only be seen by its members', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var groupAlias = TestsUtil.generateTestUserId('group');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Create Jane, she should not be able to see the group's feed as she will not be a member of the group
                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                    assert.ok(!err);
                    var janeCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                    // Create a group with which to share content
                    RestAPI.Group.createGroup(jackCtx, groupAlias, groupAlias, groupAlias, 'public', 'no', [], [], function(err, group) {
                        assert.ok(!err);

                        // Create a content item in the group library, this should route a "content created" activity to the group's activity feed
                        RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [group.id], function(err, link) {
                            assert.ok(!err);

                            // Verify Jack can see the activity in the group feed
                            setTimeout(RestAPI.Activity.getActivityStream, 100, jackCtx, group.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(activityStream);
                                assert.ok(activityStream.items);
                                assert.equal(activityStream.items.length, 1);

                                RestAPI.Activity.getActivityStream(janeCtx, group.id, null, function(err, activityStream) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                                    assert.ok(!activityStream);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
        
