/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var FoldersAPI = require('oae-folders');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;

/*!
 * Create a folder
 */
OAE.tenantRouter.on('post', '/api/folder', function(req, res) {
    var managerIds = OaeUtil.toArray(req.body.managers);
    var viewerIds = OaeUtil.toArray(req.body.viewers);

    // Hold the user roles to initialize the folder with
    var roles = {};

    // Apply the manager roles
    _.each(managerIds, function(managerId) {
        roles[managerId] = FoldersConstants.roles.MANAGER;
    });

    // Apply the viewer roles
    _.each(viewerIds, function(viewerId) {
        roles[viewerId] = FoldersConstants.roles.VIEWER;
    });

    FoldersAPI.createFolder(req.ctx, req.body.displayName, req.body.description, req.body.visibility, roles, function(err, folder) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, folder);
    });
});

/*!
 * Get a folder by its id
 */
OAE.tenantRouter.on('get', '/api/folder/:folderId', function(req, res) {
    FoldersAPI.getFullFolderProfile(req.ctx, req.params.folderId, function(err, folder) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, folder);
    });
});

/*!
 * Update a folder's metadata
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId', function(req, res) {
    FoldersAPI.updateFolder(req.ctx, req.params.folderId, req.body, function(err, updatedFolder, failedContent) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        var data = {
            'folder': updatedFolder,
            'failedContent': failedContent
        };
        return res.send(200, data);
    });
});

/*!
 * Share a folder with a set of users and groups
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId/share', function(req, res) {
    var viewers = OaeUtil.toArray(req.body.viewers);
    FoldersAPI.shareFolder(req.ctx, req.params.folderId, viewers, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/*!
 * Update the members of a folder
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId/members', function(req, res) {
    // Parse the incoming false values
    var permissionUpdates = {};
    _.each(req.body, function(value, key) {
        permissionUpdates[key] = OaeUtil.castToBoolean(value);
    });

    FoldersAPI.setFolderPermissions(req.ctx, req.params.folderId, permissionUpdates, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/*!
 * Get the members list of a folder
 */
OAE.tenantRouter.on('get', '/api/folder/:folderId/members', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    FoldersAPI.getFolderMembers(req.ctx, req.params.folderId, req.query.start, limit, function(err, members, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': members, 'nextToken': nextToken});
    });
});

/*!
 * Get the folders library for a given user or group
 */
OAE.tenantRouter.on('get', '/api/folder/library/:principalId', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 12, 1, 25);
    FoldersAPI.getFoldersLibrary(req.ctx, req.params.principalId, req.query.start, limit, function(err, results, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': results, 'nextToken': nextToken});
    });
});

/*!
 * Add a set of content items to a folder
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId/library', function(req, res) {
    var contentIds = OaeUtil.toArray(req.body.contentIds);
    FoldersAPI.addContentItemsToFolder(req.ctx, req.params.folderId, contentIds, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/*!
 * Remove a set of content items from a folder
 */
OAE.tenantRouter.on('delete', '/api/folder/:folderId/library', function(req, res) {
    var contentIds = OaeUtil.toArray(req.body.contentIds);
    FoldersAPI.removeContentItemsFromFolder(req.ctx, req.params.folderId, contentIds, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/*!
 * Get the content library of a folder
 */
OAE.tenantRouter.on('get', '/api/folder/:folderId/library', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 12, 1, 25);
    FoldersAPI.getFolderContentLibrary(req.ctx, req.params.folderId, req.query.start, limit, function(err, results, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': results, 'nextToken': nextToken});
    });
});
