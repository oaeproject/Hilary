/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');

describe('Authz-Roles', function() {

    var PrincipalTypes = { USER: 'u', GROUP: 'g' };
    var ResourceTypes = { CONTENT: 'c', GROUP: 'g' };

    /**
     * Load roles for a number of generated content items.
     *
     * @param  {String}      principalId         The principal id to assign the role
     * @param  {String}      baseContentId       The base content id of the content to generate
     * @param  {String}      resourceType        The resource type associated to the content
     * @param  {Integer}     numContentItems     The number of content items to generate and assign roles for
     * @param  {String}      role                The role to assign to the principal on the generated content
     * @param  {Function()}  callback            The function invoked when the process is complete
     */
    var loadContentRoles = function(principalId, baseContentId, resourceType, numContentItems, role, callback) {
        if (numContentItems === 0) {
            callback();
            return;
        }

        var tenantAlias = AuthzUtil.getPrincipalFromId(principalId).tenantAlias;
        var resourceId = AuthzUtil.toId(resourceType, tenantAlias, baseContentId + '-' + numContentItems);
        AuthzAPI.updateRoles(resourceId, makeChange(principalId, role), function(err) {
            if (err) {
                throw err;
            }
            loadContentRoles(principalId, baseContentId, resourceType, numContentItems - 1, role, callback);
        });
    };

    /**
     * Make a single membership change object to apply to a group membership.
     *
     * @param  {String} principalId     The principal id whose membership to change
     * @param  {String} role            The role to change to
     * @return {Object}                 The change JSON Object to apply to the group
     */
    var makeChange = function(principalId, role) {
        var change = {};
        change[principalId] = role;
        return change;
    };

    describe('#getAllRoles()', function() {

        it('verify invalid principal id error', function(callback) {
            AuthzAPI.getAllRoles('not an id', 'c:cam:Foo.docx', function(err, roles) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal id error', function(callback) {
            AuthzAPI.getAllRoles('c:cam:mrvisser', 'c:cam:Foo.docx', function(err, roles) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify invalid resource id error', function(callback) {
            AuthzAPI.getAllRoles('u:cam:mrvisser', 'not an id', function(err, roles) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify empty data', function(callback) {
            var userId = AuthzUtil.toId('u', 'gar-empty', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'gar-empty', 'SomeContent');
            AuthzAPI.getAllRoles(userId, resourceId, function(err, roles) {
                assert.ok(!err);
                assert.equal(roles.length, 0);
                callback();
            });
        });

        it('verify direct single role association', function(callback) {
            var userId = AuthzUtil.toId('u', 'gar-direct', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'gar-direct', 'SomeContent');
            AuthzAPI.updateRoles(resourceId, makeChange(userId, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.getAllRoles(userId, resourceId, function(err, roles) {
                    assert.ok(!err);
                    assert.equal(roles.length, 1);
                    assert.equal(roles[0], 'viewer');
                    callback();
                });
            });
        });

        it('verify indirect single role association', function(callback) {
            var groupId = AuthzUtil.toId('g', 'gar-indirect-one', 'oae-team');
            var userId = AuthzUtil.toId('u', 'gar-indirect-one', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'gar-indirect-one', 'SomeContent');

            AuthzAPI.updateRoles(groupId, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(resourceId, makeChange(groupId, 'viewer'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.getAllRoles(userId, resourceId, function(err, roles) {
                        assert.ok(!err);
                        assert.equal(roles.length, 1);
                        assert.equal(roles[0], 'viewer');
                        callback();
                    });
                });
            });
        });

        it('verify indirect two role association', function(callback) {
            var groupId = AuthzUtil.toId('g', 'gar-indirect-one', 'oae-team');
            var userId = AuthzUtil.toId('u', 'gar-indirect-one', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'gar-indirect-one', 'SomeContent');

            AuthzAPI.updateRoles(groupId, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                var changes = {};
                changes[groupId] = 'viewer';
                changes[userId] = 'editor';
                AuthzAPI.updateRoles(resourceId, changes, function(err) {
                    assert.ok(!err);
                    AuthzAPI.getAllRoles(userId, resourceId, function(err, roles) {
                        assert.ok(!err);
                        assert.equal(roles.length, 2);
                        assert.ok(roles.indexOf('viewer') !== -1);
                        assert.ok(roles.indexOf('editor') !== -1);
                        callback();
                    });
                });
            });
        });

        it('verify multi-indirect two role association', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'ia-multi', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'ia-multi', 'oae-backend-team');
            var userId = AuthzUtil.toId('u', 'ia-multi', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'ia-multi', 'SomeContent');

            AuthzAPI.updateRoles(groupId1, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeChange(userId, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(resourceId, makeChange(groupId1, 'viewer'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(resourceId, makeChange(groupId2, 'manager'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.getAllRoles(userId, resourceId, function(err, roles) {
                                assert.ok(!err);
                                assert.equal(roles.length, 2);
                                assert.ok(roles.indexOf('viewer') !== -1);
                                assert.ok(roles.indexOf('manager') !== -1);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy three role association', function(callback) {
            var groupId1 = AuthzUtil.toId('g', 'ia-circ', 'oae-team');
            var groupId2 = AuthzUtil.toId('g', 'ia-circ', 'oae-backend-team');
            var groupId3 = AuthzUtil.toId('g', 'ia-circ', 'oae-ui-team');
            var userId = AuthzUtil.toId('u', 'ia-circ', 'mrvisser');
            var resourceId = AuthzUtil.toId('c', 'ia-circ', 'SomeContent');
            AuthzAPI.updateRoles(groupId1, makeChange(userId, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.updateRoles(groupId2, makeChange(groupId1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.updateRoles(groupId3, makeChange(groupId2, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.updateRoles(groupId1, makeChange(groupId3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.updateRoles(resourceId, makeChange(groupId1, 'viewer'), function(err) {
                                assert.ok(!err);
                                AuthzAPI.updateRoles(resourceId, makeChange(groupId2, 'manager'), function(err) {
                                    assert.ok(!err);
                                    AuthzAPI.updateRoles(resourceId, makeChange(groupId3, 'editor'), function(err) {
                                        assert.ok(!err);
                                        AuthzAPI.getAllRoles(userId, resourceId, function(err, roles) {
                                            assert.ok(!err);
                                            assert.equal(roles.length, 3);
                                            assert.ok(roles.indexOf('viewer') !== -1);
                                            assert.ok(roles.indexOf('manager') !== -1);
                                            assert.ok(roles.indexOf('editor') !== -1);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify role separation between tenants', function(callback) {
            var principalIdA = AuthzUtil.toId(PrincipalTypes.USER, 'testTenantSeparationA', 'mrvisser');
            var principalIdB = AuthzUtil.toId(PrincipalTypes.USER, 'testTenantSeparationB', 'mrvisser');
            var resourceId = AuthzUtil.toId(ResourceTypes.CONTENT, 'cam', 'testTenantSeparationContent');

            AuthzAPI.updateRoles(resourceId, makeChange(principalIdA, 'manager'), function(err) {
                assert.ok(!err);

                // verify tenant B user does not have a direct or indirect role on that content
                AuthzAPI.getAllRoles(principalIdB, resourceId, function(err, roles) {
                    assert.ok(!err);
                    assert.equal(roles.length, 0);

                    // add 'viewer' for security context B
                    AuthzAPI.updateRoles(resourceId, makeChange(principalIdB, 'viewer'), function(err) {
                        assert.ok(!err);

                        // ensure user from tenant A is still manager, not viewer
                        AuthzAPI.hasRole(principalIdA, resourceId, 'manager', function(err, hasRole) {
                            assert.ok(!err);
                            assert.ok(hasRole);

                            // ensure user from context B is a viewer, not manager
                            AuthzAPI.hasRole(principalIdB, resourceId, 'viewer', function(err, hasRole) {
                                assert.ok(!err);
                                assert.ok(hasRole);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#hasRole()', function() {

        it('verify negative check without any roles', function(callback) {
            var principalId = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRoleWithout', 'mrvisser');
            AuthzAPI.hasRole(principalId, 'c:cam:nonExistent', 'manager', function(err, hasRole) {
                assert.ok(!err);
                assert.ok(!hasRole);
                callback();
            });
        });

        it('verify positive check with a role', function(callback) {
            var principalId = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
            var resourceId = AuthzUtil.toId(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent');

            // add the 'manager' role
            AuthzAPI.updateRoles(resourceId, makeChange(principalId, 'manager'), function(err) {
                assert.ok(!err);

                // verify that hasRole reports that the user has the manager role
                AuthzAPI.hasRole(principalId, resourceId, 'manager', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(hasRole);
                    callback();
                });
            });
        });

        it('verify negative check when role has been removed', function(callback) {
            var principalId = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
            var resourceId = AuthzUtil.toId(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent');
            // add the 'manager' role
            AuthzAPI.updateRoles(resourceId, makeChange(principalId, 'manager'), function(err) {
                assert.ok(!err);

                // verify that hasRole reports that the user has the manager role
                AuthzAPI.hasRole(principalId, resourceId, 'manager', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(hasRole);

                    // remove the role from the user
                    AuthzAPI.updateRoles(resourceId, makeChange(principalId, false), function(err) {
                        assert.ok(!err);

                        // verify that the user no longer has the role
                        AuthzAPI.hasRole(principalId, resourceId, 'manager', function(err, hasRole) {
                            assert.ok(!err);
                            assert.ok(!hasRole);
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('#applyRoleChanges()', function() {

        it('verify update existing role', function(callback) {
            var principalId = AuthzUtil.toId(PrincipalTypes.USER, 'testUpdateRole', 'mrvisser');
            var resourceId = AuthzUtil.toId(ResourceTypes.CONTENT, 'testUpdateRole', 'Foo.docx');

            // 1. set role to viewer and sanity check
            AuthzAPI.updateRoles(resourceId, makeChange(principalId, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.hasRole(principalId, resourceId, 'viewer', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(hasRole);
                    AuthzAPI.updateRoles(resourceId, makeChange(principalId, 'manager'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.hasRole(principalId, resourceId, 'manager', function(err, hasRole) {
                            assert.ok(!err);
                            assert.ok(hasRole);
                            callback();
                        });
                    });
                });
            });
        });

        it('verify general functionality', function(callback) {
            var principalId1 = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
            var principalId2 = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'nm417');
            var principalId3 = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'simong');
            var principalId4 = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'PhysX');
            var resourceId1 = AuthzUtil.toId(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent1');
            var resourceId2 = AuthzUtil.toId(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent2');
            var resourceId3 = AuthzUtil.toId(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent3');

            // Make 1 user a manager
            var roles = {};
            roles[principalId1] = 'manager';
            AuthzAPI.updateRoles(resourceId1, roles, function(err) {
                assert.ok(!err);
                AuthzAPI.hasRole(principalId1, resourceId1, 'manager', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(hasRole);
                    AuthzAPI.hasRole(principalId2, resourceId1, 'manager', function(err, hasRole) {
                        assert.ok(!err);
                        assert.ok(!hasRole);

                        // Make 2 users a manager
                        roles = {};
                        roles[principalId1] = 'manager';
                        roles[principalId2] = 'manager';
                        AuthzAPI.updateRoles(resourceId2, roles, function(err) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(principalId1, resourceId2, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.ok(hasRole);
                                AuthzAPI.hasRole(principalId2, resourceId2, 'manager', function(err, hasRole) {
                                    assert.ok(!err);
                                    assert.ok(hasRole);

                                    // Make 2 users a manager, 1 a member
                                    roles = {};
                                    roles[principalId1] = 'manager';
                                    roles[principalId2] = 'manager';
                                    roles[principalId3] = 'member';
                                    AuthzAPI.updateRoles(resourceId3, roles, function(err) {
                                        assert.ok(!err);
                                        AuthzAPI.hasRole(principalId1, resourceId3, 'manager', function(err, hasRole) {
                                            assert.ok(!err);
                                            assert.ok(hasRole);
                                            AuthzAPI.hasRole(principalId2, resourceId3, 'manager', function(err, hasRole) {
                                                assert.ok(!err);
                                                assert.ok(hasRole);
                                                AuthzAPI.hasRole(principalId3, resourceId3, 'member', function(err, hasRole) {
                                                    assert.ok(!err);
                                                    assert.ok(hasRole);
                                                    AuthzAPI.hasRole(principalId4, resourceId3, 'member', function(err, hasRole) {
                                                        assert.ok(!err);
                                                        assert.ok(!hasRole);

                                                        // Try to remove 1 role
                                                        roles = {};
                                                        roles[principalId3] = false;
                                                        AuthzAPI.updateRoles(resourceId3, roles, function(err) {
                                                            assert.ok(!err);
                                                            AuthzAPI.hasRole(principalId1, resourceId3, 'manager', function(err, hasRole) {
                                                                assert.ok(!err);
                                                                assert.ok(hasRole);
                                                                AuthzAPI.hasRole(principalId3, resourceId3, 'member', function(err, hasRole) {
                                                                    assert.ok(!err);
                                                                    assert.ok(!hasRole);

                                                                    // Try to remove 2 roles and add 1 at the same time
                                                                    roles = {};
                                                                    roles[principalId1] = false;
                                                                    roles[principalId2] = false;
                                                                    roles[principalId3] = 'manager';
                                                                    AuthzAPI.updateRoles(resourceId3, roles, function(err) {
                                                                        assert.ok(!err);
                                                                        AuthzAPI.hasRole(principalId1, resourceId3, 'manager', function(err, hasRole) {
                                                                            assert.ok(!err);
                                                                            assert.ok(!hasRole);
                                                                            AuthzAPI.hasRole(principalId2, resourceId3, 'member', function(err, hasRole) {
                                                                                assert.ok(!err);
                                                                                assert.ok(!hasRole);
                                                                                AuthzAPI.hasRole(principalId3, resourceId3, 'manager', function(err, hasRole) {
                                                                                    assert.ok(!err);
                                                                                    assert.ok(hasRole);
                                                                                    callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify validation', function(callback) {
            var principalId1 = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
            var principalId2 = AuthzUtil.toId(PrincipalTypes.USER, 'testHasRole', 'nm417');
            var resourceId1 = AuthzUtil.toId(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent1');

            var roles = {};
            roles[principalId1] = 'manager';
            roles[principalId2] = 'manager';
            // Try applyRoleChanges without resourceId
            AuthzAPI.updateRoles(undefined, roles, function(err) {
                assert.ok(err);
                // Try applyRolesChanges with empty roles
                AuthzAPI.updateRoles(resourceId1, {}, function(err) {
                    assert.ok(err);
                    callback();
                });
            });
        });

    });

    describe('#getRolesForPrincipalsAndResourceType()', function() {
        it('verify general functionality', function(callback) {
            var baseViewerContentId = 'contentIView';
            var baseManagerContentId = 'contentIManage';
            var principalId1 = AuthzUtil.toId(PrincipalTypes.USER, 'testGetRolesForPrincipalsAndResourceType', 'mrvisser');
            var principalId2 = AuthzUtil.toId(PrincipalTypes.GROUP, 'testGetRolesForPrincipalsAndResourceType', 'simong');

            // mrvisser has 'viewer' role on a bunch of groups
            loadContentRoles(principalId1, baseViewerContentId, ResourceTypes.CONTENT, 300, 'viewer', function() {

                // simong has 'manager' role on some of the groups that mrvisser has 'viewer' on. this is to test aggregation of roles
                loadContentRoles(principalId2, baseViewerContentId, ResourceTypes.CONTENT, 50, 'manager', function() {

                    // simong has 'manager' role on a bunch of groups
                    loadContentRoles(principalId2, baseManagerContentId, ResourceTypes.CONTENT, 300, 'manager', function() {

                        // make sure they work together
                        AuthzAPI.getRolesForPrincipalsAndResourceType([principalId1, principalId2], ResourceTypes.CONTENT, 1000, function(err, entries) {
                            assert.ok(!err);

                            // simong is a member of 350, mrvisser is a member of 300, but 50 of those overlap, so should be 600 unique entries
                            assert.equal(Object.keys(entries).length, 600);

                            // verify that for the 50 overlapping content items, both 'manager' and 'viewer' are present
                            for (var i = 1; i <= 50; i++) {
                                var resourceId = 'c:testGetRolesForPrincipalsAndResourceType:'+baseViewerContentId+'-'+i;
                                assert.ok(entries[resourceId]['manager'], 'Expected the "manager" role to be available on each overlapping content item.');
                                assert.ok(entries[resourceId]['viewer'], 'Expected the "viewer" role to be available on each overlapping content item.');
                            }


                            // make sure they work individually
                            AuthzAPI.getRolesForPrincipalsAndResourceType([principalId1], ResourceTypes.CONTENT, 1000, function(err, entries) {
                                assert.ok(!err);
                                assert.equal(Object.keys(entries).length, 300);

                                AuthzAPI.getRolesForPrincipalsAndResourceType([principalId2], ResourceTypes.CONTENT, 1000, function(err, entries) {
                                    assert.ok(!err);
                                    assert.equal(Object.keys(entries).length, 350);

                                    // test per-principal limitations
                                    AuthzAPI.getRolesForPrincipalsAndResourceType([principalId1, principalId2], ResourceTypes.CONTENT, 100, function(err, entries) {
                                        assert.ok(!err);
                                        assert.equal(Object.keys(entries).length, 200);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify validation', function(callback) {
            var principalId1 = AuthzUtil.toId(PrincipalTypes.USER, 'testGetRolesForPrincipalsAndResourceType', 'mrvisser');
            // Try it with no provided principals
            AuthzAPI.getRolesForPrincipalsAndResourceType(undefined, ResourceTypes.CONTENT, 1000, function(err, entries) {
                assert.ok(err);
                assert.ok(!entries);
                // Try it with no resource type
                AuthzAPI.getRolesForPrincipalsAndResourceType([principalId1], undefined, 1000, function(err, entries) {
                    assert.ok(err);
                    assert.ok(!entries);
                    callback();
                });
            });
        });

    });
});
