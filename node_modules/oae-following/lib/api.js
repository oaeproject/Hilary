/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var events = require('events');

var OaeUtil = require('oae-util/lib/util');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');
var TenantUtil = require('oae-tenants/lib/util');
var Validator = require('oae-authz/lib/validator').Validator;

var FollowingAuthz = require('oae-following/lib/authz');
var FollowingConstants = require('oae-following/lib/constants').FollowingConstants;
var FollowingDAO = require('./internal/dao');

/**
 * ### Events
 *
 * The `FollowingAPI`, as enumerated in `FollowingConstants.events`, emits the following events:
 *
 *  * `follow(ctx, followerUser, followedUser)`: One user followed another user. The `ctx` of the current request, the `followerUser` (the user who became a follower) and the `followedUser` (the user who was followed) are all provided
 */
var FollowingAPI = module.exports = new events.EventEmitter();

/**
 * Get the users who are following the user specified by `userId`.
 *
 * @param  {Context}    ctx                 The context of the current user
 * @param  {String}     userId              The id of the user whose followers to get
 * @param  {String}     [start]             From where to start fetching the page of followers, as specified by the `nextToken` return param
 * @param  {Number}     [limit]             The maximum number of followers to retrieve
 * @param  {Function}   callback            Invoked when the followers have been fetched
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {User[]}     callback.followers  The list of users who are following the specified user
 * @param  {String}     callback.nextToken  The token to use as the `start` parameter when fetching the next page of followers
 */
var getFollowers = module.exports.getFollowers = function(ctx, userId, start, limit, callback) {
    limit = OaeUtil.getNumberParam(limit, 10, 1);

    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'You must specify a valid user id'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Get the user so we can determine their visibility and permissions
    PrincipalsDAO.getPrincipal(userId, function(err, user) {
        if (err) {
            return callback(err);
        }

        // Determine if the current user has access to view the followers
        FollowingAuthz.canViewFollowers(ctx, user, function(err, canView) {
            if (err) {
                return callback(err);
            } else if (!canView) {
                return callback({'code': 401, 'msg': 'You are not authorized to see this user\'s list of followers'});
            }

            // Get the list of followers
            FollowingDAO.getFollowers(userId, start, limit, function(err, followerUserIds, nextToken) {
                if (err) {
                    return callback(err);
                }

                // Expand the list of followers into their basic profiles
                _expandUserIds(ctx, followerUserIds, function(err, users) {
                    if (err) {
                        return callback(err);
                    }

                    return callback(null, users, nextToken);
                });
            });
        });
    });
};

/**
 * Get the users who are followed by the user specified by `userId`
 *
 * @param  {Context}    ctx                 The context of the current user
 * @param  {String}     userId              The id of the user whose list of followed users to get
 * @param  {String}     [start]             From where to start fetching the page of followed users, as specified by the `nextToken` return param
 * @param  {Number}     [limit]             The maximum number of followed users to retrieve
 * @param  {Function}   callback            Invoked when the followed users have been fetched
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {User[]}     callback.followed   The list of users who are being followed by the specified user
 * @param  {String}     callback.nextToken  The token to use as the `start` parameter when fetching the next page of followed users
 */
var getFollowing = module.exports.getFollowing = function(ctx, userId, start, limit, callback) {
    limit = OaeUtil.getNumberParam(limit, 10, 1);

    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'You must specify a valid user id'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Get the user so we can determine their visibility and permissions
    PrincipalsDAO.getPrincipal(userId, function(err, user) {
        if (err) {
            return callback(err);
        }

        // Determine if the current user has access to view the list of followed users
        FollowingAuthz.canViewFollowing(ctx, user, function(err, canView) {
            if (err) {
                return callback(err);
            } else if (!canView) {
                return callback({'code': 401, 'msg': 'You are not authorized to view this user\'s list of followed users'});
            }

            // Get the list of followed user ids
            FollowingDAO.getFollowing(userId, start, limit, function(err, followingUserIds, nextToken) {
                if (err) {
                    return callback(err);
                }

                // Expand the user ids into the list of basic user profiles
                _expandUserIds(ctx, followingUserIds, function(err, users) {
                    if (err) {
                        return callback(err);
                    }

                    return callback(null, users, nextToken);
                });
            });
        });
    });
};

/**
 * Make the user in context follow the user specified by `followedUserId`
 *
 * @param  {Context}    ctx             The context of the current request
 * @param  {String}     followedUserId  The id of the user being followed
 * @param  {Function}   callback        Invoked when the operation has completed
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var follow = module.exports.follow = function(ctx, followedUserId, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'You must be authenticated to follow a user'}).isLoggedInUser(ctx);
    validator.check(followedUserId, {'code': 400, 'msg': 'You must specify a valid user id of a user to follow'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Get the user to follow to perform permission checks
    PrincipalsDAO.getPrincipal(followedUserId, function(err, followedUser) {
        if (err) {
            return callback(err);
        }

        // Determine if the current user is allowed to follow this user
        FollowingAuthz.canFollow(ctx, followedUser, function(err, canFollow) {
            if (err) {
                return callback(err);
            } else if (!canFollow) {
                return callback({'code': 401, 'msg': 'You are not authorized to follow this user'});
            }

            // Save the new list of followed users for the current user
            FollowingDAO.saveFollows(ctx.user().id, [followedUserId], function(err) {
                if (err) {
                    return callback(err);
                }

                FollowingAPI.emit(FollowingConstants.events.FOLLOW, ctx, ctx.user(), followedUser);
                return callback();
            });
        });
    });
};

/**
 * Unfollow the user specified by `unfollowedUserId`
 *
 * @param  {Context}    ctx                 The context of the current request
 * @param  {String}     unfollowedUserId    The user id of the user to unfollow
 * @param  {Function}   callback            Invoked when the process completes
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var unfollow = module.exports.unfollow = function(ctx, unfollowedUserId, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'You must be authenticated to unfollow a user'}).isLoggedInUser(ctx);
    validator.check(unfollowedUserId, {'code': 400, 'msg': 'You must specify a valid user id of a user to unfollow'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // A user can always try and delete followers from their list of followers
    FollowingDAO.deleteFollows(ctx.user().id, [unfollowedUserId], function(err) {
        if (err) {
            return callback(err);
        }

        FollowingAPI.emit(FollowingConstants.events.UNFOLLOW, ctx, ctx.user(), unfollowedUserId);
        return callback();
    });
};

/**
 * Expand the array of user ids into the associated (scrubbed if necessary) basic user profiles array in the same order
 *
 * @param  {Context}    ctx             The context of the request that is fetching the user profiles
 * @param  {String[]}   userIds         The user ids to expand into basic profiles
 * @param  {Function}   callback        Invoked when the user ids have been expanded
 * @param  {Object}     callback.err    An error that occurred, if any
 * @param  {User[]}     callback.users  The basic user profiles of the users in the userIds array in the same order as the ids provided
 * @api private
 */
var _expandUserIds = function(ctx, userIds, callback) {
    if (!userIds || userIds.length === 0) {
        return callback(null, []);
    }

    // Fetch and scrub the basic user profiles
    PrincipalsUtil.getPrincipals(ctx, userIds, function(err, userProfiles) {
        if (err) {
            return callback(err);
        }

        var userList = [];
        _.each(userIds, function(userId) {
            userList.push(userProfiles[userId]);
        });

        return callback(null, userList);
    });
};
