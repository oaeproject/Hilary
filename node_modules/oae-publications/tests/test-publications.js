/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var Cassandra = require('oae-util/lib/cassandra');
var util = require('util');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationDAO = require('oae-authentication/lib/internal/dao');
var ConfigTestUtil = require('oae-config/lib/test/util');
var LoginId = require('oae-authentication/lib/model').LoginId;
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var Publication = require('oae-publications/lib/model').Publication;
var PublicationsAPI = require('oae-publications');
var PublicationsConstants = require('oae-publications/lib/constants').PublicationsConstants;


describe('Publications', function() {

    var app = null;
    var server = null;
    var port = null;
    var users = {};

    var camAnonymousRestCtx = null;
    var camAdminRestCtx = null;
    var globalAdminRestContext = null;

    /*!
     * Set up a web server that mocks Symplectic responses, cleans out the publications and creates users that can be used
     * to ingest data for.
     */
    beforeEach(function(callback) {
        camAnonymousRestCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestCtx = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        ConfigTestUtil.updateConfigAndWait(camAdminRestCtx, null, {'oae-publications/publications/allowUserEntry': false}, function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    /**
     * Generates a random source Id
     *
     * @return {String} A random string that can be used as a source id
     */
    var generateRandomSourceId = function() {
        return 'mendeley#' + TestsUtil.generateRandomText();
    };

    /**
     * Creates a test user and `nrOfPublications` publications for that user.
     *
     * @param  {Number}             nrOfPublications            Number of publications that should be created
     * @param  {Function}           callback                    Standard callback method
     * @param  {Object}             callback.user               The created user
     * @param  {Publication[]}      callback.publications       A set of publications that have been created, these will be sorted descending on their publication date
     */
    var createUserWithPublications = function(nrOfPublications, callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, createdUser) {
            assert.ok(!err);

            var publications = [];

            /*!
             * Can be used to sort an array of publications
             */
            var sortByDate = function(a, b) {
                return b.date - a.date;
            };

            /*!
             * Gets called when all the publications have been created
             */
            var createdPublication = _.after(nrOfPublications, function() {
                // Link each publication with our test user
                var linkingDone = _.after(nrOfPublications, callback);

                _.times(nrOfPublications, function(i) {
                    RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, publications[i].id, createdUser.user.displayName, createdUser.user.id, function(err) {
                        assert.ok(!err);
                        return linkingDone(createdUser, publications);
                    });
                });
            });

            _.times(nrOfPublications, function(i) {
                // Generate a semi-random publication data
                var yearInMilliSeconds = 365 * 24 * 60 * 60 * 1000;
                var publishedDate = 1000000000000 + (Math.floor(Math.random() * yearInMilliSeconds) - yearInMilliSeconds/2);
                RestAPI.Publications.createPublication(camAdminRestCtx, [ generateRandomSourceId() ], 'displayName', 'journal article', publishedDate, [createdUser.user.displayName], null, function(err, data) {
                    assert.ok(!err);

                    publications.push(data.publication);
                    publications = publications.sort(sortByDate);
                    return createdPublication();
                });
            });
        });
    };

    describe('#createPublication()', function() {

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify parameter validation', function(callback) {
            // Invalid publication permutations
            RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], null, 'journal article', 1388676959000, ['an author'], null, function(err) {
                assert.equal(err.code, 400);
                RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', null, 1388676959000, ['an author'], null, function(err) {
                    assert.equal(err.code, 400);
                    RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', 'unknown publication type', 1388676959000, ['an author'], null, function(err) {
                        assert.equal(err.code, 400);
                        RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', 'journal article', null, ['an author'], null, function(err) {
                            assert.equal(err.code, 400);
                            RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', 'journal article', 'not a date', ['an author'], null, function(err) {
                                assert.equal(err.code, 400);
                                RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', 'journal article', 1388676959000, null, null, function(err) {
                                    assert.equal(err.code, 400);
                                    RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', 'journal article', 1388676959000, {}, null, function(err) {
                                        assert.equal(err.code, 400);
                                        RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', 'journal article', 1388676959000, [], null, function(err) {
                                            assert.equal(err.code, 400);

                                            // Invalid source permutations
                                            RestAPI.Publications.createPublication(camAdminRestCtx, null, 'displayName', 'journal article', 1388676959000, ['an author'], null, function(err) {
                                                assert.equal(err.code, 400);
                                                RestAPI.Publications.createPublication(camAdminRestCtx, {}, 'displayName', 'journal article', 1388676959000, ['an author'], null, function(err) {
                                                    assert.equal(err.code, 400);
                                                    RestAPI.Publications.createPublication(camAdminRestCtx, [], 'displayName', 'journal article', 1388676959000, ['an author'], null, function(err) {
                                                        assert.equal(err.code, 400);
                                                        RestAPI.Publications.createPublication(camAdminRestCtx, ['not a source id'], 'displayName', 'journal article', 1388676959000, ['an author'], null, function(err) {
                                                            assert.equal(err.code, 400);

                                                            // Sanity check
                                                            RestAPI.Publications.createPublication(camAdminRestCtx, ['wos#1234'], 'displayName', 'journal article', 1388676959000, ['an author'], null, function(err) {
                                                                assert.ok(!err);

                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies only administrators can create publications if the `allowUserEntry` is disabled
         */
        it('verify permissions', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, simong) {
                RestAPI.Publications.createPublication(camAnonymousRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                    assert.equal(err.code, 401);
                    RestAPI.Publications.createPublication(simong.restContext, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                        assert.equal(err.code, 401);

                        // Admins can always create publications
                        RestAPI.Publications.createPublication(camAdminRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                            assert.ok(!err);
                            RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                assert.ok(!err);
                                RestAPI.Publications.createPublication(ctx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                                    assert.ok(!err);

                                    // If the config has been enabled, we should be able to create publications with the simong user (but not anonymous)
                                    ConfigTestUtil.updateConfigAndWait(camAdminRestCtx, null, {'oae-publications/publications/allowUserEntry': true}, function(err) {
                                        assert.ok(!err);
                                        RestAPI.Publications.createPublication(camAnonymousRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                                            assert.equal(err.code, 401);
                                            RestAPI.Publications.createPublication(simong.restContext, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                                                assert.ok(!err);

                                                // Admins can always create publications
                                                RestAPI.Publications.createPublication(camAdminRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                                                    assert.ok(!err);
                                                    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                                        assert.ok(!err);
                                                        RestAPI.Publications.createPublication(ctx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                                                            assert.ok(!err);

                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that if you ingest a publication with a source that's already in the system, it will not result in another record but the source will simply be added to the list of sources for that publication
         */
        it('verify ingesting a publication with an already seen source results in an update', function(callback) {

            var ids = [ generateRandomSourceId(), generateRandomSourceId(), generateRandomSourceId() ];
            var sourceIdsA = [ids[0], ids[1]];
            var sourceIdsB = [ids[1], ids[2]];
            RestAPI.Publications.createPublication(camAdminRestCtx, sourceIdsA, 'displayName A', 'journal article', 1388676959000, ['Author from A'], null, function(err, dataA) {
                assert.ok(!err);
                assert.equal(dataA.result, PublicationsConstants.ingestionResult.CREATED);

                // Because we have the same source as a source from A, we'll "update" the publication record
                RestAPI.Publications.createPublication(camAdminRestCtx, sourceIdsA, 'displayName B', 'journal article', 1388676959000, ['Author from B'], null, function(err, dataB) {
                    assert.ok(!err);
                    assert.equal(dataB.result, PublicationsConstants.ingestionResult.UPDATED);

                    assert.equal(dataA.publication.id, dataB.publication.id);

                    // Get the full publication
                    RestAPI.Publications.getPublication(camAdminRestCtx, dataA.publication.id, function(err, publication) {
                        assert.ok(!err);

                        // Verify only one author returns
                        assert.equal(publication.displayName, 'displayName B');
                        assert.equal(publication.authors.length, 1);
                        assert.equal(publication.authors[0], 'Author from A');
                        return callback();
                    });
                });
            });
        });
    });

    describe('#linkPublicationToUser()', function() {

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify parameter validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users, simong) {
                RestAPI.Publications.createPublication(camAdminRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['someAuthor'], null, function(err, data) {
                    assert.ok(!err);

                    // Invalid publication id permutation
                    RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, 'not a publicationId', 'someAuthor', simong.user.id, function(err) {
                        assert.equal(err.code, 400);

                        // Invalid author
                        RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, data.publication.id, null, simong.user.id, function(err) {
                            assert.equal(err.code, 400);

                            // Invalid user id
                            RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, data.publication.id, 'someAuthor', null, function(err) {
                                assert.equal(err.code, 400);
                                RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, data.publication.id, 'someAuthor', 'not a user', function(err) {
                                    assert.equal(err.code, 400);

                                    // Sanity check
                                    RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, data.publication.id, 'someAuthor', simong.user.id, function(err) {
                                        assert.ok(!err);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        /**
         * Test that verifies only administrators can create publications
         */
        it('verify permissions', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users, simong, mrvisser) {
                RestAPI.Publications.createPublication(camAdminRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['authorA', 'authorB'], null, function(err, data) {
                    assert.ok(!err);

                    RestAPI.Publications.linkPublicationToUser(camAnonymousRestCtx, data.publication.id, 'authorA', simong.user.id, function(err) {
                        assert.equal(err.code, 401);
                        RestAPI.Publications.linkPublicationToUser(simong.restContext, data.publication.id, 'authorA', simong.user.id, function(err) {
                            assert.equal(err.code, 401);

                            // Administrators can always link publications
                            RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, data.publication.id, 'authorA', simong.user.id, function(err) {
                                assert.ok(!err);
                                RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
                                    assert.ok(!err);
                                    RestAPI.Publications.linkPublicationToUser(ctx, data.publication.id, 'authorB', mrvisser.user.id, function(err) {
                                        assert.ok(!err);
                                        // Double-check both admins actually linked their users
                                        RestAPI.Publications.getPublication(camAnonymousRestCtx, data.publication.id, function(err, publication) {
                                            assert.ok(!err);
                                            assert.equal(publication.authors.length, 2);
                                            _.each(publication.authors, function(author) {
                                                assert.ok(typeof author !== 'string');
                                                assert.ok(_.contains([simong.user.id, mrvisser.user.id], author.id));
                                            });

                                            // If the users are allowed to enter data, they should be able to
                                            ConfigTestUtil.updateConfigAndWait(camAdminRestCtx, null, {'oae-publications/publications/allowUserEntry': true}, function(err) {
                                                assert.ok(!err);
                                                RestAPI.Publications.createPublication(camAdminRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['authorA', 'authorB'], null, function(err, data) {
                                                    assert.ok(!err);
                                                    // Anonymous users can never link publications
                                                    RestAPI.Publications.linkPublicationToUser(camAnonymousRestCtx, data.publication.id, 'authorA', simong.user.id, function(err) {
                                                        assert.equal(err.code, 401);
                                                        // Authenticated users can only link themselves
                                                        RestAPI.Publications.linkPublicationToUser(simong.restContext, data.publication.id, 'authorA', mrvisser.user.id, function(err) {
                                                            assert.equal(err.code, 401);
                                                            RestAPI.Publications.linkPublicationToUser(simong.restContext, data.publication.id, 'authorA', simong.user.id, function(err) {
                                                                assert.ok(!err);
                                                                RestAPI.Publications.getPublication(camAnonymousRestCtx, data.publication.id, function(err, publication) {
                                                                    assert.ok(!err);
                                                                    assert.equal(publication.authors.length, 2);
                                                                    assert.ok(_.find(publication.authors, function(author) { return author.id === simong.user.id; }));
                                                                    assert.ok(_.find(publication.authors, function(author) { return author === 'authorB'; }));

                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies you cannot link a user twice
         */
        it('verify users cannot be linked twice', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users, simong, mrvisser) {
                RestAPI.Publications.createPublication(camAdminRestCtx, [ generateRandomSourceId() ], 'displayName A', 'journal article', 1388676959000, ['authorA', 'authorB'], null, function(err, data) {
                    assert.ok(!err);

                    RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, data.publication.id, 'authorA', simong.user.id, function(err, linkData) {
                        assert.ok(!err);
                        assert.equal(linkData.result, PublicationsConstants.linkResult.LINKED);

                        RestAPI.Publications.linkPublicationToUser(camAdminRestCtx, data.publication.id, 'authorA', simong.user.id, function(err, linkData) {
                            assert.ok(!err);
                            assert.equal(linkData.result, PublicationsConstants.linkResult.PRESENT);

                            RestAPI.Publications.getPublication(camAnonymousRestCtx, data.publication.id, function(err, publication) {
                                assert.ok(!err);

                                assert.equal(publication.authors.length, 2);

                                // 'authorA' should not have been replaced
                                assert.equal(_.filter(publication.authors, function(author) { return (typeof author === 'string'); }).length, 1);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getPublication()', function() {

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify parameter validation', function(callback) {
            createUserWithPublications(1, function(simong, createdPublications) {

                // Malformed user ID
                RestAPI.Publications.getPublication(simong.restContext, 'Not a publication ID', function(err, data) {
                    assert.equal(err.code, 400);

                    // Sanity check
                    RestAPI.Publications.getPublication(simong.restContext, createdPublications[0].id, function(err, publication) {
                        assert.ok(!err);

                        assert.equal(publication.date, createdPublications[0].date);
                        assert.equal(publication.displayName, createdPublications[0].displayName);
                        assert.equal(publication.publicationType, createdPublications[0].publicationType);
                        assert.equal(publication.publisher, createdPublications[0].publisher);
                        return callback();
                    });
                });
            });
        });
    });

    describe('#getPublicationsForUser()', function() {

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify parameter validation', function(callback) {
            createUserWithPublications(30, function(simong, createdPublications) {

                // Malformed user ID
                RestAPI.Publications.getPublications(simong.restContext, 'not a user id', null, 3, function(err, data) {
                    assert.equal(err.code, 400);

                    // 10 is the default and 25 is the maximum amount of publications that should be returned from the REST api
                    RestAPI.Publications.getPublications(simong.restContext, simong.user.id, null, null, function(err, data) {
                        assert.ok(!err);
                        assert.equal(data.results.length, 10);
                        RestAPI.Publications.getPublications(simong.restContext, simong.user.id, null, 50, function(err, data) {
                            assert.ok(!err);
                            assert.equal(data.results.length, 25);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a user their publications are ordered on the publication date and can be paged
         */
        it('verify ordering and paging', function(callback) {
            createUserWithPublications(8, function(simong, createdPublications) {

                // Get the first 3 publications
                RestAPI.Publications.getPublications(simong.restContext, simong.user.id, null, 3, function(err, data) {
                    assert.ok(!err);

                    assert.equal(data.results.length, 3);
                    assert.equal(data.results[0].id, createdPublications[0].id);
                    assert.equal(data.results[1].id, createdPublications[1].id);
                    assert.equal(data.results[2].id, createdPublications[2].id);

                    // Get the next 3 publications
                    RestAPI.Publications.getPublications(simong.restContext, simong.user.id, data.nextToken, 3, function(err, data) {
                        assert.ok(!err);

                        assert.equal(data.results.length, 3);
                        assert.equal(data.results[0].id, createdPublications[3].id);
                        assert.equal(data.results[1].id, createdPublications[4].id);
                        assert.equal(data.results[2].id, createdPublications[5].id);

                        // Get the last 2 publications
                        RestAPI.Publications.getPublications(simong.restContext, simong.user.id, data.nextToken, 3, function(err, data) {
                            assert.ok(!err);

                            assert.equal(data.results.length, 2);
                            assert.equal(data.results[0].id, createdPublications[6].id);
                            assert.equal(data.results[1].id, createdPublications[7].id);
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
