/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthzUtil = require('oae-authz/lib/util');
var log = require('oae-logger').logger('test-general-search');
var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var SearchTestsUtil = require('oae-search/lib/test/util');

describe('Share Search', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and admin REST context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up tenant admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });


    /*!
     * Get the document with the specified id from the search results.
     *
     * @param  {SearchResult}  results     The search results object
     * @param  {String}        docId       The id of the document to search
     * @return {Object}                    The search document. `null` if it didn't exist
     */
    var _getDocById = function(results, docId) {
        for (var i = 0; i < results.results.length; i++) {
            var doc = results.results[i];
            if (doc.id === docId) {
                return doc;
            }
        }
        return null;
    };

    /**
     * Test that verifies private groups (no matter the joinable setting) do not show up in the share feed.
     * Private groups where the current user is a member of should show up
     */
    it('verify private groups do not show up', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);
            var user = _.values(users)[0];
            RestAPI.Group.createGroup(camAdminRestContext, 'share group ' + TestsUtil.generateRandomText(5), 'Private unjoinable group', 'private', 'no', [], [], function(err, privateUnJoinableGroup) {
                assert.ok(!err);
                RestAPI.Group.createGroup(camAdminRestContext, 'share group ' + TestsUtil.generateRandomText(5), 'Private joinable group', 'private', 'yes', [], [], function(err, privateJoinableGroup) {
                    assert.ok(!err);
                    RestAPI.Group.createGroup(user.restContext, 'share group ' + TestsUtil.generateRandomText(5), 'Private member group', 'private', 'yes', [], [], function(err, privateMemberGroup) {
                        assert.ok(!err);
                        RestAPI.Group.createGroup(camAdminRestContext, 'share group ' + TestsUtil.generateRandomText(5), 'Loggedin joinable group', 'public', 'yes', [], [], function(err, loggedinJoinableGroup) {
                            assert.ok(!err);
                            RestAPI.Group.createGroup(camAdminRestContext, 'share group ' + TestsUtil.generateRandomText(5), 'Public joinable group', 'public', 'yes', [], [], function(err, publicJoinableGroup) {
                                assert.ok(!err);

                                SearchTestsUtil.searchAll(user.restContext, 'share', null, {'q': 'share group'}, function(err, data) {
                                    assert.ok(!err);

                                    assert.ok(!_getDocById(data, privateUnJoinableGroup.id));
                                    assert.ok(!_getDocById(data, privateJoinableGroup.id));
                                    assert.ok(_getDocById(data, loggedinJoinableGroup.id));
                                    assert.ok(_getDocById(data, privateMemberGroup.id));
                                    assert.ok(_getDocById(data, publicJoinableGroup.id));

                                    // Admin users however, see everything
                                    SearchTestsUtil.searchAll(camAdminRestContext, 'share', null, {'q': 'share group'}, function(err, data) {
                                        assert.ok(!err);

                                        assert.ok(_getDocById(data, privateUnJoinableGroup.id));
                                        assert.ok(_getDocById(data, privateJoinableGroup.id));
                                        assert.ok(_getDocById(data, loggedinJoinableGroup.id));
                                        assert.ok(_getDocById(data, privateMemberGroup.id));
                                        assert.ok(_getDocById(data, publicJoinableGroup.id));
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that anonymous cannot access the share feed
     */
    it('verify anonymous users cannot access the feed', function(callback) {
        RestAPI.Search.search(anonymousRestContext, 'share', null, {'q': '*'}, function(err, data) {
            assert.ok(err);
            assert.equal(err.code, 401);
            assert.ok(!data);
            callback();
        });
    });

    /**
     * Test that verifies that private groups show up through indirect memberships
     */
    it('verify private groups show up through indirect memberships', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
            assert.ok(!err);

            // The `creator` user will create the tree of groups and then add the `member`user to a leaf group
            // The `member` user will then do a search which should result in the top group to show up as he is an indirect member
            var creator = _.values(users)[0];
            var member = _.values(users)[1];

            // Generate 3 test groups
            TestsUtil.generateTestGroups(creator.restContext, 3, function(err, groups) {
                assert.ok(!err);

                // Construct a tree hierarchy
                var topGroupId = _.keys(groups)[0];
                var intermediateGroupId = _.keys(groups)[1];
                var leafGroupId = _.keys(groups)[2];
                TestsUtil.generateGroupHierarchy(creator.restContext, [topGroupId, intermediateGroupId, leafGroupId], 'member', function(err) {
                    assert.ok(!err);

                    // Add the second user as a member of the leafgroup
                    var memberRole = {};
                    memberRole[member.user.id] = 'member';
                    RestAPI.Group.setGroupMembers(creator.restContext, leafGroupId, memberRole, function(err) {
                        assert.ok(!err);

                        // Searching for principals to share with, should give us a resultset that includes all three groups
                        SearchTestsUtil.searchAll(member.restContext, 'share', null, {'q': '*'}, function(err, data) {
                            assert.ok(!err);
                            assert.ok(_getDocById(data, topGroupId));
                            assert.ok(_getDocById(data, intermediateGroupId));
                            assert.ok(_getDocById(data, leafGroupId));
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that external tenant principals can be found
     */
    it('verify tenant separation', function(callback) {
        TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
            SearchTestsUtil.searchAll(publicTenant.publicUser.restContext, 'share', null, {'q': '*'}, function(err, data) {
                assert.ok(!err);
                assert.ok(_getDocById(data, publicTenant.loggedinUser.user.id));
                assert.ok(!_getDocById(data, publicTenant.privateUser.user.id));
                assert.ok(_getDocById(data, publicTenant.publicGroup.id));
                assert.ok(_getDocById(data, publicTenant.loggedinGroup.id));
                assert.ok(!_getDocById(data, publicTenant.privateGroup.id));

                // Cross-tenant
                assert.ok(_getDocById(data, publicTenant1.publicUser.user.id));
                assert.ok(_getDocById(data, publicTenant1.publicGroup.id));
                assert.ok(!_getDocById(data, publicTenant1.loggedinUser.user.id));
                assert.ok(!_getDocById(data, publicTenant1.privateUser.user.id));
                assert.ok(!_getDocById(data, publicTenant1.loggedinGroup.id));
                assert.ok(!_getDocById(data, publicTenant1.privateGroup.id));
                assert.ok(!_getDocById(data, privateTenant.publicUser.user.id));
                assert.ok(!_getDocById(data, privateTenant.loggedinUser.user.id));
                assert.ok(!_getDocById(data, privateTenant.privateUser.user.id));
                assert.ok(!_getDocById(data, privateTenant.publicGroup.id));
                assert.ok(!_getDocById(data, privateTenant.loggedinGroup.id));
                assert.ok(!_getDocById(data, privateTenant.privateGroup.id));

                // Search from a private tenant should only result in results from that tenant
                SearchTestsUtil.searchAll(privateTenant.publicUser.restContext, 'share', null, {'q': '*'}, function(err, data) {
                    assert.ok(!err);

                    assert.ok(_getDocById(data, privateTenant.publicUser.user.id));
                    assert.ok(_getDocById(data, privateTenant.loggedinUser.user.id));
                    assert.ok(!_getDocById(data, privateTenant.privateUser.user.id));
                    assert.ok(_getDocById(data, privateTenant.publicGroup.id));
                    assert.ok(_getDocById(data, privateTenant.loggedinGroup.id));
                    assert.ok(!_getDocById(data, privateTenant.privateGroup.id));

                    // Since the current tenant is private, he cannot interact with others
                    assert.ok(!_getDocById(data, publicTenant.publicUser.user.id));
                    assert.ok(!_getDocById(data, publicTenant.loggedinUser.user.id));
                    assert.ok(!_getDocById(data, publicTenant.privateUser.user.id));
                    assert.ok(!_getDocById(data, publicTenant.publicGroup.id));
                    assert.ok(!_getDocById(data, publicTenant.loggedinGroup.id));
                    assert.ok(!_getDocById(data, publicTenant.privateGroup.id));
                    assert.ok(!_getDocById(data, privateTenant1.publicUser.user.id));
                    assert.ok(!_getDocById(data, privateTenant1.loggedinUser.user.id));
                    assert.ok(!_getDocById(data, privateTenant1.privateUser.user.id));
                    assert.ok(!_getDocById(data, privateTenant1.publicGroup.id));
                    assert.ok(!_getDocById(data, privateTenant1.loggedinGroup.id));
                    assert.ok(!_getDocById(data, privateTenant1.privateGroup.id));

                    // A tenant admin from a private tenant can see all the users/groups of his tenant, but no others
                    SearchTestsUtil.searchAll(privateTenant.adminRestContext, 'share', null, {'q': '*'}, function(err, data) {
                        assert.ok(!err);

                        assert.ok(_getDocById(data, privateTenant.publicUser.user.id));
                        assert.ok(_getDocById(data, privateTenant.loggedinUser.user.id));
                        assert.ok(_getDocById(data, privateTenant.privateUser.user.id));
                        assert.ok(_getDocById(data, privateTenant.publicGroup.id));
                        assert.ok(_getDocById(data, privateTenant.loggedinGroup.id));
                        assert.ok(_getDocById(data, privateTenant.privateGroup.id));
                        assert.ok(!_getDocById(data, publicTenant.publicUser.user.id));
                        assert.ok(!_getDocById(data, publicTenant.loggedinUser.user.id));
                        assert.ok(!_getDocById(data, publicTenant.privateUser.user.id));
                        assert.ok(!_getDocById(data, publicTenant.publicGroup.id));
                        assert.ok(!_getDocById(data, publicTenant.loggedinGroup.id));
                        assert.ok(!_getDocById(data, publicTenant.privateGroup.id));
                        assert.ok(!_getDocById(data, privateTenant1.publicUser.user.id));
                        assert.ok(!_getDocById(data, privateTenant1.loggedinUser.user.id));
                        assert.ok(!_getDocById(data, privateTenant1.privateUser.user.id));
                        assert.ok(!_getDocById(data, privateTenant1.publicGroup.id));
                        assert.ok(!_getDocById(data, privateTenant1.loggedinGroup.id));
                        assert.ok(!_getDocById(data, privateTenant1.privateGroup.id));
                        callback();
                    });
                });
            });
        });
    });
});
