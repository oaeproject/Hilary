/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var log = require('oae-logger').logger('oae-stats');
var Validator = require('oae-util/lib/validator').Validator;

var StatsDAO = require('./internal/dao');

/**
 * Get all the stats for a given tenant
 *
 * @param  {Context}    ctx                 The context of the current request
 * @param  {String}     tenantAlias         The alias of the tenant for which the stats should be retrieved
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Object[]}   callback.stats      The statistics for this tenant. Each object holds a `name` and `value` key
 */
var getAllStatistics = module.exports.getAllStatistics = function(ctx, tenantAlias, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Anonymous users cannot request stats'}).isLoggedInUser(ctx);
    validator.check(tenantAlias, {'code': 400, 'msg': 'A tenant alias must be specified'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    if (!ctx.user().isAdmin(tenantAlias)) {
        return callback({'code': 401, 'msg': 'Only administrators can requests stats'});
    }

    StatsDAO.getAllStatistics(tenantAlias, callback);
};

/**
 * Get a specific statistic for a given tenant
 *
 * @param  {Context}    ctx                 The context of the current request
 * @param  {String}     tenantAlias         The alias of the tenant for which to retrieve the statistic
 * @param  {String}     name                The name of the statistic to retrieve
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Number}     callback.value      The desired statistic
 */
var getStatistic = module.exports.getStatistic = function(ctx, tenantAlias, name, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Anonymous users cannot request stats'}).isLoggedInUser(ctx);
    validator.check(tenantAlias, {'code': 400, 'msg': 'A tenant alias must be specified'}).notEmpty();
    validator.check(name, {'code': 400, 'msg': 'A stat name must be specified'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    if (!ctx.user().isAdmin(tenantAlias)) {
        return callback({'code': 401, 'msg': 'Only administrators can requests stats'});
    }

    StatsDAO.getStatistic(tenantAlias, name, callback);
};

/**
 * Set one or more statistics
 *
 * @param  {Object[]}   stats           The stats to persist. Each object should have a `name`, a `tenantAlias` and a numeric `value`
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var setStatistics = module.exports.setStatistics = function(stats, callback) {
    // Don't process empty stats objects
    if (_.isEmpty(stats)) {
        return callback();
    }

    var validator = new Validator();
    _.each(stats, function(stat) {
        validator.check(stat.tenantAlias, {'code': 400, 'msg': 'Missing tenantAlias'}).notEmpty();
        validator.check(stat.name, {'code': 400, 'msg': 'Missing name'}).notEmpty();
        validator.check(stat.value, {'code': 400, 'msg': 'Missing value'}).notEmpty();
        validator.check(stat.value, {'code': 400, 'msg': 'Invalid value'}).isNumeric();
    });
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Persist the stats in Cassandra
    StatsDAO.setStatistics(stats, callback);

    // POSSIBLETODO: Also ship the metrics to statsd so they can be graphed with graphite
};

// POSSIBLETODO: Add some logic so we can ship metrics directly to statsd