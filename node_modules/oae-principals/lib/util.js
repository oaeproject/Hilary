/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var sanitize = require('validator').sanitize;
var time = require('time');

var cassandra = require('oae-util/lib/cassandra');
var GroupAPI = require('oae-principals/lib/api.group');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var Redis = require('oae-util/lib/redis');

var User = require('./model').User;
var Group = require('./model').Group;
var VISIBILITY_OPTIONS = require('./model').VISIBILITY_OPTIONS;



/**
 * Gets a principal from Redis or if it doesn't exist there, from Cassandra.
 * @param  {Context}                    ctx                 The current context
 * @param  {String}                     principalId         The ID of the principal that should be retrieved.
 * @param  {Function(err, principal)}   callback            A callback method.
 * @param  {Object}                     callback.err        An error object (if any)
 * @param  {Object}                     callback.principal  The asked for principal.
 */
module.exports.getPrincipal = function(ctx, principalId, callback) {
    if (isUser(principalId)) {
        // Get users from Redis.
        getPrincipalFromRedis(ctx, principalId, function(err, user) {
            // If we find something, immediately return.
            if (user) {
                return callback(false, user);
            }

            // If we don't find anything, grab it from Cassandra.
            getPrincipalFromCassandra(ctx, principalId, callback);
        });
    } else {
        // Get groups from the DB.
        getPrincipalFromCassandra(ctx, principalId, callback);
    }
};

/**
 * Get a principal from Cassandra.
 *
 * @param  {Context}                    ctx                 The current context
 * @param  {String}                     principalId         The ID of the principal that should be retrieved.
 * @param  {Function(err, principal)}   callback            A callback method.
 * @param  {Object}                     callback.err        An error object (if any)
 * @param  {Object}                     callback.principal  The asked for principal.
 */
var getPrincipalFromCassandra = function(ctx, principalId, callback) {
    cassandra.runQuery('SELECT * FROM Principals USING CONSISTENCY QUORUM WHERE principalId = ?', [principalId], function (err, rows) {
        if (err) {
            return callback(err);
        }

        // check if no users were returned
        if (rows[0].count === 1) {
            return callback({'code': 404, 'msg': "Couldn't find principal: " + principalId});
        }

        var principal = getPrincipalFromRow(ctx, rows[0]);

        if (isUser(principal.id)) {
            // Deep-copy the object *before* we apply the visibility settings.
            // this allows us to retrieve a full object from redis later.
            var hash = JSON.parse(JSON.stringify(principal));
            applyVisibility(ctx, principal);
        }

        // Immediately callback, storing something in redis can happen async.
        callback(false, principal);

        // Cache the principal in redis if it's a user.
        // We assume that a check in redis has happened earlier.
        if (!err && principal && isUser(principal.id)) {
            // Convert or remove methods that shouldn't be in redis.
            // Redis takes only strings as hash field values so convert non-strings.
            hash.isGlobalAdmin = '' + principal.isGlobalAdmin();
            hash.isTenantAdmin = '' + principal.isTenantAdmin(principal.tenant);

            // Convert the extra object.
            for (var key in hash.extra) {
                hash['extra_' + key] = hash.extra[key];
            }
            delete hash.extra;

            // Store it in redis
            Redis.getClient().hmset('user:' + principalId, hash);
        }
    });
};

/**
 * Get a principal from Redis. Note that this method will *NOT* return an error if the user could not be found
 * or something went wrong with contacting Redis.
 *
 * @param  {Context}                    ctx                 The current context
 * @param  {String}                     principalId         The ID of the principal that should be retrieved.
 * @param  {Function(err, principal)}   callback            A callback method.
 * @param  {Object}                     callback.err        This will always be false. You should check for the `callback.principal`
 *                                                          if you want to check if you got a principal.
 *                                                          This is to allow to retrieve a user from the DB even if redis is down.
 * @param  {Object}                     callback.principal  The asked for principal (or null).
 */
var getPrincipalFromRedis = function(ctx, principalId, callback) {
    Redis.getClient().hgetall('user:' + principalId, function(err, hash) {
        if (err || !hash) {
            return callback(false, null);
        }

        // We don't need to do validation as that has already happened.
        var isGlobalAdmin = (hash.isGlobalAdmin === 'true');
        var isTenantAdmin = (hash.isTenantAdmin === 'true');
        var user = new User(hash.tenant, hash.id, hash.username, hash.visibility, hash.locale, hash.timezone, hash.firstName, hash.lastName, hash.displayName, isGlobalAdmin, isTenantAdmin);

        // Any potential extra fields.
        user.extra = {};
        for (var key in hash) {
            if (key.indexOf('extra_') === 0) {
                user.extra[key.slice(6)] = hash[key];
            }
        }

        // In case this user has some information on his User object
        // that should not be exposed.
        applyVisibility(ctx, user);

        return callback(false, user);
    });
};

/**
 * Retrieves a principal from a row object.
 *
 * @param   {Context}       ctx     The current context
 * @param   {Row}           row     A Helenus row object.
 * @returns {User|Group}            A user or group object.
 */
var getPrincipalFromRow = function(ctx, row) {
    if (module.exports.isGroup(row.get('principalId').value)) {
        // The data that sits on the group object is always visible.
        return rowToGroup(row);
    } else {
        return rowToUser(row);
    }
};

/**
 * Hides sensitive user information in case the visibility has been set to
 * `loggedin` or `private`.
 *
 * @param {Context}     ctx     The current context
 * @param {User}        user    A user object,
 */
var applyVisibility = function(ctx, user) {
    // Admins can see all users.
    var principalResource = AuthzUtil.getResourceFromUuid(user.id);
    if (ctx.user() && ctx.user().isAdmin && ctx.user().isAdmin(principalResource.tenantId)) {
        return;
    }

    // Hide the sensitive profile information if needed.
    if ((user.visibility === VISIBILITY_OPTIONS.LOGGEDIN && ctx.user() === null) ||
        (user.visibility === VISIBILITY_OPTIONS.PRIVATE && (ctx.user() === null || ctx.user().id !== user.id))) {
        user.hide();
    }
};

/**
 * Gets a set of principals (user or groups). This method *will* throw an error if some of the principals
 * don't exist.
 *
 * @param  {Context}                    ctx                         The current context
 * @param  {Array<String>}              principalIds                The ID of the principal that should be retrieved.
 * @param  {Function(err, principals)}  callback                    Standard callback function
 * @param  {Object}                     callback.err                Error object containing the error message.
 * @param  {Object}                     callback.principals         Object representing the retrieved principals. The keys will be the
 *                                                                  principal ids and the values will be the principal basic profiles
 */
module.exports.getPrincipals = function(ctx, principalIds, callback) {
    if (principalIds.length === 0) {
        return callback(false, {});
    }
    cassandra.runQuery("SELECT * FROM Principals USING CONSISTENCY QUORUM WHERE principalId IN (?)", [principalIds], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var isMissingPrincipals = false;
        var principals = {};
        for (var i = 0; i < rows.length; i++) {
            // An empty row will come back for non-existing principals
            if (rows[i].count > 1) {
                var principal = getPrincipalFromRow(ctx, rows[i]);
                principals[principal.id] = principal;
            } else {
                isMissingPrincipals = true;
            }
        }

        if (isMissingPrincipals) {
            return callback({'code': 400, 'msg': 'These principals could not be found: ' + _.difference(principalIds, _.keys(principals))});
        }

        callback(false, principals);
    });
};

/**
 * Check if an identifier really is a group identifier.
 * @param  {String}  groupId    An identifier
 * @return {Boolean}            Whether or not the provided identifier is a group identifier.
 */
var isGroup = module.exports.isGroup = function(groupId) {
    var principal = AuthzUtil.getPrincipalFromUuid(groupId);
    return (principal.principalType === "g");
};

/**
 * Check if an identifier really is a user identifier.
 * @param  {String}  userId     An identifier
 * @return {Boolean}            Whether or not the provided identifier is a user identifier.
 */
var isUser = module.exports.isUser = function(userId) {
    var principal = AuthzUtil.getPrincipalFromUuid(userId);
    return (principal.principalType === "u");
};

/**
 * Hashes a string using SHA512.
 * @param  {String}     password        The passwords that needs to be hashed.
 * @param  {String}     salt            A random salt that will be prepended to the password for hashing (optional)
 * @return {String}                     The hashed password.
 */
var hashPassword = module.exports.hashPassword = function(password, salt) {
    // Prepend a random number to prevent rainbow table attacks
    salt = salt || crypto.randomBytes(16).toString('hex');
    password = salt + password;
    return salt + '$' + crypto.createHash('sha512').update(password).digest('hex');
};

/**
 * Checks whether a provided password matches a stored password
 * @param  {String}     password        The password provided by the user
 * @param  {String}     storedPassword  The password stored for that user
 * @return {Boolean}                    True if the provided password matches the stored password,
 *                                      false if they are different
 */
var checkPassword = module.exports.checkPassword = function(password, storedPassword) {
    // Get the salt of the hashed password
    var salt = storedPassword.split('$')[0];
    // Check if the provided password with the extracted salt is the same as the stored password
    return (module.exports.hashPassword(password, salt) === storedPassword);
};

/**
 * Removes wonky characters from a string so it can be used as user/group-name.
 * @param  {String} name    The name that needs to be cleaned.
 * @return {String}         A clean name.
 */
module.exports.cleanName = function(name) {
    return name.replace(/[:;<>#%{}|~`@%&!$,.="'\^\+\/\?\(\)\*\s\\\\\[\]]/gi, '-');
};

/**
 * Creates a Group from a Cassandra row.
 * @param  {Row}    row     Cassandra Row
 * @return {Group}          A group object.
 */
var rowToGroup = function (row) {
    var hash = cassandra.rowToHash(row);
    return new Group(hash.tenant, hash.principalId, hash.alias, hash.name, hash.description, hash.visibility, hash.joinable);
};

/**
 * Creates a User from a Cassandra row.
 * @param  {Row}    row     Cassandra Row
 * @return {User}           A User object.
 */
var rowToUser = function(row) {
    var hash = cassandra.rowToHash(row);
    var isGlobalAdmin = (row.get('admin:global') && sanitize(row.get('admin:global').value).toBooleanStrict());
    var isTenantAdmin = (row.get('admin:tenant') && sanitize(row.get('admin:tenant').value).toBooleanStrict());

    // Ensure that the timezone we're setting is something the app
    // can deal with.
    var timezone = hash.timezone;
    try {
        var date = new time.Date();
        date.setTimezone(timezone);
    } catch (err) {
        // We can't deal with this timezone.
        // default to UTC
        timezone = 'UTC';
    }


    var user = new User(hash.tenant, hash.principalId, hash.username, hash.visibility, hash.locale, timezone, hash.firstName, hash.lastName, hash.displayName, isGlobalAdmin, isTenantAdmin);
    // The row might contain extra data that we wish to pass back.
    user.extra = {};
    var keys = _.keys(hash);
    var blacklist = ['tenant', 'principalId', 'username', 'password', 'visibility', 'locale', 'timezone', 'firstName', 'lastName', 'displayName', 'admin:global', 'admin:tenant'];
    for (var i = 0; i < keys.length; i++) {
        if (blacklist.indexOf(keys[i]) === -1) {
            user.extra[keys[i]] = hash[keys[i]];
        }
    }
    return user;
};
