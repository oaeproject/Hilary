/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context').Context;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var Tenant = require('oae-tenants/lib/model').Tenant;
var TestsUtil = require('oae-tests');

var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model.user').User;


describe('Users', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a Cambridge tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a GT tenant admin
    var gtAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Context object that can be used every time we need to use the internal API as a global admin
    var globalAdminContext = null;

    /**
     * Function that will fill up the anonymous and the tenant admin context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up Cam tenant admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up GT tenant admin rest context
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        // Fill up global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Fill up the global admin context
        var globalTenant = new Tenant('admin', 'Global tenant', 'localhost:2000');
        globalAdminContext = new Context(globalTenant, new User(globalTenant.alias, null, 'The global admin user', { isGlobalAdmin: true }));
        callback();
    });


    describe('Create user', function() {

        /**
         * Test that verifies that it should only be possible to create a user if there are valid reCaptcha tokens present or the current user is an admin
         */
        it('verify create user', function(callback) {
            // Try to create a user as an anonymous user with no reCaptcha tokens
            var userId = TestsUtil.generateTestUserId();
            var recaptchaTenantAlias = TestsUtil.generateTestUserId();

            // Verify recaptcha token is needed when feature is enabled
            RestAPI.Tenant.createTenant(globalAdminRestContext, recaptchaTenantAlias, recaptchaTenantAlias, recaptchaTenantAlias, function(err, recaptchaTenant) {
                assert.ok(!err);
                var recaptchaAnonymousRestContext = TestsUtil.createTenantRestContext(recaptchaTenantAlias);

                // Enable recaptcha for this tenant
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, recaptchaTenantAlias, 'oae-principals/recaptcha/enabled', true, function(err) {
                    assert.ok(!err);

                    RestAPI.User.createUser(recaptchaAnonymousRestContext, userId, 'password', 'Test User', {'visibility': 'public'}, function(err, userObj) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!userObj);

                        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', {'visibility': 'public'}, function(err, createdUser) {
                            assert.ok(!err);
                            assert.ok(createdUser);
                            assert.equal(createdUser.displayName, 'Test User');
                            assert.equal(createdUser.publicAlias, 'Test User');
                            assert.equal(createdUser.visibility, 'public');
                            assert.equal(createdUser.resourceType, 'user');
                            assert.equal(createdUser.profilePath, '/user/' + createdUser.id);
                            var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');

                            // Try creating a user with the same user id, which should fail
                            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', null, function(err, userObj) {
                                assert.ok(err);
                                assert.ok(!userObj);

                                // Try creating a new user as the created user
                                var newUserId = TestsUtil.generateTestUserId();
                                RestAPI.User.createUser(userRestContext, newUserId, 'password', 'Test User', null, function(err, userObj) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                        
                                    // We promote the created user to be a tenant admin. We'll be using the internal API for now
                                    // as there is no REST endpoint for this yet
                                    PrincipalsAPI.setTenantAdmin(globalAdminContext, createdUser.id, true, function(err) {
                                        assert.ok(!err);
                                        
                                        // Try creating the user again
                                        RestAPI.User.createUser(userRestContext, newUserId, 'password', 'Test User', null, function(err, userObj) {
                                            assert.ok(!err);
                                            assert.ok(userObj);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that validation on user creation is done appropriately
         */
        it('verify validation', function(callback) {
            var userId = TestsUtil.generateTestUserId();
            // Create user with no user id
            RestAPI.User.createUser(camAdminRestContext, null, 'password', 'Test User', null, function(err, userObj) {
                assert.ok(err);
                assert.ok(!userObj);
                
                // Create user with empty password
                RestAPI.User.createUser(camAdminRestContext, userId, null, 'Test User', null, function(err, userObj) {
                    assert.ok(err);
                    assert.ok(!userObj);
                    
                    // Create user with short password
                    RestAPI.User.createUser(camAdminRestContext, userId, 'short', 'Test User', null, function(err, userObj) {
                        assert.ok(err);
                        assert.ok(!userObj);

                        // Create user with no display name
                        RestAPI.User.createUser(camAdminRestContext, userId, 'password', null, null, function(err, userObj) {
                            assert.ok(err);
                            assert.ok(!userObj);

                            // Create user with unkown visibility setting
                            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', {'visibility': 'unknown'}, function(err, userObj) {
                                assert.ok(err);
                                assert.ok(!userObj);
                                
                                // Create user with invalid timezone
                                RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', {'timezone': 'Plopsa/Land'}, function(err, userObj) {
                                    assert.ok(err);
                                    assert.ok(!userObj);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });
    
    
    describe('Get user', function() {
        
        /**
         * Test that verifies that a user's basic profile can be retrieved
         */
        it('verify get user', function(callback) {
            // Create a test user
            var userId = TestsUtil.generateTestUserId();
            var opts = {
                'visibility': 'public'
            };

            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', opts, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                assert.equal(userObj.displayName, 'Test User');
                assert.equal(userObj.resourceType, 'user');
                assert.equal(userObj.profilePath, '/user/' + userObj.id);

                // Get the user
                RestAPI.User.getUser(anonymousRestContext, userObj.id, function(err, retrievedUser) {
                    assert.ok(!err);
                    assert.ok(retrievedUser);
                    assert.equal(retrievedUser.visibility, 'public');
                    assert.equal(retrievedUser.displayName, 'Test User');
                    assert.equal(retrievedUser.resourceType, 'user');
                    assert.equal(retrievedUser.profilePath, '/user/' + retrievedUser.id);
                    callback();
                });
            });
        });
        
        /**
         * Test that verifies that a user with an ugly username and a UTF-8 username can be retrieved
         */
        it('verify get user by ugly username', function(callback) {
            // Create a test user with an ugly user name
            var userId1 = TestsUtil.generateTestUserId('some.weird@`user\\name');
            RestAPI.User.createUser(camAdminRestContext, userId1, 'password', 'Test User', {'visibility': 'public'},  function(err, userObj1) {
                assert.ok(!err);
                assert.ok(userObj1);
                
                // Get the user
                RestAPI.User.getUser(anonymousRestContext, userObj1.id, function(err, retrievedUser1) {
                    assert.ok(!err);
                    assert.ok(retrievedUser1);
                    assert.equal(retrievedUser1.visibility, 'public');
                    assert.equal(retrievedUser1.displayName, 'Test User');
                    assert.equal(retrievedUser1.resourceType, 'user');
                    assert.equal(retrievedUser1.profilePath, '/user/' + retrievedUser1.id);
                    
                    // Create a test user with a UTF-8 username
                    var userId2 = TestsUtil.generateTestUserId('стремился');
                    RestAPI.User.createUser(camAdminRestContext, userId2, 'password', 'Кругом шумел', {'visibility': 'public'}, function(err, userObj2) {
                        assert.ok(!err);
                        assert.ok(userObj2);
                        
                        // Get the user
                        RestAPI.User.getUser(anonymousRestContext, userObj2.id, function(err, retrievedUser2) {
                            assert.ok(!err);
                            assert.ok(retrievedUser2);
                            assert.equal(retrievedUser2.visibility, 'public');
                            assert.equal(retrievedUser2.displayName, 'Кругом шумел');
                            assert.equal(retrievedUser2.resourceType, 'user');
                            assert.equal(retrievedUser2.profilePath, '/user/' + retrievedUser2.id);
                            callback();
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that a non-existing user cannot be retrieved
         */
        it('verify get a bad userId', function(callback) {
            // Try and get an invalid user id
            RestAPI.User.getUser(anonymousRestContext, 'totally-not-a-valid-id', function(err, retrievedUser) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!retrievedUser);
                
                // Try and get a non-existing user id
                RestAPI.User.getUser(anonymousRestContext, 'u:camtotally-not-a-valid-id', function(err, retrievedUser) {
                    assert.ok(err);
                    assert.equal(err.code, 404);
                    assert.ok(!retrievedUser);
                    callback();
                });
            });
        });
    });

    
    describe('Update user', function() {
        
        /**
         * Test that verifies that it is possible for a user to update its own basic profile, including non standard fields
         */
        it('verify update user', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'Test User', {'visibility': 'public', 'locale': 'en_GB', 'timezone': 'Europe/London'}, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                assert.equal(userObj.visibility, 'public');
                assert.equal(userObj.displayName, 'Test User');
                assert.equal(userObj.locale, 'en_GB');
                assert.equal(userObj.timezone, 'Europe/London');
                assert.equal(userObj.resourceType, 'user');
                assert.equal(userObj.profilePath, '/user/' + userObj.id);
                var testUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, testUserId, 'password');

                // Update the user
                var updateValues = {
                    'displayName': 'displayname',
                    'publicAlias': 'publicalias',
                    'visibility': 'private',
                    'locale': 'nl_NL',
                    'timezone': 'Europe/Amsterdam',
                    'non-standard-field': 'Custom data'
                };
                RestAPI.User.updateUser(testUserRestContext, userObj.id, updateValues, function (err) {
                    assert.ok(!err);

                    // Get the user's me feed
                    RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.ok(meObj);
                        assert.equal(meObj.visibility, 'private');
                        assert.equal(meObj.displayName, 'displayname');
                        assert.equal(meObj.publicAlias, 'publicalias');
                        assert.equal(meObj.extra['non-standard-field'], 'Custom data');
                        assert.equal(meObj.locale.locale, 'nl_NL');
                        assert.equal(meObj.locale.timezone.name, 'Europe/Amsterdam');
                        assert.equal(meObj.resourceType, 'user');
                        assert.equal(meObj.profilePath, '/user/' + meObj.id);

                        // Get the user's basic profile
                        RestAPI.User.getUser(testUserRestContext, userObj.id, function(err, userObj) {
                            assert.ok(!err);
                            assert.ok(userObj);
                            assert.equal(userObj.visibility, 'private');
                            assert.equal(userObj.displayName, 'displayname');
                            assert.equal(userObj.publicAlias, 'publicalias');
                            assert.equal(userObj.extra['non-standard-field'], 'Custom data');
                            assert.equal(userObj.resourceType, 'user');
                            assert.equal(userObj.profilePath, '/user/' + userObj.id);

                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that it is not possible for a user to be updated with restricted fields being set
         */
        it('verify cannot update user to tenant admin', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'Test User', {'visibility': 'public', 'locale': 'en_GB', 'timezone': 'Europe/London'}, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                assert.equal(userObj.visibility, 'public');
                assert.equal(userObj.displayName, 'Test User');
                assert.equal(userObj.locale, 'en_GB');
                assert.equal(userObj.timezone, 'Europe/London');
                assert.equal(userObj.resourceType, 'user');
                assert.equal(userObj.profilePath, '/user/' + userObj.id);
                var testUserRestContext =  TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, testUserId, 'password');
                
                // Update the user
                var updateValues = {
                    'admin:tenant': 'true'
                };

                RestAPI.User.updateUser(testUserRestContext, userObj.id, updateValues, function (err) {
                    assert.ok(err);

                    updateValues = {
                        'admin:global': 'true'
                    };

                    RestAPI.User.updateUser(testUserRestContext, userObj.id, updateValues, function (err) {
                        assert.ok(err);

                        PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), userObj.id, function(err, userObj) {
                            assert.ok(!err);
                            assert.ok(userObj);
                            assert.ok(!userObj.isTenantAdmin(global.oaeTests.tenants.cam.alias), 'Expected user to not be update-able to tenant or global admin');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that updating a user fails if no parameters are provided, a user is trying
         * to update a different user's basic profile or an anonymous user tries to update a user's profile
         */
        it('verify failed update', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'Test User', {'visibility': 'public'}, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                var testUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, testUserId, 'password');

                // Try to update the user's profile without parameters
                var updateValues = {};
                RestAPI.User.updateUser(testUserRestContext, userObj.id, updateValues, function (err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Try to update the user's profile as a different user. Create this user first
                    var updaterUserId = TestsUtil.generateTestUserId();
                    RestAPI.User.createUser(camAdminRestContext, updaterUserId, 'password', 'Test User', null, function(err, updaterUserObj) {
                        assert.ok(!err);
                        assert.ok(updaterUserObj);
                        var updateUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, updaterUserId, 'password');
                        updateValues = {
                            'displayName': 'Stinky John LOL'
                        };
                        RestAPI.User.updateUser(updateUserRestContext, userObj.id, updateValues, function (err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Try to update the user's profile as the anonymous user
                            RestAPI.User.updateUser(anonymousRestContext, userObj.id, updateValues, function (err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                                
                                // Make sure that the user's basic profile is unchanged
                                RestAPI.User.getUser(testUserRestContext, userObj.id, function(err, userObj) {
                                    assert.ok(!err);
                                    assert.ok(userObj);
                                    assert.equal(userObj.visibility, 'public');
                                    assert.equal(userObj.displayName, 'Test User');
                                    assert.equal(userObj.resourceType, 'user');
                                    assert.equal(userObj.profilePath, '/user/' + userObj.id);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

    });


    describe('User visibility', function() {
        
        /*!
         * Verifies the profile permissions of the provided user, according to the given criteria.
         *
         * @param   {RestContext}   restContext             The RestContext to use to fetch the user
         * @param   {String}        userToCheck             The id of the user to check
         * @param   {Boolean}       expectAccess            Whether or not we should expect the context have full access to the user
         * @param   {String}        expectedDisplayName     The expected display name of the user
         * @param   {String}        expectedPublicAlias     The expected public alias of the user
         * @param   {String}        expectedVisibility      The expected visibility of the user, one of 'public', 'loggedin', 'private'
         * @param   {Function}      callback                Invoked when the checks have completed. If an assertion error has occurred, this will not be invoked, rather it will be thrown to the test handler
         */
        var verifyProfilePermissions = function(restContext, userToCheck, expectAccess, expectedDisplayName, expectedPublicAlias, expectedVisibility, callback) {
            // Try to get user 1 as an anonymous user and a logged in user. Both should work
            RestAPI.User.getUser(restContext, userToCheck, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                assert.equal(userObj.visibility, expectedVisibility);
                assert.equal(userObj.displayName, expectedDisplayName);
                assert.equal(userObj.publicAlias, expectedPublicAlias);
                assert.equal(userObj.resourceType, 'user');
                // The profile path should only be present if you're allowed to view the user
                if (!expectAccess) {
                    assert.equal(userObj.profilePath, undefined);
                } else {
                    assert.equal(userObj.profilePath, '/user/' + userObj.id);
                }
                callback();
            });
        };

        /**
         * Test that verifies that user visibility settings work as expected. Public users should be visibile to everyone. Loggedin users should be
         * visible to all users, other than the anonymous user. Private user should only be visibile to the user himself. When a user is not visible,
         * only the display name should be visible
         */
        it('verify user permissions', function(callback) {
            // Create 2 public test users
            var jackUserId = TestsUtil.generateTestUserId();
            var jackOpts = {
                'visibility': 'public',
                'publicAlias': 'Jack'
            };

            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'Jack Doe', jackOpts, function(err, jack) {
                assert.ok(!err);
                assert.ok(jack);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');

                var janeUserId = TestsUtil.generateTestUserId();
                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'Jane Doe', {'visibility': 'public'}, function(err, jane) {
                    assert.ok(!err);
                    assert.ok(jane);
                    var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUserId, 'password');

                    // Try to get jack as an anonymous user and a logged in user and the user himself. All should work
                    verifyProfilePermissions(anonymousRestContext, jack.id, true, 'Jack Doe', undefined, 'public', function() {
                        verifyProfilePermissions(janeRestContext, jack.id, true, 'Jack Doe', undefined, 'public', function() {
                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'public', function() {
                            
                                // Set jack's visibility to logged in
                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'loggedin'}, function(err) {
                                    assert.ok(!err);
                                    
                                    // Try to get jack as an anonymous user and a logged in user and the user himself. The anonymous user 
                                    // should only be able to get the display name
                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'Jack', undefined, 'loggedin', function() {
                                        verifyProfilePermissions(janeRestContext, jack.id, true, 'Jack Doe', undefined, 'loggedin', function() {
                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'loggedin', function() {
                                            
                                                // Set jack's visibility to private
                                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'private'}, function(err) {
                                                    assert.ok(!err);
                                                    
                                                    // Try to get jack as an anonymous user and a logged in user and the user himself. The anonymous user 
                                                    // and the logged in user should only be able to get the display name
                                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                        verifyProfilePermissions(janeRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'private', function() {
                                                                
                                                                // Set jack's visibility to an invalid option
                                                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'non-existing'}, function(err) {
                                                                    assert.ok(err);
                                                                    
                                                                    // Make sure that the jack's visibility has not changed
                                                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                                        verifyProfilePermissions(janeRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'private', callback);
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a public user's profile is fully visible beyond the tenant scope.
         */
        it('verify public user is visible beyond tenant scope', function(callback) {
            var usernameA = TestsUtil.generateTestUserId();
            var usernameB = TestsUtil.generateTestUserId();

            // Create user in tenant A
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', {'visibility': 'public'}, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                // Create user B in GT tenant
                RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', null, function(err, userB) {
                    assert.ok(!err);
                    restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                    verifyProfilePermissions(restCtxB, userA.id, true, userA.displayName, undefined, 'public', callback);
                });
            });
        });

        /**
         * Test that verifies that a user's basic profile is hidden when their visibility is restricted to 'loggedin' users and they are
         * accessed by an authenticated user from a different tenant.
         */
        it('verify loggedin user is hidden beyond tenant scope', function(callback) {
            var usernameA = TestsUtil.generateTestUserId();
            var usernameB = TestsUtil.generateTestUserId();

            // Create user in tenant A
            var loggedInUserOpts = {
                'visibility': 'loggedin',
                'publicAlias': 'A user.'
            };

            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'LoggedIn User', loggedInUserOpts, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                // Create user B in GT tenant
                RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', null, function(err, userB) {
                    assert.ok(!err);
                    restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                    verifyProfilePermissions(restCtxB, userA.id, false, 'A user.', undefined, 'loggedin', callback);
                });
            });
        });
    });


    describe('User timezone', function() {
        
        /**
         * Test that verifies that we respect the user timezone.
         */
        it('Test timezones', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'Test User', null, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                var testUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, testUserId, 'password');

                // Change the timezone and checks its validaty
                RestAPI.User.updateUser(testUserRestContext, userObj.id, {'timezone': 'America/Argentina/ComodRivadavia'}, function(err) {
                    assert.ok(!err);
                    RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.equal(meObj.locale.timezone.name, 'America/Argentina/ComodRivadavia');
                        assert.equal(meObj.locale.timezone.offset, -3);

                        // Test another more complex timezone
                        RestAPI.User.updateUser(testUserRestContext, userObj.id, {'timezone': 'Asia/Kathmandu'}, function(err) {
                            assert.ok(!err);
                            RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                                assert.ok(!err);
                                assert.equal(meObj.locale.timezone.name, 'Asia/Kathmandu');
                                assert.equal(meObj.locale.timezone.offset, 5.75);
                                
                                // Test a non-existing timezone. This should revert back to BST
                                RestAPI.User.updateUser(testUserRestContext, userObj.id, {'timezone': 'Jurassic/Park'}, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);
                                    RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                                        assert.ok(!err);
                                        assert.equal(meObj.locale.timezone.name, 'Asia/Kathmandu');
                                        assert.equal(meObj.locale.timezone.offset, 5.75);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });

    describe('Global and tenant admin', function() {
        
        /**
         * Test that verifies that a global tenant can make a user a tenant admin. This test will use the internal APIs as there
         * is not yet a way in which admins can be set through the REST endpoints
         */
        it('verify making someone an admin', function(callback) {
            // Create 2 test users
            var jackUserId = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'Jack Doe', null, function(err, jack) {
                assert.ok(!err);
                assert.ok(jack);
                var jackContext = new Context(global.oaeTests.tenants.cam, jack);
                
                var janeUserId = TestsUtil.generateTestUserId('jane');
                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'Jane Doe', null, function(err, jane) {
                    assert.ok(!err);
                    assert.ok(jane);
                    var janeContext = new Context(global.oaeTests.tenants.cam, jane);
                
                    // Verify that the anonymous cannot make users admins
                    PrincipalsAPI.setGlobalAdmin(new Context(global.oaeTests.tenants.cam), jack.id, true, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        PrincipalsAPI.setTenantAdmin(new Context(global.oaeTests.tenants.cam), jack.id, true, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Jack will try to make himself and Jane an admin. Both should fail.
                            PrincipalsAPI.setGlobalAdmin(jackContext, jack.id, true, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                                PrincipalsAPI.setGlobalAdmin(jackContext, jane.id, true, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                                    
                                    // We make Jack a global admin
                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, jack.id, true, function(err) {
                                        assert.ok(!err);
                                        // Verify that Jack is a global admin
                                        PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.id, function(err, user) {
                                            assert.ok(!err);
                                            assert.equal(user.isGlobalAdmin(), true);
                                            assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                            assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                            jackContext = new Context(global.oaeTests.tenants.cam, user);
                                            
                                            // Jack will make Jane a global admin
                                            PrincipalsAPI.setGlobalAdmin(jackContext, jane.id, true, function(err) {
                                                assert.ok(!err);
                                                
                                                // Check that Jane is a global admin
                                                PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jane.id, function(err, user) {
                                                    assert.ok(!err);
                                                    assert.equal(user.isGlobalAdmin(), true);
                                                    assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                                    assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                                    janeContext = new Context(global.oaeTests.tenants.cam, user);
                                                    
                                                    // Revoke Jack's global admin rights
                                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, jack.id, false, function(err) {
                                                        assert.ok(!err);
                                                    
                                                        // Check that Jack is no longer an admin
                                                        PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.id, function(err, user) {
                                                            assert.ok(!err);
                                                            assert.equal(user.isGlobalAdmin(), false);
                                                            assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), false);
                                                            assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                                            jackContext = new Context(global.oaeTests.tenants.cam, user);
                                                            
                                                            // Make sure that Jack can no longer revoke the admin rights of Jane
                                                            PrincipalsAPI.setGlobalAdmin(jackContext, jane.id, false, function(err) {
                                                                assert.ok(err);
                                                                assert.equal(err.code, 401);
                                                                
                                                                // Make sure that Jane is still an admin
                                                                PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jane.id, function(err, user) {
                                                                    assert.ok(!err);
                                                                    assert.equal(user.isGlobalAdmin(), true);
                                                                    assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                                                    assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                                                    callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant admin cannot make a user a global admin.
         */
        it('verify tenant admin restrictions', function(callback) {
            // Create a test user
            var jackUserId = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'Jack Doe', null, function(err, jack) {
                assert.ok(!err);
                assert.ok(jack);
                var jackContext = new Context(global.oaeTests.tenants.cam, jack);
                
                // We make Jack a tenant admin
                PrincipalsAPI.setTenantAdmin(globalAdminContext, jack.id, true, function(err) {
                    assert.ok(!err);
                    // Verify that Jack is a tenant admin
                    PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.id, function(err, user) {
                        assert.ok(!err);
                        assert.equal(user.isGlobalAdmin(), false);
                        assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                        assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), true);
                        jackContext = new Context(global.oaeTests.tenants.cam, user);
                                
                        // Jack will try to make herself a global admin. This should fail
                        PrincipalsAPI.setGlobalAdmin(jackContext, jack.id, true, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                            // Verify that Jack is not a global admin
                            PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.id, function(err, user) {
                                assert.ok(!err);
                                assert.equal(user.isGlobalAdmin(), false);
                                assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), true);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that unknown users and groups cannot be made admins
         */
        it('verify admin parameter validation', function(callback) {
            // Try to make an invalid user an admin
            PrincipalsAPI.setTenantAdmin(globalAdminContext, 'invalid-id', true, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Try to make a non-existing user an admin
                PrincipalsAPI.setTenantAdmin(globalAdminContext, 'u:cam:non-existing', true, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 404);

                    // Try to make a group an admin
                    PrincipalsAPI.setTenantAdmin(globalAdminContext, 'g:cam:group', true, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that tenant admins can only update items inside of their own tenant.
         */
        it('Verify tenant admin separation', function(callback) {
            // We create 3 users: jack, jane and joe. Jack and Joe are in tenant A, Jane is in tenant B.
            // We promote John to a tenant admin (for A) and try to update the profile info for Jack and Jane.
            // It should only work for Jack.
            var jackUserId = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'Jack Doe', null, function(err, jack) {
                assert.ok(!err);
                assert.ok(jack);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');
                
                var joeUserId = TestsUtil.generateTestUserId('joe');
                RestAPI.User.createUser(camAdminRestContext, joeUserId, 'password', 'Joe Doe', null, function(err, joe) {
                    assert.ok(!err);
                    assert.ok(joe);
                    var joeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, joeUserId, 'password');
                    
                    var janeUserId = TestsUtil.generateTestUserId('jane');
                    RestAPI.User.createUser(gtAdminRestContext, janeUserId, 'password', 'Jane Doe', null, function(err, jane) {
                        assert.ok(!err);
                        assert.ok(jane);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, janeUserId, 'password');
                    
                        // Make Jack a tenant admin
                        RestAPI.User.setTenantAdmin(camAdminRestContext, jack.id, true, function(err) {
                            assert.ok(!err);
                            // Verify that Jack is a tenant admin
                            PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.id, function(err, user) {
                                assert.ok(!err);
                                assert.equal(user.isGlobalAdmin(), false);
                                assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), true);
                                jackContext = new Context(global.oaeTests.tenants.cam, user);

                                // Update Joe
                                var updateData = {
                                    'locale': 'en_CA',
                                    'displayName': 'Foo Bar'
                                };
                                RestAPI.User.updateUser(jackRestContext, joe.id, updateData, function(err) {
                                    assert.ok(!err);
                                    // Verify that the update has worked
                                    RestAPI.User.getMe(joeRestContext, function(err, meObj) {
                                        assert.ok(!err);
                                        assert.ok(meObj);
                                        assert.equal(meObj.displayName, 'Foo Bar');
                                        assert.equal(meObj.locale.locale, 'en_CA');
                                        assert.equal(meObj.resourceType, 'user');
                                        assert.equal(meObj.profilePath, '/user/' + meObj.id);
                                        
                                        // Try to update Jane
                                        RestAPI.User.updateUser(jackRestContext, jane.id, updateData, function(err) {
                                            assert.ok(err);
                                            // Verify that the update has not happened
                                            RestAPI.User.getMe(janeRestContext, function(err, meObj) {
                                                assert.ok(!err);
                                                assert.ok(meObj);
                                                assert.equal(meObj.displayName, 'Jane Doe');
                                                assert.equal(meObj.locale.locale, 'en_GB');
                                                assert.equal(meObj.resourceType, 'user');
                                                assert.equal(meObj.profilePath, '/user/' + meObj.id);

                                                // Disable Jack's admin status
                                                RestAPI.User.setTenantAdmin(camAdminRestContext, jack.id, false, function(err) {
                                                    assert.ok(!err);

                                                    // Verify he is no longer an admin
                                                    PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.id, function(err, user) {
                                                        assert.ok(!err);
                                                        assert.equal(user.isGlobalAdmin(), false);
                                                        assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), false);
                                                        assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

});
