/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

var OAE = require('oae-util/lib/oae');

var SearchAPI = require('oae-search');
var SearchUtil = require('oae-search/lib/util');

/**
 * _POST_ `/api/search/reindexAll`
 *
 * Administration function to reindex all data in storage.
 */
OAE.globalAdminRouter.on('post', '/api/search/reindexAll', function(req, res) {
    SearchAPI.reindexAll(req.ctx, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/**
 * _GET_ `/api/search/[searchType][/pathParam0/pathParam1/pathParam2]?[opts]`
 *
 * Perform a search for resources in the database on the tenant router.
 *
 * @param  {String}        searchType      The type of search to execute
 * @param  {Object}        [opts]          The query string parameters of the search
 * @param  {String}        [opts.q]        A full-text search that can be input to filter documents by a text match (Default: * for all documents)
 * @param  {Number}        [opts.limit]    The maximum number of results to return (Default: 10)
 * @param  {Number}        [opts.start]    The document at which to start (Default: 0)
 * @param  {String}        [opts.sort]     Which direction to sort the results. Can be one of: `asc` or `desc`. If an invalid sort value is provided, it defaults to `asc`
 * @param  {String}        [opts.scope]    Specifies if the search is cross-tenant. Can be <tenant alias> or `all`. (Default: null)
 * @return {SearchResult}                  The response, if successful, will be a search result object as defined by `SearchModel.SearchResult`
 */
OAE.tenantRouter.on('get', /\/api\/search\/([^\/]+)(\/.*)?/, function(req, res) {
    var searchType = req.params[0];
    if (searchType) {
        req.telemetryUrl = '/api/search/' + searchType;
    }
    var pathParams = req.params[1] ? _.compact(req.params[1].split('/')) : [];
    var opts = _.extend({}, req.query, SearchUtil.getSearchParams(req), {'pathParams': pathParams});

    SearchAPI.search(req.ctx, searchType, opts, function(err, result) {
        if (err) {
            res.send(err.code, err);
        } else {
            res.send(200, result);
        }
    });
}, '/api/search');

/**
 * _GET_ `/api/search/[searchType][/pathParam0/pathParam1/pathParam2]?[opts]`
 *
 * Perform a search for resources in the database on the global admin router.
 *
 * @param  {String}        searchType      The type of search to execute
 * @param  {Object}        [opts]          The query string parameters of the search
 * @param  {String}        [opts.q]        A full-text search that can be input to filter documents by a text match (Default: * for all documents)
 * @param  {Number}        [opts.limit]    The maximum number of results to return (Default: 10)
 * @param  {Number}        [opts.start]    The document at which to start (Default: 0)
 * @param  {String}        [opts.sort]     Which direction to sort the results. Can be one of: `asc` or `desc`. If an invalid sort value is provided, it defaults to `asc`
 * @param  {String}        [opts.scope]    Specifies if the search is cross-tenant. Can be <tenant alias> or `all`. (Default: null)
 * @return {SearchResult}                  The response, if successful, will be a search result object as defined by `SearchModel.SearchResult`
 */
OAE.globalAdminRouter.on('get', /\/api\/search\/([^\/]+)(\/.*)?/, function(req, res) {
    var searchType = req.params[0];
    if (searchType) {
        req.telemetryUrl = '/api/search/' + searchType;
    }
    var pathParams = req.params[1] ? _.compact(req.params[1].split('/')) : [];
    var opts = _.extend({}, req.query, SearchUtil.getSearchParams(req), {'pathParams': pathParams});

    SearchAPI.search(req.ctx, searchType, opts, function(err, result) {
        if (err) {
            res.send(err.code, err);
        } else {
            res.send(200, result);
        }
    });
}, '/api/search');
