/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var crypto = require('crypto');
var passport = require('passport');
var util = require('util');

var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var TenantsUtil = require('oae-tenants/lib/util');

/**
 * Setup the necessary authentication middleware
 *
 * @param  {express} server     An express server
 */
var setupAuthMiddleware  = module.exports.setupAuthMiddleware = function(server) {
    // Configure passport.
    server.use(passport.initialize());
    server.use(passport.session());
};

/**
 * Checks whether a provided plain-text password matches a stored hashed password
 *
 * @param  {String}     plainTextPassword   The plain-text password provided by the user
 * @param  {String}     hashedPassword      The hashed password stored for the user
 * @return {Boolean}                        True if the provided password matches the stored hashed password, false if they are different
 */
var hashAndComparePassword = module.exports.hashAndComparePassword = function(plainTextPassword, hashedPassword) {
    // Get the salt of the hashed password
    var salt = hashedPassword.split('$')[0];
    // Check if the provided password with the extracted salt is the same as the stored password
    return hashPassword(plainTextPassword, salt) === hashedPassword;
};

/**
 * Hashes a string using SHA512
 *
 * @param  {String}     password        The passwords that needs to be hashed
 * @param  {String}     salt            A random salt that will be prepended to the password for hashing (optional)
 * @return {String}                     The hashed password
 */
var hashPassword = module.exports.hashPassword = function(password, salt) {
    // Prepend a random number to prevent rainbow table attacks
    salt = salt || crypto.randomBytes(16).toString('hex');
    password = salt + password;
    return salt + '$' + crypto.createHash('sha512').update(password).digest('hex');
};

/**
 * Get the ID of the authentication strategy for the given tenant
 *
 * @param  {Tenant}     tenant          The tenant for which to create the strategy id
 * @param  {String}     strategyName    The name of the strategy
 * @return {String}                     The unique ID of the strategy for the tenant
 */
var getStrategyId = module.exports.getStrategyId = function(tenant, strategyName) {
    return util.format('%s-%s', tenant.alias, strategyName);
};

/**
 * Outputs a log message for a successful authentication
 *
 * @param  {Request}   req           The request the user used to login
 * @param  {User}      user          The user that was logged in
 * @param  {String}    strategy      The name of the strategy used for authn
 */
var logAuthenticationSuccess = module.exports.logAuthenticationSuccess = function(req, user, strategy) {
    var tenantAlias = req.tenant.alias;
    log().info({
        'login': user.id,
        'headers': req.headers,
        'tenantAdmin': user.isTenantAdmin(tenantAlias),
        'globalAdmin': user.isGlobalAdmin(),
        'tenantAlias': tenantAlias,
        'strategy': strategy
    }, 'Login for ' + user.id + ' to tenant ' + tenantAlias + ' from ' + req.headers['x-forwarded-for']);
};

/**
 * A catch-all error handler for errors that bubbled out of passport strategies.
 * When possible, the appropriate status code and message will be returned to the client.
 * If this cannot be determined, the error will be passed on to expressjs, which will make
 * the error end up at the global error handler. This means the user will be presented with
 * a 500 "An internal server error ocurred".
 * If at all possible, the authentication provider should try to catch their strategy specific
 * errors.
 *
 * Handled situations:
 *  *  The tenant admin has disabled the authentication strategy
 *  *  A set of well known passport errors were raised:
 *       - AuthenticationError
 *       - APIError
 *       - InternalOAuthError
 *
 * @param  {Request}    req     The ExpressJS request object
 * @param  {Response}   res     The ExpressJS response object
 * @param  {Function}   next    The middleware which should be executed next
 * @return {Function}           A function that can be used as part of the middleware chain
 */
var handlePassportError = module.exports.handlePassportError = function(req, res, next) {
    return function(err) {
        if (err) {
            if (err.message && err.message.indexOf('Unknown authentication strategy') === 0) {
                return res.send(401, 'This authentication strategy has been disabled');
            } else {
                log().error({'err': err}, 'An error occurred during login');

                // As of passport v0.2.0, passport strategies can use an authentication error which
                // contains an HTTP status code and message that can be returned to the client
                if (err.name === 'AuthenticationError') {
                    return res.send(err.status, err.message);

                // Some strategies proxy the API HTTP status code
                } else if (err.name === 'APIError') {
                    return res.send(err.code, err.message);

                // If someone is manually constructing authentication callback URLs
                } else if (err.name === 'InternalOAuthError') {
                    log().warn({'err': err, 'host': req.host}, 'Tampering detected with OAuth parameters');
                    return res.send(401, 'Authentication denied');
                }
            }
        }

        // If no error ocurred or an error ocurred that we can't deal with, we pass it up the chain
        next(err);
    };
};

/**
 * This function should be executed when the user returns from an external authentication resource
 * and authentication has succeeded. It will print a message to the logs, establish a user session
 * and redirect the user to the me page.
 *
 * @param  {Request}    req         The request
 * @param  {Response}   res         The response
 * @param  {User}       user        The user that logged in
 * @param  {String}     strategy    The external strategy that was used to log in
 * @param  {Function}   next        The next function in the middleware chain. Will only be used on errors
 * @api private
 */
var externalSuccessCallback = module.exports.externalSuccessCallback = function(req, res, user, strategy, next) {
    logAuthenticationSuccess(req, user, strategy);
    req.logIn(user, function(err) {
        if (err) {
            return next(err);
        }
        res.redirect('/me');
    });
};

/**
 * Constructs the callback URL for a given strategy by doing a look-up whether or not the tenant is using https.
 * ex: Suppose the passed in tenant uses https and the passed in strategy is 'google', the returned url will be:
 *     https://<tenant host>/api/auth/google/callback
 *
 * @param  {Tenant} tenant      The tenant object
 * @param  {String} strategy    The strategy for this callback url
 * @return {String}             An authentication callback url
 */
var constructCallbackUrl = module.exports.constructCallbackUrl = function(tenant, strategy) {
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    return baseUrl + '/api/auth/' + strategy + '/callback';
};
