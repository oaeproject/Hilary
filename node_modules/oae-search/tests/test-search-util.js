/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var Context = require('oae-context').Context;
var TestsUtil = require('oae-tests/lib/util');

var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

describe('Search Util', function() {

    describe('#getSearchParams', function() {

        /**
         * Test that verifies falsey and empty values to getSearchParams
         */
        it('verify unspecified query params', function(callback) {
            var params = SearchUtil.getSearchParams();
            assert.ok(_.isObject(params));
            assert.ok(_.isEmpty(params));

            params = SearchUtil.getSearchParams(null);
            assert.ok(_.isObject(params));
            assert.ok(_.isEmpty(params));

            params = SearchUtil.getSearchParams({});
            assert.ok(_.isObject(params));
            assert.ok(_.isEmpty(params));

            return callback();
        });

        /**
         * Test that verifies all parameters are extracted from the hash.
         */
        it('verify all values', function(callback) {
            var params = SearchUtil.getSearchParams({
                query: {
                    'q': 'qVal',
                    'start': 'startVal',
                    'limit': 'limitVal',
                    'sort': 'sortVal',
                    'rogue': 'rogueVal'
                }
            });

            assert.equal(params.q, 'qVal');
            assert.equal(params.start, 'startVal');
            assert.equal(params.limit, 'limitVal');
            assert.equal(params.sort, 'sortVal');
            assert.equal(params.rogue, undefined);
            return callback();
        });

        /**
         * Test that verifies a hash with no values can be specified without an error.
         */
        it('verify empty query params', function(callback) {
            var params = SearchUtil.getSearchParams({query:{}});

            assert.equal(params.q, undefined);
            assert.equal(params.start, undefined);
            assert.equal(params.limit, undefined);
            assert.equal(params.sort, undefined);
            assert.equal(params.rogue, undefined);
            return callback();
        });
    });

    describe('#filterOr', function() {

        /**
         * Test that verifies a single parameter filter object is returned in the filter
         */
        it('verify one param', function(callback) {
            var filter = SearchUtil.filterOr({'param': 'Arbitrary object should be returned'});
            assert.ok(filter);
            assert.ok(!filter.or);
            assert.equal(filter.param, 'Arbitrary object should be returned');
            return callback();
        });

        /**
         * Test that verifies two filter object are returned in the filter
         */
        it('verify two params', function(callback) {
            var filter = SearchUtil.filterOr({'one': 'Arbitrary object should be returned'}, {'other': 'Arbitrary object should be returned'});
            assert.ok(filter);
            assert.ok(filter.or);
            assert.equal(filter.or[0].one, 'Arbitrary object should be returned');
            assert.equal(filter.or[1].other, 'Arbitrary object should be returned');
            return callback();
        });

        /**
         * Test that verifies parameters that are a mix of unspecified and filter objects returns only the filter
         * objects. Order is not important.
         */
        it('verify mixed null params', function(callback) {
            var filter = SearchUtil.filterOr(null, {'key': 'value'}, undefined, {'key': 'value'});
            assert.ok(filter);
            assert.ok(filter.or);
            assert.equal(filter.or.length, 2);
            assert.equal(filter.or[0].key, 'value');
            assert.equal(filter.or[1].key, 'value');
            return callback();
        });

        /**
         * Test that verifies no filter object parameters results in an unspecified value being returned
         */
        it('verify empty params', function(callback) {
            assert.ok(!SearchUtil.filterOr());
            return callback();
        });
    });

    describe('#filterAnd', function() {

        /**
         * Test that verifies a single parameter filter object is returned in the filter
         */
        it('verify one param', function(callback) {
            var filter = SearchUtil.filterAnd({'param': 'Arbitrary object should be returned'});
            assert.ok(filter);
            assert.ok(!filter.and);
            assert.equal(filter.param, 'Arbitrary object should be returned');
            return callback();
        });

        /**
         * Test that verifies a single parameter filter object is returned in the filter
         */
        it('verify two params', function(callback) {
            var filter = SearchUtil.filterAnd({'one': 'Arbitrary object should be returned'}, {'other': 'Arbitrary object should be returned'});
            assert.ok(filter);
            assert.ok(filter.and);
            assert.equal(filter.and[0].one, 'Arbitrary object should be returned');
            assert.equal(filter.and[1].other, 'Arbitrary object should be returned');
            return callback();
        });

        /**
         * Test that verifies parameters that are a mix of unspecified and filter objects returns only the filter
         * objects. Order is not important.
         */
        it('verify mixed null params', function(callback) {
            var filter = SearchUtil.filterAnd(null, {'key': 'value'}, undefined, {'key': 'value'});
            assert.ok(filter);
            assert.ok(filter.and);
            assert.equal(filter.and.length, 2);
            assert.equal(filter.and[0].key, 'value');
            assert.equal(filter.and[1].key, 'value');
            return callback();
        });

        /**
         * Test that verifies no filter object parameters results in an unspecified value being returned
         */
        it('verify empty params', function(callback) {
            assert.ok(!SearchUtil.filterAnd());
            return callback();
        });
    });

    describe('#filterNot', function() {

        /**
         * Test that verifies a filter object is returned wrapped in a 'not' filter
         */
        it('verify a not filter', function(callback) {
            var filter = SearchUtil.filterNot({'key': 'value'});
            assert.ok(filter);
            assert.ok(filter.not);
            assert.equal(filter.not.key, 'value');
            return callback();
        });

        /**
         * Test that verifies an falsey value is returned when specifying a falsey parameter to filterNot
         */
        it('verify falsey not filter', function(callback) {
            assert.ok(!SearchUtil.filterNot());
            return callback();
        });
    });

    describe('#filterTerms', function() {

        /**
         * Test that verifies a single parameter filter object is returned in the filter
         */
        it('verify one term', function(callback) {
            var filter = SearchUtil.filterTerms('key', ['value']);
            assert.ok(filter);
            assert.ok(filter.terms);
            assert.equal(filter.terms.key.length, 1);
            assert.equal(filter.terms.key[0], 'value');
            return callback();
        });

        /**
         * Test that verifies filter terms with unspecified terms array returns a falsey result
         */
        it('verify unspecified term values', function(callback) {
            assert.ok(!SearchUtil.filterTerms('key'));
            return callback();
        });

        /**
         * Test that verifies filter terms with empty terms array returns a falsey result
         */
        it('verify empty term values', function(callback) {
            assert.ok(!SearchUtil.filterTerms('key', []));
            return callback();
        });
    });

    describe('#filterTerm', function() {

        /**
         * Test that verifies a single parameter filter object is returned in the filter
         */
        it('verify with a term', function(callback) {
            var filter = SearchUtil.filterTerm('key', 'value');
            assert.ok(filter);
            assert.ok(filter.term);
            assert.equal(filter.term.key, 'value');
            return callback();
        });

        /**
         * Test that verifies filter terms with unspecified terms array returns a falsey result
         */
        it('verify unspecified term value', function(callback) {
            assert.ok(!SearchUtil.filterTerm('key'));
            return callback();
        });
    });

    describe('#filterResources', function() {

        /**
         * Test that verifies creating a resources filter
         */
        it('verify creating a resource filter', function(callback) {
            // Ensure unspecified resource types searches all
            var filterUnspecifiedResources = SearchUtil.filterResources();
            assert.ok(filterUnspecifiedResources.term);
            assert.equal(filterUnspecifiedResources.term._type, 'resource');

            // Ensure empty resource types searches all
            var filterEmptyResources = SearchUtil.filterResources([]);
            assert.ok(filterUnspecifiedResources.term);
            assert.equal(filterUnspecifiedResources.term._type, 'resource');

            // Sanity check with one resource type
            var filterOneResource = SearchUtil.filterResources(['content']);
            assert.ok(filterOneResource.and);
            assert.equal(filterOneResource.and[0].term._type, 'resource');
            assert.equal(filterOneResource.and[1].terms.resourceType[0], 'content');

            return callback();
        });
    });

    describe('#filterExplicitAccess', function() {

        /**
         * Test that verifies anonymous and global admin user have no explicit access
         */
        it('verify anonymous and global admin user receive no filter for explicit access', function(callback) {
            SearchUtil.filterExplicitAccess(TestsUtil.createGlobalAdminContext(), false, function(err, filter) {
                assert.ok(!err);
                assert.ok(!filter);

                SearchUtil.filterExplicitAccess(new Context(global.oaeTests.tenants.cam), false, function(err, filter) {
                    assert.ok(!err);
                    assert.ok(!filter);
                    return callback();
                });
            });
        });
    });

    describe('#createHasChildQuery', function() {

        /**
         * Test that verifies creating a child query
         */
        it('verify creating a has_child query', function(callback) {

            // Ensure specifying no query string results in no query object
            assert.ok(!SearchUtil.createHasChildQuery('type', null, 'scoreType'));

            var filter = SearchUtil.createHasChildQuery('type', 'childQuery', 'scoreType');
            assert.ok(filter.has_child);

            assert.equal(filter.has_child.type, 'type');
            assert.equal(filter.has_child.query, 'childQuery');
            assert.equal(filter.has_child.score_type, 'scoreType');
            return callback();
        });
    });

    describe('#createQuery', function() {

        /**
         * Test that verifies creating a query
         */
        it('verify createQuery', function(callback) {
            // Sanity check creating with an object
            SearchUtil.createQuery({});

            assert.throws(function() { SearchUtil.createQuery(); });
            assert.throws(function() { SearchUtil.createQuery(null); });
            return callback();
        });
    });

    describe('Others', function() {

        /**
         * Test that verifies valid values, invalid values, emptyvalues, null and undefined for SearchUtil.getQueryParam
         */
        it('verify getQueryParam', function(callback) {
            assert.equal(SearchUtil.getQueryParam('cats', 'dogs'), 'cats');
            assert.equal(SearchUtil.getQueryParam('cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam('', 'cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam('', ''), SearchConstants.query.ALL);
            assert.equal(SearchUtil.getQueryParam(null, 'cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam(null, null), SearchConstants.query.ALL);
            assert.equal(SearchUtil.getQueryParam(undefined, 'cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam(), SearchConstants.query.ALL);
            return callback();
        });

        /**
         * Test that verifies valid values, invalid values, emptyvalues, null and undefined for SearchUtil.getSortParam
         */
        it('verify getSortParam', function(callback) {
            var validType = SearchConstants.sort.ASC;
            var validType2 = SearchConstants.sort.DESC;

            assert.equal(SearchUtil.getSortParam(validType, validType2), validType);
            assert.equal(SearchUtil.getSortParam(validType), validType);
            assert.equal(SearchUtil.getSortParam('not-valid', validType), validType);
            assert.equal(SearchUtil.getSortParam('not-valid', 'not-valid'), SearchConstants.sort.ASC);
            assert.equal(SearchUtil.getSortParam(validType), validType);
            assert.equal(SearchUtil.getSortParam(null, validType), validType);
            assert.equal(SearchUtil.getSortParam(null, null), SearchConstants.sort.ASC);
            assert.equal(SearchUtil.getSortParam(validType), validType);
            assert.equal(SearchUtil.getSortParam(undefined, validType), validType);
            assert.equal(SearchUtil.getSortParam(), SearchConstants.sort.ASC);
            return callback();
        });

        /**
         * Test that verifies valid values, invalid values, empty values and default values for SearchUtil.getScopeParam
         */
        it('verify getScopeParam', function(callback) {
            var tenantAlias = global.oaeTests.tenants.cam.alias;
            assert.equal(SearchUtil.getScopeParam(), SearchConstants.general.SCOPE_TENANT);
            assert.equal(SearchUtil.getScopeParam('invalid'), SearchConstants.general.SCOPE_TENANT);
            assert.equal(SearchUtil.getScopeParam('invalid', 'invalid'), SearchConstants.general.SCOPE_TENANT);
            assert.equal(SearchUtil.getScopeParam('invalid', tenantAlias), tenantAlias);
            assert.equal(SearchUtil.getScopeParam(tenantAlias), tenantAlias);
            assert.equal(SearchUtil.getScopeParam(tenantAlias, SearchConstants.general.SCOPE_ALL), tenantAlias);
            assert.equal(SearchUtil.getScopeParam(SearchConstants.general.SCOPE_ALL, tenantAlias), SearchConstants.general.SCOPE_ALL);
            assert.equal(SearchUtil.getScopeParam(SearchConstants.general.SCOPE_NETWORK, tenantAlias), SearchConstants.general.SCOPE_NETWORK);
            assert.equal(SearchUtil.getScopeParam(SearchConstants.general.SCOPE_TENANT, tenantAlias), SearchConstants.general.SCOPE_TENANT);
            return callback();
        });
    });
});
