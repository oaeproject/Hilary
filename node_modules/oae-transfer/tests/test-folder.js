/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthzAPI = require('oae-authz');
var RestAPI = require('oae-rest');
var FolderAPI = require('oae-folders');
var FoldersTestUtil = require('oae-folders/lib/test/util');

var TestsUtil = require('oae-tests');
var TransferTestUtil = require('oae-transfer/lib/test/util');

describe('Transfer-folder', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });

    describe('Account transfer impact on folders', function() {
        /**
         * Test that verify if transfer find the good manager
         */
        it('verify if the members associated to the content being moved are correctly found during a transfer', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate folder
                    FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'private', [userOrigin, orodan], [stuartf], function(createdFolder) {
                        assert.ok(!err);
                        // Create list of members
                        var membersListReal = [];
                        membersListReal.push(stuartf.user.id);
                        membersListReal.push(orodan.user.id);
                        membersListReal.push(mrvisser.user.id);
                        // Create and make transfer
                        TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                            assert.ok(transfer);
                            TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, members) {
                                assert.ok(!err);
                                // Keep only id from the members list
                                var membersList = [];
                                _.each(members, function(i) {
                                    membersList.push(i.profile.principalId);
                                });
                                // Sort lists to compare
                                membersList.sort();
                                membersListReal.sort();
                                // Compare links id
                                assert.deepEqual(membersList, membersListReal);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer give the the right permissions to the target user
         */
        it('verify a user gets the correct permissions on a content after a transfer from a tenant he had no permissions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate folder
                    FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'private', [userOrigin], [], function(createdFolder) {
                        assert.ok(createdFolder);
                        AuthzAPI.hasRole(userTarget.user.id, createdFolder.groupId, 'manager', function(err, hasRole) {
                            assert.ok(!err);
                            assert.equal(hasRole, false);
                            TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasRole(userTarget.user.id, createdFolder.groupId, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * verify the case A transfer to B, A is a manager and B is a viewer : the role will be update
         */
        it('verify a user gets the correct permissions on a content after a transfer from a tenant he had lower permissions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate folder
                    FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'private', [userOrigin], [userTarget], function(createdFolder) {
                        assert.ok(createdFolder);
                        TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                            assert.ok(transfer);
                            TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                assert.ok(!err);
                                // Verify the role
                                AuthzAPI.hasRole(userTarget.user.id, createdFolder.groupId, 'manager', function(err, hasRole) {
                                    assert.equal(hasRole, true);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * verify the case A transfer to B, A is a viewer and B is a manager : the role will not be update
         */
        it('verify a user gets the correct permissions on a content after a transfer from a tenant he had higher permissions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate folder
                    FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'private', [userTarget], [userOrigin], function(createdFolder) {
                        assert.ok(createdFolder);
                        TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                            assert.ok(transfer);
                            TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, members) {
                                assert.ok(!err);
                                // Verify the role
                                AuthzAPI.hasRole(userTarget.user.id, createdFolder.groupId, 'manager', function(err, hasRole) {
                                    assert.equal(hasRole, true);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if a file inside a folder is transfered 
         */
        it('verify that the target have access to the file inside the folder after the transfer', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate folder
                    FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'private', [userOrigin], [], function(createdFolder) {
                        assert.ok(createdFolder);
                        // Create files
                        TransferTestUtil.generateFileOnFolder(mrvisser.restContext, 'private', createdFolder.id, null, function(err, mrvisserfile) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userOrigin.user.id, createdFolder.groupId, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.equal(hasRole, true);
                                AuthzAPI.hasRole(userOrigin.user.id, mrvisserfile.id, 'viewer', function(err, hasRole) {
                                    assert.ok(!err);
                                    assert.equal(hasRole, true);
                                    TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                        assert.ok(transfer);
                                        TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                            assert.ok(!err);
                                            // Verify the role
                                            AuthzAPI.hasRole(userTarget.user.id, createdFolder.groupId, 'manager', function(err, hasRole) {
                                                assert.equal(hasRole, true);
                                                AuthzAPI.hasRole(userTarget.user.id, mrvisserfile.id, 'viewer', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies whether an account transfer correctly moves all the elements to the new library
         */
        it('verify if transfer works in all cases of a folders', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, simong, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 3, function(err, users, stuartf, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate folders
                    FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'loggedin', [userOrigin], [], function(mrvisserfolder1) {
                        assert.ok(mrvisserfolder1);
                        FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'loggedin', [], [userOrigin], function(mrvisserfolder2) {
                            assert.ok(mrvisserfolder2);
                            FoldersTestUtil.assertCreateFolderSucceeds(mrvisser.restContext, 'test displayName', 'test description', 'loggedin', [], [], function(mrvisserfolder3) {
                                assert.ok(mrvisserfolder3);
                                FoldersTestUtil.assertCreateFolderSucceeds(stuartf.restContext, 'test displayName', 'test description', 'private', [userOrigin], [], function(stuartffolder1) {
                                    assert.ok(stuartffolder1);
                                    FoldersTestUtil.assertCreateFolderSucceeds(stuartf.restContext, 'test displayName', 'test description', 'private', [], [userOrigin], function(stuartffolder2) {
                                        assert.ok(stuartffolder2);
                                        FoldersTestUtil.assertCreateFolderSucceeds(stuartf.restContext, 'test displayName', 'test description', 'private', [], [], function(stuartffolder3) {
                                            assert.ok(stuartffolder3);
                                            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [userOrigin], [], function(simongfolder1) {
                                                assert.ok(simongfolder1);
                                                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [userOrigin], function(simongfolder2) {
                                                    assert.ok(simongfolder2);
                                                    FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(simongfolder3) {
                                                        assert.ok(simongfolder3);
                                                        FoldersTestUtil.assertCreateFolderSucceeds(orodan.restContext, 'test displayName', 'test description', 'private', [userTarget], [], function(orodanfolder1) {
                                                            assert.ok(orodanfolder1);
                                                            FoldersTestUtil.assertCreateFolderSucceeds(orodan.restContext, 'test displayName', 'test description', 'private', [], [userTarget], function(orodanfolder2) {
                                                                assert.ok(orodanfolder2);
                                                                FoldersTestUtil.assertCreateFolderSucceeds(orodan.restContext, 'test displayName', 'test description', 'private', [], [], function(orodanfolder3) {
                                                                    assert.ok(orodanfolder3);
                                                                    // Make list of folder to compare
                                                                    RestAPI.Folders.getFoldersLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                        var listFoldersBefore = _.map(result.results, function(element) { 
                                                                            return element.id; 
                                                                        });
                                                                        RestAPI.Folders.getFoldersLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                            listFoldersBefore = listFoldersBefore.concat(_.map(result.results, function(element) { 
                                                                                return element.id; 
                                                                            }));
                                                                            TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                                                                assert.ok(transfer);
                                                                                TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                                                                    assert.ok(!err);
                                                                                    //Verify that all folders concerned by the trasnfer are in the library of userTarget
                                                                                    RestAPI.Folders.getFoldersLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                        var listFoldersTargetAfter = _.map(result.results, function(element) { 
                                                                                            return element.id; 
                                                                                        });
                                                                                        // Sort lists to compare
                                                                                        listFoldersTargetAfter.sort();
                                                                                        listFoldersBefore.sort();
                                                                                        // Compare folders
                                                                                        assert.deepEqual(listFoldersTargetAfter, listFoldersBefore);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });
});
