/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var mkdirp = require('mkdirp');
var Path = require('path');
var ShortId = require('shortid');
var util = require('util');

var Cassandra = require('oae-util/lib/cassandra');
var Config = require('oae-config').config('oae-content');
var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('local-storage');
var Revision = require('oae-content/lib/model').Revision;
var TempFile = require('oae-util/lib/tempfile');
var Validator = require('oae-util/lib/validator').Validator;

var BackendUtil = require('./util');

var _rootDir = null;

/**
 * An implementation that will store files on a local directory.
 * Unless the directory you're writing to is a mounted NFS/Samba share,
 * you probably don't want to use this in production as it would restrict
 * you from scaling your app servers horizontally.
 */


/**
 * Initializes the local storage backend with its root directory.
 *
 * @param  {String}   rootDir  The directory where files can be stored.
 * @param  {Function} callback Standard callback method.
 */
var init = module.exports.init = function(rootDir, callback) {
    _rootDir = Path.resolve(rootDir);
    _ensureDirectoryExists(_rootDir, function(err) {
        if (err) {
            log().error({'dir': _rootDir, 'err': err}, 'Could not create/find the local storage directory.');
            return callback(err);
        }
        callback();
    });
};

/**
 * Get the root directory where files will be stored.
 *
 * @return {String} The root directory where files will be stored.
 */
var getRootDirectory = module.exports.getRootDirectory = function() {
    return _rootDir;
};


//////////////////////
// Storage methods. //
//////////////////////

/**
 * @borrows Interface.store as Local.store
 */
var store = module.exports.store = function(ctx, file, options, callback) {
    options = options || {};

    // Generate the uri for this file.
    // We can use this uri later to retrieve it.
    var uri = BackendUtil.generateUri(file, options);

    // Get the paths on disk where we'll store the file.
    var destPath = util.format('%s/%s', _rootDir, uri);
    var destDir = Path.dirname(destPath);

    // Make sure the directory tree exists by creating them if necessary.
    _ensureDirectoryExists(destDir, function(err) {
        if (err) {
            log().error({'err': err}, 'Error ensuring directories exist %s', destDir);
            return callback(err);
        }

        // Move the file.
        log().trace('Moving %s to %s.', file.path, destPath);
        IO.moveFile(file.path, destPath, function(err) {
            if (err) {
                log().error({'err': err}, 'Error moving %s to %s', file.path, destPath);
                return callback(err);
            }
            callback(null, 'local:' + uri);
        });
    });
};

/**
 * @borrows Interface.get as Local.get
 */
var get = module.exports.get = function(ctx, uri, callback) {
    // The file is stored at:
    var path = util.format("%s/%s", _rootDir, uri.split(':')[1]);

    // Copy it to a temp folder.
    var filename = Path.basename(path);
    var tmp = TempFile.createTempFile({'suffix': filename});
    IO.copyFile(path, tmp.path, function(err) {
        if (err) {
            log().error({'err': err}, 'Error getting %s', path);
            return callback(err);
        }

        // Get the file size and pass it on.
        tmp.update(callback);
    });
};

/**
 * @borrows Interface.remove as Local.remove
 */
var remove = module.exports.remove = function(ctx, uri, callback) {
    // The file is stored at:
    var path = util.format("%s/%s", _rootDir, uri.split(':')[1]);

    // Unlink it:
    fs.unlink(path, function(err) {
        if (err) {
            log().error({'err': err}, 'Error removing %s', path);
            return callback({'code': 500, 'msg': 'Unable to remove the file: ' + err});
        }
        callback(null);
    });
};

/**
 * @borrows Interface.getDownloadLink as Local.getDownloadLink
 */
var getDownloadLink = module.exports.getDownloadLink = function(ctx, uri) {
    return {'code':204, 'url': '/files/' + uri.split(':')[1]};
};

/////////////////////
// Private methods //
/////////////////////

/**
 * Creates the directory structure and applies the correct file mode.
 * @param {String}   dir            The absolute path to the directory that needs to exist.
 * @param {Function} callback       A callback method.
 * @param {Object}   callback.err   An error object (if any)
 * @api private
 */
var _ensureDirectoryExists = function(dir, callback) {
    mkdirp(dir, function(err, made) {
        if (err) {
            return callback({'code': 500, 'msg': err});
        }
        callback();
    });
};
