var OAE = require('oae-util/lib/OAE');
var api = require('oae-tenants/lib/api');
var schema = require('oae-tenants/lib/schema');

var TEST_TENANT_PORTS = {
    'DEFAULT': 2001,
    'testCreateTenant': 2002,
    'testCannotCreateDuplicateAlias': 2003
}

module.exports.setUp = function(callback) {
    OAE.initializeKeySpace(function() {
        schema.dropSchema(function(err) {
            if (err) {
                throw err;
            }
            schema.ensureSchema(function(err) {
                if (err) {
                    throw err;
                }

                api.createTenant('default', 'Default', 'Default Tenant', TEST_TENANT_PORTS['DEFAULT'], function(tenant, err) {
                    if (err) {
                        throw err;
                    }
                    callback();
                });
            });
        });
    });
};

module.exports.tearDown = function(callback) {
    schema.dropSchema(function(err) {
        if (err) {
            throw err;
        }
        callback();
    });
};

// Verify that a tenant can be accessed by their mapped port
module.exports.testGetTenantByPort = function(test) {
    test.expect(4);

    api.getTenantByPort(2001, function(tenant, err) {
        test.ok(!err);
        test.equal(2001, tenant.port);
        test.equal('default', tenant.alias);
        test.equal('Default', tenant.name);
        test.done();
    });
};

// Verify that a tenant can be accessed by their mapped alias
module.exports.testGetTenantByAlias = function(test) {
    test.expect(4);

    api.getTenantByAlias('default', function(tenant, err) {
        test.ok(!err);
        test.equal(2001, tenant.port);
        test.equal('default', tenant.alias);
        test.equal('Default', tenant.name);
        test.done();
    });
};

// Verify that a tenant is correctly created
module.exports.testCreateTenant = function(test) {
    test.expect(11);

    api.createTenant('testCreateTenant', 'Test Tenant', 'A tenant for testing', TEST_TENANT_PORTS['testCreateTenant'], function(tenant, err) {
        console.log(err);
        test.ok(!err);

        test.equal('testCreateTenant', tenant.alias);
        test.equal('Test Tenant', tenant.name);
        test.equal('A tenant for testing', tenant.description);
        test.equal(TEST_TENANT_PORTS['testCreateTenant'], tenant.port);

        api.getTenantByPort(tenant.port, function(tenant, err) {
            test.ok(!err);
            test.ok(tenant);

            test.equal('testCreateTenant', tenant.alias);
            test.equal('Test Tenant', tenant.name);
            test.equal('A tenant for testing', tenant.description);
            test.equal(TEST_TENANT_PORTS['testCreateTenant'], tenant.port);
            test.done();
        });
    });
};

// verify that a tenant cannot be created with a duplicate port
module.exports.testCannotCreateDuplicatePort = function(test) {
    test.expect(4);

    api.createTenant('testCannotCreateDuplicatePort', 'Test Tenant', 'A tenant for testing', 2001, function(tenant, err) {
        test.ok(tenant === null);
        test.ok(err);

        OAE.runQuery('select * from Tenant where port = ?', [2001], function(err, rows) {
            test.ok(!err);
            test.equal(1, rows.rowCount());
            test.done();
        });
    });
};

// verify that a tenant cannot be created with a duplicate alias
module.exports.testCannotCreateDuplicateAlias = function(test) {
    test.expect(4);

    api.createTenant('default', 'Test Tenant', 'A tenant for testing', TEST_TENANT_PORTS['testCannotCreateDuplicateAlias'], function(tenant, err) {
        test.ok(tenant === null);
        test.ok(err);

        OAE.runQuery('select * from Tenant where port = ?', [TEST_TENANT_PORTS['testCannotCreateDuplicateAlias']], function(err, rows) {
            test.equal(1, rows.rowCount());
            test.ok(!err);
            test.done();
        });
    });
};

