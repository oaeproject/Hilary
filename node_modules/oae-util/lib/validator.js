/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var time = require('time');
var Validator = module.exports.Validator = require('validator').Validator;

/** It's a bit tricky to test timezones as each OS handles this differently.
 * For instance, it's possible to set the timezone `Brussels` on OS X, but it is
 * not valid to do this on Linux. Therefor we grab the list of server-supported
 * timezones and validate against that.
 */
var validTimeZones = {};
time.listTimezones(function(err, timezones) {
    for (var i = 0; i < timezones.length; i++) {
        validTimeZones[timezones[i]] = true;
    }
});

/**
 * Wrapper function around node-validator that makes sure that a validation
 * Failure doesn't throw an error and just collects all of the errors
 * @param {Object}  msg     Error that should be recorded if the validation fails
 */
Validator.prototype.error = function (msg) {
    this._errors.push(msg);
};

/**
 * Wrapper function around node-validator that retrieves all of the validation
 * errors that have been encountered for a given Validator instance
 * @returns {Array<Object>}     Array containing all of the validation errors
 */
Validator.prototype.getErrors = function () {
    if (this._errors.length > 0) {
        return this._errors;
    } else {
        return null;
    }
};

/**
 * @return {Object} The first error object in this validator or null if no errors were found.
 */
Validator.prototype.getFirstError = function () {
    if (this._errors.length > 0) {
        return this._errors[0];
    } else {
        return null;
    }
};

/**
 * Check whether or not a given Validator instance has seen any validation errors
 * @returns {Boolean}     Returns true when validation errors have occured and false otherwise
 */
Validator.prototype.hasErrors = function () {
    return this._errors.length ? true : false;
};

///////////////////////
// Custom validators //
///////////////////////

/**
 * Check whether or not a context represents a logged in user
 * @param {Context} ctx   Context object that needs to be checked for validity
 */
Validator.prototype.isLoggedInUser = function(ctx) {
    if (!_.isObject(ctx)) {
        this.error(this.msg || 'An empty context has been passed in');
    } else if (!_.isObject(ctx.tenant()) || !ctx.tenant().alias) {
        this.error(this.msg || 'An invalid tenant has been passed in');
    } else if (!_.isObject(ctx.user()) || !ctx.user().id) {
        this.error(this.msg || 'The user is not logged in');
    }
    return this;
};

Validator.prototype.isObject = function(obj) {
    if (!_.isObject(obj)) {
        this.error(this.msg || 'A non-object has been passed in');
    }
    return this;
};

/**
 * Checks whether or not the provided string is a valid time zone.
 * Some OS allow you to set any timezone, others only values from a fixed list. 
 * We retrieve the list of "known" timezones at server startup and only accept values
 * out of that list (and UTC as the servers will be set to UTC.)
 */
Validator.prototype.isValidTimeZone = function() {
    if (this.str !== 'UTC' && !validTimeZones[this.str]) {
        this.error(this.msg || 'Invalid timezone');
    }
    return this;
}
