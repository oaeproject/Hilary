/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var passport = require('passport');

var OAE = require('oae-util/lib/oae');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');



////////////////////////////////////
////////////////////////////////////
// COMMON AUTHENTICATION HANDLERS //
////////////////////////////////////
////////////////////////////////////

/**
 * Logs out of the current session.
 *
 * @param  {Request}    req     The express request object
 * @param  {Response}   res     The express response object
 * @api private
 */
var _handleLogout = function(req, res) {
    req.telemetryUrl = '/api/auth/logout';
    req.logOut();
    res.send(200);
};

/**
 * Performs local authentication.
 *
 * @param  {Request}    req     The express request object
 * @param  {Response}   res     The express response object
 * @api private
 */
var _handleLocalAuthentication = function(req, res, next) {
    // This callback only gets called when we log in succesfully.
    req.telemetryUrl = '/api/auth/login';
    return res.send(200, req.user);
};

var _handlePassportError = function(req, res, next) {
    return function(err) {
        if (err.message.indexOf('no strategy registered under name') === 0) {
            return res.send(401, 'This authentication strategy has been disabled.');
        }

        // Not much we can do at this point.
        next(err);
    };
};



//////////////////////////////////
//////////////////////////////////
// GLOBAL TENANT AUTHENTICATION //
//////////////////////////////////
//////////////////////////////////

OAE.globalAdminServer.post('/api/auth/login', passport.authenticate('local'), _handleLocalAuthentication);
OAE.globalAdminServer.post('/api/auth/logout', _handleLogout);



////////////////////////////////
////////////////////////////////
// USER TENANT AUTHENTICATION //
////////////////////////////////
////////////////////////////////

OAE.tenantServer.post('/api/auth/logout', _handleLogout);


///////////
// LOCAL //
///////////

OAE.tenantServer.post('/api/auth/login', passport.authenticate('local'), _handleLocalAuthentication);

/////////////////
// SIGNED AUTH //
/////////////////

OAE.globalAdminServer.get('/api/auth/signed', function(req, res) {
    req.telemetryUrl = '/api/auth/signed';
    AuthenticationAPI.getSignedToken(req.ctx, req.query.tenant, function(err, data) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(data);
    });
});

OAE.tenantServer.post('/api/auth/signed', function(req, res, next) {
    req.telemetryUrl = '/api/auth/signed';
    passport.authenticate('signed', { 'successRedirect': '/me',
                                      'failureRedirect': '/' })(req, res, next);
});

/**
 * This function should be executed when the user returns from an external authentication resource
 * and authentication has succeeded. It will print a message to the logs, establish a user session
 * and redirect the user to the me page.
 *
 * @param  {Request}    req         The request
 * @param  {Response}   res         The response
 * @param  {User}       user        The user that logged in.
 * @param  {String}     strategy    The external strategy that was used to log in.
 * @param  {Function}   next        The next function in the middleware chain. Will only be used on errors.
 * @api private
 */
var _externalSuccessCallback = function(req, res, user, strategy, next) {
    AuthenticationUtil.logAuthnSuccess(req, user, strategy);
    req.logIn(user, function(err) {
        if (err) {
            return next(err);
        }
        res.redirect('/me');
    });
};

//////////////
//  GOOGLE  //
//////////////

/*!
 * Redirect the user to Google for authentication. When complete, Google
 * will redirect the user back to the application at
 * /api/auth/google/return
 */
OAE.tenantServer.get('/api/auth/google', function(req, res, next) {
    req.telemetryUrl = '/api/auth/google';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.GOOGLE);
    passport.authenticate(strategyId)(req, res, _handlePassportError(req, res, next));
});

/*!
 * Google will redirect the user to this URL after authentication. Finish
 * the process by verifying the assertion. If valid, the user will be
 * logged in. Otherwise, authentication has failed.
 */
OAE.tenantServer.get('/api/auth/google/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/google/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.GOOGLE);
    passport.authenticate(strategyId, {'failureRedirect': '/'}, function(err, user) {
        _externalSuccessCallback(req, res, user, AuthenticationConstants.providers.GOOGLE, next);
    })(req, res, _handlePassportError(req, res, next));
});


///////////////
//  TWITTER  //
///////////////

/*!
 * Redirect the user to Twitter for authentication. When complete, Twitter
 * will redirect the user back to the application at
 * /api/auth/twitter/callback
 */
OAE.tenantServer.get('/api/auth/twitter', function(req, res, next) {
    req.telemetryUrl = '/api/auth/twitter';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.TWITTER);
    passport.authenticate(strategyId)(req, res, _handlePassportError(req, res, next));
});

/*!
 * Twitter will redirect the user to this URL after approval. Finish the
 * authentication process by attempting to obtain an access token. If
 * access was granted, the user will be logged in. Otherwise,
 * authentication has failed.
 */
OAE.tenantServer.get('/api/auth/twitter/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/twitter/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.TWITTER);
    passport.authenticate(strategyId, {'failureRedirect': '/'}, function(err, user) {
        _externalSuccessCallback(req, res, user, AuthenticationConstants.providers.TWITTER, next);
    })(req, res, _handlePassportError(req, res, next));
});


////////////////
//  FACEBOOK  //
////////////////

/*!
 * Redirect the user to Facebook for authentication. When complete,
 * Facebook will redirect the user back to the application at
 * /api/auth/facebook/callback
 */
OAE.tenantServer.get('/api/auth/facebook', function(req, res, next) {
    req.telemetryUrl = '/api/auth/facebook';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.FACEBOOK);
    passport.authenticate(strategyId, {'scope': ['email']})(req, res, _handlePassportError(req, res, next));
});

/*!
 * Facebook will redirect the user to this URL after approval. Finish the
 * authentication process by attempting to obtain an access token. If
 * access was granted, the user will be logged in. Otherwise,
 */
OAE.tenantServer.get('/api/auth/facebook/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/facebook/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.FACEBOOK);
    passport.authenticate(strategyId, {'failureRedirect': '/'}, function(err, user) {
        _externalSuccessCallback(req, res, user, AuthenticationConstants.providers.FACEBOOK, next);
    })(req, res, _handlePassportError(req, res, next));
});


//////////////////
//  SHIBBOLETH  //
//////////////////

/*!
 * Redirect the user to the configured Shibboleth compatible IdP. When complete,
 * the IdP will redirect the user back to the application at
 * /api/auth/shibboleth/callback
 */
OAE.tenantServer.get('/api/auth/shibboleth', function(req, res, next) {
    req.telemetryUrl = '/api/auth/shibboleth';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.SHIBBOLETH);
    passport.authenticate(strategyId)(req, res, _handlePassportError(req, res, next));
});

/*!
 * The IdP will redirect the user to this URL after approval.
 */
OAE.tenantServer.post('/api/auth/shibboleth/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/shibboleth/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.SHIBBOLETH);
    passport.authenticate(strategyId, {'failureRedirect': '/'}, function(err, user) {
        _externalSuccessCallback(req, res, user, AuthenticationConstants.providers.SHIBBOLETH, next);
    })(req, res, _handlePassportError(req, res, next));
});

/*!
 * Dump an XML with information about this service provider that we
 * can use to register ourselves with the Identity Provider.
 */
OAE.tenantServer.get('/api/auth/shibboleth/metadata', function(req, res) {
    AuthenticationAPI.getShibbolethSPMetadata(req.ctx, function(err, metadata) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, metadata);
    });
});


///////////////
//    CAS   ///
///////////////

/*!
 * Redirect the user to the configured CAS server. When complete,
 * the cas server will redirect the user back to the application at
 * /api/auth/cas/callback
 */
OAE.tenantServer.get('/api/auth/cas', function(req, res, next) {
    req.telemetryUrl = '/api/auth/cas';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.CAS);
    passport.authenticate(strategyId)(req, res, _handlePassportError(req, res, next));
});

/*!
 * The CAS server will redirect the user to this URL after approval.
 */
OAE.tenantServer.get('/api/auth/cas/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/cas/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.CAS);
    // We can just use a successRedirect here because the cas strategy handles the logging
    passport.authenticate(strategyId, {'successRedirect': '/me', 'failureRedirect': '/'})(req, res, _handlePassportError(req, res, next));
});

/////////////////////////
/////////////////////////
// PASSWORD MANAGEMENT //
/////////////////////////
/////////////////////////

/*!
 * Change the password of the currently authenticated user in the global tenant
 */
OAE.globalAdminServer.post('/api/user/:id/password', function(req, res) {
    req.telemetryUrl = '/api/user/id/password';
    AuthenticationAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/*!
 * Change the password of the currently authenticated user in the user tenant
 */
OAE.tenantServer.post('/api/user/:id/password', function(req, res) {
    req.telemetryUrl = '/api/user/id/password';
    AuthenticationAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/*!
 * Checks whether or not a user id exists
 */
OAE.tenantServer.get('/api/auth/exists/:username', function(req, res) {
    req.telemetryUrl = '/api/auth/exists/username';
    AuthenticationAPI.loginIdExists(req.ctx, req.params.username, function(err, exists) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // If the login id doesn't exist yet, we send back a 404
        if (exists) {
            res.send(200);
        } else {
            res.send(404);
        }
    });
});
