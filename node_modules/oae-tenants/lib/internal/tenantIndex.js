/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var lunr = require('lunr');

/**
 * Represents an index where tenants can be indexed and then later full-text searched
 *
 * @param  {Tenant[]}   tenants     The tenants that should be indexed
 */
var TenantIndex = module.exports = function(tenants) {
    var lunrIndex = _createIndex(tenants);
    return {

        /**
         * Search for a tenant based on a user-input query
         *
         * @param  {String}     q               The query to use to search
         * @return {Object[]}   docs            The search documents
         * @return {String}     docs[i].ref     The "id" of the document (i.e., the tenant alias)
         * @return {Number}     docs[i].score   The search match score, on which the results will be sorted from highest to lowest
         */
        'search': function(q) {
            return lunrIndex.search(q);
        },

        /**
         * Add / update the given tenants in the search index
         *
         * @param  {Tenant|Tenant[]}    tenants     The tenants to add or update in the index
         */
        'update': function(tenants) {
            tenants = (_.isArray(tenants)) ? tenants : [tenants];
            _.chain(tenants)
                .map(_tenantToDocument)
                .each(lunrIndex.update.bind(lunrIndex))
                .value();
        }
    };
};

/**
 * Create the index with the given tenants stored in it
 *
 * @param  {Tenants[]}  tenants     The tenants to add
 * @return {lunr.Index}             The lunr index loaded with the tenants
 * @api private
 */
var _createIndex = function(tenants) {
    // Create an index that ids its documents by an "alias" field, so we can uniquely update
    // tenants by alias
    var lunrIndex = lunr(function() {
        this.ref('alias');
        this.field('alias');
        this.field('host');
        this.field('displayName');
    });

    _.chain(tenants)
        .map(_tenantToDocument)
        .each(function(doc) {
            lunrIndex.add(doc);
        })
        .value();

    return lunrIndex;
};

/**
 * Convert a tenant to the lunr tenant document model
 *
 * @param  {Tenant}     tenant  The tenant to convert to a document
 * @return {Object}             The lunr document that represents the tenant
 * @api private
 */
var _tenantToDocument = function(tenant) {
    return _.pick(tenant, 'alias', 'host', 'displayName');
};
