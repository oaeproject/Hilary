/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var sanitize = require('validator').sanitize;
var ShortId = require('shortid');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzUtil = require('oae-authz/lib/util');
var Config = require('oae-config').config('oae-principals');
var ContentUtil = require('oae-content/lib/internal/util');
var OaeUtil = require('oae-util/lib/util');
var Signature = require('oae-util/lib/signature');
var TenantsUtil = require('oae-tenants/lib/util');
var TZ = require('oae-util/lib/tz');

var Group = require('./model').Group;
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('./internal/dao');
var User = require('./model').User;

/**
 * Get a principal (user or group)
 *
 * @param  {Context}    ctx                 The current context
 * @param  {String}     principalId         The ID of the principal that should be retrieved.
 * @param  {Function}   callback            A callback method.
 * @param  {Object}     callback.err        An error object (if any)
 * @param  {Group|User} callback.principal  The asked for principal.
 */
var getPrincipal = module.exports.getPrincipal = function(ctx, principalId, callback) {
    getPrincipals(ctx, [principalId], function(err, principals) {
        if (err) {
            return callback(err);
        } else if (!principals[principalId]) {
            return callback({'code': 404, 'msg': 'Could not find principal with id ' + principalId});
        }

        return callback(null, principals[principalId]);
    });
};

/**
 * Get a set of principals (user or groups). This method *will* return an error if some of the principals
 * don't exist
 *
 * @param  {Context}        ctx                                 The current context
 * @param  {String[]}       principalIds                        The ID of the principal that should be retrieved
 * @param  {Object}         callback.err                        If an unexpected systemic error occurred, or if any of the given principals did not exist
 * @param  {Object}         callback.err.existingPrincipals     Object representing the principals that existed in storage. The keys will be the principal ids and the values will be the user-friendly principal basic profiles
 * @param  {String[]}       callback.err.missingPrincipalIds    The ids of the principals that did not exist
 * @param  {Object}         callback.principals                 Object representing the retrieved principals. The keys will be the principal ids and the values will be the principal basic profiles
 */
var getPrincipals = module.exports.getPrincipals = function(ctx, principalIds, callback) {
    PrincipalsDAO.getPrincipals(principalIds, null, function(err, principals) {
        if (err) {
            return callback(err);
        }

        _transformPrincipals(ctx, principals);

        return callback(null, principals);
    });
};

/**
 * Create a unique id for a group
 *
 * @param  {String}     tenantAlias     The alias of the tenant for which to generate the group id
 * @return {String}                     The id for the group
 */
var createGroupId = module.exports.createGroupId = function(tenantAlias) {
    return AuthzUtil.toId(AuthzConstants.principalTypes.GROUP, tenantAlias, ShortId.generate());
};

/**
 * Determine whether or not the given string represents a group id.
 *
 * @param  {String}  groupId    A string that may or may not be a group id
 * @return {Boolean}            Whether or not the provided identifier is a group identifier.
 */
var isGroup = module.exports.isGroup = function(groupId) {
    return PrincipalsDAO.isGroup(groupId);
};

/**
 * Determine whether or not the given string represents a user id.
 *
 * @param  {String}  userId     A string that may or may not be a user id
 * @return {Boolean}            Whether or not the provided identifier is a user identifier.
 */
var isUser = module.exports.isUser = function(userId) {
    return PrincipalsDAO.isUser(userId);
};

/**
 * Hide sensitive user information that the (possibly anonymous) user in context does not have access to see.
 *
 * If the current user has no access to the user, then the following will be scrubbed:
 *
 *  1. The displayName will be replaced by the publicAlias
 *  2. The following fields will be deleted
 *      ** publicAlias
 *      ** locale
 *      ** smallPicture
 *      ** smallPictureUri
 *      ** mediumPicture
 *      ** mediumPictureUri
 *      ** largePicture
 *      ** largePictureUri
 *
 * If the user has access but is not the user themself, the publicAlias is scrubbed from the user.
 *
 * @param  {Context}     ctx     The current context
 * @param  {User}        user    The user object to hide as necessary
 * @api private
 */
var hideUserData = module.exports.hideUserData = function(ctx, user) {
    var isAnon = !(ctx.user());
    var isLoggedIn = TenantsUtil.isLoggedIn(ctx, user.tenant.alias);
    var isTargetUser = (!isAnon && ctx.user().id === user.id);
    var isAdmin = (!isAnon && ctx.user().isAdmin && ctx.user().isAdmin(user.tenant.alias));

    if (isAdmin || isTargetUser) {
        return user;
    }

    // Hide the sensitive profile information if the user has limited access
    if ((user.visibility === AuthzConstants.visibility.LOGGEDIN && !isLoggedIn) ||
        (user.visibility === AuthzConstants.visibility.PRIVATE && !isTargetUser)) {

        user.displayName = user.publicAlias;
        user.picture = {};

        // The profile path should be removed from the user object as well. This will tell the UI
        // when to offer a link to the profile page and when not to
        delete user.profilePath;
    }

    // Always delete these guys if it is not the target user or admin
    delete user.acceptedTC;
    delete user.email;
    delete user.emailPreference;
    delete user.locale;
    delete user.notificationsUnread;
    delete user.notificationsLastRead;
    delete user.publicAlias;
};

/**
 * Given a user object, apply the given set of basic profile updates and return the updated user.
 *
 * @param  {User}      user         The user object on which to apply the updates
 * @param  {Object}    fieldUpdates An object of fieldKey -> value of the field updates to apply to the user object
 * @return {User}                   The updated user with all field updates applied
 */
var createUpdatedUser = module.exports.createUpdatedUser = function(user, fieldUpdates) {
    var newDisplayName = fieldUpdates.displayName || user.displayName;
    var newUser = new User(user.tenant.alias, user.id, newDisplayName, {
        'visibility': fieldUpdates.visibility || user.visibility,
        'email': fieldUpdates.email || user.email,
        'emailPreference': fieldUpdates.emailPreference || user.emailPreference,
        'locale': fieldUpdates.locale || user.locale,
        'publicAlias': fieldUpdates.publicAlias || user.publicAlias,
        'notificationsUnread': fieldUpdates.notificationsUnread || user.notificationsUnread,
        'notificationsLastRead': fieldUpdates.notificationsLastRead || user.notificationsLastRead,
        'acceptedTC': fieldUpdates.acceptedTC || user.acceptedTC,
        'isGlobalAdmin': user.isGlobalAdmin(),
        'isTenantAdmin': user.isTenantAdmin(user.tenant.alias)
    });

    return newUser;
};

//////////////////////////////
// ACTIVITY UTILITY METHODS //
//////////////////////////////

/**
 * Create the persistent user entity that can be transformed into an activity entity for the UI.
 *
 * @param  {String}    userId      The ID of the user
 * @param  {User}      [user]      The user that supplies the data for the entity
 * @return {Object}                An object containing the entity data that can be transformed into a UI user activity entity
 */
var createPersistentUserActivityEntity = module.exports.createPersistentUserActivityEntity = function(userId, user) {
    var persistentEntity = {'objectType': 'user', 'user': user};
    persistentEntity[ActivityConstants.properties.OAE_ID] = userId;
    return persistentEntity;
};

/**
 * Transform a persisted user activity entity that can be used in an activity stream The returned activity entity will be
 * output in the `activitystrea.ms`-compliant data model
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}        ctx                 The current context
 * @param  {String}         userId              The id of the user
 * @param  {User}           [user]              The user object. If not specified, the generated entity with be abbreviated with just the information available
 * @return {ActivityEntity}                     The activity entity that represents the given user data
 */
var transformPersistentUserActivityEntity = module.exports.transformPersistentUserActivityEntity = function(ctx, userId, user) {
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var globalId = baseUrl + '/api/user/' + userId;

    var opts = {'ext': {}};
    opts.ext[ActivityConstants.properties.OAE_ID] = userId;

    if (user) {
        hideUserData(ctx, user);

        // Signed user profile picture URLs will last forever
        _generatePictureURLs(ctx, user, -1);

        opts.displayName = user.displayName;
        if (user.profilePath) {
            opts.url = baseUrl + user.profilePath;

            if (user.picture.small) {
                opts.ext[ActivityConstants.properties.OAE_THUMBNAIL] = new ActivityModel.ActivityMediaLink(user.picture.small, PrincipalsConstants.picture.size.SMALL , PrincipalsConstants.picture.size.SMALL);
            }

            if (user.picture.medium) {
                opts.image = new ActivityModel.ActivityMediaLink(user.picture.medium, PrincipalsConstants.picture.size.MEDIUM , PrincipalsConstants.picture.size.MEDIUM);
            }
        }

        opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = user.visibility;
        opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = user.profilePath;
    }

    return new ActivityModel.ActivityEntity('user', globalId, opts);
};

/**
 * Transform a persisted user activity entity that can be used in an activity stream. The user property will be taken from
 * the persisted entity, scrubbed and returned as the "transformed entity"
 *
 * @param  {Context}    ctx     The current context
 * @param  {String}     userId  The id of the user
 * @param  {User}       [user]  The user object. If not specified, the generated entity with be abbreviated with just the information available
 * @return {User}               The scrubbed user object
 */
var transformPersistentUserActivityEntityToInternal = module.exports.transformPersistentUserActivityEntityToInternal = function(ctx, userId, user) {
    if (user) {
        // Signed user profile picture URLs will last forever
        hideUserData(ctx, user);
        _generatePictureURLs(ctx, user, -1);
        return user;
    } else {
        return {'id': userId};
    }
};

/**
 * Create the persistent group entity that can be transformed into an activity entity for the UI
 *
 * @param  {String}    groupId     The ID of the group
 * @param  {Group}     [group]     The group that supplies the data for the entity. If not specified, only the minimal data will be returned for transformation.
 * @return {Object}                An object containing the entity data that can be transformed into a UI group activity entity
 */
var createPersistentGroupActivityEntity = module.exports.createPersistentGroupActivityEntity = function(groupId, group) {
    var persistentEntity = {'objectType': 'group', 'group': group};
    persistentEntity[ActivityConstants.properties.OAE_ID] = groupId;
    return persistentEntity;
};

/**
 * Transform a persisted group activity entity that can be used in an activity stream
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}        ctx                 The current context
 * @param  {String}         groupId             The id of the group
 * @param  {Group}          [group]             The group object. If not specified, the generated entity with be abbreviated with just the information available
 * @return {ActivityEntity}                     The activity entity that represents the given group data
 */
var transformPersistentGroupActivityEntity = module.exports.transformPersistentGroupActivityEntity = function(ctx, groupId, group) {
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);

    // Note that the globalId is used as a canonical reference and should not depend on whether or not
    // the tenant is using http or https
    var globalId = 'http://' + tenant.host + '/api/group/' + groupId;

    var opts = {'ext': {}};
    opts.ext[ActivityConstants.properties.OAE_ID] = groupId;

    if (group) {
        // Signed group picture URLs will last forever
        _generatePictureURLs(ctx, group, -1);

        opts.displayName = group.displayName;
        opts.url = baseUrl + group.profilePath;

        if (group.picture.small) {
            opts.ext[ActivityConstants.properties.OAE_THUMBNAIL] = new ActivityModel.ActivityMediaLink(group.picture.small, PrincipalsConstants.picture.size.SMALL , PrincipalsConstants.picture.size.SMALL);
        }

        if (group.picture.medium) {
            opts.image = new ActivityModel.ActivityMediaLink(group.picture.medium, PrincipalsConstants.picture.size.MEDIUM , PrincipalsConstants.picture.size.MEDIUM);
        }

        // Extension properties
        opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = group.visibility;
        opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = group.profilePath;
        opts.ext[ActivityConstants.properties.OAE_JOINABLE] = group.joinable;
    }

    return new ActivityModel.ActivityEntity('group', globalId, opts);
};

/**
 * Transform a persisted group activity entity that can be used in an activity stream. The group property will be
 * taken from the persisted entity, scrubbed and returned as the "transformed entity"
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}    ctx                 The current context
 * @param  {String}     groupId             The id of the group
 * @param  {Group}      [group]             The group object. If not specified, the generated entity with be abbreviated with just the information available
 * @return {Group}                          The group object
 */
var transformPersistentGroupActivityEntityToInternal = module.exports.transformPersistentGroupActivityEntityToInternal = function(ctx, groupId, group) {
    if (group) {
        // Signed group picture URLs will last forever
        _generatePictureURLs(ctx, group, -1);
        return group;
    } else {
        return {'id': groupId};
    }
};

/**
 * Given a set of principals, transform their model so the required UI-level information is
 * available
 *
 * @param  {Context}    ctx         The context of the request for which to transform the principals
 * @param  {Object[]}   principals  The array of users and groups to transform
 * @api private
 */
var _transformPrincipals = function(ctx, principals) {
    _.each(principals, function(principal) {
        _generatePictureURLs(ctx, principal);
        if (isUser(principal.id)) {
            hideUserData(ctx, principal);
        }
    });
};

/**
 * Replace the URI properties with signed URL paths to actually download the files
 *
 * @param  {Context}        ctx         The current context
 * @param  {Group|User}     principal   The principal for which to generate the picture URL paths
 * @param  {Number}         [duration]  The approximate time in seconds for which the generated picture URLs will be valid. Default: 1 week
 * @param  {Number}         [offset]    The minimum time in seconds for which the generated picture URLs will be valid. Default: 1 week
 * @api private
 */
var _generatePictureURLs = function(ctx, principal, duration, offset) {
    if (principal.picture.smallUri) {
        principal.picture.small = ContentUtil.getSignedDownloadUrl(ctx, principal.picture.smallUri, duration, offset);
        delete principal.picture.smallUri;
    }

    if (principal.picture.mediumUri) {
        principal.picture.medium = ContentUtil.getSignedDownloadUrl(ctx, principal.picture.mediumUri, duration, offset);
        delete principal.picture.mediumUri;
    }

    if (principal.picture.largeUri) {
        principal.picture.large = ContentUtil.getSignedDownloadUrl(ctx, principal.picture.largeUri, duration, offset);
        delete principal.picture.largeUri;
    }
};
