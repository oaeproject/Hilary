/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var bcrypt = require('bcrypt');
var roleAPI = require('oae-roles');
var roleUtil = require('oae-roles/lib/util');
var cassandra = require('oae-util/lib/cassandra');
var model = require('./model');
var utils = require('./utils');


/**
 * Creates a new user under this tenant.
 * @param  {Tenant}     tenant      The current tenant
 * @param  {String}     username    The username this user can login with.
 * @param  {String}     password    The password for this user.
 * @param  {String}     privacy     This user his privacy setting. (One of PRIVACY_SETTING)
 * @param  {String}     firstName   This user his first name.
 * @param  {String}     lastName    This user his last name,
 * @param  {String}     displayName A display name, if this is left undefined the first and last name will be concatenated.
 * @param  {Function}   callback    A callback method.
 */
module.exports.createUser = function(tenant, username, password, privacy, firstName, lastName, displayName, callback) {
    callback = callback || function() {};
    // Check required fields.
    if (!privacy || !username || !password) {
        return callback({'code': 400, 'msg': 'Not all required parameters were provided.'});
    }
    // Do some basic validation.
    var usernameValidation = utils.validateUserName(username);
    if (usernameValidation !== true) {
        return callback({'code': 400, 'msg': usernameValidation});
    }
    if (password.length < 6) {
        return callback({'code': 400, 'msg': 'Your password is too short (this is the only requirement.)'});
    }
    if (!model.PRIVACY_SETTING[privacy]) {
        return callback({'code': 400, 'msg': 'The specified privacy setting is unknown.'});
    }

    // hash the password and store everything in the DB.
    var id = roleUtil.toUuid('u', tenant.alias, username);
    module.exports.getUser(id, function(err, user) {
        if (!err) {
            return callback({'code': 400, 'msg': 'A user with this username already exists.'});
        }

        utils.hashPassword(password, function(hash) {
            displayName = displayName || firstName + " " + lastName;

            // Create the group.
            cassandra.runQuery('INSERT INTO Principals (principal_id, tenant, privacy_setting, user_username, user_password, user_first_name, user_last_name, user_display_name) \
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [id, tenant.alias, privacy, username, hash, firstName, lastName, displayName], function (err) {
                if (err) {
                    callback({'code': 500, 'msg': err}, null);
                } else {
                    callback(false, id);
                }
            });
        });
    });
};

/**
 * Update a user
 * @param  {String}   user_id     The userid of the user you wish to update.
 * @param  {String}   privacy     The new privacy (optional)
 * @param  {String}   firstName   The new first name (optional)
 * @param  {String}   lastName    The new last name (optional)
 * @param  {String}   displayName The new displayname (optional)
 * @param  {Function(err)} callback    Callback method
 */
module.exports.updateUser = function(user_id, privacy, firstName, lastName, displayName, callback) {
    callback = callback || function() {};
    // Only update existing users.
    module.exports.getUser(user_id, function(err, user) {
        if (err) {
            return callback(err);
        }

        var parameters = [];
        if (privacy) {
            parameters = parameters.concat(['privacy_setting', privacy]);
        }
        if (firstName) {
            parameters = parameters.concat(['user_first_name', firstName]);
        }
        if (lastName) {
            parameters = parameters.concat(['user_last_name', lastName]);
        }
        if (displayName) {
            parameters = parameters.concat(['user_display_name', displayName]);
        }

        if (parameters.length) {
            var q = [];
            for (var i =0; i < parameters.length;i+=2) {
                q.push("?=?");
            }
            parameters.push(user_id);
            cassandra.runQuery('UPDATE Principals SET ' +  q.join(', ') + ' WHERE principal_id = ?', parameters, function (err) {
                if (err) {
                    callback({'code': 500, 'msg': err}, null);
                } else {
                    callback(false);
                }
            });
        } else {
            callback({'code': 400, 'msg': 'There was nothing to be updated.'});
        }
    });
};

module.exports.getTenantUser = function(tenant, username, callback) {
    var user_id = roleUtil.toUuid('u', tenant.alias, username);
    module.exports.getUser(user_id, callback);
};

/**
 * Get a user from the DB
 * @param  {String}   user_id  The userid for the user you wish to retrieve.
 * @param  {Function(err, user)} callback Callback method.
 */
module.exports.getUser = function(user_id, callback) {
    if (!utils.isUser(user_id)) {
        return callback({'code': 400, 'msg': 'The provided user_id is not a valid user identifier.'});
    }

    utils.getPrincipal(user_id, callback);
};

/**
 * Checks if a password matches a username within a tenant.
 * @param  {Object}                 tenant          The current tenant
 * @param  {String}                 username        The username that a user uses to login. (NOT the id.)
 * @param  {String}                 password        The plain-text password.
 * @param  {Function(err, user)}    callback        Callback method.
 * @param  {String}                 callback.err    Error object.
 * @param  {Object}                 callback.user   An object that has a key 'id' that holds the full user id.
 *                                                  This object will be null if the user was not found or the password didn't match.
 */
module.exports.checkPassword = function(tenant, username, password, callback) {
    var user_id = roleUtil.toUuid('u', tenant.alias, username);
    cassandra.runQuery("SELECT user_password FROM Principals WHERE principal_id = ?", [user_id], function(err, rows) {
        if (err) {
            return callback(err, null);
        }

        if (rows.rowCount() === 0 || !rows[0].colHash.user_password) {
            // No user found with that username.
            return callback(false, null);
        }

        bcrypt.compare(password, rows[0].colHash.user_password, function(err, res) {
            if (!res) {
                callback(false, null);
            } else {
                callback(false, {'id': user_id});
            }
        });
    });
};