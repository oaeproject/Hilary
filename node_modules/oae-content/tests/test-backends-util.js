/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var BackendsUtil = require('oae-content/lib/backends/util');
var RemoteBackend = require('oae-content/lib/backends/remote');

describe('Content Backends', function() {

    var file = {'name': 'testfile.png'};

    /**
     * Verify that generating a storage URI takes a `resourceId` into account.
     */
    it('verify uri generation with resourceId', function() {
        var options = {
            'resourceId': 'c:camtest:VT9co9JRpM'
        };
        var uri = BackendsUtil.generateUri(file, options);
        var result = uri.split('/');

        assert.equal(result[0], 'c', 'The first level of a URI should be the resource type (or unspecified.)');
        assert.equal(result[1], 'camtest', 'The second level of a URI should be the tenant alias (or unspecified.)');
        assert.equal(result[result.length - 1], 'testfile.png', 'The last level of the URI should be the filename');
        assert.ok(result.length > 3, 'A URI should have some kind of hashing in it which generated more than 3 levels');
        _.each(result, function(part) {
            assert.ok(part.length > 0, 'Each part of the URI should be non-empty.');
        });
    });

    /**
     * Verify that generating a storage URI takes a `resourceId` and `prefix` into account.
     */
    it('verify uri generation with resourceId and prefix', function() {
        var options = {
            'resourceId': 'u:camtest:VT9co9JRpM',
            'prefix': 'profilepictures'
        };
        var uri = BackendsUtil.generateUri(file, options);
        var result = uri.split('/');

        assert.equal(result[0], 'u', 'The first level of a URI should be the resource type (or unspecified.)');
        assert.equal(result[1], 'camtest', 'The second level of a URI should be the tenant alias (or unspecified.)');
        assert.equal(result[result.length - 2], 'profilepictures', 'The second to last level of the URI should be the prefix (if it contains no slashes.)');
        assert.equal(result[result.length - 1], 'testfile.png', 'The last level of the URI should be the filename');
        assert.ok(result.length > 4, 'A URI should have some kind of hashing in it which generated more than 4 levels if a prefix is specified');
        _.each(result, function(part) {
            assert.ok(part.length > 0, 'Each part of the URI should be non-empty.');
        });
    });

    /**
     * Verify that generating a storage URI can happen without providing a `resourceId`.
     */
    it('verify uri generation without resourceId', function() {
        var options = {};
        var uri = BackendsUtil.generateUri(file, options);
        var result = uri.split('/');

        assert.equal(result[0], 'unspecified', 'The first level of a URI should be the resource type (or unspecified.)');
        assert.equal(result[1], 'unspecified', 'The second level of a URI should be the tenant alias (or unspecified.)');
        assert.equal(result[result.length - 1], 'testfile.png', 'The last level of the URI should be the filename');
        assert.ok(result.length > 3, 'A URI should have some kind of hashing in it which generated more than 3 levels');
        _.each(result, function(part) {
            assert.ok(part.length > 0, 'Each part of the URI should be non-empty.');
        });
    });

    /**
     * Verify that a short resourceId gets padded.
     */
    it('verify uri generation with short resourceId', function() {
        var options = {
            'resourceId': 'c:camtest:abc'
        };
        var uri = BackendsUtil.generateUri(file, options);
        var result = uri.split('/');

        assert.equal(result[0], 'c', 'The first level of a URI should be the resource type (or unspecified.)');
        assert.equal(result[1], 'camtest', 'The second level of a URI should be the tenant alias (or unspecified.)');
        assert.equal(result[result.length - 1], 'testfile.png', 'The last level of the URI should be the filename');
        assert.ok(result.length > 3, 'A URI should have some kind of hashing in it which generated more than 3 levels');
        _.each(result, function(part) {
            assert.ok(part.length > 0, 'Each part of the URI should be non-empty.');
        });
    });

    /**
     * Verifies the remote backend is able to return a proper download link
     */
    it('verify remote backend is able to return a download link', function(callback) {
        var uri = 'remote:http://www.apereo.org/favicon.ico';
        var link = RemoteBackend.getDownloadLink(null, uri);
        assert.equal(link.url, 'http://www.apereo.org/favicon.ico');
        assert.equal(link.code, 301);
        return callback();
    });
});
