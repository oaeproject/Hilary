/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var util = require('util');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var AuthzUtil = require('oae-authz/lib/util');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PrincipalsUtil = require('oae-principals/lib/util');
var Signature = require('oae-util/lib/signature');
var TenantsUtil = require('oae-tenants/lib/util');

var ContentConfig = require('oae-config').config('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;

var log = require('oae-logger').logger('oae-content-util');

/**
 * Get the storage backend for a uri, if the uri is unspecified it will return the default backend
 * for a tenant. If the backend could not be found, this will throw an error! The uri will be checked
 * before defaulting to the configured tenant backend. This allows for a tenant to switch storage
 * systems yet still serve the old files.
 *
 * @param  {Context}    ctx     The current execution context
 * @param  {String}     [uri]   An storage URI that references a file in storage. If not specified, the tenant default backend will be used
 * @return {Backend}            The appropriate backend
 * @throws {Error}              Thrown if there is no backend available that matches the `uri`
 */
var getStorageBackend = module.exports.getStorageBackend = function(ctx, uri) {
    var backendName = null;
    if (uri) {
        backendName = uri.split(':')[0];
    } else {
        // Use the tenant's default
        backendName = ContentConfig.getValue(ctx.tenant().alias, 'storage', 'backend');
        if (!backendName) {
            log(ctx).error('There was no storage backend configured, this should not happen');
            throw new Error('There was no storage backend configured for name: ' + backendName);
        }
    }

    try {
        return require('oae-content/lib/backends/' + backendName);
    } catch (err) {
        log(ctx).error({'err': err}, 'Couldn\'t load the backend %s', backendName);
        throw new Error('Could not find storage back-end ' + backendName);
    }
};

/**
 * Using a download strategy, derive the download reference (path or URL) that should be given to a client to download
 * the target.
 *
 * @param  {Context}            ctx                 The context of the user request accessing the download
 * @param  {String}             uri                 The storage URI of the item being downloaded
 * @param  {DownloadStrategy}   downloadStrategy    The download strategy that specifies how the user should download the target item
 * @return {String}                                 The url that can be used in a browser to download the file
 */
var getDownloadUrl = module.exports.getDownloadUrl = function(ctx, uri) {
    var downloadStrategy = getStorageBackend(ctx, uri).getDownloadStrategy(ctx, uri);

    if (downloadStrategy.strategy === ContentConstants.backend.DOWNLOAD_STRATEGY_DIRECT) {
        // When using the direct strategy, the user is linked directly to the item, therefore does not have to be given a
        // secure link through /api/download/signed for redirection or download
        return downloadStrategy.target;
    }

    principalId = (ctx.user()) ? ctx.user().id : '';
    var body = principalId + ':' + uri;
    var settings = _getPreviewsExpireSettings(ctx.tenant().alias);
    var signature = Signature.createRollingSignature(ctx.tenant().alias, settings.duration, settings.offset, body);
    return util.format('/api/download/signed?uri=%s&signature=%s&expires=%s', uri, signature.signature, signature.expires);
};

/**
 * Creates the appropriate signature for a piece of content.
 *
 * @param  {Context}    ctx             Standard context object, representing the currently logged in user and its tenant
 * @param  {String}     contentId       The ID of the piece of content that needs to be signed.
 * @param  {Number}     lastModified    The timestamp when the content was last modified. This will ensure that the signature changes if a new version is uploaded.
 * @return {Object}                     A signature.
 */
var signContent = module.exports.signContent = function(ctx, contentId, lastModified) {
    var tenantAlias = (contentId) ? AuthzUtil.getResourceFromId(contentId).tenantAlias : '';
    var principalId = (ctx && ctx.user()) ? ctx.user().id : '';
    var settings = _getPreviewsExpireSettings(tenantAlias);
    var body = principalId + ':' + contentId + ':' + lastModified;
    var signature = Signature.createRollingSignature(tenantAlias, settings.duration, settings.offset, body);
    signature.lastModified = lastModified;
    return signature;
};

/**
 * Create the persistent content entity that can be transformed into an activity entity for the UI.
 *
 * @param  {Content}   content      The content item that provides the data for the entity.
 * @return {Object}                 An object containing the entity data that can be transformed into a UI content activity entity
 */
var createPersistentContentActivityEntity = module.exports.createPersistentContentActivityEntity = function(content) {
    var persistentEntity = {'objectType': 'content', 'content': content};
    persistentEntity[ActivityConstants.properties.OAE_ID] = content.id;
    return persistentEntity;
};

/**
 * Transform a content object into an activity entity suitable to be displayed in an activity stream.
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityTransformer
 *
 * @param  {Context}           ctx         The context of the current request
 * @param  {Object}            entity      The persisted activity entity to transform.
 * @param  {Object}            previews    An object that holds the thumbnailUri and wideUri if they are present on the revision.
 * @return {ActivityEntity}                The activity entity that represents the given content item
 */
var transformPersistentContentActivityEntity = module.exports.transformPersistentContentActivityEntity = function(ctx, entity, previews) {
    var content = entity.content;

    var tenant = ctx.tenant();
    var principalId = (ctx.user() ? ctx.user().id : null);

    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var globalId = baseUrl + '/api/content/' + content.id;
    var profileUrl = baseUrl + content.profilePath;

    var opts = {};

    // The `content.displayName` is the displayName of the piece of content *at the time when the activity was generated*.
    // Some content items get their displayName updated via the preview processor (ex: youtube links).
    // We use the updated displayName (if it's available) as it looks nicer to the user.
    opts.displayName = content.displayName;
    opts.url = profileUrl;

    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = content.id;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = content.visibility;
    opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = content.profilePath;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_TYPE] = content.resourceSubType;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_MIMETYPE] = content.mime;
    opts.ext[ContentConstants.activity.PROP_OAE_REVISION_ID] = content.latestRevisionId;

    if (previews.thumbnailUri) {
        var width = PreviewConstants.SIZES.IMAGE.THUMBNAIL;
        var thumbnailUrl = getDownloadUrl(ctx, previews.thumbnailUri);
        opts.image = new ActivityModel.ActivityMediaLink(thumbnailUrl, width, width);
    }

    if (previews.wideUri) {
        var wideUrl = getDownloadUrl(ctx, previews.wideUri);
        opts.ext[ContentConstants.activity.PROP_OAE_WIDE_IMAGE] = new ActivityModel.ActivityMediaLink(wideUrl, PreviewConstants.SIZES.IMAGE.WIDE_WIDTH, PreviewConstants.SIZES.IMAGE.WIDE_HEIGHT);
    }

    return new ActivityModel.ActivityEntity('content', globalId, opts);
};

/**
 * Retrieves the expire settings from the config.
 *
 * @param  {String} tenantAlias The alias of the tenant for which we should retrieve the preview expire settings.
 * @return {Object}             An object that holds a duration and offset to generate a rolling expiring signature.
 * @api private
 */
var _getPreviewsExpireSettings = function(tenantAlias) {
    // These settings will be used to generate rolling signatures,
    // A rolling signature always has a minimum value (the offset) which we set to the `expiration_minimum` config value.
    // A value that is situated in the interval [0, duration] then gets added to calculate the expiration time for the signature.
    // In order to obtain a signature that is valid for an `expiration_maximum` time, we subtract the minimum from the maximum.
    var min = parseInt(ContentConfig.getValue(tenantAlias, 'previews', 'expiration_minimum'), 10);
    var max = parseInt(ContentConfig.getValue(tenantAlias, 'previews', 'expiration_maximum'), 10);
    var offset = min;
    var duration = max - min;

    // In case the expiration settings are misconfigured,
    // we'll fall back to some hardcoded defaults
    // TODO: This is really a validation issue in the global admin UI
    // and should not happen here.
    if (duration < 0 || offset < 0) {
        duration = 15*60;
        offset = 15*60;
    }
    return {
        'duration': duration,
        'offset': offset
    };
};

