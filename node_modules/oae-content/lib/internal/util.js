/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var util = require('util');

var AuthzUtil = require('oae-authz/lib/util');
var Config = require('oae-config').config('oae-content');
var Signature = require('oae-util/lib/signature');


/**
 * Get a signed URL to the thumbnail of a piece of content.
 * This method will *NOT* check if the content item has a thumbnail associated to it.
 * It only takes care of generating a signed fixed URL.
 * It also doesn't perform any permission check.
 *
 * @param  {Context}    ctx                     Standard context object, representing the currently logged in user and its tenant
 * @param  {String}     contentId               The ID of the piece of content.
 * @param  {Number}     lastModified            The timestamp when the content was last modified. This will ensure that the signature changes if a new version is uploaded.
 * @param  {Object}     [signature]             Optional signature object that can be used to construct the url. If none is passed in, a signature will be generated.
 * @param  {Number}     [signature.expires]     The timestamp (epoc) when the signature expires
 * @param  {String}     [signature.signature]   The actual signature
 * @return {String}                             The URL of the signed thumbnail that can be used to retrieve it.
 */
var getThumbnailUrl = module.exports.getThumbnailUrl = function(ctx, contentId, lastModified, signature) {
    if (!signature) {
        signature = signContent(ctx, contentId, lastModified);
    }
    return util.format('/api/content/%s/previews/thumbnail.png?signature=%s&expires=%s&lastmodified=%s', contentId, signature.signature, signature.expires, signature.lastModified);
};

/**
 * Creates the appropriate signature for a piece of content.
 *
 * @param  {Context}    ctx             Standard context object, representing the currently logged in user and its tenant
 * @param  {String}     contentId       The ID of the piece of content that needs to be signed.
 * @param  {Number}     lastModified    The timestamp when the content was last modified. This will ensure that the signature changes if a new version is uploaded.
 * @return {Object}                     A signature.
 */
var signContent = module.exports.signContent = function(ctx, contentId, lastModified) {
    var tenantAlias = (contentId) ? AuthzUtil.getResourceFromId(contentId).tenantAlias : '';
    var principalId = (ctx && ctx.user()) ? ctx.user().id : '';
    var settings = _getPreviewsExpireSettings(tenantAlias);
    var body = principalId + ':' + contentId + ':' + lastModified;
    var signature = Signature.createRollingSignature(tenantAlias, settings.duration, settings.offset, body);
    signature.lastModified = lastModified;
    return signature;
};

/**
 * Retrieves the expire settings from the config.
 *
 * @param  {String} tenantAlias The alias of the tenant for which we should retrieve the preview expire settings.
 * @return {Object}             An object that holds a duration and offset to generate a rolling expiring signature.
 * @api private
 */
var _getPreviewsExpireSettings = function(tenantAlias) {
    // These settings will be used to generate rolling signatures,
    // A rolling signature always has a minimum value (the offset) which we set to the `expiration_minimum` config value.
    // A value that is situated in the interval [0, duration] then gets added to calculate the expiration time for the signature.
    // In order to obtain a signature that is valid for an `expiration_maximum` time, we subtract the minimum from the maximum.
    var min = parseInt(Config.getValue(tenantAlias, 'previews', 'expiration_minimum'), 10);
    var max = parseInt(Config.getValue(tenantAlias, 'previews', 'expiration_maximum'), 10);
    var offset = min;
    var duration = max - min;

    // In case the expiration settings are misconfigured,
    // we'll fall back to some hardcoded defaults
    // TODO: This is really a validation issue in the global admin UI
    // and should not happen here.
    if (duration < 0 || offset < 0) {
        duration = 15*60;
        offset = 15*60;
    }
    return {
        'duration': duration,
        'offset': offset
    };
};

