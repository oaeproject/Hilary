/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var natural = require('natural');

/**
 * Finds the position in a set of authors that best matches the given author
 *
 * @param  {String}     author          The author to search for
 * @param  {String[]}   set             A set of authors to search through
 * @param  {Number}     requiredScore   A minimum score that indicates how "good" the match should be, before returning an index. This should be a number in the ]0, 1[ range
 * @return {Number}                     The index in the set that best matches the given author. If no good matches were found or the set was empty, -1 will be returned
 */
var findAuthorInSet = module.exports.findAuthorInSet = function(author, set, requiredScore) {
    requiredScore = requiredScore || 0.85;

    var highestMatchingIndex = -1;
    var highestScore = 0;
    for (var i = 0; i < set.length; i++) {
        var score = natural.JaroWinklerDistance(set[i], author);
        if (score > highestScore) {
            highestScore = score;
            highestMatchingIndex = i;
        }
    }

    // The JaroWinkler distance returns a normalized number between 0 and 1, where closer to 1 means a better match
    if (highestScore > requiredScore) {
        return highestMatchingIndex;
    } else {
        return -1;
    }
};
