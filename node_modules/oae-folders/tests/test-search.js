/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

var FoldersAPI = require('oae-folders');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');
var FoldersLibrary = require('oae-folders/lib/library');
var FoldersTestUtil = require('oae-folders/lib/test/util');

describe('Folders', function() {

    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*!
     * Before each test, set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    beforeEach(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);
        return callback();
    });

    /**
     * Set up some tenants, users and content. The created content
     * will be placed in a new folder with the given visibility.
     *
     * @param  {String}             visibility                  The visibility of the created folder
     * @param  {Function}           callback                    Standard callback function
     * @param  {Folder}             callback.folder             The created folder
     * @param  {Tenant}             callback.publicTenant       Tenant object as returned by `foldersTestUtil.setupMultiTenantPrivacyEntities`
     * @param  {Tenant}             callback.publicTenant1      Tenant object as returned by `foldersTestUtil.setupMultiTenantPrivacyEntities`
     * @param  {Tenant}             callback.privateTenant      Tenant object as returned by `foldersTestUtil.setupMultiTenantPrivacyEntities`
     * @param  {Tenant}             callback.privateTenant1     Tenant object as returned by `foldersTestUtil.setupMultiTenantPrivacyEntities`
     * @param  {Content}            callback.publicContent      A public content item
     * @param  {Content}            callback.loggedinContent    A loggedin content item
     * @param  {Content}            callback.privateContent     A private content item
     * @param  {Object}             callback.user               A user as returned by `TestsUtil.generateTestUsers` who will create the folder
     * @throws {AssertionError}                                 Throws an error if anything unexpected happens when setting up the entities
     */
    var _setup = function(visibility, callback) {
        FoldersTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

            // Create a test user who will generate a test folder
            TestsUtil.generateTestUsers(publicTenant.adminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);
                FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, visibility, function(folder) {

                    // Create 3 content items
                    RestAPI.Content.createLink(simong.restContext, 'public', 'public', 'public', 'http://www.google.com', null, [], [], function(err, publicContent) {
                        assert.ok(!err);
                        RestAPI.Content.createLink(simong.restContext, 'loggedin', 'loggedin', 'loggedin', 'http://www.google.com', null, [], [], function(err, loggedinContent) {
                            assert.ok(!err);
                            RestAPI.Content.createLink(simong.restContext, 'private', 'private', 'private', 'http://www.google.com', null, [], [], function(err, privateContent) {
                                assert.ok(!err);

                                // Add them to the folder
                                FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folder.id, [publicContent.id, loggedinContent.id, privateContent.id], function() {

                                    return callback(simong, folder, publicContent, loggedinContent, privateContent, publicTenant, publicTenant1, privateTenant, privateTenant1);
                                });
                            });
                        });
                    });
                });
            });
        });
    };

    describe('Searching in folders', function() {

        /**
         * Test that verifies that folders can searched through
         */
        it('verify folders are searchable', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Generate 2 test folders
                FoldersTestUtil.generateTestFolders(simong.restContext, 2, function(folder1, folder2) {

                    // Both folders should be empty
                    FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder1.id, null, [], function() {
                        FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder2.id, null, [], function() {

                            // Create some content items and add them to the first folder
                            RestAPI.Content.createLink(camAdminRestContext, 'test', 'test', 'public', 'http://www.google.com', null, [], [], function(err, google) {
                                assert.ok(!err);
                                RestAPI.Content.createLink(camAdminRestContext, 'marsupilamisausage', 'marsupilamisausage', 'public', 'http://www.marsupilamisausage.com', null, [], [], function(err, mars) {
                                    assert.ok(!err);
                                    FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folder1.id, [google.id, mars.id], function() {

                                        // Searching through the first folder should give the
                                        // 2 links. The other folder should still be empty
                                        FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder1.id, null, [google, mars], function() {
                                            FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder2.id, null, [], function() {

                                                // Assert that folders can be searched through
                                                FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder1.id, 'marsupilamisausage', [mars], function() {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that all users can search public folders
         */
        it('verify all users see content in the public folder', function(callback) {
            _setup('public', function(simong, folder, publicContent, loggedinContent, privateContent, publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Anonymous users only see the public content
                FoldersTestUtil.assertFolderSearchEquals(publicTenant.anonymousRestContext, folder.id, null, [publicContent], function() {

                    // A user from another tenant only sees the public content
                    FoldersTestUtil.assertFolderSearchEquals(publicTenant1.publicUser.restContext, folder.id, null, [publicContent], function() {

                        // A user from the same tenant sees both public and loggedin content
                        FoldersTestUtil.assertFolderSearchEquals(publicTenant.publicUser.restContext, folder.id, null, [publicContent, loggedinContent], function() {

                            // A tenant admin sees everything
                            FoldersTestUtil.assertFolderSearchEquals(publicTenant.adminRestContext, folder.id, null, [publicContent, loggedinContent, privateContent], function() {

                                // A manager sees everything
                                FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder.id, null, [publicContent, loggedinContent, privateContent], function() {

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies anonymous and cross-tenant user cannot search loggedin folders
         */
        it('verify anonymous and cross-tenant user cannot see loggedin folder items', function(callback) {
            _setup('loggedin', function(simong, folder, publicContent, loggedinContent, privateContent, publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Anonymous users cannot search this folder
                FoldersTestUtil.assertFolderSearchFails(publicTenant.anonymousRestContext, folder.id, 401, function() {

                    // A user from another tenant cannot search this folder
                    FoldersTestUtil.assertFolderSearchFails(publicTenant1.publicUser.restContext, folder.id, 401, function() {

                        // A user from the same tenant sees both public and loggedin content
                        FoldersTestUtil.assertFolderSearchEquals(publicTenant.publicUser.restContext, folder.id, null, [publicContent, loggedinContent], function() {

                            // A tenant admin sees everything
                            FoldersTestUtil.assertFolderSearchEquals(publicTenant.adminRestContext, folder.id, null, [publicContent, loggedinContent, privateContent], function() {

                                // A manager sees everything
                                FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder.id, null, [publicContent, loggedinContent, privateContent], function() {

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies only admin and the user themselves can search private folders
         */
        it('verify only self and admin can see private user library items', function(callback) {
            _setup('private', function(simong, folder, publicContent, loggedinContent, privateContent, publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Anonymous users cannot search this folder
                FoldersTestUtil.assertFolderSearchFails(publicTenant.anonymousRestContext, folder.id, 401, function() {

                    // A user from another tenant cannot search this folder
                    FoldersTestUtil.assertFolderSearchFails(publicTenant1.publicUser.restContext, folder.id, 401, function() {

                        // A user from the same tenant cannot search this folder
                        FoldersTestUtil.assertFolderSearchFails(publicTenant.publicUser.restContext, folder.id, 401, function() {

                            // A tenant admin sees everything
                            FoldersTestUtil.assertFolderSearchEquals(publicTenant.adminRestContext, folder.id, null, [publicContent, loggedinContent, privateContent], function() {

                                // A manager sees everything
                                FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder.id, null, [publicContent, loggedinContent, privateContent], function() {

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Searching for folders', function() {

        /**
         * Test that verifies you can search for folders
         */
        it('verify folders can be searched for', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Setup a folder
                FoldersTestUtil.generateTestFolders(simong.restContext, 1, function(folder) {

                    // Search for it
                    FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, null, [folder], [], function() {

                        // Search on the display name
                        FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, folder.displayName, [folder], [], callback);
                    });
                });
            });
        });

        /**
         * Test that verifies that folder search results can contain a thumbnail
         */
        it('verify folder search results can contain a thumbnail', function(callback) {
            _setup('public', function(simong, folder, publicContent, loggedinContent, privateContent, publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Mock some previews on the folder
                FoldersDAO.setPreviews(folder, {'thumbnailUri': 'local:f/cam/bla/thumbnail.png', 'wideUri': 'local:f/cam/bla/wideUri'}, function(err, folder) {
                    assert.ok(!err);

                    FoldersAPI.emit(FoldersConstants.events.UPDATED_FOLDER_PREVIEWS, folder);

                    // When we search for the folder it should contain our thumbnail
                    FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, null, [folder], [], function() {

                        // When we remove the thumbnail, it should be removed from the search result
                        FoldersDAO.setPreviews(folder, {}, function(err, folder) {
                            assert.ok(!err);

                            FoldersAPI.emit(FoldersConstants.events.UPDATED_FOLDER_PREVIEWS, folder);

                            // When we search for the folder it should contain our thumbnail
                            FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, null, [folder], [], callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the visibility of folders is taken into account when searching for folders
         */
        it('verify folder visibility is taken into account', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, simong, nico) {
                assert.ok(!err);

                // Setup a public, loggedin and private folder
                FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'public', function(publicFolder) {
                    FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'loggedin', function(loggedinFolder) {
                        FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'private', function(privateFolder) {

                            // Anonymous users can only see the public folder
                            FoldersTestUtil.assertGeneralFolderSearchEquals(camAnonymousRestContext, 'disp', [publicFolder], [loggedinFolder, privateFolder], function() {

                                // Authenticated users can only see the public and logged in folders
                              FoldersTestUtil.assertGeneralFolderSearchEquals(nico.restContext, 'disp', [publicFolder, loggedinFolder], [privateFolder], function() {

                                    // Simong can see all folders as he created them. Keep in mind that
                                    // we need to search for some term as the endpoint would otherwise
                                    // only return implicit results (and not filtered by access)
                                    FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'disp', [publicFolder, loggedinFolder, privateFolder], [], function() {

                                        // Tenant administrators can see everything
                                        FoldersTestUtil.assertGeneralFolderSearchEquals(camAdminRestContext, 'disp', [publicFolder, loggedinFolder, privateFolder], [], callback);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Searching for folders owned by a principal', function() {

        /**
         * Test that verifies only valid principal ids return results
         */
        it('verify the principal id gets validated', function(callback) {
            SearchTestsUtil.searchAll(camAdminRestContext, 'folder-library', [''], null, function(err, results) {
                assert.equal(err.code, 400);
                assert.ok(!results);

                SearchTestsUtil.searchAll(camAdminRestContext, 'folder-library', ['invalid-user-id'], null, function(err, results) {
                    assert.equal(err.code, 400);
                    assert.ok(!results);

                    return callback();
                });
            });
        });

        /**
         * Test that verifies that the visibility of folders is taken into account when searching for folders
         * in a principal's library
         */
        it('verify folder visibility is taken into account', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, simong, nico) {
                assert.ok(!err);
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, stuartf) {
                    assert.ok(!err);

                    // Setup a public, loggedin and private folder
                    FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'public', function(publicFolder) {
                        FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'loggedin', function(loggedinFolder) {
                            FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'private', function(privateFolder) {

                                // Anonymous users can only see the public folder
                                FoldersTestUtil.assertFolderLibrarySearch(camAnonymousRestContext, simong.user.id, 'disp', [publicFolder], [loggedinFolder, privateFolder], function() {
                                    // Anonymous users from other tenants can only see the public folder
                                    FoldersTestUtil.assertFolderLibrarySearch(gtAnonymousRestContext, simong.user.id, 'disp', [publicFolder], [loggedinFolder, privateFolder], function() {
                                        // Users from other tenants can only see the public folder
                                        FoldersTestUtil.assertFolderLibrarySearch(stuartf.restContext, simong.user.id, 'disp', [publicFolder], [loggedinFolder, privateFolder], function() {

                                            // Authenticated users can only see the public and logged in folders
                                            FoldersTestUtil.assertFolderLibrarySearch(nico.restContext, simong.user.id, 'disp', [publicFolder, loggedinFolder], [privateFolder], function() {

                                                // Simong can see all folders as he created them. Keep in mind that
                                                // we need to search for some term as the endpoint would otherwise
                                                // only return implicit results (and not filtered by access)
                                                FoldersTestUtil.assertFolderLibrarySearch(simong.restContext, simong.user.id, 'disp', [publicFolder, loggedinFolder, privateFolder], [], function() {

                                                    // Tenant administrators can see everything
                                                    FoldersTestUtil.assertFolderLibrarySearch(camAdminRestContext, simong.user.id, 'disp', [publicFolder, loggedinFolder, privateFolder], [], function() {
                                                        // Tenant administrators from other tenants can only see the public folder
                                                        FoldersTestUtil.assertFolderLibrarySearch(gtAdminRestContext, simong.user.id, 'disp', [publicFolder], [loggedinFolder, privateFolder], callback);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Indexing', function() {

        /**
         * Test that verifies that folders can be reindexed
         */
        it('verify folders can be reindexed', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Setup a public folder with some content
                FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'public', function(folder) {

                    RestAPI.Content.createLink(simong.restContext, 'public', 'public', 'public', 'http://www.google.com', null, [], [], function(err, link) {
                        assert.ok(!err);

                        FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folder.id, [link.id], function() {

                            // Sanity-check that folder can be found in a general search
                            FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'disp', [folder], [], function() {

                                // Sanity-check we can search in the folder
                                FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder.id, null, [link], function() {

                                    // Delete all the things
                                    SearchTestsUtil.deleteAll(function() {

                                        // Check that we can no longer find the folder
                                        FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'disp', [], [folder], function() {

                                            // Sanity check that searching in the folder returns 0 results
                                            FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder.id, null, [], function() {

                                                // Reindex all the things
                                                SearchTestsUtil.reindexAll(TestsUtil.createGlobalAdminRestContext(), function() {

                                                    // Check that we can now find the folder again
                                                    FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'disp', [folder], [], function() {

                                                        // Check that we can search in the folder again
                                                        FoldersTestUtil.assertFolderSearchEquals(simong.restContext, folder.id, null, [link], callback);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that updating a folder triggers a reindex for that folder
         */
        it('verify updating a folder triggers a reindex', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Setup a public folder
                FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'public', function(folder) {

                    // Sanity-check that it can be found
                    FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'disp', [folder], [], function() {

                        // Update the folder's name and visibility
                        var updates = {'displayName': 'New displayName', 'visibility': 'private'};
                        RestAPI.Folders.updateFolder(simong.restContext, folder.id, updates, function(err, updatedFolder) {
                            assert.ok(!err);

                            // Assert that the folder's metadata has changed
                            FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'display', [updatedFolder], [], callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that updating a folder's visibility (and containing content) triggers updates in the search index
         */
        it('verify updating a folder\'s visibility affects the content that can be searched on', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, simong, nico) {
                assert.ok(!err);

                // Setup a public folder
                FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'public', function(folder) {

                    // Add some public content
                    RestAPI.Content.createLink(simong.restContext, 'displayName', 'description', 'public', 'http://www.google.com', null, [], [], function(err, link) {
                        assert.ok(!err);

                        FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folder.id, [link.id], function() {

                            // Sanity-check that the content item can be found by Nico
                            SearchTestsUtil.searchAll(nico.restContext, 'general', null, {'resourceTypes': 'content', 'q': 'displayName'}, function(err, results) {
                                assert.ok(!err);
                                assert.ok(_.findWhere(results.results, {'id': link.id}));

                                // Make the folder and all content in it private
                                var updates = {'visibility': 'private'};
                                RestAPI.Folders.updateFolder(simong.restContext, folder.id, updates, function(err, data) {
                                    assert.ok(!err);
                                    RestAPI.Folders.updateFolderContentVisibility(simong.restContext, folder.id, 'private', function(err, data) {
                                        assert.ok(!err);

                                        // Nico should no longer be able to see the content item
                                        SearchTestsUtil.searchAll(nico.restContext, 'general', null, {'resourceTypes': 'content', 'q': 'displayName'}, function(err, results) {
                                            assert.ok(!err);
                                            assert.ok(!_.findWhere(results.results, {'id': link.id}));

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that when a folder gets deleted it gets removed from the search index
         */
        it('verify deleting a folder removes it from the index', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Setup a public folder
                FoldersTestUtil.generateTestFoldersWithVisibility(simong.restContext, 1, 'public', function(folder) {

                    // Sanity-check that it can be found
                    FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'disp', [folder], [], function() {

                        // Delete the folder
                        FoldersTestUtil.assertDeleteFolderSucceeds(simong.restContext, folder.id, function() {

                            // Assert that the folder's metadatacannot be found
                            FoldersTestUtil.assertGeneralFolderSearchEquals(simong.restContext, 'disp', [], [folder], callback);
                        });
                    });
                });
            });
        });
    });
});
