/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Recaptcha = require('recaptcha').Recaptcha;

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var LoginId = require('oae-authentication/lib/model').LoginId;
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');
var PrincipalsConfig = require('oae-config').config('oae-principals');

var Context = require('oae-context').Context;
var PrincipalsAPI = require('./api');
var TenantsAPI = require('oae-tenants');

//////////////////
// Global admin //
//////////////////

/*!
 * Get the current user's basic profile information
 */
OAE.globalAdminRouter.on('get', '/api/me', function(req, res) {
    PrincipalsAPI.getMe(req.ctx, function(err, meData) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, meData);
    });
});

/*!
 * Get a user's basic profile information
 */
OAE.globalAdminRouter.on('get', '/api/user/:id', function(req, res) {
    PrincipalsAPI.getFullUserProfile(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, user);
    });
});

/*!
 * Import users using a CSV file
 */
OAE.globalAdminRouter.on('post', '/api/user/import', function(req, res) {
    var forceProfileUpdate = (req.body.forceProfileUpdate === 'true');
    PrincipalsAPI.importUsers(req.ctx, req.body.tenantAlias, req.files.file, req.body.authenticationStrategy, forceProfileUpdate, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response
        res.set('Content-Type', 'text/plain');
        res.send(200);
    });
});

/*!
 * Make a user a global or tenant admin
 */
OAE.globalAdminRouter.on('post', '/api/user/:id/admin', function(req, res) {
    PrincipalsAPI.setTenantAdmin(req.ctx, req.params.id, req.body.admin, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/*!
 * Create a new user with a local login strategy
 */
OAE.globalAdminRouter.on('post', '/api/user/:tenantAlias/create', function(req, res) {
    var ctx = req.ctx;
    if (!ctx.user() || !ctx.user().isGlobalAdmin()) {
        return res.send(401);
    }
    var loginId = new LoginId(req.params.tenantAlias, AuthenticationConstants.providers.LOCAL, req.body.username, { password: req.body.password });

    var opts = {
        'visibility': req.body.visibility,
        'email': req.body.email,
        'locale': req.body.locale || req.ctx.locale(),
        'timezone': req.body.timezone,
        'publicAlias': req.body.publicAlias,
        'acceptedTC': (req.body.acceptedTC === 'true'),
        'tenantAlias': req.params.tenantAlias,
        'isGlobalAdmin': req.body.isGlobalAdmin,
        'isTenantAdmin': req.body.isTenantAdmin
    };

    AuthenticationAPI.createUser(ctx, loginId, req.body.displayName, opts, function(err, newUser) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(201, newUser);
    });
});

/*!
 * Update a user's basic profile information
 */
OAE.globalAdminRouter.on('post', '/api/user/:id', function(req, res) {
    PrincipalsAPI.updateUser(req.ctx, req.params.id, req.body, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, user);
    });
});

/*!
 * Get a user's basic profile information on the global admin router
 */
OAE.globalAdminRouter.on('get', '/api/user/:id', function(req, res) {
    PrincipalsAPI.getFullUserProfile(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, user);
    });
});

/////////////
// Tenants //
/////////////

/*!
 * Get the current user's basic profile information
 */
OAE.tenantRouter.on('get', '/api/me', function(req, res) {
    PrincipalsAPI.getMe(req.ctx, function(err, meData) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, meData);
    });
});

/*!
 * Create a new user with a local login strategy
 */
OAE.tenantRouter.on('post', '/api/user/create', function(req, res) {
    var ctx = req.ctx;
    var tenant = ctx.tenant();
    var user = ctx.user();

    /*!
     * Create a local user account
     */
    var createUser = function() {
        var loginId = new LoginId(tenant.alias, AuthenticationConstants.providers.LOCAL, req.body.username, { password: req.body.password });

        var opts = {
            'visibility': req.body.visibility,
            'email': req.body.email,
            'locale': req.body.locale || req.ctx.locale(),
            'timezone': req.body.timezone,
            'publicAlias': req.body.publicAlias,
            'acceptedTC': (req.body.acceptedTC === 'true'),
            'isGlobalAdmin': req.body.isGlobalAdmin,
            'isTenantAdmin': req.body.isTenantAdmin
        };

        AuthenticationAPI.createUser(ctx, loginId, req.body.displayName, opts, function(err, newUser) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(201, newUser);
        });
    };

    if (user) {
        if (user.isAdmin(tenant.alias)) {
            // If the current user is an admin, the reCaptcha verification can be skipped
            return createUser();
        } else {
            // Non-admin users cannot create accounts
            return res.send(401);
        }
    }

    // Check if the Terms and Conditions has been agreed to (if applicable)
    var needsTermsAndConditionsAgreement = PrincipalsConfig.getValue(tenant.alias, 'termsAndConditions', 'enabled');
    var acceptedTC = (req.body.acceptedTC === 'true');
    if (needsTermsAndConditionsAgreement && acceptedTC !== true) {
        return res.send(400, 'You need to accept the Terms and Conditions');
    }

    // Check if we need to validate with reCaptcha
    var needsReCaptcha = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'enabled');

    if (!needsReCaptcha) {
        return createUser();
    }

    // An anonymous user, do the recaptcha check
    var recaptchaData = {
        'remoteip':  req.connection.remoteAddress,
        'challenge': req.body.recaptchaChallenge,
        'response':  req.body.recaptchaResponse
    };

    var recaptchaPublicKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'publicKey');
    var recaptchaPrivateKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'privateKey');

    var recaptcha = new Recaptcha(recaptchaPublicKey, recaptchaPrivateKey, recaptchaData);

    recaptcha.verify(function(success, error_code) {
        if (success) {
            createUser();
        } else {
            return res.send(400, 'Invalid reCaptcha token');
        }
    });
});

/*!
 * Import users using a CSV file
 */
OAE.tenantRouter.on('post', '/api/user/import', function(req, res) {
    var forceProfileUpdate = (req.body.forceProfileUpdate === 'true');
    PrincipalsAPI.importUsers(req.ctx, null, req.files.file, req.body.authenticationStrategy, forceProfileUpdate, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response
        res.set('Content-Type', 'text/plain');
        res.send(200);
    });
});

/*!
 * Returns the Terms and Conditions for the current tenant
 */
OAE.tenantRouter.on('get', '/api/user/termsAndConditions', function(req, res) {
    var termsAndConditions = PrincipalsAPI.getTermsAndConditions(req.ctx, req.query.locale);
    res.send(200, termsAndConditions);
});

/*!
 * Get a user's basic profile information on the tenant router
 */
OAE.tenantRouter.on('get', '/api/user/:id', function(req, res) {
    PrincipalsAPI.getFullUserProfile(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, user);
    });
});

/*!
 * Update a user's basic profile information
 */
OAE.tenantRouter.on('post', '/api/user/:id', function(req, res) {
    PrincipalsAPI.updateUser(req.ctx, req.params.id, req.body, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, user);
    });
});

/*!
 * Set a user's profile picture
 */
OAE.tenantRouter.on('post', '/api/user/:id/picture', function(req, res) {
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.id, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response.
        res.set('Content-Type', 'text/plain');
        res.send(200, principal);
    });
});

/*!
 * Get the list of groups a user is a member of
 */
OAE.tenantRouter.on('get', '/api/user/:id/memberships', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    PrincipalsAPI.getMembershipsLibrary(req.ctx, req.params.id, req.query.start, limit, function(err, memberships, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, {'results': memberships, 'nextToken': nextToken});
    });
});

/*!
 * Make a user a tenant admin
 */
OAE.tenantRouter.on('post', '/api/user/:id/admin', function(req, res) {
    PrincipalsAPI.setTenantAdmin(req.ctx, req.params.id, req.body.admin, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/*!
 * Accepts the Terms and Conditions
 */
OAE.tenantRouter.on('post', '/api/user/:id/termsAndConditions', function(req, res) {
    PrincipalsAPI.acceptTermsAndConditions(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, user);
    });
});
