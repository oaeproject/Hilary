/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var User = require('oae-principals/lib/model.user').User;
var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;

var Validator = require('oae-util/lib/validator').Validator;

describe('Utilities', function() {
    
    describe('Validator', function() {

        it('verify undefined gets checked as empty', function(callback) {
            var validator = new Validator();
            validator.check(undefined, 'foo').notEmpty();
            assert.ok(validator.hasErrors());
            callback();
        });

        /**
         * Test whether or not the validator used to check for empty strings
         * is working as intended
         */
        it('verify empty validator', function(callback) {
            // Single test successful
            var validator = new Validator();
            validator.check('Non-empty string').notEmpty();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Single test failed
            validator = new Validator();
            validator.check('').notEmpty();
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
        
            validator = new Validator();
            validator.check(' ').notEmpty();
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            // Multiple success
            validator = new Validator();
            validator.check('Non').notEmpty();
            validator.check('Empty').notEmpty();
            validator.check('String').notEmpty();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Multiple fail
            validator = new Validator();
            validator.check('').notEmpty();
            validator.check(' ').notEmpty();
            validator.check('   ').notEmpty();
            validator.check('String').notEmpty();
            assert.ok(validator.hasErrors());
            assert.equal(validator.getErrors().length, 3);
        
            callback();
        });
        
        /**
         * Test whether or not the validator used to check for valid integers
         * is working as intended
         */
        it('verify integer validator', function(callback) {
            // Single test successful
            var validator = new Validator();
            validator.check(10).isInt();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            validator = new Validator();
            validator.check('20').isInt();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Single test failed
            validator = new Validator();
            validator.check('String').isInt();
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            // Multiple success
            validator = new Validator();
            validator.check(0).isInt();
            validator.check(1).isInt();
            validator.check(100).isInt();
            validator.check(-100).isInt();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Multiple fail
            validator = new Validator();
            validator.check('').isInt();
            validator.check('10').isInt();
            validator.check('String').isInt();
            validator.check(100).isInt();
            assert.ok(validator.hasErrors());
            assert.equal(validator.getErrors().length, 2);
        
            callback();
        });
        
        /**
         * Test whether or not the validator used to check for valid email addresses
         * is working as intended
         */
        it('verify email validator', function(callback) {
            // Single test successful
            var validator = new Validator();
            validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Single test failed
            validator = new Validator();
            validator.check('nicolaas matthijs@caret.cam.ac.uk').isEmail();
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            validator = new Validator();
            validator.check('http://www.google.co.uk').isEmail();
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            // Multiple success
            validator = new Validator();
            validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
            validator.check('bertpareyn@gmail.com').isEmail();
            validator.check('sfmorgan@btinternet.com').isEmail();
            validator.check('sally.phillips+unique_reference@gmail.com').isEmail();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Multiple fail
            validator = new Validator();
            validator.check('').isEmail();
            validator.check('String').isEmail();
            validator.check('nicolaas matthijs@caret.cam.ac.uk').isEmail();
            validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
            assert.ok(validator.hasErrors());
            assert.equal(validator.getErrors().length, 3);
        
            callback();
        });
        
        /**
         * Test whether or not the validator used to check for valid URLs
         * is working as intended
         * @param {Object} test     Standard nodeunit test object
         */
        it('verify URL validator', function(callback) {
            // Single test successful
            var validator = new Validator();
            validator.check('http://www.sakaiproject.org').isUrl();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            validator = new Validator();
            validator.check('http://example.com/assert.html').isUrl();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Single test failed
            validator = new Validator();
            validator.check('String').isUrl();
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            validator = new Validator();
            validator.check('://www.google.co.uk').isUrl();
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            // Multiple success
            validator = new Validator();
            validator.check('https://oae-widgets.sakaiproject.org/sdk').isUrl();
            validator.check('http://support.google.com/docs/bin/answer.py?hl=en&answer=66343').isUrl();
            validator.check('http://www.w3.org/2004/02/skos/core#broader').isUrl();
            validator.check('https://wordpress.org/support/topic/plugin-addthis-odd-url-string?replies=5').isUrl();
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Multiple fail
            validator = new Validator();
            validator.check('').isUrl();
            validator.check('String').isUrl();
            validator.check('www.example.com').isUrl();
            validator.check('https://twimg0-a.akamaihd.net/profile_images/300425859/ls_1278_Nicolaas-website.jpg').isUrl();
            assert.ok(validator.hasErrors());
            assert.equal(validator.getErrors().length, 2);
        
            callback();
        });
        
        /**
         * Test whether or not the validator used to check for a logged in Sakai OAE
         * User is working as intended
         */
        it('verify context validator', function(callback) {
            // Valid tenant
            var tenant1 = new Tenant('cam', 'Cambridge University', 2001);
            // Invalid tenant
            var tenant2 = new Tenant(null, 'Georgia Tech', 2002);
            // Valid users
            var user1 = new User(tenant1, 'u:cam:nm417', 'nm417', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
            var user2 = new User(tenant1, 'u:cam:nm417', 'nm417', 'private', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
            var user3 = new User(tenant1, 'u:cam:nm417', null, null, null, null, null);
            // Invalid users
            var user4 = new User(tenant1, null, 'nm417', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
            var user5 = new User(tenant1, '', 'nm417', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
        
            ////////////////////////////
            // Single test successful //
            ////////////////////////////
        
            var validator = new Validator();
            validator.check().isLoggedInUser(new Context(tenant1, user1));
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            ////////////////////////
            // Single test failed //
            ////////////////////////
        
            // Empty context
            validator = new Validator();
            validator.check().isLoggedInUser(null);
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            // Tenant, no user
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(tenant1, null));
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
        
            // Tenant, invalid user
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(tenant1, user4));
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
        
            // No tenant, user
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(null, user1));
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            // Invalid tenant, user
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(tenant2, user1));
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            
            //////////////////////
            // Multiple success //
            //////////////////////
        
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(tenant1, user1));
            validator.check().isLoggedInUser(new Context(tenant1, user2));
            validator.check().isLoggedInUser(new Context(tenant1, user3));
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
        
            // Multiple fail
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(tenant1, user4));
            validator.check().isLoggedInUser(new Context(tenant1, user5));
            validator.check().isLoggedInUser(new Context(tenant2, user1));
            validator.check().isLoggedInUser(new Context(tenant2, user2));
            validator.check().isLoggedInUser(new Context(tenant1, user1));
            validator.check().isLoggedInUser(new Context(tenant1, user2));
            validator.check().isLoggedInUser(new Context(tenant1, user3));
            assert.ok(validator.hasErrors());
            assert.equal(validator.getErrors().length, 4);
        
            callback();
        });

        it('verify timezone validation', function(callback) {
            var validateTimeZone = function(timeZone, isValid) {
                validator = new Validator();
                validator.check(timeZone).isValidTimeZone();
                assert.equal(validator.hasErrors(), !isValid, 'Failed on ' + timeZone);
            };

            // We only support timezones of the format
            // foo/bar[/optional]
            validateTimeZone('Asia/Bangkok', true);
            validateTimeZone('Asia/Macao', true);
            validateTimeZone('Asia/Pyongyang', true);
            validateTimeZone('Asia/Seoul', true);
            validateTimeZone('Asia/Shanghai', true);

            validateTimeZone('Australia/Canberra', true);
            validateTimeZone('Australia/Melbourne', true);
            validateTimeZone('Australia/Sydney', true);

            validateTimeZone('Canada/Central', true);

            validateTimeZone('Europe/Amsterdam', true);
            validateTimeZone('Europe/Brussels', true);
            validateTimeZone('Europe/London', true);
            validateTimeZone('Europe/Brussels', true);

            validateTimeZone('US/Pacific', true);
            validateTimeZone('US/Mountain', true);

            // We won't support short hand timezones such as UTC
            validateTimeZone('EST', false);
            validateTimeZone('BST', false);
            validateTimeZone('UTC', false);

            // None of those ogre timezones either.
            validateTimeZone('SfajslhfafhjlksahjklafT', false);
            callback();
        });
    });
});
