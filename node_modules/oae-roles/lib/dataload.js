/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');

var api = require('./api');
var model = require('./model');
var schema = require('./schema');
var util = require('./util');

module.exports = (function() {

    var ResourceTypes = { CONTENT: 'c' };
    var PrincipalTypes = { USER: 'u' };

    var that = {};

	/**
	 * Load a batch of data in a sequental (numerically based) manner.
	 *
	 * @param {String} baseTenantId The tenant prefix, the suffix will be the numerical increment of the tenant
	 * @param {String} baseUserId The user id prefix, the suffix will be the numerical increment of users
	 * @param {String} baseContentId The content id prefix, the suffix will be the numerical increment of content
	 * @param {Number} numTenants The number of tenants to load
	 * @param {Number} numUserIdsPerTenant The number of users should be assigned roles per tenant; if there are 5 tenants and 5 users, there will be 5*5=25 users total
	 * @param {Number} numContentPerUserId The number of content items to which each user will be assigned a role. If there are 5 tenants, 5 users, and 5 content items, there will be total 5*5*5=125 role entries
	 */
    that.loadSequential = function(baseTenantId, baseUserId, baseContentId, numTenants, numUserIdsPerTenant, numContentPerUserId, callback) {
        Cassandra.createKeyspace('oae', function() {
            schema.ensureSchema(function(err) {
                if (err) {
                    throw err;
                }
                loadSequential(baseTenantId, baseUserId, baseContentId, numTenants, numUserIdsPerTenant, numContentPerUserId, callback);
            });
        });
    };

    function loadSequential(baseTenantId, baseUserId, baseContentId, numTenants, numUserIdsPerTenant, numContentPerUserId, callback) {
        callback = callback || function() {};

        if (numTenants === 0) {
            callback();
            return;
        }

        var tenantId = baseTenantId+'-'+numTenants;
        var userId = baseUserId+'-'+numTenants;
        var contentId = baseContentId+'-'+numTenants;

        loadUserIdsForTenant(tenantId, userId, contentId, numUserIdsPerTenant, numContentPerUserId, function() {
            loadSequential(baseTenantId, baseUserId, baseContentId, numTenants-1, numUserIdsPerTenant, numContentPerUserId, callback);
        });
    };

    function loadUserIdsForTenant(tenantId, baseUserId, baseContentId, numUserIdsPerTenant, numContentPerUserId, callback) {
        callback = callback || function() {};

        if (numUserIdsPerTenant === 0) {
            callback();
            return;
        }

        var userId = baseUserId+'-'+numUserIdsPerTenant;
        var contentId = baseContentId+'-'+numUserIdsPerTenant;
        var principalUuid = util.toUuid(PrincipalTypes.USER, tenantId, userId);

        loadContentRolesForUser(principalUuid, baseContentId, numContentPerUserId, function() {
            loadUserIdsForTenant(tenantId, baseUserId, baseContentId, numUserIdsPerTenant-1, numContentPerUserId, callback);
        });
    }

    function loadContentRolesForUser(principalUuid, baseContentId, numContentPerUserId, callback) {
        callback = callback || function() {};

        if (numContentPerUserId === 0) {
            callback();
            return;
        }

        var contentId = baseContentId+'-'+numContentPerUserId
        var contentUuid = util.toUuid(ResourceTypes.CONTENT, util.getPrincipalFromUuid(principalUuid).tenantId, contentId);
        api.setRole(principalUuid, contentUuid, 'viewer', function(err) {
            if (!err) {
                console.log('Added role viewer for %s -> %s...', principalUuid, contentUuid);
                loadContentRolesForUser(principalUuid, baseContentId, numContentPerUserId-1, callback);
            } else {
                console.log(err);
            }
        });
    }

    return that;
})();