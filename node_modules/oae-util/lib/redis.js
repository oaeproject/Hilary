/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var redis = require('redis');
var log = require('oae-logger').logger('oae-redis');

var config = null;
var client = null;

/**
 * Initialize this Redis utility.
 *
 * @param  {Object}     redisConfig     The redis configuration object
 */
module.exports.init = function(redisConfig) {
    config = redisConfig;
    client = createClient();
};

/**
 * Sets up a redis connection.
 *
 * @return {RedisClient} A redis client that is connected to one of redis db indexes.
 */
var createClient = module.exports.createClient = function() {
    return createClientFromConfig(config);
};

/**
 * Creates a redis connection from a defined set of configuration.
 *
 * @param  {Object}     config      A redis configuration object
 * @return {RedisClient}            A redis client that is configured with the given configuration
 */
var createClientFromConfig = module.exports.createClientFromConfig = function(_config) {
    // Open a socket.
    var client = redis.createClient(_config.port, _config.host);

    // Authenticate (if required, redis allows for async auth)
    if (_config.pass && _config.pass !== '') {
        client.auth(_config.pass, function(err, res) {
            if (err) {
                log().error({err: err}, 'Couldn\'t authenticate with redis.');
            }
        });
    }

    // Select the correct DB index.
    var dbIndex = _config.dbIndex || 0;
    client.select(dbIndex, function(err, res) {
        if (err) {
            log().error({err: err}, 'Couldn\'t select the redis DB index \'%s\'', dbIndex);
        }
    });

    // Register an error handler.
    var redisErrorHandler = function(err) {
        log().error({err: err}, 'Got an error when dealing with redis.');
    };
    client.on("error", redisErrorHandler);

    // Done.
    return client;
};

/**
 * @return {RedisClient} A redis client that gets created when the app starts up.
 */
var getClient = module.exports.getClient = function() {
    return client;
};

/**
 * Flushes all messages from the system that we're currently pushing to.
 *
 * @param  {Function} callback       A callback method.
 * @param  {Object}   callback.err   An error object if any.
 */
var flush = module.exports.flush = function(callback) {
    client.flushdb([], function(err) {
        if (err) {
            return callback({'code': 500, 'msg': err});
        }
        return callback();
    });
};
