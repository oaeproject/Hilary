/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var activityTypes = {};
var activityEntityTypes = {};
var activityEntityAssociations = {};

/**
 * Register special activity behaviour
 *
 * @see ActivityAPI#registerActivityType
 */
var registerActivityType = module.exports.registerActivityType = function(activityType, options) {
    if (activityTypes[activityType]) {
        throw new Error(util.format('Attempted to register duplicate activity type of type "%s"', activityType));
    }

    activityTypes[activityType] = options;
};

/**
 * Get all the registered activity types in the system
 *
 * @return {Object}     All the registered activity types in the system
 * @see #registerActivityType
 */
var getRegisteredActivityTypes = module.exports.getRegisteredActivityTypes = function() {
    return activityTypes;
};

/**
 * Register special entity behaviour
 *
 * @see ActivityAPI#registerActivityEntity
 */
var registerActivityEntityType = module.exports.registerActivityEntityType = function(activityEntityType, options) {
    if (activityEntityTypes[activityEntityType]) {
        throw new Error(util.format('Attempted to register duplicate activity entity type of type "%s"', activityEntityType));
    }

    activityEntityTypes[activityEntityType] = options;
};

/**
 * Get all the registered activity entity types in the system
 *
 * @return {Object}     All the registered activity types in the system
 */
var getRegisteredActivityEntityTypes = module.exports.getRegisteredActivityEntityTypes = function() {
    return activityEntityTypes;
};

/**
 * Register an activity entity association
 *
 * @see ActivityAPI#registerActivityEntityAssociation
 */
var registerActivityEntityAssociation = module.exports.registerActivityEntityAssociation = function(activityEntityType, associationName, associationFunction) {
    if (activityEntityAssociations[activityEntityType] && activityEntityAssociations[activityEntityType][associationName]) {
        throw new Error(util.format('Attempted to register duplicate activity entity association of type "%s" and name "%s"', activityEntityType, associationName));
    }

    activityEntityAssociations[activityEntityType] = activityEntityAssociations[activityEntityType] || {};
    activityEntityAssociations[activityEntityType][associationName] = associationFunction;
};

/**
 * Get all the registered activity entity associations in the system
 *
 * @return {Object}     All the registered activity entity associations in the system
 */
var getRegisteredActivityEntityAssociations = module.exports.getRegisteredActivityEntityAssociations = function() {
    return activityEntityAssociations;
};
