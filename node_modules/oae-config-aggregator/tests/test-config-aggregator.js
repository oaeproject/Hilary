/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var ConfigAPI = require('oae-config-aggregator');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TestAPI = require('oae-tests');

var request = TestAPI.Http.createRequest();

describe('Config Aggregator', function() {

    describe('Modules', function() {
        it('Test getting a single module\'s configuration', function(callback) {
            ConfigAPI.getSingleModule('authentication', function(module) {
                assert.equal('oae-authentication', module[0].id);
                callback();
            });
        });

        it('Test getting all available modules succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/modules'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                body = JSON.parse(body);
                assert.ok(body[0].id);
                assert.ok(body[0].config);
                assert.ok(body[0].config.options);
                callback();
            });
        });
    });

    describe('Admin UI', function() {

        it('Test accessing the global admin UI succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/admin.html'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        it('Test accessing the tenant admin UI succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2001/admin/tenant/camtest'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

    });

    describe('Configuration', function() {

        it('Test configuration retrieval requires tenant ID', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/configuration'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 400);
                assert.equal(body, 'Missing tenantid');
                callback();
            });
        });

        it('Test configuration retrieval succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/configuration',
                'qs': {
                    'tenantid': 'camtest'
                }
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        it('Test persisting a global configuration value succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/admin/update',
                'json': {
                    'oae-authentication/twitter-authentication/twitter-authentication-enabled': {
                        'tenantid': 'global',
                        'value': false
                    }
                }
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        it('Test global configuration value overrides config.json value', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/configuration',
                'qs': {
                    'tenantid': 'global'
                }
            }, function(err, response, modules) {
                var val = true;
                modules = JSON.parse(modules);
                for (var i = 0, l = modules.length; i < l; i++) {
                    if (modules[i].id === 'oae-authentication') {
                        for (var opt in modules[i].config.options) {
                            if (opt === 'twitter-authentication') {
                                for (var el in modules[i].config.options[opt].elements) {
                                    if (el === 'twitter-authentication-enabled') {
                                        if (modules[i].config.options[opt].elements[el].value === false) {
                                            val = modules[i].config.options[opt].elements[el].value;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                assert.equal(val, false);
                callback();
            });
        });

        it('Test persisting a tenant configuration value succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/admin/update',
                'json': {
                    "oae-authentication/twitter-authentication/twitter-authentication-enabled":{
                        "tenantid": "camtest",
                        "value": true
                    }
                }
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        it('Test tenant configuration value overrides global value', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/configuration',
                'qs': {
                    'tenantid': 'camtest'
                }
            }, function(err, response, modules) {
                var val = false;
                modules = JSON.parse(modules);
                for (var i = 0, l = modules.length; i < l; i++) {
                    if (modules[i].id === 'oae-authentication') {
                        for (var opt in modules[i].config.options) {
                            if (opt === 'twitter-authentication') {
                                for (var el in modules[i].config.options[opt].elements) {
                                    if (el === 'twitter-authentication-enabled') {
                                        if (modules[i].config.options[opt].elements[el].value === true) {
                                            val = modules[i].config.options[opt].elements[el].value;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                assert.equal(val, true);
                callback();
            });
        });

    });

    describe('Authentication', function() {
        it('Test a global administrator can log in and log out of the administration panel', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            var username = 'user-' + r;

            var serverTenant = new Tenant('global', 'Global Administration', 'Global Administration Tenant', 2000, 'localhost:2000', true, false);
            var ctx = new Context(serverTenant, null);

            PrincipalsAPI.createUser(ctx, username, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId) {
                assert.ok(!err);

                // Log in.
                request.post({
                    'uri': 'http://localhost:2000/api/auth/login',
                    'method': 'POST',
                    'form': {'username': username, 'password': 'password'}
                }, function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(200, response.statusCode, "Expected to be logged in.");

                    // the request module has a built-in cookie jar.
                    request.get('http://localhost:2000/api/me', function(err, response, body) {
                        assert.ok(!err);
                        assert.equal(200, response.statusCode);
                        var data = JSON.parse(body);
                        assert.equal(userId, data.userId);
                        assert.equal('John', data.profile.firstName);
                        assert.equal('Doe', data.profile.lastName);
                        assert.equal('John Doe', data.profile.displayName);

                        // logout.
                        request.post({
                            'uri': 'http://localhost:2000/api/auth/logout',
                            'followRedirect': false
                        }, function(err, response, body) {
                            assert.ok(!err);
                            assert.equal(200, response.statusCode, "Expected to be succesfully logged out.");

                            request.get('http://localhost:2000/api/me', function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(200, response.statusCode);
                                var j = JSON.parse(body);
                                assert.equal(true, j.anon);
                                callback();
                            });
                        });
                    });
                });
            });
        });
        });

});
