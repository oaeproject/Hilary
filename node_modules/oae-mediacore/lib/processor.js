/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var crypto = require('crypto');
var fs = require('fs');
var request = require('request');

var log = require('oae-logger').logger('oae-mediacore');

var MediaCoreAPI = require('./api');
var MediaCoreConfig = require('oae-config').config('oae-mediacore');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PreviewUtil = require('oae-preview-processor/lib/util');

var mcConf = {};

/**
 * @borrows Interface.test as Videos.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    if (contentObj.resourceSubType === 'file' && PreviewConstants.TYPES.VIDEO.indexOf(contentObj.mime) !== -1 && MediaCoreConfig.getValue('admin', 'mediacore', 'enabled')) {
        callback(null, 20);
    } else {
        callback(null, -1);
    }
};

var _checkError = function(err, res, body, callback) {
    if (err) {
        log().error(err);
        callback(err);
        return true;
    }

    log().trace(res.headers);
    log().trace(body);
    if (res.statusCode >= 300) {
        log().error({'code': res.statusCode, 'msg': body});
        callback({'code': res.statusCode, 'msg': body});
        return true;
    }
    return false;
};

var _addMetadata = function(ctx, id, callback) {
    ctx.addPreviewMetadata('mediacoreId', id);
    // Get thumbnail urls
    var thumbUrl = MediaCoreAPI.getSignedUrl(mcConf.url + '/api2/media/' + id + '/thumbs', '', mcConf.keyId, mcConf.secret, 15);
    request.get(thumbUrl, function(err, res, body) {
        if(_checkError(err, res, body, callback)) {
            return;
        }
        body = JSON.parse(body);
        ctx.addPreview(body.sizes.l, 'thumbnail');
        ctx.addPreview(body.sizes.l, 'small');
        ctx.addPreview(body.sizes['720p'], 'medium');
        ctx.addPreview(body.sizes['720p'], 'large');
        ctx.addPreview(body.sizes['720p'], 'wide');
        callback();
    });
};

/**
 * @borrows Interface.generatePreviews as Videos.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {
    // Download the file.
    ctx.download(function(err, path) {
        if (err) {
            log().error(err);
            return callback(err);
        }

        mcConf = MediaCoreAPI.getConfig();

        var createMediaUrl = MediaCoreAPI.getSignedUrl(mcConf.url + '/api2/media', '', mcConf.keyId, mcConf.secret, 15);
        // Create a media item
        request.post({
            'url': createMediaUrl,
            'json': {
                'collection_id': mcConf.collectionId,
                'title': contentObj.displayName,
                'byline': contentObj.createdBy.displayName,
                'description': null,
                'tags': null
            }
        }, function(err, res, body) {
            if (_checkError(err, res, body, callback)) {
                return;
            }

            var mediaId = body.id;

            // Save the mediaId to Cassandra so we can use it to refresh thumbnails later
            MediaCoreAPI.saveMediaCoreId(ctx, mediaId, function(err) {

                var createMediaFileUrl = MediaCoreAPI.getSignedUrl(mcConf.url + '/api2/media/' + mediaId + '/files', '', mcConf.keyId, mcConf.secret, 15);
                // Ask mediacore to let us upload a file to the media item
                request.post({
                    'url': createMediaFileUrl,
                    'json': {
                        'upload_type': 'video',
                        'upload_name': contentObj.displayName,
                        'upload_size': contentObj.size
                    }
                }, function(err, res, body) {
                    if (_checkError(err, res, body, callback)) {
                        return;
                    }

                    var uploadProtocol = body.upload.protocols.form_data;

                    // Tell mediacore to "publish" the media item
                    var publishMediaUrl =  MediaCoreAPI.getSignedUrl(mcConf.url + '/api2/media/' + mediaId + '/publish', '', mcConf.keyId, mcConf.secret, 15);
                    request.post({
                        'url': publishMediaUrl
                    }, function(err, res, body) {
                        if (_checkError(err, res, body, callback)) {
                            return;
                        }

                        // Upload the file as multipart/form-data
                        var req = request.post(uploadProtocol.upload_url, function(err, res, body) {
                            if (_checkError(err, res, body, callback)) {
                                return;
                            }

                            // Notify mediacore that we're done uploading the file
                            if (uploadProtocol.postprocess_url) {
                                var postprocessUrl = MediaCoreAPI.getSignedUrl(mcConf.url + uploadProtocol.postprocess_url, '', mcConf.keyId, mcConf.secret, 15);
                                request.post({
                                    'url': postprocessUrl,
                                    'json': {
                                        'response_status': res.statusCode,
                                        'response_body': body
                                    }
                                }, function(err, res, body) {
                                    if (_checkError(err, res, body, callback)) {
                                        return;
                                    }

                                    _addMetadata(ctx, mediaId, callback);
                                });
                            } else {
                                _addMetadata(ctx, mediaId, callback);
                            }

                        });
                        var form = req.form();
                        for (var param in uploadProtocol.upload_post_params) {
                            if (uploadProtocol.upload_post_params.hasOwnProperty(param)) {
                                form.append(param, uploadProtocol.upload_post_params[param]);
                            }
                        }
                        form.append(uploadProtocol.upload_file_param, fs.createReadStream(path));
                    });
                });
            });
        });
    });
};
