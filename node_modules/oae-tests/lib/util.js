/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var ShortId = require('shortid');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;

/**
 * Generate a number of random users that can be used inside of tests
 * 
 * @param  {RestContext}  restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {Number}       total               The total number of test groups that need to be created. If not provided, a single test group will be created
 * @param  {Function}     callback            Standard callback method
 * @param  {Object}       callback.err        Error object containing error code and error message
 * @param  {Object}       callback.response   Object where the keys are the user ids of the created users and the values are objects with a key 'user' that contains the user object and a key 'restContext' that contains the Rest Context object for that user
 */
var generateTestUsers = module.exports.generateTestUsers = function(restCtx, total, callback) {
    total = total || 1;
    var createdUsers = {};

    var userCreated = function(err, userObj) {
        if (err) {
            return callback({'code': 500, 'msg': 'An error occured whilst creating random test users'});
        }
        createdUsers[userObj.id] = {
            'user': userObj,
            'restContext': new RestContext(restCtx.host, userObj.username, 'password', restCtx.hostHeader)
        };
        if (_.keys(createdUsers).length === total) {
            callback(null, createdUsers);
        }
    };
    
    for (var u = 0; u < total; u++) {
        RestAPI.User.createUser(restCtx, generateTestUserId('random-user'), 'password', 'John Doe', null, userCreated);
    }
};

/**
 * Generate a number of random groups that can be used inside of tests
 * 
 * @param  {RestContext}  restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {Number}       total               The total number of test groups that need to be created. If not provided, a single test group will be created
 * @param  {Function}     callback            Standard callback method
 * @param  {Object}       callback.err        Error object containing error code and error message
 * @param  {Object}       callback.response   Object where the keys are the group ids of the created groups and the values are the actual group objects
 */
var generateTestGroups = module.exports.generateTestGroups = function(restCtx, total, callback) {
    total = total || 1;
    var createdGroups = {};

    var groupCreated = function(err, groupObj) {
        if (err) {
            return callback({'code': 500, 'msg': 'An error occured whilst creating random test groups'});
        }
        createdGroups[groupObj.id] = groupObj;
        if (_.keys(createdGroups).length === total) {
            callback(false, createdGroups);
        }
    };
    
    // We first have to make sure that the user creating the groups is logged in, otherwise the asynchronous
    // nature will confuse the cookie jar management in OAE Rest
    RestAPI.User.getMe(restCtx, function(err, meObj) {
        if (err) {
            return callback({'code': 500, 'msg': 'An error occured whilst trying to log in the user'});
        }
        for (var g = 0; g < total; g++) {
            RestAPI.Group.createGroup(restCtx, generateTestGroupId('random-group'),'Group title', 'Group description', 'public', 'yes', [], [], groupCreated);
        }
    });
};

/**
 * Generate a random user id that can be used inside of tests. We use a double Math.random randomizer to make
 * the collision chances even smaller.
 * 
 * @param  {String}     seed        String that should be used as the first part of the generated user id
 * @return {String}                 Random user id
 */
var generateTestUserId = module.exports.generateTestUserId = function(seed) {
    return (seed || 'user') + '-' + ShortId.generate();
};

/**
 * Generate a random group id that can be used inside of tests. We use a double Math.random randomizer to make
 * the collision chances even smaller.
 * 
 * @param  {String}     seed        String that should be used as the first part of the generated group id
 * @return {String}                 Random group id
 */
var generateTestGroupId = module.exports.generateTestGroupId = function(seed) {
    return (seed || 'group') + '-' + ShortId.generate();
};

/**
 * Create a Rest Context object that represents an anonymous or logged in user and can be used for tests
 * 
 * @param  {String}         host             Tenant URL for the tenant on which we want to perform a REST call
 * @param  {String}         [username]       Username for the user performing the request. This should be null for an anonymous user
 * @param  {String}         [password]       Password for the user performing the request. This should be null for an anonymous user
 * @return {RestContext}                     Rest Context object that represents the anonymous or logged in user user on the provided tenant
 */
var createTenantRestContext = module.exports.createTenantRestContext = function(host, username, password) {
    return new RestContext('http://localhost:2001', username, password, host);
};

/**
 * Create a Rest Context object that represents an admin user for a teant and can be used for tests
 * 
 * @param  {String}         host             Tenant URL for the tenant on which we want to perform a REST call
 * @return {RestContext}                     Rest Context object that represents the admin user on the provided tenant
 */
var createTenantAdminRestContext = module.exports.createTenantAdminRestContext = function(host) {
    return createTenantRestContext(host, 'administrator', 'administrator');
};

/**
 * Create a Rest Context object that represents an anonymous or logged in user on the global admin server 
 * and can be created for tests
 * 
 * @param  {String}         [username]       Username for the user performing the request. This should be null for an anonymous user.
 * @param  {String}         [password]       Password for the user performing the request. This should be null for an anonymous user
 * @return {RestContext}                     Rest Context object that represents the anonymous or logged in user on the global admin server
 */
var createGlobalRestContext = module.exports.createGlobalRestContext = function(username, password) {
    return new RestContext('http://localhost:2000', username, password);
};

/**
 * Create a Rest Context object that represents the admin user on the global admin server and can be created 
 * for tests
 * 
 * @return {RestContext}                     Rest Context object that represents the global admin user on the provided tenant
 */
var createGlobalAdminRestContext = module.exports.createGlobalAdminRestContext = function() {
    return createGlobalRestContext('administrator', 'administrator');
};
