/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');


describe('Config Aggregator', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the global admin, tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up tenant admin rest context
        camAdminRestContext = TestsUtil.createAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createAdminRestContext('http://localhost:2000');
        callback();
    });

    describe('Admin UI', function() {

        /**
         * Test that verifies that the global admin UI can be accessed
         */
        it('verify access global admin', function(callback) {
            RestAPI.Config.getGlobalAdminUI(globalAdminRestContext, function(err, adminui) {
                assert.ok(!err);
                assert.ok(adminui);
                callback();
            });
        });

        /**
         * Test that verifies that the tenant admin UI can be accessed
         */
        it('verify access tenant admin', function(callback) {
            RestAPI.Config.getTenantAdminUI(camAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, adminui) {
                assert.ok(!err);
                assert.ok(adminui);
                callback();
            });
        });

    });


    describe('Configuration', function() {

        /**
         * Test that verifies that the global configuration can be retrieved
         */
        it('verify get global config', function(callback) {
            RestAPI.Config.getConfig(globalAdminRestContext, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                assert.equal(config['oae-authentication'].title, 'OAE Authentication Module');
                callback();
            });
        });

        /**
         * Test that verifies that a global configuration value can be persisted
         */
        it('verify set global config value', function(callback) {
            RestAPI.Config.setConfig(globalAdminRestContext, 'oae-authentication/twitter/enabled', false, function(err) {
                assert.ok(!err);
                
                // Validate that the change has been made
                RestAPI.Config.getConfig(globalAdminRestContext, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter'].elements['enabled'].defaultValue, false);
                    
                    // Validate that the tenant admin can see this as well
                    RestAPI.Config.getConfig(camAdminRestContext, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter'].elements['enabled'].defaultValue, false);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant configuration value can be persisted
         */
        it('verify set tenant config value', function(callback) {
            RestAPI.Config.setConfig(camAdminRestContext, 'oae-authentication/twitter/enabled', true, function(err) {
                assert.ok(!err);

                // Validate that the change has been made and has overriden the global config
                RestAPI.Config.getConfig(camAdminRestContext, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter'].elements['enabled'].defaultValue, true);
                    callback();
                });
            });
        });

        /**
         * // TODO: Uncomment once Issue #195 is fixed
           Test that verifies parameter validation on setting config values
         *
        it('verify validation', function(callback) {
            // Missing configField
            RestAPI.Config.setConfig(globalAdminRestContext, null, false, function(err) {
                assert.ok(err);
                
                // Missing configValue
                RestAPI.Config.setConfig(globalAdminRestContext, 'oae-authentication/twitter/enabled', null, function(err) {
                    assert.ok(err);
                    
                    // Try changing the config as a non-admin
                    RestAPI.Config.setConfig(anonymousCamRestContext, 'oae-authentication/twitter/enabled', 'moops', function(err) {
                        assert.ok(err);
                        callback();
                    });
                });
            });
        }); */

    });

});
