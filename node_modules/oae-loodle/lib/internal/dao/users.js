// Module dependencies
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('oae-loodle-dao-users');
var http = require('http');
var crypto = require('crypto');
var async = require('async');

var UserAPI = require('oae-principals/lib/api.user');

var LoodleConfig = require('oae-config').config('oae-loodle');

/**
 * Get token
*/
var getToken = exports.getToken = function (userId, callback) {

    var query = 'SELECT "token" FROM "LoodleTokenByUser" where "userId" = ?';
    var parameters = [ userId ];

    Cassandra.runQuery(query, parameters, function (err, result) {
        if (err) return callback(err);
        if (result.length === 0) return callback({'code': 500, 'msg': 'No token has been found'});

        return callback(null, Cassandra.rowToHash(result[0]).token);
    });

};

var createUserIfNeeded = exports.createUserIfNeeded = function (ctx, userId, callback) {

    async.waterfall([
        // Check if the user has already a miror account or not
        function userHasAlreadyAccount (done) {
            hasLoodleAccount(userId, done);
        },
        // Create the user if he does not have a mirror account in the loodle application already
        function createIfNeeded (isInDb, done) {

            if (isInDb) return done();

            // Recuperation of the user data
            UserAPI.getUser(ctx, userId, function (err, userData) {
                if (err) return done(err);

                // Creation of the mirror account in the loodle application
                createLoodleAccount(ctx, userData, done);
            });
        }
    ], callback);

};

/**
 * Check if the user already has a mirror account in the loodle application
 *
 * @param userId
 * @param callback
 * @private
 */
var hasLoodleAccount = exports.hasLoodleAccount = function (userId, callback) {

    var query = 'SELECT "token" FROM "LoodleTokenByUser" where "userId" = ?';
    var parameters = [ userId ];

    Cassandra.runQuery(query, parameters, function (err, result) {
        if (err) return callback(err);

        if (result.length === 0) return callback(null, false);

        return callback(null, true);
    });

};

/**
 * Private function to create a mirror account in the loodle application for the specified user.
 * Also authenticate him once to the loodle application to be able to get its access token and save it in db
 *
 * @param ctx
 * @param user
 * @param callback
 */
var createLoodleAccount = exports.createLoodleAccount = function (ctx, user, callback) {

    var token;

    async.series({
        'createLoodleAccount': function (done) {
            _createLoodleAccount(ctx, user, done);
        },
        'authenticateUser': function (done) {
            _authenticateUser(ctx, user, function (err, data) {
                if (err) return done(err);

                token = data;
                return done();
            });
        },
        'saveToken': function (done) {
            _saveToken(user, token, done);
        }
    }, callback);

};

/**
 * Private function to create a mirror account for the specified user
 *
 * @param ctx
 * @param user
 * @private
 */
var _createLoodleAccount = function (ctx, user, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    // Create the user object data
    var data = JSON.stringify({
        'email': user.id.replace(/:/g, '-') + '@oae.com', // We need to make sure the email is unique, even for administrator, so we use the user id
        'first_name': user.displayName.split(" ")[0],
        'last_name': user.displayName.split(" ")[1],
        'password': crypto.createHash('md5').update(user.id).digest('hex')
    });

    // Initialize the request options
    var options = {
        host: host,
        port: port,
        path: '/api/user',
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Content-length': data.length
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback();

        });
    });

    // Handle request error
    req.on('error', function (err) {
        log().error("Can't create account in loodle application : ", err.message);
    });

    // Write data to request body and send the request
    req.write(data);
    req.end();

};

/**
 * Private function to authenticate the user to the loodle application to get an access token
 * @param ctx
 * @param user
 * @private
 */
var _authenticateUser = function (ctx, user, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    // Create the object data to send
    var data = JSON.stringify({
        email: user.id.replace(/:/g, '-') + '@oae.com',
        password: crypto.createHash('md5').update(user.id).digest('hex')
    });

    // Initialize the request options
    var options = {
        host: host,
        port: port,
        path: '/api/authenticate',
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Content-length': data.length
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data);

        });
    });

    // Handle the request error
    req.on('error', function (err) {
        log().error("Can't authenticate the user in the loodle application : ", err.message);
    });

    // Write data to request body and send the request
    req.write(data);
    req.end();

};

/**
 * Private function to save the specified token in db, associated with the specified user
 * @param user
 * @param token
 * @private
 */
var _saveToken = function (user, token, callback) {

    var query = 'INSERT INTO "LoodleTokenByUser" ("userId", "token") values (?, ?)';
    var parameters = [
        user.id,
        token
    ];

    Cassandra.runQuery(query, parameters, callback);

};

exports.isInLoodle = function (ctx, userId, loodleId, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

	var options = {
        host: host,
        port: port,
        path: '/api/user/getLoodles',
        method:'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            var inLoodle = false;
            for(var index in response.data) {
            	if (response.data[index] == loodleId)
            		inLoodle = true;
            }

            return callback(null, inLoodle);

        });
    });

    req.on('error', function (err) {
        log().error("Can't get the loodles associated with the user : ", err.message);
    });

    req.end();

};

// A REMPLACER PAR UNE VERSION OU ON A JUSTE BESOIN DE FOURNIR L'ID DE L'UTILISATEUR DANS OAE
var get = exports.get = function (ctx, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/user',
        method:'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }


            return callback(null, response.data);

        });
    });

    req.on('error', function (err) {
        log().error("Can't get the current user information : ", err.message);
    });

    req.end();

};
