/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var request = require('request');

var log = require('oae-logger').logger('oae-preview-processor');
var IO = require('oae-util/lib/io');

/**
 * Downloads a file that is not located on the OAE server and stores it on disk.
 * The callback method will be called when the file has been fully retrieved or when an error occurs.
 *
 * @param  {String}   url               The URL of the file to download.
 * @param  {String}   path              The path on disk where the file should be stored.
 * @param  {Function} callback          Standard callback method.
 * @param  {Object}   callback.err      Standard error object (if any)
 * @param  {String}   callback.path     The path on disk where the file is stored.
 */
var downloadRemoteFile = module.exports.downloadRemoteFile = function(url, path, callback) {
    var called = false;
    var stream = fs.createWriteStream(path);
    stream.on('close', function() {
        IO.destroyStream(stream);
        if (!called) {
            called = true;
            callback(null, path);
        }
    });
    stream.on('error', function(err) {
        IO.destroyStream(stream);
        if (!called) {
            called = true;
            log().error('Unable to download the file %s due to a streaming error: %s', url, err);
            callback({'code': 500, 'msg': 'The stream errored out when trying to save a remote file: ' + err});
        }
    });

    // Download it.
    log().trace('Downloading %s to %s', url, path);
    // Create a new jar so we don't accidentally leak a session.
    var opts = {
        'url': url,
        'jar': request.jar()
    };
    var req = request(opts, function(err) {
        if (err && !called) {
            called = true;
            log().error('Unable to download the file %s due to a request error.', url);
            callback({'code': response.statusCode, 'msg': 'Unable to download the file.'});
        }
    });

    // Pipe the file too the stream
    req.pipe(stream);
};