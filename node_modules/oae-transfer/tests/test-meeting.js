/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthzAPI = require('oae-authz');
var RestAPI = require('oae-rest');
var MeetingAPI = require('oae-jitsi/lib/api.meetings');

var TestsUtil = require('oae-tests');
var TransferTestUtil = require('oae-transfer/lib/test/util');

describe('Transfer-meeting', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });


    describe('Account transfer impact on meetings', function() {
        /**
         * Test that verify if transfer find the good manager
         */
        it('verify if the members associated to the content being moved are correctly found during a transfer', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate meetings
                    TransferTestUtil.generateMeetings(mrvisser.restContext, mrvisser.user, 'private', 1, function(err, meetings) {
                        assert.ok(!err);
                        // Generate rights
                        var updates = {};
                        updates[userOrigin.user.id] = 'manager';
                        updates[stuartf.user.id] = 'member';
                        updates[orodan.user.id] = 'manager';
                        RestAPI.MeetingsJitsi.updateMembers(mrvisser.restContext, meetings[0].id, updates, function (err) {
                            assert.ok(!err);
                            // Create list of members
                            var membersListReal = [];
                            membersListReal.push(stuartf.user.id);
                            membersListReal.push(orodan.user.id);
                            membersListReal.push(mrvisser.user.id);
                            // Create and make transfer
                            TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, members) {
                                    assert.ok(!err);
                                    // Keep only id from the members list
                                    var membersList = [];
                                    _.each(members, function(i) {
                                        membersList.push(i.profile.principalId);
                                    });
                                    // Sort lists to compare
                                    membersList.sort();
                                    membersListReal.sort();
                                    // Compare links id
                                    assert.deepEqual(membersList, membersListReal);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer give the good right to the target user
         */
        it('verify a user gets the correct permissions on a content after a transfer from a tenant he had no permissions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate meetings
                    TransferTestUtil.generateMeetings(mrvisser.restContext, mrvisser.user, 'private', 1, function(err, meetings) {
                        assert.ok(!err);
                        // Generate rights
                        var updates = {};
                        updates[userOrigin.user.id] = 'manager';
                        RestAPI.MeetingsJitsi.updateMembers(mrvisser.restContext, meetings[0].id, updates, function (err) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userTarget.user.id, meetings[0].id, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.equal(hasRole, false);
                                TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, meetings[0].id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * verify the case A transfer to B, A is a manager and B is a member : the role will be update
         */
        it('verify a user gets the correct permissions on a content after a transfer from a tenant he had lower permissions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate meetings
                    TransferTestUtil.generateMeetings(mrvisser.restContext, mrvisser.user, 'private', 1, function(err, meetings) {
                        assert.ok(!err);
                        // Generate rights
                        var updates = {};
                        updates[userOrigin.user.id] = 'manager';
                        updates[userTarget.user.id] = 'member';
                        RestAPI.MeetingsJitsi.updateMembers(mrvisser.restContext, meetings[0].id, updates, function (err) {
                            TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasRole(userTarget.user.id, meetings[0].id, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * verify the case A transfer to B, A is a member and B is a manager : the role will not be update
         */
        it('verify a user gets the correct permissions on a content after a transfer from a tenant he had higher permissions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate meetings
                    TransferTestUtil.generateMeetings(userTarget.restContext, userTarget.user, 'private', 1, function(err, meetings) {
                        assert.ok(!err);
                        // Generate rights
                        var updates = {};
                        updates[userOrigin.user.id] = 'member';
                        RestAPI.MeetingsJitsi.updateMembers(userTarget.restContext, meetings[0].id, updates, function (err) {
                            assert.ok(!err);
                            TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasRole(userTarget.user.id, meetings[0].id, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * test that verifies whether an account transfer correctly moves all the elements to the new library
         */
        it('verify if transfer works in all cases of a meetings', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, simong, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 3, function(err, users, stuartf, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate meetings
                    TransferTestUtil.generateMeetings(mrvisser.restContext, mrvisser.user, 'loggedin', 3, function(err, meetingsMrvisser) {
                    	assert.ok(!err);
	                    TransferTestUtil.generateMeetings(stuartf.restContext, stuartf.user, 'private', 3, function(err, meetingsStuartf) {
	                    	assert.ok(!err);
		                    TransferTestUtil.generateMeetings(simong.restContext, simong.user, 'public', 3, function(err, meetingsSimong) {
		                    	assert.ok(!err);
			                    TransferTestUtil.generateMeetings(orodan.restContext, orodan.user, 'private', 3, function(err, meetingsOrodan) {
			                    	assert.ok(!err);
				                    TransferTestUtil.generateMeetings(userOrigin.restContext, userOrigin.user, 'private', 3, function(err, meetingsOrigin) {
				                    	assert.ok(!err);
                                        // Generate rights
				                        var updates = {};
				                        updates[userOrigin.user.id] = 'member';
				                        RestAPI.MeetingsJitsi.updateMembers(stuartf.restContext, meetingsStuartf[0].id, updates, function (err) {
				                        	assert.ok(!err);
				                        	var updates = {};
					                        updates[userOrigin.user.id] = 'manager';
					                        RestAPI.MeetingsJitsi.updateMembers(stuartf.restContext, meetingsStuartf[1].id, updates, function (err) {
					                        	assert.ok(!err);
					                        	var updates = {};
						                        updates[userOrigin.user.id] = 'member';
						                        RestAPI.MeetingsJitsi.updateMembers(simong.restContext, meetingsSimong[0].id, updates, function (err) {
						                        	assert.ok(!err);
						                        	var updates = {};
							                        updates[userOrigin.user.id] = 'manager';
							                        RestAPI.MeetingsJitsi.updateMembers(simong.restContext, meetingsSimong[1].id, updates, function (err) {
							                        	assert.ok(!err);
							                        	var updates = {};
								                        updates[userOrigin.user.id] = 'member';
								                        RestAPI.MeetingsJitsi.updateMembers(mrvisser.restContext, meetingsMrvisser[0].id, updates, function (err) {
								                        	assert.ok(!err);
								                        	var updates = {};
									                        updates[userOrigin.user.id] = 'manager';
									                        RestAPI.MeetingsJitsi.updateMembers(mrvisser.restContext, meetingsMrvisser[1].id, updates, function (err) {
									                        	assert.ok(!err);
									                        	var updates = {};
										                        updates[userTarget.user.id] = 'member';
										                        RestAPI.MeetingsJitsi.updateMembers(orodan.restContext, meetingsOrodan[0].id, updates, function (err) {
										                        	assert.ok(!err);
										                        	var updates = {};
											                        updates[userTarget.user.id] = 'manager';
											                        RestAPI.MeetingsJitsi.updateMembers(orodan.restContext, meetingsOrodan[1].id, updates, function (err) {
											                        	assert.ok(!err);
                                                                        // Make list of meeting to compare
                                                                        RestAPI.MeetingsJitsi.getMeetingsLibrary(userOrigin.restContext, userOrigin.user.id, function (err, result) {
                                                                            var listMeetingsBefore = _.map(result.results, function(element) { 
                                                                                return element.id; 
                                                                            });
                                                                            RestAPI.MeetingsJitsi.getMeetingsLibrary(userTarget.restContext, userTarget.user.id, function (err, result) {
                                                                                listMeetingsBefore = listMeetingsBefore.concat(_.map(result.results, function(element) { 
                                                                                    return element.id; 
                                                                                }));
                                                                                TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                                                                    assert.ok(transfer);
                                                                                    TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                                                                        assert.ok(!err);
                                                                                        //Verify that all meetings concerned by the trasnfer are in the library of userTarget
                                                                            			RestAPI.MeetingsJitsi.getMeetingsLibrary(userTarget.restContext, userTarget.user.id, function (err, result) {
                                                                                            var listMeetingsTargetAfter = _.map(result.results, function(element) { 
                                                                                                return element.id; 
                                                                                            });
                                                                                            // Sort lists to compare
                                                                                            listMeetingsTargetAfter.sort();
                                                                                            listMeetingsBefore.sort();
                                                                                            // Compare meetings
                                                                                            assert.deepEqual(listMeetingsTargetAfter, listMeetingsBefore);
	                                                                                        return callback();
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

});
