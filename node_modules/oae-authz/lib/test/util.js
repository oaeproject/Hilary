/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

/**
 * Ensure that the provided actual membership is equal to the expected membership after the
 * membership delta has been applied to the actual membership. All memberships objects are the
 * standard authz membership representation where the key is the principal id and the value is the
 * role the user has on some resource
 *
 * @param  {Object}     membershipBeforeDelta   The actual membership before any membership updates
 * @param  {Object}     [membershipDelta]       The actual changes that were applied to the membership. If not specified, the actual membership will be compared directly with the expected membership without change
 * @param  {Object}     membershipAfterDelta    The membership after the updates (if any) are applied
 * @throws {AssertionError}                     Thrown if the membership after the delta is not equal to the initial membership with the delta applied
 */
var assertMembershipEquals = module.exports.assertMembershipEquals = function(membershipBeforeDelta, membershipDelta, membershipAfterDelta) {
    // Build the expected membership after delta based on the before-delta with the changes applied
    var expectedMembershipAfterDelta = _.extend({}, membershipBeforeDelta);
    _.each(membershipDelta, function(role, principalId) {
        if (role === false) {
            delete expectedMembershipAfterDelta[principalId];
        } else {
            expectedMembershipAfterDelta[principalId] = role;
        }
    });
    assert.deepEqual(expectedMembershipAfterDelta, membershipAfterDelta);
};

/**
 * Create an object that can be used to update resource roles from a list of principal ids and a
 * specified role to apply
 *
 * @param  {String[]}           principalIds    The ids of the principals whose role to change on a resource
 * @param  {String|Boolean}     role            The role to apply, or `false` if the change is to remove the principal from the resource
 * @return {Object}                             The role change object keyed by principal ids, where the value is the role change to apply
 */
var createRoleChange = module.exports.createRoleChange = function(principalIds, role) {
    var roleChange = {};
    _.each(principalIds, function(principalId) {
        roleChange[principalId] = role;
    });
    return roleChange;
};

/**
 * Get a simple memberId->role hash from a list of member profiles along with their roles
 *
 * @param  {Object[]}   members     The array of member objects containing `profile` and `role` returned from the content members library
 * @return {Object}                 The memberId->role hash for the members library
 */
var getMemberRolesFromResults = module.exports.getMemberRolesFromResults = function(members) {
    var memberRoles = {};
    _.each(members, function(member) {
        memberRoles[member.profile.id] = member.role;
    });
    return memberRoles;
};
