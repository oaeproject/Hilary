/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Context = require('oae-context').Context;
var permissions = { api: require('oae-permissions/lib/api') };
var roles = {
    api: require('oae-roles/lib/api'),
    util: require('oae-roles/lib/util')
};
var principals = { api: require('oae-principals/lib/api') };

var Tenant = require('oae-tenants/lib/model').Tenant;

// verify that permissions check are negative when no permissions are obviously available
module.exports.testNoPermission = function(test) {
    test.expect(5);

    var tenantId = 'testNoPermission-'+new Date().getMilliseconds();
    var tenant = new Tenant(tenantId, 'Cambridge', 'Description', 2001);
    var ctx = new Context(tenant, null);
    var mrvisserUuid = roles.util.toUuid('u', tenantId, 'mrvisser');
    var resourceUuid = roles.util.toUuid('c', tenantId, 'Foo.docx');

    principals.api.createUser(ctx, 'mrvisser', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Branden', 'Visser', 'Branden Visser', function(err) {
        test.ok(!err);

        permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
            // verify that the user is not allowed to manage
            test.ok(!err);
            test.ok(!isAllowed);

            permissions.api.isAllowedAny(mrvisserUuid, resourceUuid, function(err, isAllowed) {
                // verify that the user is not allowed to do anything
                test.ok(!err);
                test.ok(!isAllowed);
                test.done();
            });
        });
    });
}

// verify that direct role assignments result in affirmative permissions checks
module.exports.testDirectPermission = function(test) {
    test.expect(6);

    var tenantId = 'testDirectPermission-'+new Date().getMilliseconds();
    var tenant = new Tenant(tenantId, 'Cambridge', 'Description', 2001);
    var ctx = new Context(tenant, null);
    var mrvisserUuid = roles.util.toUuid('u', tenantId, 'mrvisser');
    var resourceUuid = roles.util.toUuid('c', tenantId, 'Foo.docx');

    principals.api.createUser(ctx, 'mrvisser', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Branden', 'Visser', 'Branden Visser', function(err) {
        test.ok(!err);

        roles.api.setRole(mrvisserUuid, resourceUuid, 'manager', function(err) {
            test.ok(!err);

            permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
                // verify that the user is allowed to manage
                test.ok(!err);
                test.ok(isAllowed);

                permissions.api.isAllowedAny(mrvisserUuid, resourceUuid, function(err, isAllowed) {
                    // verify that the user is allowed to do something
                    test.ok(!err);
                    test.ok(isAllowed);
                    test.done();
                });
            });
        });
    });
}

// ensure that permissions are properly propagated in a group hierarchy
module.exports.testIndirectPermission = function(test) {
    test.expect(19);

    var tenantId = 'testIndirectPermission-'+new Date().getMilliseconds();
    var tenant = new Tenant(tenantId, 'Cambridge', 'Description', 2001);
    var anonymousContext = new Context(tenant, null);
    var mrvisserUuid = roles.util.toUuid('u', tenantId, 'mrvisser');
    var torontoUuid = roles.util.toUuid('g', tenantId, 'toronto');
    var ontarioUuid = roles.util.toUuid('g', tenantId, 'ontario');
    var canadaUuid = roles.util.toUuid('g', tenantId, 'canada');
    var resourceUuid = roles.util.toUuid('c', tenantId, 'Foo.docx');

    // 1. set up the group hierarchy
    principals.api.createUser(anonymousContext, 'runner', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Runner', 'Runner', 'Runner Runner', function(err, runnerUuid) {
        principals.api.getUser(anonymousContext, runnerUuid, function(err, runner) {

            var ctx = new Context(tenant, runner);

            // 1. set up the group hierarchy
            principals.api.createUser(anonymousContext, 'mrvisser', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Branden', 'Visser', 'Branden Visser', function(err) {
                test.ok(!err);

                principals.api.createGroup(ctx, 'toronto', 'The group of the city of Toronto', function(err) {
                    test.ok(!err);

                    principals.api.createGroup(ctx, 'ontario', 'The group of the province of Ontario', function(err) {
                        test.ok(!err);

                        principals.api.createGroup(ctx, 'canada', 'The group of the country of Canada', function(err) {
                            test.ok(!err);

                            principals.api.addGroupMember(ctx, torontoUuid, mrvisserUuid, 'member', function(err) {
                                test.ok(!err);

                                principals.api.addGroupMember(ctx, ontarioUuid, torontoUuid, 'member', function(err) {
                                    test.ok(!err);

                                    principals.api.addGroupMember(ctx, canadaUuid, ontarioUuid, 'member', function(err) {
                                        test.ok(!err);

                                        // 2. set the role on ontario
                                        roles.api.setRole(ontarioUuid, resourceUuid, 'viewer', function(err) {
                                            test.ok(!err);

                                            // 3. verify allowed permissions for mrvisser, toronto, and ontario
                                            permissions.api.isAllowed(mrvisserUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                test.ok(!err);
                                                test.ok(isAllowed);

                                                permissions.api.isAllowed(torontoUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                    test.ok(!err);
                                                    test.ok(isAllowed);

                                                    permissions.api.isAllowed(ontarioUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                        test.ok(!err);
                                                        test.ok(isAllowed);

                                                        // 4. verify toronto cannot view the resource
                                                        permissions.api.isAllowed(canadaUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                            test.ok(!err);
                                                            test.ok(!isAllowed);

                                                            // 5. Add canada as a member to Toronto, then verify that it can now view the resource
                                                            principals.api.addGroupMember(ctx, torontoUuid, canadaUuid, 'member', function(err) {
                                                                test.ok(!err);

                                                                permissions.api.isAllowed(canadaUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                                    test.ok(!err);
                                                                    test.ok(isAllowed);
                                                                    test.done();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

// ensure that when a role is removed from a principal, the permissions are properly cleared
module.exports.testRemoveRole = function(test) {
    test.expect(15);

    var tenantId = 'testRemoveRole-'+new Date().getMilliseconds();
    var tenant = new Tenant(tenantId, 'Cambridge', 'Description', 2001);
    var anonymousContext = new Context(tenant, null);
    var mrvisserUuid = roles.util.toUuid('u', tenantId, 'mrvisser');
    var torontoUuid = roles.util.toUuid('g', tenantId, 'toronto');
    var ontarioUuid = roles.util.toUuid('g', tenantId, 'ontario');
    var canadaUuid = roles.util.toUuid('g', tenantId, 'canada');
    var resourceUuid = roles.util.toUuid('c', tenantId, 'Foo.docx');

    principals.api.createUser(anonymousContext, 'runner', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Runner', 'Runner', 'Runner Runner', function(err, runnerUuid) {
        principals.api.getUser(anonymousContext, runnerUuid, function(err, runner) {
            var ctx = new Context(tenant, runner);

            // 1. set up the group hierarchy
            principals.api.createUser(anonymousContext, 'mrvisser', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Branden', 'Visser', 'Branden Visser', function(err) {
                test.ok(!err);

                principals.api.createGroup(ctx, 'toronto', 'The group of the city of Toronto', function(err) {
                    test.ok(!err);

                    principals.api.createGroup(ctx, 'ontario', 'The group of the province of Ontario', function(err) {
                        test.ok(!err);

                        principals.api.createGroup(ctx, 'canada', 'The group of the country of Canada', function(err) {
                            test.ok(!err);

                            principals.api.addGroupMember(ctx, torontoUuid, mrvisserUuid, 'member', function(err) {
                                test.ok(!err);

                                principals.api.addGroupMember(ctx, ontarioUuid, torontoUuid, 'member', function(err) {
                                    test.ok(!err);

                                    principals.api.addGroupMember(ctx, canadaUuid, ontarioUuid, 'member', function(err) {
                                        test.ok(!err);

                                        // 2. set the role and perform a sanity check that mrvisser can access the resource
                                        roles.api.setRole(ontarioUuid, resourceUuid, 'manager', function(err) {
                                            test.ok(!err);

                                            permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                test.ok(!err);
                                                test.ok(isAllowed);

                                                // 3. remove the role, and ensure mrvisser can no longer access the resource
                                                roles.api.removeRole(ontarioUuid, resourceUuid, function(err) {
                                                    test.ok(!err);

                                                    permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                        test.ok(!err);
                                                        test.ok(!isAllowed);

                                                        // double-check the 'any' permission to ensure mrvisser has no permission
                                                        permissions.api.isAllowedAny(mrvisserUuid, resourceUuid, function(err, isAllowed) {
                                                            test.ok(!err);
                                                            test.ok(!isAllowed);
                                                            test.done();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

// test that aggregating multiple permissions for a resource VIA group hierarchy works properly
module.exports.testMultiPermissions = function(test) {
    test.expect(19);

    var tenantId = 'testMultiPermission-'+new Date().getMilliseconds();
    var tenant = new Tenant(tenantId, 'Cambridge', 'Description', 2001);
    var anonymousContext = new Context(tenant, null);
    var mrvisserUuid = roles.util.toUuid('u', tenantId, 'mrvisser');
    var torontoUuid = roles.util.toUuid('g', tenantId, 'toronto');
    var ontarioUuid = roles.util.toUuid('g', tenantId, 'ontario');
    var resourceUuid = roles.util.toUuid('c', tenantId, 'Foo.docx');


    principals.api.createUser(anonymousContext, 'runner', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Runner', 'Runner', 'Runner Runner', function(err, runnerUuid) {
        principals.api.getUser(anonymousContext, runnerUuid, function(err, runner) {
            var ctx = new Context(tenant, runner);

            // 1. set up the group hierarchy
            principals.api.createUser(anonymousContext, 'mrvisser', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Branden', 'Visser', 'Branden Visser', function(err) {
                test.ok(!err);

                principals.api.createGroup(ctx, 'toronto', 'The group of the city of Toronto', function(err) {
                    test.ok(!err);

                    principals.api.createGroup(ctx, 'ontario', 'The group of the province of Ontario', function(err) {
                        test.ok(!err);

                        principals.api.addGroupMember(ctx, torontoUuid, mrvisserUuid, 'member', function(err) {
                            test.ok(!err);

                            principals.api.addGroupMember(ctx, ontarioUuid, torontoUuid, 'member', function(err) {
                                test.ok(!err);

                                // 2. set different roles on different groups
                                roles.api.setRole(torontoUuid, resourceUuid, 'manager', function(err) {
                                    test.ok(!err);

                                    roles.api.setRole(ontarioUuid, resourceUuid, 'viewer', function(err) {
                                        test.ok(!err);

                                        // 3. verify that mrvisser can manage and view
                                        permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                            test.ok(!err);
                                            test.ok(isAllowed);

                                            permissions.api.isAllowed(mrvisserUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                test.ok(!err);
                                                test.ok(isAllowed);

                                                // 4. remove 'manager', make sure mrvisser can view and not manage
                                                roles.api.removeRole(torontoUuid, resourceUuid, function(err) {
                                                    test.ok(!err);

                                                    permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                        test.ok(!err);
                                                        test.ok(!isAllowed);

                                                        permissions.api.isAllowed(mrvisserUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                            test.ok(!err);
                                                            test.ok(isAllowed);

                                                            // 5. remove 'viewer', make sure mrvisser cannot view
                                                            roles.api.removeRole(ontarioUuid, resourceUuid, function(err) {
                                                                test.ok(!err);

                                                                permissions.api.isAllowed(mrvisserUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                                    test.ok(!err);
                                                                    test.ok(!isAllowed);
                                                                    test.done();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

// test that getting all directly granted permissions for a principal works properly
module.exports.testGetAllPermissionsDirect = function(test) {
    test.expect(13);

    var tenantId = 'testGetAllPermissions-'+new Date().getMilliseconds();
    var tenant = new Tenant(tenantId, 'Cambridge', 'Description', 2001);
    var anonymousContext = new Context(tenant, null);
    var mrvisserUuid = roles.util.toUuid('u', tenantId, 'mrvisser');
    var torontoUuid = roles.util.toUuid('g', tenantId, 'toronto');
    var ontarioUuid = roles.util.toUuid('g', tenantId, 'ontario');
    var resourceUuid = roles.util.toUuid('c', tenantId, 'Foo.docx');

    // 1. set up the group hierarchy
    principals.api.createUser(anonymousContext, 'mrvisser', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Branden', 'Visser', 'Branden Visser', function(err, mrvisserUuid) {
        test.ok(!err);

        principals.api.getUser(anonymousContext, mrvisserUuid, function(err, mrvisser) {
            test.ok(!err);
            var ctx = new Context(tenant, mrvisser);

            principals.api.createGroup(ctx, 'toronto', 'The group of the city of Toronto', function(err) {
                test.ok(!err);

                // 2. set roles on the user and group
                roles.api.setRole(torontoUuid, resourceUuid, 'manager', function(err) {
                    test.ok(!err);

                    roles.api.setRole(mrvisserUuid, resourceUuid, 'viewer', function(err) {
                        test.ok(!err);

                        // 3. sanity check the setup
                        permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
                            test.ok(!err);
                            test.ok(isAllowed);

                            permissions.api.isAllowed(mrvisserUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                test.ok(!err);
                                test.ok(isAllowed);

                                // 4. verify mrvisser gets both manager and viewer from getAllPermissions
                                permissions.api.getAllPermissions(mrvisserUuid, resourceUuid, function(err, permissions) {
                                    test.ok(!err);
                                    test.equal(permissions.length, 2);

                                    var hasManager = false;
                                    var hasViewer = false;

                                    permissions.forEach(function(permission) {
                                        if (permission === 'manager') {
                                            hasManager = true;
                                        } else if (permission === 'viewer') {
                                            hasViewer = true;
                                        }
                                    });

                                    test.ok(hasManager);
                                    test.ok(hasViewer);
                                    test.done();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

// test that getting all indirectly granted permissions for a principal works properly
module.exports.testGetAllPermissionsIndirect = function(test) {
    test.expect(15);

    var tenantId = 'testGetAllPermissions-'+new Date().getMilliseconds();
    var tenant = new Tenant(tenantId, 'Cambridge', 'Description', 2001);
    var anonymousContext = new Context(tenant, null);
    var mrvisserUuid = roles.util.toUuid('u', tenantId, 'mrvisser');
    var torontoUuid = roles.util.toUuid('g', tenantId, 'toronto');
    var ontarioUuid = roles.util.toUuid('g', tenantId, 'ontario');
    var resourceUuid = roles.util.toUuid('c', tenantId, 'Foo.docx');


    principals.api.createUser(anonymousContext, 'runner', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Runner', 'Runner', 'Runner Runner', function(err, runnerUuid) {
        principals.api.getUser(anonymousContext, runnerUuid, function(err, runner) {
            var ctx = new Context(tenant, runner);

            // 1. set up the group hierarchy
            principals.api.createUser(anonymousContext, 'mrvisser', 'password', 'public', 'en_CA', 'Canada/Pacific', 'Branden', 'Visser', 'Branden Visser', function(err) {
                test.ok(!err);

                principals.api.createGroup(ctx, 'toronto', 'The group of the city of Toronto', function(err) {
                    test.ok(!err);

                    principals.api.createGroup(ctx, 'ontario', 'The group of the province of Ontario', function(err) {
                        test.ok(!err);

                        principals.api.addGroupMember(ctx, torontoUuid, mrvisserUuid, 'member', function(err) {
                            test.ok(!err);

                            principals.api.addGroupMember(ctx, ontarioUuid, torontoUuid, 'member', function(err) {
                                test.ok(!err);

                                // 2. set different roles on different groups
                                roles.api.setRole(torontoUuid, resourceUuid, 'manager', function(err) {
                                    test.ok(!err);

                                    roles.api.setRole(ontarioUuid, resourceUuid, 'viewer', function(err) {
                                        test.ok(!err);

                                        // 3. sanity check the setup
                                        permissions.api.isAllowed(mrvisserUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                            test.ok(!err);
                                            test.ok(isAllowed);

                                            permissions.api.isAllowed(mrvisserUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                test.ok(!err);
                                                test.ok(isAllowed);

                                                // 4. get and verify the aggregated permissions
                                                permissions.api.getAllPermissions(mrvisserUuid, resourceUuid, function(err, permissions) {
                                                    // Turned of untill the context impl has settled down.
                                                    test.ok(!err);
                                                    test.equal(permissions.length, 2);

                                                    var hasManager = false;
                                                    var hasViewer = false;

                                                    permissions.forEach(function(permission) {
                                                        if (permission === 'manager') {
                                                            hasManager = true;
                                                        } else if (permission === 'viewer') {
                                                            hasViewer = true;
                                                        }
                                                    });

                                                    test.ok(hasManager);
                                                    test.ok(hasViewer);
                                                    test.done();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}
