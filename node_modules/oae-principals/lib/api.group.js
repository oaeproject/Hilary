/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('oae-principals');
var TenantsUtil = require('oae-tenants/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

require('oae-authz/lib/validator');

var Group = require('./model.group').Group;
var PrincipalsConstants = require('./constants').PrincipalsConstants;
var PrincipalsDAO = require('./internal/dao');
var PrincipalsEmitter = require('./internal/emitter');
var PrincipalsUtil = require('./util');
var Constants = {

    // role and permission management constants
    PRINCIPAL_TYPE_GROUP: 'g',
    roles: {
        MEMBER: 'member',
        MANAGER: 'manager'
    }
};

/**
 * Get the basic profile for a group.
 *
 * @param  {Context}  ctx             The current context.
 * @param  {String}   groupId         An identifier for a group. ex: g:cam:oae-team
 * @param  {Function} callback        A standard callback method takes arguments `err` and `group`.
 * @param  {Object}   callback.err    An error object (if any.)
 * @param  {Group}    callback.group  The group object
 */
var getGroup = module.exports.getGroup = function(ctx, groupId, callback) {
    var validator = new Validator();
    validator.check(groupId, {'code': 400,'msg': 'An invalid group id was specified'}).isGroupId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    PrincipalsUtil.getPrincipal(ctx, groupId, callback);
};

/**
 * Get a group by it's alias.
 * Each group will have it's own alias which is unique within the tenant of that group.
 * The group ID can be determined by prefixing the group alias with 'g:tenantAlias:'.
 * The tenantAlias will be retrieved from the current execution context.
 *
 * @param  {Context}   ctx             The current context.
 * @param  {String}    alias           A group alias.
 * @param  {Function}  callback        A standard callback method takes arguments `err` and `group`.
 * @param  {Object}    callback.err    An error object (if any.)
 * @param  {Group}     callback.group  The group object
 */
var getGroupByAlias = module.exports.getGroupByAlias = function(ctx, alias, callback) {
    var id = AuthzUtil.toId(Constants.PRINCIPAL_TYPE_GROUP, ctx.tenant().alias, alias);
    getGroup(ctx, id, callback);
};

/**
 * Augments a group object with 2 fields that indicate whether the current user is a member and/or manager
 * of the specified group.
 * 
 * @param  {Context}   ctx             The current context.
 * @param  {String}    groupId         The group identifier.
 * @param  {Function}  callback        A standard callback method takes arguments `err` and `group`.
 * @param  {Object}    callback.err    An error object (if any.)
 * @param  {Group}     callback.group  The agumented group object
 */
var getFullGroupProfile = module.exports.getFullGroupProfile = function(ctx, groupId, callback) {
    getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        group.isMember = false;
        group.isManager = false;
        
        if (!ctx.user()) {
            return callback(null, group);
        }

        AuthzAPI.getAllRoles(ctx.user().id, groupId, function(err, roles) {
            if (err) {
                return callback(err);
            }
            group.isMember = (_.contains(roles, Constants.roles.MEMBER) || _.contains(roles, Constants.roles.MANAGER));
            group.isManager = _.contains(roles, Constants.roles.MANAGER);
            callback(null, group);
        });
    });
};

/**
 * Get all the members of a group. If the group is set as private (or loggedin and the current user is anonymous)
 * this will return a 401 error.
 *
 * @param  {Context}   ctx                     The current execution context.
 * @param  {String}    groupId                 An identifier for a group. ex: g:cam-oae-team
 * @param  {String}    start                   The principalId that comes just before the first principal you wish to have in your results.
 * @param  {Number}    limit                   The number of members you wish to retrieve.
 * @param  {Function}  callback                Standard callback method that has an error if it occurs and an array of the direct members of a group.
 * @param  {Object}    callback.err            An error object (if any.)
 * @param  {User[]}    callback.members        An array of the direct members of the group
 */
var getGroupMembers = module.exports.getGroupMembers = function(ctx, groupId, start, limit, callback) {
    limit = limit || 10;

    var validator = new Validator();
    validator.check(groupId, {'code': 400,'msg': 'An invalid group id was specified'}).isGroupId();
    validator.check(limit, {'code': 400, 'msg': 'limit should be a positive integer'}).isInt();
    validator.check(limit, {'code': 400, 'msg': 'limit should be a positive integer'}).min(1);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure that this group exists.
    getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        // Ensure proper permissions
        canViewMembers(ctx, group, function(err, canViewMembers) {
            if (err) {
                return callback(err);
            } else if (!canViewMembers) {
                return callback({'code': 401, 'msg': 'Insufficient privilege to view this group\'s members list.'});
            }

            // Finally get the members and their basic profiles
            AuthzAPI.getAuthzMembers(groupId, start, limit, function(err, members) {
                if (err) {
                    return callback(err);
                }

                var memberIds = _.map(members, function(member){ return member.id; });
                PrincipalsUtil.getPrincipals(ctx, memberIds, function(err, memberProfiles) {
                    if (err) {
                        return callback(err);
                    }

                    var memberList = [];
                    for (var m = 0; m < members.length; m++) {
                        var member = members[m].id;
                        if (memberProfiles[member]) {
                            memberList.push({
                                'profile': memberProfiles[member],
                                'role': members[m].role
                            });
                        }
                    }
                    
                    return callback(null, memberList);
                });
            });
        });
    });
};

/**
 * Gets all the groups a principal (both user or groups) is a member of. This includes all group ancestors to which the user is indicrectly
 * a member.
 *
 * @param  {Context}     ctx                     The current exectution context.
 * @param  {String}      principalId             The principal to retrieve all the groups for
 * @param  {String}      start                   The principalId that comes just before the first principal you wish to have in your results.
 * @param  {Number}      limit                   The number of parent principals you wish to retrieve (default: 10)
 * @param  {Function}    callback                Standard callback method invoked when the process completes takes arguments `err` and `groups`
 * @param  {Object}      callback.err            An error that occured, if any
 * @param  {Group[]}     callback.groups         An (inconsistently ordered) array of groups to which the user belongs, either directly or indirectly
 */
var memberOf = module.exports.memberOf = function(ctx, principalId, start, limit, callback) {
    // Anonymous isn't a member of any groups.
    if (principalId === null) {
        return callback(null, []);
    }

    limit = limit || 10;
    AuthzAPI.getPrincipalMemberships(principalId, start, limit, function(err, groups) {
        if (err) {
            return callback(err);
        }

        // Retrieve the profile information for the retrieved group memberships
        PrincipalsUtil.getPrincipals(ctx, groups, function(err, principalHash) {
            if (err) {
                return callback(err);
            }
            var ids = _.keys(principalHash);
            var results = [];
            for (var i = 0, j = ids.length; i < j; i++) {
                results.push(principalHash[ids[i]]);
            }
            callback(null, results);
        });
    });
};

/**
 * Set, update or remove the role for group members.
 *
 * @param  {Context}     ctx             The current execution context
 * @param  {String}      groupId         The identifier of a group. ex: g:cam:oae-team
 * @param  {Object}      members         Object where the keys represent the principal ids which should be updated/added/removed. The value is a string representing the new role. If false is passed in, the membership for that principal will be removed e.g. {'user1': 'manager', 'user2': 'viewer', 'user3': false}
 * @param  {Function}    [callback]      A function executed when the process has completed takes arguments `err` and `added`
 * @param  {Object}      [callback.err]  The error that occured, if any
 */
var setGroupMembers = module.exports.setGroupMembers = function(ctx, groupId, members, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'groupId': groupId,
                'changes': members
            }, 'Error updating group membership.');
        }
    };
    members = members || {};

    // Validation
    var principals = _.keys(members);
    var validator = new Validator();
    validator.check(groupId, {'code': 400, 'msg': 'Invalid groupId specified'}).isGroupId();
    validator.check(principals.length, {'code': 400, 'msg': 'You should specify at least 1 user/group on which to update group membership'}).min(1);
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to update group membership'}).isLoggedInUser(ctx);
    for (var i = 0; i < principals.length;i++) {
        validator.check(principals[i], {'code': 400, 'msg': 'You cannot make the group a member of itself'}).not(groupId);
        validator.check(principals[i], {'code': 400, 'msg': 'Invalid principal specified as member for this group.'}).isPrincipalId();
        validator.check(members[principals[i]], {'code': 400, 'msg': 'Invalid principal specified as member for this group.'}).isValidRoleChange();
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if the group exists and whether or not we have access to edit.
    getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        // Make sure we can manage the group
        _canManage(ctx, group, function(err, canManage) {
            if (err) {
                return callback(err);
            } else if (!canManage) {
                return callback({'code': 401, 'msg': 'Permission denied.'});
            }

            // Don't leave the group managerless.
            _checkNewGroupMembers(ctx, group, members, function(err) {
                if (err) {
                    return callback(err);
                }

                _setGroupMembers(ctx, group, members, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    PrincipalsEmitter.emit(PrincipalsConstants.events.UPDATED_GROUP_MEMBERS, ctx, group, members);
                    return callback();
                });
            });
        });
    });
};

/**
 * Internal method that checks if the new permission set for a group doesn't leave it without any managers.
 *
 * @param  {Context}    ctx             The current execution context
 * @param  {Group}      group           The group object we want to set permissions on
 * @param  {Object}     members         Object where the keys represent the principal ids which should be updated/added/removed. The value is a string representing the new role. If false is passed in, the membership for that principal will be removed e.g. {'user1': 'manager', 'user2': 'viewer', 'user3': false}
 * @param  {Function}   callback        Standard callback function takes argument `err`
 * @param  {Object}     callback.err    Error object containing the error message
 * @api private
 */
var _checkNewGroupMembers = function(ctx, group, members, callback) {
    // Check that we don't remove all members.
    AuthzAPI.getAuthzMembers(group.id, null, 10000, function(err, oldMembers) {
        if (err) {
            return callback(err);
        }

        // Get the managers that aren't removed by this update.
        var remainingManagers = _.filter(oldMembers, function(member) {
            var isManager = member.role === Constants.roles.MANAGER;
            var isRemoved = members[member.id] === false;
            var hasRoleChange = (members[member.id] && members[member.id] !== Constants.roles.MANAGER);

            return (isManager && !isRemoved && !hasRoleChange);
        });

        // Get the extra set of managers.
        var newManagers = _.filter(members, function(role, id) { return role === Constants.roles.MANAGER; });

        // Combine them and count them. If the total is 0 that means an attempt has been made to remove all direct managers.
        var managers = remainingManagers.concat(newManagers);
        if (managers.length === 0) {
            return callback({'code': 400, 'msg': 'At least one principal should be a manager.'});
        } else {
            callback();
        }
    });
};

/**
 * Leave the group as the current user in context. For this to be successful, the user must be a part of the group (role
 * does not matter).
 *
 * @param  {Context}    ctx             The current execution context
 * @param  {String}     groupId         The id of the group to join
 * @param  {Function}   callback        Invoked when the process completes
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var leaveGroup = module.exports.leaveGroup = function(ctx, groupId, callback) {

    // Validation
    var validator = new Validator();
    validator.check(groupId, {'code': 400, 'msg': 'Invalid groupId specified'}).isGroupId();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to join a group'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Verify we aren't trying to leave a group we aren't a part of. This is a lighter operation than `getPrincipals`, so we do it first.
    AuthzAPI.hasAnyRole(ctx.user().id, groupId, function(err, hasAnyRole) {
        if (err) {
            return callback(err);
        } else if (!hasAnyRole) {
            return callback({'code': 400, 'msg': 'Cannot leave a group of which you aren\'t a member.'});
        }

        // Verify the group exists
        PrincipalsDAO.getPrincipal(groupId, function(err, group) {
            if (err) {
                return callback(err);
            }

            var changeMembers = {};
            changeMembers[ctx.user().id] = false;
            _setGroupMembers(ctx, group, changeMembers, function(err) {
                if (err) {
                    return callback(err);
                }

                PrincipalsEmitter.emit(PrincipalsConstants.events.LEFT_GROUP, ctx, group);
                return callback();
            });
        });
    });
};

/**
 * Join the group as the current user in context. For this to be successful, the user must not already be a member
 * of the group, and the group must be joinable. If successful, the user will be added to the group with role
 * 'member'.
 *
 * @param  {Context}    ctx             The current execution context
 * @param  {String}     groupId         The id of the group to join
 * @param  {Function}   callback        Invoked when the process completes
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var joinGroup = module.exports.joinGroup = function(ctx, groupId, callback) {

    // Validation
    var validator = new Validator();
    validator.check(groupId, {'code': 400, 'msg': 'Invalid groupId specified'}).isGroupId();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to join a group'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Verify we aren't trying to join a group we're already a member of. This is a lighter operation than `getPrincipal`, so we do it first.
    AuthzAPI.hasAnyRole(ctx.user().id, groupId, function(err, hasAnyRole) {
        if (err) {
            return callback(err);
        } else if (hasAnyRole) {
            return callback({'code': 400, 'msg': 'You are already a member of this group.'});
        }

        // Verify the group exists
        PrincipalsDAO.getPrincipal(groupId, function(err, group) {
            if (err) {
                return callback(err);
            } else if (group.joinable !== PrincipalsConstants.joinable.YES) {
                return callback({'code': 401, 'msg': 'You can only join a group if it is joinable'});
            }

            // Apply the changes
            var changeMembers = {};
            changeMembers[ctx.user().id] = Constants.roles.MEMBER;
            _setGroupMembers(ctx, group, changeMembers, function(err) {
                if (err) {
                    return callback(err);
                }

                PrincipalsEmitter.emit(PrincipalsConstants.events.JOINED_GROUP, ctx, group, Constants.roles.MEMBER);
                return callback();
            });
        });
    });
};

/**
 * Create a new group within this tenant.
 *
 * @param  {Context}   ctx             The current execution context
 * @param  {String}    alias           The alias for this group. This will be prefixed with 'g:tenantAlias:' to construct the group id. The only requirement for this parameter is that it doesn't contain any colons (:).
 * @param  {String}    displayName     The displayName for this group.
 * @param  {String}    description     A description for this group.
 * @param  {String}    visibility      The visibility that should be set for this group. If left undefined, it defaults to public. Valid values are: public, loggedin or private
 * @param  {String}    joinable        Whether or not this group can be joined by people. One of 'yes', 'no' or 'request'.
 * @param  {Object}    members         A hash where each key is a principal id and the value is one of 'manager', 'member' or false. If the value is set to false, the principal will be removed from the group.
 * @param  {Object}    otherValues     A hash of optional other values.
 * @param  {Function}  callback        A function invoked when the process is complete takes arguments `err` and `group`
 * @param  {Object}    callback.err    An error that occured, if any. It contains a code suitable as http statuscode and a corresponding message.
 * @param  {Group}     callback.group  The group created.
 */
var createGroup = module.exports.createGroup = function(ctx, alias, displayName, description, visibility, joinable, members, otherValues, callback) {
    callback = callback || function() {};

    // Use an empty description if no description has been provided
    description = description || '';
    // Setting visibility to public if none is set.
    visibility = visibility || PrincipalsConstants.visibility.PUBLIC;
    joinable = joinable || PrincipalsConstants.joinable.YES;

    // Parameter validation
    var validator = new Validator();
    validator.check(alias, {'code': 400, 'msg': 'You need to provide an alias for this group.'}).notEmpty();
    validator.check(alias, {'code': 400, 'msg': 'An alias cannot contain colons (:).'}).notContains(':');
    validator.check(displayName, {'code': 400, 'msg': 'You need to provide a displayName for this group.'}).notEmpty();
    validator.check(visibility, {'code': 400, 'msg': 'The visibility setting must be one of: ' + _.values(PrincipalsConstants.visibility)}).isIn(_.values(PrincipalsConstants.visibility));
    validator.check(joinable, {'code': 400, 'msg': 'The joinable setting must be one of: ' + _.values(PrincipalsConstants.joinable)}).isIn(_.values(PrincipalsConstants.joinable));
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to create a group'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Generate the group id.
    var tenant = ctx.tenant();
    var groupId = AuthzUtil.toId(Constants.PRINCIPAL_TYPE_GROUP, tenant.alias, alias);

    canCreateGroup(ctx, groupId, function(err) {
        if (err) {
            return callback(err);
        }

        // Create the group.
        Cassandra.runQuery('INSERT INTO Principals (principalId, alias, tenant, displayName, description, visibility, joinable) VALUES (?, ?, ?, ?, ?, ?, ?) USING CONSISTENCY QUORUM',
            [groupId, alias, tenant.alias, displayName, description, visibility, joinable], function (err) {
            if (err) {
                return callback(err);
            }

            // Immediately add the current user as a manager
            var currentUser = getUserId(ctx);
            members[currentUser] = Constants.roles.MANAGER;

            var opts = {
                'displayName': displayName,
                'description': description,
                'visibility': visibility,
                'joinable': joinable
            };
            var group = new Group(tenant.alias, groupId, alias, opts);
            _setGroupMembers(ctx, group, members, function(err) {
                PrincipalsEmitter.emit(PrincipalsConstants.events.CREATED_GROUP, ctx, group, members);
                if (err) {
                    return callback(err);
                }

                return callback(null, groupId);
            });
        });
    });
};

/**
 * Update a group's metadata.
 *
 * @param  {Context}        ctx                             The current execution context.
 * @param  {String}         groupId                         The ID of the group
 * @param  {Object}         profileFields                   Object where the keys represent the profile fields that need to be updated and the values represent the new values for those profile fields.
 * @param  {String}         [profileFields.displayName]     New display name for the group
 * @param  {String}         [profileFields.description]     New description for the group
 * @param  {String}         [profileFields.visibility]      New visibility setting for the group. The possible values are 'private', 'loggedin' and 'public'
 * @param  {String}         [profileFields.joinable]        New joinability setting for the group. The possible values are 'yes', 'no' and 'request'
 * @param  {Function}       callback                        Standard callback method takes argument `err`
 * @param  {Obect}          callback.err                    An error object (if any).
 */
var updateGroup = module.exports.updateGroup = function(ctx, groupId, profileFields, callback) {
     // Parameter validation
    var fieldNames = profileFields ? _.keys(profileFields) : [];
    var validator = new Validator();
    validator.check(groupId, {'code': 400, 'msg': 'A valid group id must be provided'}).isGroupId();
    validator.check(fieldNames.length, {'code': 400, 'msg': 'You should specify at least one field'}).min(1);
    fieldNames.forEach(function(fieldName) {
        validator.check(fieldName, {'code': 400, 'msg': fieldName + ' is not a recognized group profile field'}).isIn(['displayName', 'description', 'visibility', 'joinable']);
        if (fieldName === 'visibility') {
            validator.check(profileFields['visibility'], {'code': 400, 'msg': 'The visibility setting must be one of: ' + _.values(PrincipalsConstants.visibility)}).isIn(_.values(PrincipalsConstants.visibility));
        } else if (fieldName === 'joinable') {
            validator.check(profileFields['joinable'], {'code': 400, 'msg': 'The joinable setting must be one of: ' + _.values(PrincipalsConstants.joinable)}).isIn(_.values(PrincipalsConstants.joinable));
        }
    });
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to update a group'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    getGroup(ctx, groupId, function(err, oldGroup) {
        if (err) {
            return callback(err);
        }

        // Check if we can update this group.
        _canManage(ctx, oldGroup, function(err, canManage) {
            if (err) {
                return callback(err);
            } else if (!canManage) {
                return callback({'code': 401, 'msg': 'Permission denied.'});
            }

            PrincipalsDAO.updatePrincipal(groupId, profileFields, function(err) {
                if (err) {
                    return callback(err);
                }

                var newGroup = _.extend({}, oldGroup, profileFields);

                PrincipalsEmitter.emit(PrincipalsConstants.events.UPDATED_GROUP, ctx, newGroup, oldGroup);
                return callback();
            });
        });
    });
};

/**
 * Determine whether or not the user in the context is allowed to create the given group.
 *
 * @param  {Context}    ctx          The current execution context
 * @param  {String}     groupId      The group to check
 * @param  {Function}   callback     The function to invoke when the process completes
 * @param  {Object}     callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 * @api private
 */
var canCreateGroup = function(ctx, groupId, callback) {
    if (getUserId(ctx) !== null) {
        getGroup(ctx, groupId, function(err, group) {
            if (err && err.code === 404) {
                // We're expecting an error, indicating that the group does not exist
                return callback();
            } else if (err) {
                // A generic error occurred
                return callback(err);
            }

            return callback({'code': 400, 'msg': 'This group alias is not available.'});
        });
    } else {
        return callback({'code': 401, 'msg': 'Cannot create a group anonymously.'});
    }
};


/**
 * Determine whether or not the user in the context can manage a given group.
 *
 * @param  {Context}    ctx                 The current execution context
 * @param  {String}     groupId             The group to check
 * @param  {Function}   callback            The function to invoke when the process completes
 * @param  {Object}     callback.err        An error that occurred while checking access, if any
 * @param  {Boolean}    callback.canManage  Whether or not the user can manage the group.
 * @param  {Boolean}    callback.group      If the current user has access, we pass the group object.
 */
var canManage = module.exports.canManage = function(ctx, groupId, callback) {
    var currentUserId = getUserId(ctx);

    // Anonymous users cannot manage a group
    if (!currentUserId) {
        return callback(null, false);
    }

    getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        _canManage(ctx, group, function(err, canManage) {
            if (err) {
                return callback(err);
            }

            callback(null, canManage, group);
        });
    });
};

/**
 * Determine whether or not the user in context is able to view the members of the given group.
 *
 * @param   {Context}   ctx                         The context of the current request
 * @param   {Group}     group                       The group to check
 * @param   {Function}  callback                    Invoked when the process completes
 * @param   {Object}    callback.err                An error that occurred, if any
 * @param   {Boolean}   callback.canViewMembers     Whether or not the user in context can view the members of the given group
 */
var canViewMembers = module.exports.canViewMembers = function(ctx, group, callback) {
    if (group.visibility === PrincipalsConstants.visibility.PUBLIC) {
        // Public groups are visible to everyone
        return callback(null, true);
    } else if (group.visibility === PrincipalsConstants.visibility.LOGGEDIN && TenantsUtil.isLoggedIn(ctx, group.tenant)) {
        // If a group is only accessible by loggedin users, the user must be logged in to the group's tenant
        return callback(null, true);
    } else if (!ctx.user()) {
        // The group is private, anonymous users can never see it
        return callback(null, false);
    } else {
        // The group is private and the user is authenticated, check if the user is a member
        AuthzAPI.hasAnyRole(ctx.user().id, group.id, callback);
    }
};

/**
 * Internal function that checks whether or not the current user can manage a group. This function assumes that
 * the passed in groupId actually exists
 *
 * @param  {Context}     ctx                 The current execution context.
 * @param  {Group}       group               The group to check.
 * @param  {Function}    callback            Callback method. takes arguments `err` and `canManage`
 * @param  {Object}      callback.err        If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 * @param  {Boolean}     callback.canManage  Whether or not the user can manage the group.
 * @api private
 */
var _canManage = function(ctx, group, callback) {
    if (!ctx.user()) {
        return callback(null, false);
    }

    if (ctx.user().isAdmin(group.tenant)) {
        return callback(null, true);
    }

    AuthzAPI.hasRole(getUserId(ctx), group.id, Constants.roles.MANAGER, callback);
};

/**
 * Internal function used to update, add or remove the role of a set of principals in a group.
 * This function will assume that the group exists and that the current user is a manager of the group
 *
 * @param  {Context}     ctx             The user Context
 * @param  {Group}       group           The group to which the members should be added
 * @param  {Object}      members         Object where the keys represent the principal ids which should be updated/added/removed. The value is a string representing the new role. If false is passed in, the membership for that principal will be removed e.g. {'user1': 'manager', 'user2': 'viewer', 'user3': false}
 * @param  {Function}    callback        The Function called when the process is finished takes arguments `err`
 * @param  {Object}      callback.err    An error that occurred, if any
 * @api private
 */
var _setGroupMembers = function(ctx, group, members, callback) {
    // Check if all the principals exist.
    // Check if all of the provided principals exist
    PrincipalsUtil.getPrincipals(ctx, _.keys(members), function(err, principals) {
        if (err) {
            return callback(err);
        }

        // Verify no user addition violates tenant boundaries by being added
        for (var principalId in principals) {
            var principal = principals[principalId];
            if (members[principalId] && !TenantsUtil.canInteract(principal.tenant, group.tenant)) {
                return callback({'code': 400, 'msg': 'External user ' + principal.id + ' cannot be added as a member of this group.'});
            }
        }

        AuthzAPI.updateRoles(group.id, members, callback);
    });
};

/**
 * Get the current user id from the context, if any
 * 
 * @param  {Context} ctx     The user context
 * @return {String}          The id of the user in the context. Returns null if there is no active user (i.e., anonymous)
 * @api private
 */
var getUserId = function(ctx) {
    var user = ctx.user();
    return user ? user.id : null;
};

