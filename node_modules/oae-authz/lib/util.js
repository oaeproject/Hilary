/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzModel = require('oae-authz/lib/model');

/**
 * Construct a resource based on the given UUID.
 *
 * @param  {String}      uuid   A UUID of a resource
 * @return {Resource}           A AuthzModel.Resource object derived from this UUID
 */
var getResourceFromUuid = module.exports.getResourceFromUuid = function(uuid) {
    return unpackUuid(AuthzModel.Resource, uuid);
};

/**
 * Construct a Principal based on the given UUID.
 *
 * @param  {String}     uuid    A UUID of a principal
 * @return {Principal}          A AuthzModel.Principal object derived from this UUID
 */
var getPrincipalFromUuid = module.exports.getPrincipalFromUuid = function(uuid) {
    return unpackUuid(AuthzModel.Principal, uuid);
};

/**
 * Construct a UUID based on the given type, tenantId and instanceId of a resource or principal.
 * 
 * @param  {String}     type        The type of object, as defined by either AuthzConstants.principalTypes or AuthzConstants.resourceTypes
 * @param  {String}     tenantId    The ID of the tenant
 * @param  {String}     instanceId  The ID of the principal or resource instance
 * @return {String}                 The UUID constructed from the given parameters, i.e., "type:tenantId:instanceId"
 */
var toUuid = module.exports.toUuid = function(type, tenantId, instanceId) {
    return type+':'+tenantId+':'+instanceId;
};

/**
 * Determine whether or not the given UUID represents a group resource.
 *
 * @param  {String}     resourceUuid    The UUID of the resource
 * @return {Boolean}                    Whether or not the UUID is a group resource UUID
 */
var isGroupResource = module.exports.isGroupResource = function(resourceUuid) {
    return resourceUuid.indexOf(AuthzConstants.resourceTypes.GROUP+':') === 0;
};

/**
 * Determine whether or not the given UUID represents a group principal.
 *
 * @param  {String}     principalUuid   The UUID of the principal
 * @return {Boolean}                    Whether or not the UUID is a group UUID
 */
var isGroupPrincipal = module.exports.isGroupPrincipal = function(principalUuid) {
    return principalUuid.indexOf(AuthzConstants.principalTypes.GROUP+':') === 0;
};

/**
 * Determine whether or not the given UUID represents a user principal.
 *
 * @param  {String}     principalUuid   The UUID of the principal
 * @return {Boolean}                    Whether or not the UUID is a user UUID
 */
var isUserPrincipal = module.exports.isUserPrincipal = function(principalUuid) {
    return principalUuid.indexOf(AuthzConstants.principalTypes.USER+':') === 0;
};

// convenience method to combine the similar operation of splitting a UUID
var unpackUuid = function(type, uuid) {
    var split = uuid.split(':');
    return new type(split[0], split[1], split.slice(2).join(':'));
};
