/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var Validator = require('oae-authz/lib/validator').Validator;

describe('Authz-Validator', function() {

    describe('#isValidUuid()', function() {
        it('verify general functionality', function(callback) {
            var v = new Validator();
            v.check(undefined, 'undefined').isValidUuid();
            v.check(null, 'null').isValidUuid();
            v.check('', 'empty').isValidUuid();
            v.check('  ', 'blank').isValidUuid();
            v.check('not a valid uuid', 'malformatted').isValidUuid();
            v.check('a:valid:uuid', 'correct').isValidUuid();

            assert.ok(v.hasErrors());
            assert.equal(5, v.getErrors().length);
            assert.equal('undefined', v.getErrors()[0]);
            assert.equal('null', v.getErrors()[1]);
            assert.equal('empty', v.getErrors()[2]);
            assert.equal('blank', v.getErrors()[3]);
            assert.equal('malformatted', v.getErrors()[4]);
            callback();
        });
    });

    describe('#isPrincipal()', function() {
        it('verify general functionality', function(callback) {
            var v = new Validator();
            v.check(undefined, 'undefined').isPrincipal();
            v.check(null, 'null').isPrincipal();
            v.check('', 'empty').isPrincipal();
            v.check('  ', 'blank').isPrincipal();
            v.check('not a valid uuid', 'malformatted').isPrincipal();
            v.check('not:a:principal', 'unprincipal').isPrincipal();
            v.check('u:valid:uuid', 'correct').isPrincipal();
            v.check('g:valid:uuid', 'correct').isPrincipal();

            assert.ok(v.hasErrors());
            assert.equal(6, v.getErrors().length);
            assert.equal('undefined', v.getErrors()[0]);
            assert.equal('null', v.getErrors()[1]);
            assert.equal('empty', v.getErrors()[2]);
            assert.equal('blank', v.getErrors()[3]);
            assert.equal('malformatted', v.getErrors()[4]);
            assert.equal('unprincipal', v.getErrors()[5]);
            callback();
        });
    });

    describe('#isGroupPrincipal()', function() {
        it('verify general functionality', function(callback) {
            var v = new Validator();
            v.check(undefined, 'undefined').isGroupPrincipal();
            v.check(null, 'null').isGroupPrincipal();
            v.check('', 'empty').isGroupPrincipal();
            v.check('  ', 'blank').isGroupPrincipal();
            v.check('not a valid uuid', 'malformatted').isGroupPrincipal();
            v.check('not:a:principal', 'unprincipal').isGroupPrincipal();
            v.check('u:valid:uuid', 'ungroup').isGroupPrincipal();
            v.check('g:valid:uuid', 'correct').isGroupPrincipal();

            assert.ok(v.hasErrors());
            assert.equal(7, v.getErrors().length);
            assert.equal('undefined', v.getErrors()[0]);
            assert.equal('null', v.getErrors()[1]);
            assert.equal('empty', v.getErrors()[2]);
            assert.equal('blank', v.getErrors()[3]);
            assert.equal('malformatted', v.getErrors()[4]);
            assert.equal('unprincipal', v.getErrors()[5]);
            assert.equal('ungroup', v.getErrors()[6]);
            callback();
        });
    });

    describe('#isNotGroupResource()', function() {
        it('verify general functionality', function(callback) {
            var v = new Validator();
            v.check(undefined, 'undefined').isNotGroupResource();
            v.check(null, 'null').isNotGroupResource();
            v.check('', 'empty').isNotGroupResource();
            v.check('  ', 'blank').isNotGroupResource();
            v.check('not a valid uuid', 'malformatted').isNotGroupResource();
            v.check('not:a:principal', 'unprincipal').isNotGroupResource();
            v.check('u:valid:uuid', 'ungroup').isNotGroupResource();
            v.check('g:valid:uuid', 'group').isNotGroupResource();

            assert.ok(v.hasErrors());
            assert.equal(1, v.getErrors().length);
            assert.equal('group', v.getErrors()[0]);
            callback();
        });
    });

    describe('#isValidRole()', function() {
        it('verify general functionality', function(callback) {
            var v = new Validator();
            v.check(undefined, 'undefined').isValidRole();
            v.check(null, 'null').isValidRole();
            v.check('', 'empty').isValidRole();
            v.check('  ', 'blank').isValidRole();
            v.check(false, 'false').isValidRole();
            v.check('manager', 'valid').isValidRole();

            assert.ok(v.hasErrors());
            assert.equal(5, v.getErrors().length);
            assert.equal('undefined', v.getErrors()[0]);
            assert.equal('null', v.getErrors()[1]);
            assert.equal('empty', v.getErrors()[2]);
            assert.equal('blank', v.getErrors()[3]);
            assert.equal('false', v.getErrors()[4]);
            callback();
        });
    });

    describe('#isValidRoleChange()', function() {
        it('verify general functionality', function(callback) {
            var v = new Validator();
            v.check(undefined, 'undefined').isValidRoleChange();
            v.check(null, 'null').isValidRoleChange();
            v.check('', 'empty').isValidRoleChange();
            v.check('  ', 'blank').isValidRoleChange();
            // 'false' is valid as a 'role change' value, as it indicates remove the role
            v.check(false, 'false').isValidRoleChange();
            v.check('manager', 'valid').isValidRoleChange();

            assert.ok(v.hasErrors());
            assert.equal(4, v.getErrors().length);
            assert.equal('undefined', v.getErrors()[0]);
            assert.equal('null', v.getErrors()[1]);
            assert.equal('empty', v.getErrors()[2]);
            assert.equal('blank', v.getErrors()[3]);
            callback();
        });
    });
});