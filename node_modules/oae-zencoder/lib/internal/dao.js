/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');

/**
 * Given a Zencoder id, get the content id and revision id that is associated to it in Cassandra.
 *
 * @param  {String}     zencoderId                  The id of the Zencoder preview item that maps to a local content revision
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Object}     callback.result             An object containing the id of the content item and revision that maps to the Zencoder id
 * @param  {String}     callback.result.contentId   The id of the content item
 * @param  {String}     callback.result.revisionId  The id of the revision
 */
var getContentRevisionId = module.exports.getContentRevisionId = function(zencoderId, callback) {
    Cassandra.runQuery('SELECT * FROM "ZencoderToContentIdMap" WHERE "zencoderId" = ?', [zencoderId], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (_.isEmpty(rows)) {
            return callback({'code': 404, 'msg': 'Could not find Zencoder mapping for id ' + zencoderId});
        }

        return callback(null, Cassandra.rowToHash(rows[0]));
    });
};

/**
 * Save the mapping between the Zencoder preview file id and its associated content id and revision id.
 *
 * @param  {String}     zencoderId      The id of the Zencoder preview item to associate to a content revision
 * @param  {String}     contentId       The id of the content item that maps to the Zencoder item
 * @param  {String}     revisionId      The id of the revision that maps to the Zencoder item
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var saveContentRevisionId = module.exports.saveContentRevisionId = function(zencoderId, contentId, revisionId, callback) {
    var q = Cassandra.constructUpsertCQL('ZencoderToContentIdMap', 'zencoderId', zencoderId, {
        'contentId': contentId,
        'revisionId': revisionId
    });

    return Cassandra.runQuery(q.query, q.parameters, callback);
};
