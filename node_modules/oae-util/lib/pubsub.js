/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var EventEmitter = require('events').EventEmitter
var log = require('oae-logger').logger('pubsub');
var Redis = require('./redis');
var Validator = require('./validator').Validator;

/**
 * This module abstracts most of the redis publish/subscribe functions away.
 * It will listen to all channels and emit an event for each message it receives.
 * The redis channel name will be the event name and the message it's only argument.
 */


// Create the event emitter.
var emitter = module.exports = new EventEmitter();
var redisManager = null;
var redisSubscriber = null;
var redisPublisher = null;




/**
 * Initializes the connection to redis.
 * @param {Object} config A configuration object that holds the required values to configure redis.
 *                        It should at the very least have a `port` and `host` key.
 */
module.exports.init = function(config) {
    // Only init if the connections haven't been opened.
    if (redisManager === null) {
        // Create 3 clients, one for managing redis and 2 for the actual pub/sub communication.
        redisManager = Redis.createClient(config);
        redisSubscriber = Redis.createClient(config);
        redisPublisher = Redis.createClient(config);

        // Listen to all channels and emit them as events.
        redisSubscriber.on("pmessage", function (pattern, channel, message) {
            emitter.emit(channel, message);
        });
        redisSubscriber.psubscribe('*');
    }
};


/**
 * Broadcast a message accross a channel.
 * This can be used to publish messages to all the app nodes.
 *
 * @param {String}         channel          The channel you wish to publish on. ex: 'oae-tenants'
 * @param {String}         message          The message you wish to send on a channel. ex: 'start 2000'
 * @param {Function(err)}  callback         Callback method
 * @param {Object}         callback.err     An error object if any.
 */
var publish = module.exports.publish = function(channel, message, callback) {
    callback = callback || function() {};
    var validator = new Validator();
    validator.check(channel, {'code': 400, 'msg': 'No channel was provided.'}).notEmpty();
    validator.check(message, {'code': 400, 'msg': 'No message was provided.'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    redisPublisher.publish(channel, message, callback);
};

/**
 * Flushes all messages from the system that we're currently pushing to.
 *
 * @param {Function} callback       A callback method.
 * @param {Object}   callback.err   An error object if any.
 */
var flush = module.exports.flush = function(callback) {
    redisManager.flushdb([], function(err) {
        if (err) {
            return callback({'code': 500, 'msg': err});
        }
        return callback();
    });
};
