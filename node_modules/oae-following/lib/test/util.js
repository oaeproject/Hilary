/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var SearchTestUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Create 2 users, one following the other
 *
 * @param  {RestContext}    restCtx                         The REST context with which to create the users
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.follower               An object holding the restContext and user object of the user following the other
 * @param  {RestContext}    callback.follower.restContext   The rest context of the user following the other
 * @param  {User}           callback.follower.user          The user object representing the user following the other
 * @param  {Object}         callback.followed               An object holding the restContext and user object of the user being followed by the other
 * @param  {RestContext}    callback.followed.restContext   The rest context of the user following the other
 * @param  {User}           callback.followed.user          The user object representing the user being followed by the other
 */
var createFollowerAndFollowed = module.exports.createFollowerAndFollowed = function(restCtx, callback) {
    TestsUtil.generateTestUsers(restCtx, 2, function(err, testUsers) {
        var follower = _.values(testUsers)[0];
        var following = _.values(testUsers)[1];

        RestAPI.Following.follow(follower.restContext, following.user.id, function(err) {
            assert.ok(!err);
            return callback(follower, following);
        });
    });
};

/**
 * Perform the requests necessary for the provided followed user to become followed by the given list of users
 *
 * @param  {String}         followedUserId                      The id of the user to be followed
 * @param  {Object[]}       followerUserInfos                   The users with which to follow the followed user
 * @param  {RestContext}    followerUserInfos[i].restContext    The REST context that can be used to make the request to follow the followed user for this user
 * @param  {User}           followerUserInfos[i].user           The user object of the user to follow the followed user
 * @param  {Function}       callback                            Standard callback function
 */
var followByAll = module.exports.followByAll = function(followedUserId, followerUserInfos, callback) {
    if (_.isEmpty(followerUserInfos)) {
        return callback();
    }

    followerUserInfos = followerUserInfos.slice();
    var followerUserInfo = followerUserInfos.shift();
    RestAPI.Following.follow(followerUserInfo.restContext, followedUserId, function(err) {
        assert.ok(!err);

        // Recursively invoke the method again to follow the followedUserId by the next follower user in the list
        return followByAll(followedUserId, followerUserInfos, callback);
    });
};

/**
 * Perform the requests necessary for the provided follower user to begin following all the followed users
 *
 * @param  {RestContext}    restContext         The REST context that can be used to make the request to follow the followed users
 * @param  {String[]}       followedUserIds     The ids of the users to follow
 * @param  {Function}       callback            Standard callback function
 */
var followAll = module.exports.followAll = function(restContext, followedUserIds, callback) {
    if (_.isEmpty(followedUserIds)) {
        return callback();
    }

    followedUserIds = followedUserIds.slice();
    var followedUserId = followedUserIds.shift();
    RestAPI.Following.follow(restContext, followedUserId, function(err) {
        assert.ok(!err);

        // Recursively invoke the method again to follow the next user in the list
        return followAll(restContext, followedUserIds, callback);
    });
};

/**
 * Get all the followers, ensuring the list of all user ids is equal to the one provided
 *
 * @param  {RestContext}    restContext             The REST context that will be used to list the followers
 * @param  {String}         userId                  The id of the user whose followers to check
 * @param  {Object}         [opts]                  Optional arguments
 * @param  {Number}         [opts.batchSize]        The page size to fetch when getting all followers
 * @param  {String[]}       expectedFollowerIds     The list of user ids to expect
 * @param  {Function}       callback                Invoked when all assertions pass
 * @param  {User[]}         callback.followers      All followers of the specified user
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertGetAllFollowersEquals = module.exports.assertGetAllFollowersEquals = function(restCtx, userId, opts, expectedFollowerIds, callback) {
    assertGetAllFollowersSucceeds(restCtx, userId, opts, function(followers) {
        assert.deepEqual(_.pluck(followers, 'id').sort(), expectedFollowerIds.slice().sort());
        return callback(followers);
    });
};

/**
 * Get all the followers of the specified user
 *
 * @param  {RestContext}    restContext             The REST context that will be used to list the followers
 * @param  {String}         userId                  The id of the user whose followers to get
 * @param  {Object}         [opts]                  Optional arguments
 * @param  {Number}         [opts.batchSize]        The page size to fetch when getting all followers
 * @param  {Function}       callback                Invoked when all assertions pass
 * @param  {User[]}         callback.followers      All followers of the specified user
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertGetAllFollowersSucceeds = module.exports.assertGetAllFollowersSucceeds = function(restCtx, userId, opts, callback, _followers, _nextToken) {
    if (_nextToken === null) {
        return callback(_followers);
    }

    opts = opts || {};
    assertGetFollowersSucceeds(restCtx, userId, {'start': _nextToken, 'limit': opts.batchSize}, function(result) {
        return assertGetAllFollowersSucceeds(restCtx, userId, opts, callback, _.union(_followers, result.results), result.nextToken);
    });
};

/**
 * Get a list of followers for the specified user
 *
 * @param  {RestContext}    restContext             The REST context that will be used to list the followers
 * @param  {String}         userId                  The id of the user whose followers to get
 * @param  {Object}         [opts]                  Optional arguments
 * @param  {Number}         [opts.start]            The paging index at which to start listing followers
 * @param  {Number}         [opts.limit]            The maximum number of followers to return
 * @param  {Function}       callback                Invoked when all assertions pass
 * @param  {User[]}         callback.followers      A list of followers of the specified user
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertGetFollowersSucceeds = module.exports.assertGetFollowersSucceeds = function(restCtx, userId, opts, callback) {
    opts = opts || {};
    RestAPI.Following.getFollowers(restCtx, userId, opts.start, opts.limit, function(err, result, nextToken) {
        assert.ok(!err);
        assert.ok(_.isArray(result.results));
        if (_.isNumber(opts.limit) && opts.limit > 0) {
            assert.ok(result.results.length <= opts.limit);
        }
        assert.ok(_.isString(result.nextToken) || _.isNull(result.nextToken));

        return callback(result, nextToken);
    });
};


/**
 * Get all the users followed by the specified user, ensuring the list of all user ids is equal to the
 * one provided
 *
 * @param  {RestContext}    restContext             The REST context that will be used to list the followed users
 * @param  {String}         userId                  The id of the user whose followed users to check
 * @param  {Object}         [opts]                  Optional arguments
 * @param  {Number}         [opts.batchSize]        The page size to fetch when getting all followed users
 * @param  {String[]}       expectedFollowingIds    The list of user ids to expect
 * @param  {Function}       callback                Invoked when all assertions pass
 * @param  {User[]}         callback.following      All followed users of the specified user
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertGetAllFollowingEquals = module.exports.assertGetAllFollowingEquals = function(restCtx, userId, opts, expectedFollowingIds, callback) {
    assertGetAllFollowingSucceeds(restCtx, userId, opts, function(following) {
        assert.deepEqual(_.pluck(following, 'id').sort(), expectedFollowingIds.slice().sort());
        return callback(following);
    });
};

/**
 * Get all the users followed by the specified user of the specified user
 *
 * @param  {RestContext}    restContext             The REST context that will be used to list the followed users
 * @param  {String}         userId                  The id of the user whose followed users to get
 * @param  {Object}         [opts]                  Optional arguments
 * @param  {Number}         [opts.batchSize]        The page size to fetch when getting all followed users
 * @param  {Function}       callback                Invoked when all assertions pass
 * @param  {User[]}         callback.following      All followed users of the specified user
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertGetAllFollowingSucceeds = module.exports.assertGetAllFollowingSucceeds = function(restCtx, userId, opts, callback, _following, _nextToken) {
    if (_nextToken === null) {
        return callback(_following);
    }

    opts = opts || {};
    assertGetFollowingSucceeds(restCtx, userId, {'start': _nextToken, 'limit': opts.batchSize}, function(result) {
        return assertGetAllFollowingSucceeds(restCtx, userId, opts, callback, _.union(_following, result.results), result.nextToken);
    });
};

/**
 * Get a list of users being followed by the specified user
 *
 * @param  {RestContext}    restContext             The REST context that will be used to list the followed users
 * @param  {String}         userId                  The id of the user whose followed users to get
 * @param  {Object}         [opts]                  Optional arguments
 * @param  {Number}         [opts.start]            The paging index at which to start listing followed users
 * @param  {Number}         [opts.limit]            The maximum number of followed users to return
 * @param  {Function}       callback                Invoked when all assertions pass
 * @param  {User[]}         callback.following      A list of users who are being followed by the specified user
 * @throws {AssertionError}                         Thrown if any assertions fail
 */
var assertGetFollowingSucceeds = module.exports.assertGetFollowingSucceeds = function(restCtx, userId, opts, callback) {
    opts = opts || {};
    RestAPI.Following.getFollowing(restCtx, userId, opts.start, opts.limit, function(err, result, nextToken) {
        assert.ok(!err);
        assert.ok(_.isArray(result.results));
        if (_.isNumber(opts.limit) && opts.limit > 0) {
            assert.ok(result.results.length <= opts.limit);
        }
        assert.ok(_.isString(result.nextToken) || _.isNull(result.nextToken));

        return callback(result, nextToken);
    });
};

/**
 * Ensure that the follower user follows the followed user according to both the follower and following listings.
 *
 * @param  {String}         followerUserId      The id of the follower user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId      The id of the expected followed user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback            Standard callback function
 */
var assertFollows = module.exports.assertFollows = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    _findFollowerAndFollowing(followerUserId, followerRestCtx, followedUserId, followedRestCtx, function(follower, followed) {
        assert.ok(follower);
        assert.equal(follower.id, followerUserId);
        assert.ok(followed);
        assert.equal(followed.id, followedUserId);
        return callback();
    });
};

/**
 * Ensure that the follower user *does not* follow the followed user according to both the follower and following listings.
 *
 * @param  {String}         followerUserId      The id of the follower user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId      The id of the expected followed user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback            Standard callback function
 */
var assertDoesNotFollow = module.exports.assertDoesNotFollow = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    _findFollowerAndFollowing(followerUserId, followerRestCtx, followedUserId, followedRestCtx, function(follower, followed) {
        if (follower) {
            assert.notEqual(follower.id, followerUserId);
        }

        if (followed) {
            assert.notEqual(followed.id, followedUserId);
        }

        return callback();
    });
};

/**
 * Ensure that both the following and follower feeds return the expected http status code
 *
 * @param  {RestContext}    restCtx     The REST context to perform the requests with
 * @param  {String[]}       userIds     The ids of the users whose feeds to request
 * @param  {Number}         httpCode    The expected HTTP status code
 * @param  {Function}       callback    Standard callback function
 * @throws {AssertionError}             Thrown if an assertion fails
 */
var assertNoFollowFeedAccess = module.exports.assertNoFollowFeedAccess = function(restCtx, userIds, httpCode, callback) {
    if (_.isEmpty(userIds)) {
        return callback();
    }

    var userId = userIds.shift();
    RestAPI.Following.getFollowers(restCtx, userId, null, null, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);

        RestAPI.Following.getFollowing(restCtx, userId, null, null, function(err) {
            assert.ok(err);
            assert.equal(err.code, httpCode);
            return assertNoFollowFeedAccess(restCtx, userIds, httpCode, callback);
        });
    });
};

/**
 * Ensure that both the following and follower feeds do not err when requesting with the given rest context
 *
 * @param  {RestContext}    restCtx     The REST context to perform the requests with
 * @param  {String[]}       userIds     The ids of the users whose feeds to request
 * @param  {Function}       callback    Standard callback function
 */
var assertHasFollowFeedAccess = module.exports.assertHasFollowFeedAccess = function(restCtx, userIds, callback) {
    if (_.isEmpty(userIds)) {
        return callback();
    }

    var userId = userIds.shift();
    _findFollowerAndFollowing(userId, restCtx, userId, restCtx, function() {
        // We don't actually care about the results, we just care about the no-err assertions in the method
        return assertHasFollowFeedAccess(restCtx, userIds, callback);
    });
};

/**
 * Ensure that the user in context does not have access to search the followers or following of the given users
 *
 * @param  {RestContext}    restCtx     The REST context to perform the requests with
 * @param  {String[]}       userIds     The ids of the users whose search feeds the user in context should not have access to
 * @param  {Number}         httpCode    The expected HTTP status code
 * @param  {Function}       callback    Standard callback function
 */
var assertNoSearchFeedAccess = module.exports.assertNoSearchFeedAccess = function(restCtx, userIds, httpCode, callback) {
    if (_.isEmpty(userIds)) {
        return callback();
    }

    var userId = userIds.shift();
    RestAPI.Search.search(restCtx, 'following', [userId], null, function(err, response) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!response);

        RestAPI.Search.search(restCtx, 'followers', [userId], null, function(err, response) {
            assert.ok(err);
            assert.strictEqual(err.code, httpCode);
            assert.ok(!response);
            return assertNoSearchFeedAccess(restCtx, userIds, httpCode, callback);
        });
    });
};

/**
 * Ensure that the user in context has access to search the followers or following of the given users
 *
 * @param  {RestContext}    restCtx         The REST context to perform the requests with
 * @param  {String[]}       userIds         The ids of the users whose search feeds the user in context should have access to
 * @param  {Function}       callback        Standard callback function
 */
var assertHasSearchFeedAccess = module.exports.assertHasSearchFeedAccess = function(restCtx, userIds, callback) {
    if (_.isEmpty(userIds)) {
        return callback();
    }

    var userId = userIds.shift();
    searchFollowerAndFollowing(userId, restCtx, userId, restCtx, function() {
        // We don't actually care about the results, we just care about the no-err assertions in the method
        return assertHasSearchFeedAccess(restCtx, userIds, callback);
    });
};

/**
 * Search the following feed as the followerUserId and the followers feed of the followedUserId with no query parameters. This will effectively
 * get the search documents that represents the "follower user" and the "followed user" from the "followers" and "following" search feeds,
 * respectively.
 *
 * @param  {String}         followerUserId              The id of the follower user
 * @param  {RestContext}    followerRestCtx             The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId              The id of the expected followed user
 * @param  {RestContext}    followerRestCtx             The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         [callback.followerUserDoc]  The follower user document from the following search that matches the follower user id. If unspecified, the user was not found
 * @param  {Object}         [callback.followedUserDoc]  The followed user document from the followers search that matches the followed user id. If unspecified, the user was not found
 */
var searchFollowerAndFollowing = module.exports.searchFollowerAndFollowing = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    SearchTestUtil.searchAll(followerRestCtx, 'following', [followerUserId], null, function(err, followingResponse) {
        assert.ok(!err);

        SearchTestUtil.searchAll(followedRestCtx, 'followers', [followedUserId], null, function(err, followerResponse) {
            assert.ok(!err);

            return callback(_.findWhere(followerResponse.results, {'id': followerUserId}), _.findWhere(followingResponse.results, {'id': followedUserId}));
        });
    });
};

/**
 * Find the follower user from the following list and the followed user from the follower list from each user.
 *
 * @param  {String}         followerUserId          The id of the follower user
 * @param  {RestContext}    followerRestCtx         The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId          The id of the expected followed user
 * @param  {RestContext}    followerRestCtx         The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback                Standard callback function
 * @param  {User}           [callback.follower]     The follower user from the following list. If unspecified, the user was not found
 * @param  {User}           [callback.followed]     The followed user from the followers list. If unspecified, the user was not found
 * @api private
 */
var _findFollowerAndFollowing = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    // To ensure the first item would be the user we're looking for, we simply slice one character off the end as the start
    assertGetAllFollowingSucceeds(followerRestCtx, followerUserId, null, function(following) {
        var followed = _.findWhere(following, {'id': followedUserId});

        // Now we're looking for the follower user in the followers list of the followed user
        assertGetAllFollowersSucceeds(followedRestCtx, followedUserId, null, function(followers) {
            var follower = _.findWhere(followers, {'id': followerUserId});

            return callback(follower, followed);
        });
    });
};
