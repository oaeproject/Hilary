/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var assert = require('assert');

var Cassandra = require('oae-util/lib/cassandra');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var StatsAPI = require('oae-stats');

describe('Stats', function() {

    // Standard REST contexts to use to execute requests as different types of users
    var anonymousCamRestContext = null;
    var anonymousGlobalRestContext = null;
    var camAdminRestContext = null;
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and the tenant admin context
     */
    before(function(callback) {
        // Create the standard REST contexts
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Get rid of any test stats data
        Cassandra.runQuery('TRUNCATE "StatsByTenant"', [], function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    /**
     * Can be used to sort an array of stats
     *
     * @param  {Object}     a   The first stat
     * @param  {Objcet}     b   The second stat
     * @return {Number}         Number that can be used to order a against b
     */
    var _statsSorter = function(a, b) {
        if (a.name === b.name) {
            return a.value - b.value;
        } else {
            return a.name.localeCompare(b.name);
        }
    };

    /**
     * Assert that a set of given stats are present in the `allStats` set
     * for a given `tenantAlias`
     *
     * @param  {Object[]}   allStats        All the stats
     * @param  {String}     tenantAlias     The tenant alias that should be used to filter `allStats`
     * @param  {Object[]}   stats           That stats that should be in the filtered `allStats`
     * @throws {Error}                      An assertion error is thrown if the stats are not what was expected
     */
    var _assertExpectedStats = function(allStats, tenantAlias, stats) {
        var expectedStats = _.chain(allStats)
                            .filter(function(stat) {
                                return (stat.tenantAlias === tenantAlias);
                            })
                            .map(function(stat) {
                                return {'name': stat.name, 'value': stat.value};
                            }).value();

        // Sort both statistics so we can assert they are the same using `assert.deepEqual`
        expectedStats.sort(_statsSorter);
        stats.sort(_statsSorter);
        assert.deepEqual(stats, expectedStats);
    };

    /**
     * Setup the fixture by generating some random stats and generating a new user
     *
     * @param  {Function}   callback            Standard callback function
     * @param  {Object}     callback.err        An error object, if any
     * @param  {Object[]}   callback.stats      The created stats
     * @param  {Object}     callback.user       The created user as returned by `TestsUtil.generateTestUsers`
     */
    var _setupFixture = function(callback) {
        // Generate some dummy stats
        var stats = [
            {'tenantAlias': global.oaeTests.tenants.cam.alias, 'name': TestsUtil.generateRandomText(1), 'value': _.random(1, 1000)},
            {'tenantAlias': global.oaeTests.tenants.cam.alias, 'name': TestsUtil.generateRandomText(1), 'value': _.random(1, 1000)},
            {'tenantAlias': global.oaeTests.tenants.gt.alias, 'name': TestsUtil.generateRandomText(1), 'value': _.random(1, 1000)},
            {'tenantAlias': global.oaeTests.tenants.gt.alias, 'name': TestsUtil.generateRandomText(1), 'value': _.random(1, 1000)}
        ];
        StatsAPI.setStatistics(stats, function(err) {
            assert.ok(!err);

            // Generate the user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simon) {
                assert.ok(!err);

                stats.sort(_statsSorter);

                return callback(stats, simon);
            });
        });
    };

    describe('#getAllStatistics', function() {

        /**
         * Test that verifies that only administrators can retrieve statistics
         */
        it('verify only administrators can retrieve statistics', function(callback) {
            _setupFixture(function(allStats, simon) {

                // Verify anonymous users can't retrieve stats
                RestAPI.Stats.getAllStatistics(anonymousCamRestContext, null, function(err, stats) {
                    assert.equal(err.code, 401);
                    assert.ok(!stats);

                    RestAPI.Stats.getAllStatistics(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, function(err, stats) {
                        assert.equal(err.code, 401);
                        assert.ok(!stats);

                        // Verify non-admin users cannot retrieve stats
                        RestAPI.Stats.getAllStatistics(simon.restContext, null, function(err, stats) {
                            assert.equal(err.code, 401);
                            assert.ok(!stats);

                            // Verify tenant administrators can only retrieve their own statistics
                            RestAPI.Stats.getAllStatistics(camAdminRestContext, global.oaeTests.tenants.gt.alias, function(err, stats) {
                                assert.ok(err);
                                assert.ok(!stats);

                                // Sanity-check the tenant admin can retrieve his own tenant's statistics
                                RestAPI.Stats.getAllStatistics(camAdminRestContext, null, function(err, stats) {
                                    assert.ok(!err);
                                    _assertExpectedStats(allStats, global.oaeTests.tenants.cam.alias, stats.items);

                                    // Sanity-check the global admin can retrieve all the stats
                                    RestAPI.Stats.getAllStatistics(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, stats) {
                                        assert.ok(!err);
                                        _assertExpectedStats(allStats, global.oaeTests.tenants.cam.alias, stats.items);

                                        RestAPI.Stats.getAllStatistics(globalAdminRestContext, global.oaeTests.tenants.gt.alias, function(err, stats) {
                                            assert.ok(!err);
                                            _assertExpectedStats(allStats, global.oaeTests.tenants.gt.alias, stats.items);

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getStatistic', function() {
        /**
         * Test that verifies that only administrators can retrieve a statistic
         */
        it('verify only administrators can retrieve a statistic', function(callback) {
            _setupFixture(function(allStats, simon) {

                var camStat = _.find(allStats, function(stat) { return (stat.tenantAlias === global.oaeTests.tenants.cam.alias); });
                var gtStat = _.find(allStats, function(stat) { return (stat.tenantAlias === global.oaeTests.tenants.gt.alias); });

                // Verify anonymous users can't retrieve a stat
                RestAPI.Stats.getStatistic(anonymousCamRestContext, null, camStat.name, function(err, stat) {
                    assert.equal(err.code, 401);
                    assert.ok(!stat);

                    RestAPI.Stats.getStatistic(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, camStat.name, function(err, stat) {
                        assert.equal(err.code, 401);
                        assert.ok(!stat);

                        // Verify non-admin users cannot retrieve a stat
                        RestAPI.Stats.getStatistic(simon.restContext, null, camStat.name, function(err, stat) {
                            assert.equal(err.code, 401);
                            assert.ok(!stat);

                            // Verify tenant administrators can only retrieve their own statistics
                            RestAPI.Stats.getStatistic(camAdminRestContext, global.oaeTests.tenants.gt.alias, camStat.name, function(err, stat) {
                                assert.ok(err);
                                assert.ok(!stat);

                                // Sanity-check the tenant admin can retrieve his own tenant's statistics
                                RestAPI.Stats.getStatistic(camAdminRestContext, null, camStat.name, function(err, stat) {
                                    assert.ok(!err);
                                    assert.deepEqual(stat.name, camStat.name);
                                    assert.deepEqual(stat.value, camStat.value);

                                    // Sanity-check the global admin can retrieve a stat
                                    RestAPI.Stats.getStatistic(globalAdminRestContext, global.oaeTests.tenants.cam.alias, camStat.name, function(err, stat) {
                                        assert.ok(!err);
                                        assert.deepEqual(stat.name, camStat.name);
                                        assert.deepEqual(stat.value, camStat.value);

                                        RestAPI.Stats.getStatistic(globalAdminRestContext, global.oaeTests.tenants.gt.alias, gtStat.name, function(err, stat) {
                                            assert.ok(!err);
                                            assert.deepEqual(stat.name, gtStat.name);
                                            assert.deepEqual(stat.value, gtStat.value);

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
