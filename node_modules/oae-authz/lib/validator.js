/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var AuthzUtil = require('oae-authz/lib/util');
var Validator = module.exports.Validator = require('oae-util/lib/validator').Validator;

Validator.prototype.isValidUuid = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty uuid was provided');
    } else if (this.str.split(':').length < 3) {
        this.error(this.msg || 'A principal or resource uuid must be of the format: "<type>:<tenant>:<instanceId>". "'+this.str+'" does not satisfy that.');
    }
}

Validator.prototype.isPrincipal = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty principal UUID was provided');
    } else if (!(AuthzUtil.isGroupPrincipal(this.str) || AuthzUtil.isUserPrincipal(this.str))) {
        this.error(this.msg || 'An invalid principal UUID was provided');
    }
}

/**
 * Checks whether or not the string in context is a valid group principal UUID
 */
Validator.prototype.isGroupPrincipal = function() {
    if (!this.str) {
        this.error(this.msg || 'An empty group uuid was provided');
    } else if (!AuthzUtil.isGroupPrincipal(this.str)) {
        this.error(this.msg || 'Invalid group uuid: '+this.str);
    }
}

/**
 * Verifies that the string in context is *not* a group resource UUID
 */
Validator.prototype.isNotGroupResource = function() {
    if (this.str && AuthzUtil.isGroupResource(this.str)) {
        this.error(this.msg || 'Invalid resource uuid: '+this.str);
    }
}

Validator.prototype.isValidRole = function() {
    if (!this.str) {
        this.error(this.msg || 'Role must be a valid non-empty string');
    } else if (!this.str.trim || this.str.trim().length === 0) {
        this.error(this.msg || 'Role must be a valid non-empty string');
    }
}

Validator.prototype.isValidRoleChange = function() {
    if (this.str === false) {
        // 'false' is valid, it represents a role change
        return;
    }

    if (!this.str) {
        this.error(this.msg || 'Role change must either be a removal, or a non-blank string');
    } else if (!this.str.trim || this.str.trim().length === 0) {
        this.error(this.msg || 'Role change must either be a removal, or a non-blank string');
    }
}