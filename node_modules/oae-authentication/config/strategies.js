/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Fields = require('oae-config/lib/fields');

module.exports = {
    'title': 'OAE Authentication Module',
    'local': {
        'name': 'Local Authentication',
        'description': 'Allow local authentication for tenant',
        'elements': {
            'allowAccountCreation': new Fields.Boolean('Local Account Creation', 'Allow users to create their own account', true),
            'enabled': new Fields.Boolean('Local Authentication Enabled', 'Allow local authentication for tenant', true)
        }
    },
    'google': {
        'name': 'Google Authentication',
        'description': 'Allow Google authentication for tenant',
        'elements': {
            'enabled': new Fields.Boolean('Google Authentication Enabled', 'Allow Google authentication for tenant', true)
        }
    },
    'twitter': {
        'name': 'Twitter Authentication',
        'description': 'Allow Twitter authentication for tenant',
        'elements': {
            'enabled': new Fields.Boolean('Twitter Authentication Enabled', 'Allow Twitter authentication for tenant', true),
            'key': new Fields.Text('Twitter consumer key', 'Twitter consumer key', '8eET3GSaCVE5GVd5kZsw', {'suppress': true}),
            'secret': new Fields.Text('Twitter consumer secret', 'Twitter consumer secret', 'OIqx7h36fMWqc0Cb3tUI1jzp7bzCbE2F3zJ0Gladc', {'suppress': true})
        }
    },
    'facebook': {
        'name': 'Facebook Authentication',
        'description': 'Allow Facebook authentication for tenant',
        'elements': {
            'enabled': new Fields.Boolean('Facebook Authentication Enabled', 'Allow Facebook authentication for tenant', false),
            'appid': new Fields.Text('Facebook App ID', 'Facebook App ID', '194758077323671', {'suppress': true}),
            'secret': new Fields.Text('Secret', 'Secret', '663d14e7f9ad0baeb4e43390825a659f', {'suppress': true})
        }
    },
    'saml2': {
        'name': 'SAML 2.0 Authentication',
        'description': 'Allow SAML 2.0 authentication for tenant',
        'tenantOverride': true,
        'elements': {
            'enabled': new Fields.Boolean('SAML 2.0 Authentication Enabled', 'Allow SAML 2.0 authentication for tenant', false),
            'entrypoint': new Fields.Text('Entry point', 'The URL where users should be redirected to.', '', {'suppress': true}),
            'issuer': new Fields.Text('Issuer', 'The entity ID under which this application can access the Identity Provider.', '', {'suppress': true})
        }
    },
    'cas': {
        'name': 'CAS Authentication',
        'description': 'Allow CAS authentication for tenant',
        'tenantOverride': true,
        'elements': {
            'enabled': new Fields.Boolean('CAS Authentication Enabled', 'Allow CAS authentication for tenant', false),
            'name': new Fields.Text('Name', 'A name that users will recognize as their identity provider', ''),
            'host': new Fields.Text('Host', 'The URI at which the CAS server can be reached (this should include http(s):// and have no trailing slash)', '', {'suppress': true}),
            'basepath': new Fields.Text('Base path', 'The base path on the CAS authentication server. ex: /cas', '', {'suppress': true}),
            'loginpath': new Fields.Text('Login path', 'The path where the user should be redirected to when logging in.', '/login', {'suppress': true}),
            'logoutpath': new Fields.Text('Logout path', 'The path where the user should be redirected to when logging out.', '/logout', {'suppress': true}),
            'validatepath': new Fields.Text('Validate path', 'The path that can be used to validate a ticket.', '/serviceValidate', {'suppress': true})
        }
    },
    'signed': {
        'name': 'Signed authentication',
        'description': 'Expresses how long a token is valid in milliseconds',
        'elements': {
            'expires': new Fields.Text('Expires', 'Expresses how long a token is valid in milliseconds', '120000', {'suppress': true, 'tenantOverride': false})
        }
    }
};
