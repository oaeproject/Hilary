/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

/**
 * Checks if the passed in value is a stringified Boolean and returns a Boolean type if there's a match.
 * If the value passed in is not a stringified Boolean the original value is returned.
 *
 * @param   {String}          value  String that will be converted to Boolean if it matches: 'true', 'false', '1' or '0' or returned if there's no match.
 * @return  {Boolean|String}         Returns true, false or the original value
 */
var castToBoolean = module.exports.castToBoolean = function(value) {
    if (value === 'true' || value === '1') {
        return true;
    } else if (value === 'false' || value === '0') {
        return false;
    }
    return value;
}

/**
 * Tries to cast the passed in value to an object if it's a string(ified object)
 * It also passes the values to `castToBoolean` to make sure Booleans are of the Boolean type
 * If the value passed in is not a string the original value is returned, if it is a string it tries to parse the object and returns it
 *
 * @param  {int|String|Boolean|Array|Object}  value  Value that can be of any type, if it's a string it will be cast to an object
 * @return {int|String|Boolean|Array|Object}         Returns the value that was casted to an object if it was a stringified object, otherwise just returns the original value
 */
var castToObject = module.exports.castToObject = function(value) {
    if (_.isString(value)) {
        try {
            return JSON.parse(value, function (key, val) {
                return castToBoolean(val);
            });
        } catch(err) {
            return value;
        }
    }
    return value;
}
