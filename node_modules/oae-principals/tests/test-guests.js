/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ActivityTestUtil = require('oae-activity/lib/test/util');
var AuthenticationTestUtil = require('oae-authentication/lib/test/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var EmailAPI = require('oae-email');
var EmailTestUtil = require('oae-email/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TenantTestUtil = require('oae-tenants/lib/test/util');
var TestsUtil = require('oae-tests');

describe('Inviting guests', function() {

    // Rest contexts that can be used to make requests as different types of users
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the rest contexts, flush the email queue and reconfigure the mail collector
     */
    beforeEach(function(callback) {
        // Fill up the request contexts
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Make sure there are no pending emails in the email buckets
        EmailTestUtil.clearEmailCollections(function() {

            // Send out daily emails
            ActivityTestUtil.refreshMailConfiguration(null, true, false, {}, function(config) {
                return callback();
            });
        });
    });

    /**
     * Function that will disable the daily email collector
     */
    after(function(callback) {
        // Disable daily emails
        ActivityTestUtil.refreshMailConfiguration(null, false, false, {}, function(config) {
            return callback();
        });
    });

    /**
     * Create a user that creates a content item and then shares it with an email address
     *
     * @param  {Function}   callback                Standard callback function
     * @param  {Object}     callback.inviter        The user that created the piece of content and invited the guest
     * @param  {Content}    callback.content        The piece of content that was shared with the guest
     * @param  {String}     callback.email          The email address of the guest that was invited
     * @param  {String}     callback.token          The token that was sent to the guest's email address
     * @throws {Error}                              An assertion error is thrown when an unexpected error occurs
     */
    var createContentAndInviteGuest = function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, inviter) {
            assert.ok(!err);

            // Test with a private content item. This ensures that guests (even though usually in
            // a separate tenant) can interact with private content
            RestAPI.Content.createLink(inviter.restContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [], [], function(err, link) {
                assert.ok(!err);

                // Share the link with a guest user
                var email = TestsUtil.generateTestEmailAddress();
                RestAPI.Content.shareContent(inviter.restContext, link.id, [email], function(err) {
                    assert.ok(!err);
                });

                EmailAPI.once('debugSent', function(message) {
                    // Verify we sent an email to the invited user
                    assert.strictEqual(message.to[0].address, email);

                    // Verify a token is passed in the email
                    var token = message.text.match(/\?token=([a-zA-Z0-9]{32})/)[1];
                    assert.ok(token);

                    return callback(inviter, link, email, token);
                });
            });
        });
    };

    /**
     * Signs into a guest account for a given guest token
     *
     * @param  {String}         token                       The token that can be used to sign into a guest account
     * @param  {Function}       callback                    Standard callback function
     * @param  {Object}         callback.user               Object containing the user profile and rest context for the guest
     * @param  {User}           callback.user.user          The user profile of the guest
     * @param  {RestContext}    callback.user.restContext   The rest context for the authenticated guest
     * @throws {Error}                                      An assertion error is thrown when an unexpected error occurs
     */
    var signIntoGuestAccountWithToken = function(token, callback) {
        // Verify that an anonymous user on the guest tenant can use this token to associate a local login
        var anonymousGuestRestContext = TestsUtil.createTenantRestContext('guests.oae.com');
        var username = TestsUtil.generateTestUserId();
        var password = TestsUtil.generateTestUserId();
        RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, username, password, function(err) {
            assert.ok(!err);

            // Verify that we can log on with the username and password
            RestAPI.Authentication.login(anonymousGuestRestContext, username, password, function(err, body, response) {
                assert.ok(!err);
                assert.strictEqual(response.statusCode, 200);
                var loggedinGuestRestContext = anonymousGuestRestContext;

                RestAPI.User.getMe(loggedinGuestRestContext, function(err, me) {
                    assert.ok(!err);

                    // Verify the user was created on the guests tenant
                    assert.strictEqual(me.tenant.alias, 'guests');

                    var loggedinUser = {
                        'restContext': loggedinGuestRestContext,
                        'user': me
                    };
                    return callback(loggedinUser);
                });
            });
        });
    };

    /**
     * Test that verifies that guests can be invited to collaborate on content items
     */
    it('verify that guests can be invited to collaborate on content items', function(callback) {
        createContentAndInviteGuest(function(simong, link1, email, token) {
            return callback();
        });
    });

    /**
     * Test that verifies that multiple resources can be shared with a guest but only one guest account is created
     */
    it('verify that multiple resources can be shared with a guest but only one guest account is created', function(callback) {
        // Create some content and invite a guest
        createContentAndInviteGuest(function(simong, link1, email, token) {

            // Create another content item and invite the guest again
            RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link2) {
                assert.ok(!err);
                RestAPI.Content.shareContent(simong.restContext, link2.id, [email], function(err) {
                    assert.ok(!err);

                    // Create a guest account with the token that was emailed to the guest
                    signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                        // Verify both the content items are in the guest's content library
                        RestAPI.Content.getLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, data) {
                            assert.ok(!err);
                            assert.strictEqual(data.results.length, 2);
                            assert.strictEqual(data.results[0].id, link2.id);
                            assert.strictEqual(data.results[1].id, link1.id);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests are created on the guests tenant if no tenant email domain matches
     */
    it('verify that guests are created on the guests tenant if no tenant email domain matches', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link) {
                assert.ok(!err);

                // Share the link with a guest user
                var email = TestsUtil.generateTestEmailAddress();
                RestAPI.Content.shareContent(simong.restContext, link.id, [email], function(err) {
                    assert.ok(!err);

                    // Verify that the user account was provisioned on the correct tenant
                    RestAPI.Content.getMembers(simong.restContext, link.id, null, null, function(err, members) {
                        assert.ok(!err);
                        var viewer = _.findWhere(members.results, {'role': 'viewer'});
                        assert.ok(viewer);
                        assert.strictEqual(viewer.profile.tenant.alias, 'guests');
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests are created on the correct tenant if a tenant email domain matches
     */
    it('verify that guests are created on the correct tenant if a tenant email domain matches', function(callback) {
        TenantTestUtil.generateTestTenants(globalAdminRestContext, 1, function(tenant) {
            var domain = util.format('%s.%s', TestsUtil.generateRandomText(1), TestsUtil.generateRandomText(1));
            var domainRegex = util.format('^%s$', domain);
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenant.alias, {'oae-tenants/domains/email': domainRegex}, function(err) {
                assert.ok(!err);

                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                    assert.ok(!err);

                    RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link) {
                        assert.ok(!err);

                        // Share the link with a guest user
                        var email = TestsUtil.generateTestEmailAddress('foo', domain);
                        RestAPI.Content.shareContent(simong.restContext, link.id, [email], function(err) {
                            assert.ok(!err);

                            // Collect any emails generated by the activity aggregator
                            EmailTestUtil.collectAndFetchAllEmails(function(messages) {
                                // Verify that we've sent the invited guest an email
                                assert.strictEqual(messages.length, 1);
                                assert.strictEqual(messages[0].to[0].address, email);

                                // Verify that the user account was provisioned on the correct tenant
                                RestAPI.Content.getMembers(simong.restContext, link.id, null, null, function(err, members) {
                                    assert.ok(!err);
                                    var viewer = _.findWhere(members.results, {'role': 'viewer'});
                                    assert.ok(viewer);
                                    assert.strictEqual(viewer.profile.tenant.alias, tenant.alias);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests can log in on the guests tenant with a local authentication strategy
     */
    it('verify guests on the guests tenant can associate a local authentication strategy', function(callback) {
        // Create some content and invite a guest
        createContentAndInviteGuest(function(simong, link, email, token) {
            
            // Create a guest account with the token that was emailed to the guest
            signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                // Verify the content item is in the guest's content library
                RestAPI.Content.getLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, data) {
                    assert.ok(!err);
                    assert.strictEqual(data.results.length, 1);
                    assert.strictEqual(data.results[0].id, link.id);
                    return callback();
                });
            });
        });
    });

    /**
     * Test that verifies that guests can log in on the guests tenant with a local authentication strategy
     */
    it('verify guests on regular tenants are associated with existing users', function(callback) {
        TenantTestUtil.generateTestTenants(globalAdminRestContext, 1, function(tenant) {
            var domain = util.format('%s.%s', TestsUtil.generateRandomText(1), TestsUtil.generateRandomText(1));
            var domainRegex = util.format('^%s$', domain);
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenant.alias, {'oae-tenants/domains/email': domainRegex}, function(err) {
                assert.ok(!err);

                // Set up a CAS server
                var externalId = TestsUtil.generateTestUserId();
                var email = TestsUtil.generateTestEmailAddress('foo', domain);
                AuthenticationTestUtil.setupCASServer(tenant.alias, true, externalId, 'Test User', email, function(validTicket, closeCallback) {

                    TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                        assert.ok(!err);

                        RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link) {
                            assert.ok(!err);

                            // Share the link with a guest
                            RestAPI.Content.shareContent(simong.restContext, link.id, [email], function(err) {
                                assert.ok(!err);

                                // Collect any emails generated by the activity aggregator
                                EmailTestUtil.collectAndFetchAllEmails(function(messages) {
                                    // Verify that we've sent the invited guest an email
                                    assert.strictEqual(messages.length, 1);
                                    assert.strictEqual(messages[0].to[0].address, email);

                                    // The user signs in with CAS, which is a trusted source for released email values
                                    var restContext = TestsUtil.createTenantRestContext(tenant.host);
                                    restContext.followRedirect = false;
                                    RestAPI.Authentication.casCallback(restContext, {'ticket': validTicket}, function(err, body, response) {
                                        assert.ok(!err);
                                        assert.equal(response.statusCode, 302);
                                        assert.equal(response.headers.location, '/me');

                                        // Verify we were associated with the correct user account
                                        RestAPI.User.getMe(restContext, function(err, me) {
                                            assert.ok(!err);
                                            assert.strictEqual(me.email, email);

                                            // Verify the content item is in the guest's content library
                                            RestAPI.Content.getLibrary(restContext, me.id, null, null, function(err, data) {
                                                assert.ok(!err);
                                                assert.strictEqual(data.results.length, 1);
                                                assert.strictEqual(data.results[0].id, link.id);
                                                return closeCallback(callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests can interact with private resources
     */
    it('verify that guests can interact with private resources they are invited to collaborate on', function(callback) {
        // Create some content and invite a guest
        createContentAndInviteGuest(function(simong, link, email, token) {

            // Create a guest account with the token that was emailed to the guest
            signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                // Even though the guest is technically on a different tenant, he should
                // still be able to interact with the content
                RestAPI.Content.getContent(loggedinGuest.restContext, link.id, function(err, content) {
                    assert.ok(!err);

                    // Sanity-check the invited guest can't access any
                    // private content he's not been invited for
                    RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [], [], function(err, privateLink) {
                        assert.ok(!err);

                        RestAPI.Content.getContent(loggedinGuest.restContext, privateLink.id, function(err, content) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 401);

                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies guest tokens are validated
     */
    it('verify guest tokens are validated', function(callback) {
        // Create some content and invite a guest
        createContentAndInviteGuest(function(simong, link, email, token) {

            var anonymousGuestRestContext = TestsUtil.createTenantRestContext('guests.oae.com');

            // Missing token
            RestAPI.User.verifyGuestToken(anonymousGuestRestContext, null, 'username', 'password', function(err) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);

                // Missing username
                RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, null, 'password', function(err) {
                    assert.ok(err);
                    assert.strictEqual(err.code, 400);

                    // Missing password
                    RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, 'username', null, function(err) {
                        assert.ok(err);
                        assert.strictEqual(err.code, 400);

                        // Invalid token
                        RestAPI.User.verifyGuestToken(anonymousGuestRestContext, 'so much nope', 'username', 'password', function(err) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 404);

                            // Invalid password (less than 6 characters)
                            RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, 'username', 'p', function(err) {
                                assert.ok(err);
                                assert.strictEqual(err.code, 400);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});
