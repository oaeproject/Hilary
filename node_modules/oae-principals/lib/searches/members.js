/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var OaeUtil = require('oae-util/lib/util');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');
var Validator = require('oae-authz/lib/validator').Validator;

var PrincipalsAPI = require('oae-principals');
var PrincipalsUtil = require('oae-principals/lib/util');

/**
 * Search that searches a group's members list.
 *
 * In addition to the specific `opts` parameters documented here, there are more generic options available that impact all
 * searches. @see SearchAPI#search for more information.
 *
 * @param  {Context}       ctx                 The context of the current request
 * @param  {Object}        opts                General search options
 * @param  {String[]}      opts.pathParams     An array of required parameters for the search
 * @param  {String}        opts.pathParams[0]  The resource whose members to search (currently only groups are supported for members search)
 * @param  {Function}      callback            Invoked when the process completes
 * @param  {Object}        callback.err        An error that occurred, if any
 * @param  {SearchResult}  callback.results    An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // Sanitize the search options
    opts = opts || {};
    opts.resourceId = opts.pathParams[0];
    opts.limit = OaeUtil.getNumberParam(opts.limit, 12, 1, 25);

    var validator = new Validator();
    validator.check(opts.resourceId, {'code': 400, 'msg': 'Must specificy an id of a group to search its members'}).isGroupId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    PrincipalsAPI.getGroup(ctx, opts.resourceId, function(err, group) {
        if (err) {
            return callback(err);
        }

        PrincipalsAPI.canViewMembers(ctx, group, function(err, canViewMembers) {
            if (err) {
                return callback(err);
            } else if (!canViewMembers) {
                return callback({'code': 401, 'msg': 'Insufficient access to view this group\'s members listing'});
            }

            return _search(ctx, opts, callback);
        });
    });
};

/**
 * Perform the search that searches a user or group's library for content.
 *
 * @param  {Context}       ctx                 The context of the current request
 * @param  {Object}        opts                General search options
 * @param  {Function}      callback            Invoked when the process completes
 * @param  {Object}        callback.err        An error that occurred, if any
 * @param  {SearchResult}  callback.results    An object that represents the results of the query
 */
var _search = function(ctx, opts, callback) {
    // The query object for the Query DSL
    var query = SearchUtil.createQueryStringQuery(opts.q);

    // The filter object for the Query DSL
    var filter = SearchUtil.filterAnd(
        SearchUtil.filterTerm('_type', SearchConstants.resourceMappingName),
        SearchUtil.filterTerms('resourceType', ['user', 'group']),
        SearchUtil.filterMemberships([opts.resourceId])
    );

    // Wrap the query and filter into the top-level Query DSL "query" object and return it
    callback(null, SearchUtil.createQuery(query, filter, opts));
};
