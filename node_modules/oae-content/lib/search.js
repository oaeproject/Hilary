/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');
var util = require('util');

var AuthzUtil = require('oae-authz/lib/util');
var LibraryAPI = require('oae-library');
var log = require('oae-logger').logger('content-search');
var MessageBoxSearch = require('oae-messagebox/lib/search');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');
var Signature = require('oae-util/lib/signature');
var TaskQueue = require('oae-util/lib/taskqueue');
var TenantsAPI = require('oae-tenants');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');
var ContentUtil = require('oae-content/lib/internal/util');


/**
 * Initializes the child search documents for the Content module
 *
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var init = module.exports.init = function(callback) {
    var contentBodyChildSearchDocumentOptions = {
        'resourceTypes': ['content'],
        'schema': require('./search/schema/contentBodySchema'),
        'producer': function(resources, callback) {
            return _produceContentBodyDocuments(resources.slice(), callback);
        }
    };

    SearchAPI.registerChildSearchDocument(ContentConstants.search.MAPPING_CONTENT_BODY, contentBodyChildSearchDocumentOptions, function(err) {
        if (err) {
            return callback(err);
        }
        return MessageBoxSearch.registerMessageSearchDocument(ContentConstants.search.MAPPING_CONTENT_COMMENT, ['content'], function(resources, callback) {
            return _produceContentCommentDocuments(resources.slice(), callback);
        }, callback);

    });
};

////////////////////
// INDEXING TASKS //
////////////////////

/*!
 * When a content item is created, we must index its resource document and all potential members
 */
ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, revision) {
    SearchAPI.postIndexTask('content', [{'id': content.id}], {
        'resource': true,
        'children': {
            'resource_members': true
        }
    });
});

/*!
 * When a content item is updated, we must index its resource document
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent, revision) {
    SearchAPI.postIndexTask('content', [{'id': newContent.id}], {
        'resource': true
    });
});

/*!
 * When a content item's members are updated, we must update its child members document
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content) {
    SearchAPI.postIndexTask('content', [{'id': content.id}], {
        'children': {
            'resource_members': true
        }
    });
});

/*!
 * When a content item's preview finishes updating, we must reindex its resource document
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_PREVIEW, function(content) {
    SearchAPI.postIndexTask('content', [{'id': content.id}], {
        'resource': true,
        'children': {
            'content_body': true
        }
    });
});

/*!
 * When a new version of a content item's body is created, we must update its resource document
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, newContentObj, oldContentObj, revision) {
    SearchAPI.postIndexTask('content', [{'id': newContentObj.id}], {
        'resource': true
    });
});

/*!
 * When an older revision for a content item gets restored, we must reindex its resource document
 * as the thumbnail url will be different
 */
ContentAPI.on(ContentConstants.events.RESTORED_REVISION, function(ctx, newContentObj, oldContentObj, restoredRevision) {
   SearchAPI.postIndexTask('content', [{'id': newContentObj.id}], {
        'resource': true
    });
});

/*!
 * When a content item is deleted, we must cascade delete its resource document and all its children
 */
ContentAPI.on(ContentConstants.events.DELETED_CONTENT, function(ctx, contentObj) {
    SearchAPI.postDeleteTask(contentObj.id);
});

/*!
 * When a comment is created for a content item, we must index the child message document
 */
ContentAPI.on(ContentConstants.events.CREATED_COMMENT, function(ctx, comment, content) {
    var resource = {
        'id': content.id,
        'comments': [comment]
    };

    SearchAPI.postIndexTask('content', [resource], {
        'children': {
            'content_comment': true
        }
    });
});

/*!
 * when a comment is deleted on a content item, we must delete the child message document
 */
ContentAPI.on(ContentConstants.events.DELETED_COMMENT, function(ctx, comment, content) {
    return MessageBoxSearch.deleteMessageSearchDocument(ContentConstants.search.MAPPING_CONTENT_COMMENT, content.id, comment);
});



////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produce the necessary content comment search documents.
 *
 * @see SearchAPI#registerChildSearchDocument
 * @api private
 */
var _produceContentCommentDocuments = function(resources, callback, _documents, _errs) {
    _documents = _documents || [];
    if (_.isEmpty(resources)) {
        return callback(_errs, _documents);
    }

    var resource = resources.pop();
    if (resource.comments) {
        var documents = MessageBoxSearch.createMessageSearchDocuments(ContentConstants.search.MAPPING_CONTENT_COMMENT, resource.id, resource.comments);
        _documents = _.union(_documents, documents);
        return _produceContentCommentDocuments(resources, callback, _documents, _errs);
    }

    // If there were no messages stored on the resource object, we go ahead and index all comments for the content item
    MessageBoxSearch.createAllMessageSearchDocuments(ContentConstants.search.MAPPING_CONTENT_COMMENT, resource.id, resource.id, function(err, documents) {
        if (err) {
            _errs = _.union(_errs, [err]);
        }

        _documents = _.union(_documents, documents);
        return _produceContentCommentDocuments(resources, callback, _documents, _errs);
    });
};

/**
 * Produce the necessary content body search documents.
 *
 * @see SearchAPI#registerChildSearchDocument
 * @api private
 */
var _produceContentBodyDocuments = function(resources, callback, _documents, _errs) {
    _documents = _documents || [];
    if (_.isEmpty(resources)) {
        return callback(_errs, _documents);
    }

    var resource = resources.pop();
    // Get the latest revision
    ContentDAO.Revisions.getRevisions(resource.id, null, 1, null, function(err, revisions) {
        if (err) {
            _errs = _.union(_errs, [err]);
            return _produceContentBodyDocuments(resources, callback, _documents, _errs);
        }

        var revision = revisions[0];
        var body = [];

        // Skip revisions that don't have (html) previews
        if (!revision.previews || revision.previews.status !== ContentConstants.previews.DONE || !revision.previews.pageCount) {
            log().trace({'id': resource.id, 'previews': revision.previews}, 'No text to index');

            // Move on to the next resource
            return _produceContentBodyDocuments(resources, callback, _documents, _errs);
        }

        ContentDAO.Previews.getContentPreview(revision.previewsId, 'plain.txt', function(err, preview) {
            if (err) {
                _errs = _.union(_errs, [err]);
                return _produceContentBodyDocuments(resources, callback, _documents, _errs);
            }

            var tenantAlias = AuthzUtil.getResourceFromId(revision.previewsId).tenantAlias;
            ContentUtil.getStorageBackend(null, preview.uri).get(tenantAlias, preview.uri, function(err, file) {
                if (err) {
                    _errs = _.union(_errs, [err]);
                    return _produceContentBodyDocuments(resources, callback, _documents, _errs);
                }

                fs.readFile(file.path, function(err, data) {
                    if (!err) {
                        var childDoc = SearchUtil.createChildSearchDocument(ContentConstants.search.MAPPING_CONTENT_BODY, resource.id, {'content_body': data.toString('utf8')});
                        _documents.push(childDoc);
                    }

                    // In all cases, the file should be removed again
                    fs.unlink(file.path, function(err) {
                        if (err) {
                            _errs = _.union(_errs, [err]);
                        }

                        // Move on to the next file
                        _produceContentBodyDocuments(resources, callback, _documents, _errs);
                    });
                });
            });
        });
    });
};

/**
 * Produces search documents for 'content' resources.
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceContentSearchDocuments = function(resources, callback) {
    if (_.isEmpty(resources)) {
        return callback(null, []);
    }

    var docs = [];
    _getContentItems(resources, function(err, contentItems) {
        if (err) {
            return callback([err]);

        // If the content items could not be found, there isn't much we can do
        } else if (_.isEmpty(contentItems)) {
            return callback(null, docs);
        }

        _getRevisionItems(contentItems, function(err, revisionsById) {
            if (err) {
                return callback([err]);
            }

            _.each(contentItems, function(contentItem) {
                docs.push(_produceContentSearchDocument(contentItem, revisionsById[contentItem.latestRevisionId]));
            });

            return callback(null, docs);
        });
    });
};

/**
 * Gets the revision for those content items that happen to be collaborative documents.
 *
 * @param  {Content[]}  contentItems    An array of content items.
 * @param  {Function}   callback        Standard callback function
 * @return {Object}                     An object where the key is a revisionId and the value the corresponding revision. If none of the content items are collaborative documents, the object will be empty.
 * @api private
 */
var _getRevisionItems = function(contentItems, callback) {
    // Check if we need to fetch revisions
    var revisionsToRetrieve = [];
    _.each(contentItems, function(content) {
        if (content.resourceSubType === 'collabdoc' || content.resourceSubType === 'collabsheet') {
            revisionsToRetrieve.push(content.latestRevisionId);
        }
    });

    if (_.isEmpty(revisionsToRetrieve)) {
        return callback(null, {});
    }

    ContentDAO.Revisions.getMultipleRevisions(revisionsToRetrieve, {'fields': ['revisionId', 'etherpadHtml', 'ethercalcHtml']}, function(err, revisions) {
        if (err) {
            return callback(err);
        }

        var revisionsById = _.indexBy(revisions, 'revisionId');
        return callback(null, revisionsById);
    });
};

/**
 * Retrieves a set of content items given a set of resources.
 *
 * @param  {Object[]}   resources                   An array of objects that represent the content items.
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error object, if any
 * @param  {Content[]}  callback.contentItems       An array of content items that were present in the `resources` object.
 * @api private
 */
var _getContentItems = function(resources, callback) {
    // For indexing resources that have content items attached, return the content item. For those that don't,
    // aggregate the ids so the content items may be fetched
    var contentIdsToFetch = [];
    var contentItems = [];
    _.each(resources, function(resource) {
        if (resource.content) {
            contentItems.push(resource.content);
        } else {
            contentIdsToFetch.push(resource.id);
        }
    });

    // Remove duplicates (if any)
    contentIdsToFetch = _.uniq(contentIdsToFetch);

    if (_.isEmpty(contentIdsToFetch)) {
        // No content items to be fetched, return what we have
        return callback(null, contentItems);
    }

    // Get the content objects
    ContentDAO.Content.getMultipleContentItems(contentIdsToFetch, null, function(err, extraContentItems) {
        if (err) {
            return callback(err);
        }

        // Filter the null values from the multiple content items array
        extraContentItems = _.compact(extraContentItems);

        // Add the content items that came from Cassandra
        contentItems = _.union(contentItems, extraContentItems);
        return callback(null, contentItems);
    });
};

/**
 * Convert a content item into a resource search document.
 *
 * @param  {Content}    content     The content item to convert
 * @param  {Revision}   revision    The revision associated to the content item.
 * @return {Object}                 A search document
 * @api private
 */
var _produceContentSearchDocument = function(content, revision) {
    // Allow full-text search on name and description, but only if they are specified. We also sort on this text
    var fullText = _.compact([content.displayName, content.description]).join(' ');
    if (content.resourceSubType === 'collabdoc' && revision && revision.etherpadHtml) {
        fullText += ` ${revision.etherpadHtml}`;
    } else if (content.resourceSubType === 'collabsheet' && revision && revision.ethercalcHtml) {
        fullText += ` ${revision.ethercalcHtml}`;
    }

    // Add all properties for the resource document metadata
    var doc = {
        'resourceSubType': content.resourceSubType,
        'id': content.id,
        'tenantAlias': content.tenant.alias,
        'displayName': content.displayName,
        'visibility': content.visibility,
        'q_high': content.displayName,
        'q_low': fullText,
        'sort': content.displayName,
        'dateCreated': content.created,
        'lastModified': content.lastModified,
        'createdBy': content.createdBy,
        '_extra': {
            'lastModified': content.lastModified
        }
    };

    if (content.resourceSubType === 'file') {
        doc._extra.mime = content.mime;
    }

    if (content.previews.thumbnailUri) {
        doc.thumbnailUrl = content.previews.thumbnailUri;
    }

    if (content.description) {
        doc.description = content.description;
    }

    return doc;
};

SearchAPI.registerSearchDocumentProducer('content', _produceContentSearchDocuments);



///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

/**
 * Given an array of content search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param  {Context}   ctx             Standard context object containing the current user and the current tenant
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Standard callback function
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformContentDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    _.each(docs, function(doc, docId) {
        // Extract the extra object from the search document
        var extra = _.first(doc.fields._extra) || {};

        var result = {'id': docId};
        _.each(doc.fields, function(value, name) {
            // Apply the scalar values wrapped in each ElasticSearch document
            // to the transformed search document
            result[name] = _.first(value);
        });

        // Take just the `mime` and `lastModified` from the extra fields, if specified
        _.extend(result, _.pick(extra, 'mime', 'lastModified'));

        // Add the full tenant object and profile path
        _.extend(result, {
            'tenant': TenantsAPI.getTenant(result.tenantAlias).compact(),
            'profilePath': util.format('/content/%s/%s', result.tenantAlias, AuthzUtil.getResourceFromId(result.id).resourceId)
        });

        // If applicable, sign the thumbnailUrl so the current user can access it
        var thumbnailUrl = _.first(doc.fields.thumbnailUrl);
        if (thumbnailUrl && result.lastModified) {
            result.thumbnailUrl = ContentUtil.getSignedDownloadUrl(ctx, thumbnailUrl);
        }

        transformedDocs[docId] = result;
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('content', _transformContentDocuments);


/////////////////////////
// REINDEX ALL HANDLER //
/////////////////////////

SearchAPI.registerReindexAllHandler('content', function(callback) {

    /*!
     * Handles each iteration of the ContentDAO iterate all method, firing tasks for all content to
     * be reindexed.
     *
     * @see ContentDAO.Content#iterateAll
     * @api private
     */
    var _onEach = function(contentRows, done) {
        // Batch up this iteration of task resources
        var contentResources = [];
        _.each(contentRows, function(contentRow) {
            contentResources.push({'id': contentRow.contentId});
        });

        log().info('Firing re-indexing task for %s content items.', contentResources.length);
        SearchAPI.postIndexTask('content', contentResources, {'resource': true, 'children': true});

        return done();
    };

    return ContentDAO.Content.iterateAll(['contentId'], 100, _onEach, callback);
});

