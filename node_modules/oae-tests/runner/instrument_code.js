/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * This file goes trough all the OAE modules their lib folder and instruments the code.
 * This allows mocha to get useful metrics when running the tests and generate a code coverage report.
 * By default the jscoverage tool instruments each file with it's filename.
 * Because we have files with similar filenames (ex: api.js) we prepend the modulename.
 */

var exec = require('child_process').exec;
var oae = require('oae-util/lib/oae');

var quote = function(path) {
    return '"' + path + '"';
};

var ROOT_DIR = process.argv[2];
var REPLACE_SCRIPT = quote(ROOT_DIR + '/node_modules/oae-tests/runner/replace.js');

var modules = oae.getAvailableModules();

var abortIfError = function(error, stdout, stderr) {
    if (error) {
        console.log(error);
        console.log(stdout);
        console.log(stderr);
        throw "Couldn't instrument a module. Aborting.";
    }
};

var instrument = function(dir, module) {
    var lib = quote(ROOT_DIR + '/target/' + dir + '/lib');
    var libCov = quote(ROOT_DIR + '/target/' + dir + '/lib-cov');
    exec('jscoverage --no-highlight ' + lib + ' ' + libCov, function(error, stdout, stderr) {
        abortIfError(error, stdout, stderr);
        // Replace filenames in instrumentation with entire path.
        exec('find ' + libCov + ' -type f -exec node ' + REPLACE_SCRIPT + ' "{}" "' + module + '/lib" \\;', function(error, stdout, stderr) {
            abortIfError(error, stdout, stderr);
            exec('rm -r ' + lib, function(error, stdout, stderr) {
                abortIfError(error, stdout, stderr);
                exec('mv ' + libCov + ' ' + lib, abortIfError);
            });
        });
    });
};

for (var i = 0; i < modules.length;i++) {
    var dir = 'node_modules/' + modules[i];
    instrument(dir, modules[i]);
}
