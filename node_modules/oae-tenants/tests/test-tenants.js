/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');

var Cassandra = require('oae-util/lib/cassandra');
var TestAPI = require('oae-tests');

var TenantsAPI = require('oae-tenants/lib/api');
var Tenant = require('oae-tenants/lib/model').Tenant;


describe('Tenants', function() {

    describe('REST', function() {
        /**
         * Test that creating a tenant succeeds
         */
        it('Test creating a tenant succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant/create',
                'json': {
                    'baseurl': 'localhost:2100',
                    'id': 'cams',
                    'name': 'Cambridge University',
                    'port': 2100
                }
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        /**
         * Test that stopping a tenant succeeds
         */
        it('Test stopping a tenant succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant/stop',
                'json': {'tenants': [2100]}
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        /**
         * Test that starting a tenant succeeds
         */
        it('Test starting a tenant succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant/start',
                'json': {'tenants': [2100]}
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        /**
         * Test that deleting a tenant succeeds
         */
        it('Test starting a tenant succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant/delete',
                'json': {'tenants': [2100]}
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        /**
         * Test that all tenants can be retrieved
         */
        it('Test retrieving all tenants succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/tenants'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        /**
         * Test that the general tenant information can be retrieved
         */
        it('Test get tenant information', function(callback) {
            request.get({
                'uri': 'http://localhost:2001/api/tenant'
            }, function(err, response, body) {
                body = JSON.parse(body);
                assert.ok(!err);
                assert.equal('camtest', body.alias);
                assert.equal('Cambridge University Test', body.name);
                assert.equal(2001, body.port);
                callback();
            });
        });
    });

    /**
     * Test that it is possible to access a tenant by their mapped port
     */
    it('Test get tenant by port', function(callback) {
        TenantsAPI.getTenantByPort(2001, function(err, tenant) {
            assert.ok(!err);
            assert.equal(2001, tenant.port);
            assert.equal('camtest', tenant.alias);
            assert.equal('Cambridge University Test', tenant.name);
            assert.equal('localhost:2001', tenant.baseUrl);
            TenantsAPI.getTenantByPort(2002, function(err, tenant) {
                assert.ok(!err);
                assert.equal(2002, tenant.port);
                assert.equal('gttest', tenant.alias);
                assert.equal('Georgia Tech Test', tenant.name);
                assert.equal('localhost:2002', tenant.baseUrl);
                callback();
            });
        });
    });

    /**
     * Test that a port is specified when creating a tenant
     */
    it('Test tenant creation requires port', function(callback) {
        var tenant = new Tenant('cam', 'Cambridge');
        TestAPI.Tenant.createTenant(tenant, function(err, response, body) {
            assert.equal(response.statusCode, 400);
            assert.equal(body, 'Missing port');

            tenant.port = 'not-a-numner';
            TestAPI.Tenant.createTenant(tenant, function(err, response, body) {
                assert.equal(response.statusCode, 400);
                assert.equal(body, 'Provided port is not a number');
                callback();
            });
        });
    });

    /**
     * Test that it is possible to access a tenant by their mapped alias
     */
    it('Test get tenant by alias', function(callback) {
        TenantsAPI.getTenantByAlias('camtest', function(err, tenant) {
            assert.ok(!err);
            assert.equal(2001, tenant.port);
            assert.equal('camtest', tenant.alias);
            assert.equal('Cambridge University Test', tenant.name);
            assert.equal('localhost:2001', tenant.baseUrl);
            TenantsAPI.getTenantByAlias('gttest', function(err, tenant) {
                assert.ok(!err);
                assert.equal(2002, tenant.port);
                assert.equal('gttest', tenant.alias);
                assert.equal('Georgia Tech Test', tenant.name);
                assert.equal('localhost:2002', tenant.baseUrl);
                callback();
            });
        });
    });

    /**
     * Test that it is possible to create a tenant
     */
    it('Test create tenant', function(callback) {
        TenantsAPI.createTenant('rsmarttest', 'rSmart Test', 2003, "oae.rsmart.com", function(err, tenant) {
            assert.ok(!err);
            assert.equal('rsmarttest', tenant.alias);
            assert.equal('rSmart Test', tenant.name);
            assert.equal('oae.rsmart.com', tenant.baseUrl);
            assert.equal(2003, tenant.port);
            TenantsAPI.getTenantByPort(2003, function(err, tenant) {
                assert.ok(tenant);
                assert.equal('rsmarttest', tenant.alias);
                assert.equal('rSmart Test', tenant.name);
                assert.equal('oae.rsmart.com', tenant.baseUrl);
                assert.equal(2003, tenant.port);
                callback();
            });
        });
    });

    /**
     * Test that a tenant cannot be created with a duplicate port
     */
    it('Test duplicate port', function(callback) {
        TenantsAPI.createTenant('testCannotCreateDuplicatePort', 'Test Tenant', 2001, "duplicate.com", function(err, tenant) {
            assert.ok(err);
            TenantsAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                assert.equal(2001, tenant.port);
                assert.equal('camtest', tenant.alias);
                assert.equal('Cambridge University Test', tenant.name);
                assert.equal('localhost:2001', tenant.baseUrl);
                callback();
            });
        });
    });

    /**
     * Test that a tenant cannot be created with a duplicate alias
     */
    it('Test duplicate alias', function(callback) {
        TenantsAPI.createTenant('camtest', 'Test Tenant', 2004, "duplicate.com", function(err, tenant) {
            assert.ok(err);
            TenantsAPI.getTenantByPort(2004, function(err, tenant) {
                assert.ok(err);
                TenantsAPI.getTenantByAlias('camtest', function(err, tenant) {
                    assert.ok(!err);
                    assert.equal(2001, tenant.port);
                    assert.equal('camtest', tenant.alias);
                    assert.equal('Cambridge University Test', tenant.name);
                    assert.equal('localhost:2001', tenant.baseUrl);
                    callback();
                });
            });
        });
    });

    /**
     * Test that a tenant can enabled and disabled
     */
    it('Test disabling', function(callback) {
        var r = Math.random()*10000;
        var tenant = new Tenant('cam' + r, 'Cambridge University', 2101, 'localhost');
        TestAPI.Tenant.createTenant(tenant, function(err, response, body) {
            assert.equal(response.statusCode, 200);
            assert.equal(body, 'New tenant "Cambridge University" has been fired up on port 2101');

            // Disable a tenant.
            TestAPI.Tenant.stopTenants([tenant.port], function(err, response, body) {
                assert.equal(response.statusCode, 200);

                // Check if we actually get the disabled notification.
                request.get('http://localhost:2101', function(err, response, body) {
                    assert.ok(!err);
                    assert.ok(body.indexOf('currently disabled') > 0, body);

                    // Start it back up.
                    TestAPI.Tenant.startTenants([tenant.port], function(err, response, body) {
                        assert.equal(response.statusCode, 200);

                        // Check if we actually get an "active" page
                        request.get('http://localhost:2101', function(err, response, body) {
                            assert.ok(!err);
                            assert.equal(body.indexOf('currently disabled'), -1);
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that a tenant can be deleted
     */
    it('Test deleting a tenant', function(callback) {
        var r = Math.random()*10000;
        var tenant = new Tenant('cam' + r, 'Cambridge University', 2102, 'localhost');
        TestAPI.Tenant.createTenant(tenant, function(err, response, body) {
            assert.equal(response.statusCode, 200);
            assert.equal(body, 'New tenant "Cambridge University" has been fired up on port 2102');

            // First try a bad request.
            TestAPI.Tenant.deleteTenants([], function(err, response, body) {
                assert.equal(response.statusCode, 400);

                // Now try a proper request.
                TestAPI.Tenant.deleteTenants([tenant.port], function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });
        });
    });

});
