/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzUtil = require('oae-authz/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

var PrincipalsUserAPI = require('./api.user');
var PrincipalsUtil = require('./util');

/**
 * Get a set of principals and create guests user accounts if necessary
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {String[]}       principals              A set of principal ids and/or email addresses
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error object, if any
 * @param  {Object}         callback.principals     A hash of principals, keyed by the principal id, and whose value is the principal (either user or group) to which the id maps
 */
var getPrincipalsAndCreateGuests = module.exports.getPrincipalsAndCreateGuests = function(ctx, principals, callback) {
    // 1. Validate the provided principals are user/group ids and/or email addresses
    var validator = new Validator();
    _.each(principals, function(principal) {
        validator.check(principal, {'code': 400, 'msg': 'The specified principal is not a valid id or email address'}).isPrincipalIdOrEmailAddress();
    });
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // 2. Split the provided `principal` ids or emails into two buckets
    var principalIdsOrEmails = _.partition(principals, function(principal) {
        return (AuthzUtil.isUserId(principal) || AuthzUtil.isGroupId(principal));
    });
    var principalIds = principalIdsOrEmails[0];
    var emails = principalIdsOrEmails[1];

    // 3. Get the principals that can be resolved by id
    PrincipalsUtil.getPrincipals(ctx, principalIds, function(err, principals) {
        if (err) {
            return callback(err);
        } else if (_.keys(principals).length !== principalIds.length) {
            return callback({'code': 400, 'msg': 'Some principals could not be found'});
        }

        // 4. Get or create guest accounts for the emails
        PrincipalsUserAPI.getOrCreateGuestUsers(ctx, emails, function(err, users) {
            if (err) {
                return callback(err);
            }

            // 5. Merge the users into the principals and return the full set to the caller
            principals = _.extend(principals, users);
            return callback(null, principals);
        });
    });
};
