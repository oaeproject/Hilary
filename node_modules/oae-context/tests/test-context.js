/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Context = require('oae-context').Context;
var PrincipalAPI = require('oae-principals');
var User = require('oae-principals/lib/model').User;
var Tenant = require('oae-tenants/lib/model').Tenant;

describe('Context', function() {

    var tenant = new Tenant('cam', 'Cambridge', 'Cambridge', 2001, 'oae.google.ca');

    /**
     * Test that will verify that someone can be made a tenant admin without making him a global admin
     */
    it('Test tenant admin', function(callback) {
        var r = Math.floor(Math.random()*100000);
        var user = new User(tenant, undefined, 'bert-' + r, 'public', 'en_GB', 'Europe/London', 'Bert', 'Pareyn', 'PhysX');
        var ctx = new Context(tenant, null);
        PrincipalAPI.createUser(ctx, user.username, 'password', user.visibility, user.locale, user.timezone, user.firstName, user.lastName, user.displayName, function(err, user_id) {
            assert.ok(!err);

            // TODO: This is a pretty crappy test as this user is making himself an admin.
            // For now, this is tolerated to keep things moving.
            user.id = user_id;
            ctx = new Context(tenant, user);
            PrincipalAPI.makeUserTenantAdmin(ctx, user, function(err) {
                assert.ok(!err);
                // Invalidate context.
                ctx = new Context(tenant, user);
                ctx.isAdmin(function(err, isAdmin) {
                    assert.ok(!err);
                    assert.ok(isAdmin);
                    ctx.isTenantAdmin(function(err, isAdmin) {
                        assert.ok(!err);
                        assert.ok(isAdmin);
                        ctx.isGlobalAdmin(function(err, isAdmin) {
                            assert.ok(!err);
                            assert.ok(!isAdmin);
                            callback();
                        });
                    });
                });
            })
        });
    });

    /**
     * Test a simple context for user and context id
     */
    it('Test simple context', function() {
        var tenant = new Tenant('cam', 'Cambridge', 'Cambridge', 2001, 'oae.google.ca');
        var user = new User(tenant, 'u:cam:physx', 'physx', 'public', 'Bert', 'Pareyn', 'PhysX');
        var ctx = new Context(tenant, user);
        assert.equal(ctx.tenant().alias, 'cam');
        assert.equal(ctx.user().id, 'u:cam:physx');
    });

});
