/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

(function(){

    var adminContext = {};

    var cachedTenants = [];

    /////////////////
    //// UTILITY ////
    /////////////////

    /**
     * Trimpath Template Renderer: Renders the template with the given JSON object, inserts it into a certain HTML
     * element if required, and returns the rendered HTML string
     * @param {String|Object} templateElement The name of the template HTML ID or a jQuery selection object.
     * @param {Object} templateData JSON object containing the template data
     * @param {Object} outputElement (Optional) jQuery element in which the template needs to be rendered
     */
    var renderTemplate = function(templateElement, templateData, outputElement) {
        var templateName;

        if (templateElement instanceof jQuery && templateElement[0]) {
            templateName = templateElement[0].id;
        } else {
            templateName = templateElement.replace('#', '');
            templateElement = $('#' + templateName);
        }

        var renderedTemplate = "";
        var templateNode = templateElement.get(0);
        if (templateNode) {
            var firstNode = templateNode.firstChild;
            var template = null;
            // Check whether the template is wrapped in <!-- -->
            if (firstNode && (firstNode.nodeType === 8 || firstNode.nodeType === 4)) {
                template = firstNode.data.toString();
            } else {
                template = templateNode.innerHTML.toString();
            }
            // Parse the template through TrimPath and add the parsed template to the template cache
            try {
                renderedTemplate = TrimPath.parseTemplate(template, templateName);
            } catch (e) {
                console.log('TemplateRenderer: parsing failed: ' + e);
            }
        } else {
            console.log('TemplateRenderer: The template "' + templateName + '" could not be found');
        }

        // Run the template and feed it the given JSON object
        var render = '';
        try {
            render = renderedTemplate.process(templateData, {'throwExceptions': true});
        } catch (err) {
            console.log('TemplateRenderer: rendering of Template \'' + templateName + '\' failed: ' + err);
        }

        // Check it there was an output element defined
        // If so, put the rendered template in there
        if (outputElement) {
            outputElement.html(render);
        }

        return render;
    };

    /**
     * Shows an error to the user
     * usage:
     * showError({
     *     'title': 'Operation failed',
     *     'message' (required): 'The tenant could not be deleted.'
     * });
     * @param {Object} data Data object used to render the warning. Missing optional elements will not be rendered. All available elements are shown above in 'usage'
     * @param {Object} $outputElement (optional) Element to render the warning in. By default the container renders on top of the page in absolute position.
     */
    var showError = function(data, $outputElement) {
        if (!$outputElement) {
            $outputElement = $('#admin_error_container');
        }
        renderTemplate('admin_error_template', {
            'error': data
        }, $outputElement);
    };

    /**
     * Shows a warning to the user
     * usage:
     * showWarning({
     *     'title': 'Are you sure?',
     *     'message' (required): 'Are you sure you want to delete this tenant?'
     * });
     * @param {Object} data Data object used to render the warning. Missing optional elements will not be rendered. All available elements are shown above in 'usage'
     * @param {Object} $outputElement (optional) Element to render the warning in. By default the container renders on top of the page in absolute position.
     */
    var showWarning = function(data, $outputElement) {
        if (!$outputElement) {
            $outputElement = $('#admin_warning_container');
        }
        renderTemplate('admin_warning_template', {
            'warning': data
        }, $outputElement);
    };

    /**
     * Shows a success message to the user
     * usage:
     * showSuccess({
     *     'title': 'Tenant deleted.',
     *     'message' (required): 'The tenant was successfully deleted',
     *     'sticky': true
     * });
     * @param {Object} data Data object used to render the success message. Missing optional elements will not be rendered. All available elements are shown above in 'usage'
     * @param {Object} $outputElement (optional) Element to render the success message in. By default the container renders on top of the page in absolute position.
     */
    var showSuccess = function(data, $outputElement) {
        if (!$outputElement) {
            $outputElement = $('#admin_success_container');
        }
        renderTemplate('admin_success_template', {
            'success': data
        }, $outputElement);
        if (!data.sticky) {
            window.setTimeout( function(){
                $outputElement.fadeOut('slow', function() {
                    $outputElement.html('');
                    $outputElement.show();
                });
            }, 2500);
        }
    };

    /**
     * Shows a confirmation dialog to the user using predefined data
     * usage
     * showConfirmationModal({
     *     'id' (required): 'deletetenant_modal',
     *     'title' (required): 'Delete tenant Cambridge University',
     *     'message' (required): 'You cannot undo this operation. Are you sure you want to delete this tenant?',
     *     'cancel': 'Cancel',
     *     'confirm' (required): 'Yes, delete tenant',
     *     'confirmclass': (optional): 'danger' (for possible values see http://twitter.github.com/bootstrap/base-css.html#buttons)
     *     'confirmed' (required): function() {
     *         // Add handling for confirmation
     *         // Hide the dialog when done (optionally show a success message)
     *         $('#deletetenant_modal').modal('hide');
     *     }
     * });
     * @param {Object} data Data object used to render the modal dialog. All required elements are shown above in 'usage' and should be provided
     */
    var showConfirmationModal = function(data) {
        var $outputElement = $('#admin_confirmation_container');
        renderTemplate('admin_confirmation_template', {
            'modal': data
        }, $outputElement);
        $('#' + data.id).modal();
        $('#' + data.id + '_confirm', $('#' + data.id)).click(data.confirmed);
    };

    /**
     * Native sort on tenant port
     * @param {Object} data Data returned from the tenant service
     */
    var sortTenantsOnPort = function(data) {
        data.sort(function(a, b){
            return a.port > b.port ? 1 : -1;
        });
        return data;
    };

    /**
     * Toggles containers to show or hide
     */
    var toggleContainer = function() {
        $(this).next().toggle(400);
    };

    /**
     * Native sort on module title
     * @param {Object} data Data returned from the module service
     */
    var sortModulesOnTitle = function(data) {
        data.sort(function(a, b){
            return a.config.title > b.config.title ? 1 : -1;
        });
        return data;
    };

    /**
     * Preprocesses tenants retrieved form the server and sets some global variables
     * that can be used when rendering views
     * @param {Object} tenants the tenant data coming back from the server
     * @param {Function} callback Executed when the tenants have been preprocessed
     */
    var preProcessTenants = function(tenants, callback) {
        var hasTenants = false;
        var allActive = true;
        $.each(tenants, function(i, tenant) {
            hasTenants = true;
            !tenant.active ? allActive = false : '';
        });

        tenants.info = {
            'hasTenants': hasTenants,
            'allActive': allActive
        };

        if ($.isFunction(callback)) {
            callback(tenants);
        }
    };

    /**
     * Logs the current user out of the admin ui
     */
    var doLogOut = function() {
        $.ajax({
            url: '/api/auth/logout',
            type: 'POST',
            success: function(data) {
                document.location.reload(true);
            }, error: function(err) {
                console.log(err.statusText);
            }
        });
    };

    /**
     * Submits the login form to log a user into the admin ui
     */
    var doLogin = function() {
        if ($(this).hasClass('external_login')) {
            $.ajax({
                url: $(this).attr('action'),
                type: 'GET'
            });
        } else {
            $.ajax({
                url: '/api/auth/login',
                type: 'POST',
                data: {
                    'username': $('#admin_login_form_name').val(),
                    'password': $('#admin_login_form_password').val()
                },
                success: function(data) {
                    document.location.reload(true)
                }, error: function(err) {
                    console.log(err.statusText);
                }
            });
        }
        return false;
    };

    /**
     * Switches the login strategy view when a tab is clicked
     */
    var switchLoginStrategy = function() {
        var tab = $(this).attr('data-strategy');

        $('.admin_login_tab').removeClass('active');
        $(this).addClass('active');

        $('.admin_login_container').hide();
        $('#' + tab).show();
    };

    var startAllTenantsHandler = function() {
        showConfirmationModal({
            'id': 'start_all_tenants_modal',
            'title': 'Start all tenants',
            'message': 'Are you sure you want to start ALL tenants?',
            'cancel': 'Cancel',
            'confirm': 'Yes, start all tenants',
            'confirmclass': 'btn-success',
            'confirmed': function() {
                startStopTenant(cachedTenants, true, function(success) {
                    // Hide the dialog when done
                    $('#start_all_tenants_modal').modal('hide');
                    // Show a success or failure message
                    if (success) {
                        showSuccess({
                            'title': 'Tenants started.',
                            'message': 'All tenants where successfully started.'
                        });
                        initializeTenants();
                    } else {
                        showError({
                            'title': 'Tenants not started.',
                            'message': 'Not all tenants could be started'
                        });
                        initializeTenants();
                    }
                });
            }
        });
    };

    /**
     * Stops all tenants and shows a confirmation message
     */
    var stopAllTenantsHandler = function() {
        showConfirmationModal({
            'id': 'stop_all_tenants_modal',
            'title': 'Stop all tenants',
            'message': 'Are you sure you want to stop ALL tenants?',
            'cancel': 'Cancel',
            'confirm': 'Yes, stop all tenants',
            'confirmclass': 'btn-warning',
            'confirmed': function() {
                startStopTenant(cachedTenants, false, function(success) {
                    // Hide the dialog when done
                    $('#stop_all_tenants_modal').modal('hide');
                    // Show a success or failure message
                    if (success) {
                        showSuccess({
                            'title': 'Tenants stopped.',
                            'message': 'All tenants where successfully stopped.'
                        });
                        initializeTenants();
                    } else {
                        showError({
                            'title': 'Tenants not stopped.',
                            'message': 'Not all tenants could be stopped.'
                        });
                    }
                });
            }
        });
    };

    /**
     * Deletes all tenants and shows a confirmation message
     */
    var deleteAllTenantsHandler = function() {
        showConfirmationModal({
            'id': 'delete_all_tenants_modal',
            'title': 'Delete all tenants',
            'message': 'Are you sure you want to delete ALL tenants?',
            'cancel': 'Cancel',
            'confirm': 'Yes, delete all tenants',
            'confirmclass': 'btn-danger',
            'confirmed': function() {
                deleteTenant(cachedTenants, function(success) {
                    // Hide the dialog when done
                    $('#delete_all_tenants_modal').modal('hide');
                    // Show a success or failure message
                    if (success) {
                        showSuccess({
                            'title': 'Tenants deleted.',
                            'message': 'All tenants where successfully deleted.'
                        });
                        initializeTenants();
                    } else {
                        showError({
                            'title': 'Tenants not deleted.',
                            'message': 'Not all tenants could be deleted.'
                        });
                    }
                });
            }
        });
    };

    /**
     * Deletes a single tenant and shows a confirmation message
     */
    var deleteTenantHandler = function() {
        var tenantName = $(this).attr('data-name');
        showConfirmationModal({
            'id': 'deletetenant_modal',
            'title': 'Delete tenant ' + tenantName,
            'message': 'Are you sure you want to delete tenant ' + tenantName + '?',
            'cancel': 'Cancel',
            'confirm': 'Yes, delete ' + tenantName,
            'confirmclass': 'btn-danger',
            'confirmed': function() {
                var tenant = [{
                    'id': $(this).attr('data-id'),
                    'name': $(this).attr('data-name'),
                    'description': $(this).attr('data-description'),
                    'port': $(this).attr('data-port'),
                    'baseurl': $(this).attr('data-baseurl')
                }];
                deleteTenant(tenant, function(success) {
                    // Hide the dialog when done
                    $('#deletetenant_modal').modal('hide');
                    // Show a success or failure message
                    if (success) {
                        showSuccess({
                            'title': 'Tenant deleted.',
                            'message': 'Tenant ' + tenantName + ' was successfully deleted.'
                        });
                        initializeTenants();
                    } else {
                        showError({
                            'title': 'Tenant not deleted.',
                            'message': 'The tenant could not be deleted.'
                        });
                    }
                });
            },
            confirmdata: {
                'id': $(this).attr('data-id'),
                'name': $(this).attr('data-name'),
                'description': $(this).attr('data-description'),
                'port': $(this).attr('data-port'),
                'baseurl': $(this).attr('data-baseurl')
            }
        });
    };

    /**
     * Stops a single tenant and shows a confirmation message
     */
    var stopTenantHandler = function() {
        var tenantName = $(this).attr('data-name');
        showConfirmationModal({
            'id': 'stoptenant_modal',
            'title': 'Stop tenant ' + tenantName,
            'message': 'Are you sure you want to stop tenant ' + tenantName + '?',
            'cancel': 'Cancel',
            'confirm': 'Yes, stop ' + tenantName,
            'confirmclass': 'btn-warning',
            'confirmed': function() {
                var tenant = [{
                    'id': $(this).attr('data-id'),
                    'name': $(this).attr('data-name'),
                    'description': $(this).attr('data-description'),
                    'port': $(this).attr('data-port'),
                    'baseurl': $(this).attr('data-baseurl')
                }];
                startStopTenant(tenant, false, function(success) {
                    // Hide the dialog when done
                    $('#stoptenant_modal').modal('hide');
                    // Show a success or failure message
                    if (success) {
                        showSuccess({
                            'title': 'Tenant stopped.',
                            'message': 'Tenant ' + tenantName + ' was successfully stopped.'
                        });
                        initializeTenants();
                    } else {
                        showError({
                            'title': 'Tenant not stopped.',
                            'message': 'The tenant could not be stopped.'
                        });
                    }
                });
            },
            confirmdata: {
                'id': $(this).attr('data-id'),
                'name': $(this).attr('data-name'),
                'description': $(this).attr('data-description'),
                'port': $(this).attr('data-port'),
                'baseurl': $(this).attr('data-baseurl')
            }
        });
    };

    /**
     * Starts a single tenant and shows a confirmation message
     */
    var startTenantHandler = function() {
        var tenantName = $(this).attr('data-name');
        showConfirmationModal({
            'id': 'starttenant_modal',
            'title': 'start tenant ' + tenantName,
            'message': 'Are you sure you want to start tenant ' + tenantName + '?',
            'cancel': 'Cancel',
            'confirm': 'Yes, start ' + tenantName,
            'confirmclass': 'btn-success',
            'confirmed': function() {
                var tenant = [{
                    'id': $(this).attr('data-id'),
                    'name': $(this).attr('data-name'),
                    'description': $(this).attr('data-description'),
                    'port': $(this).attr('data-port'),
                    'baseurl': $(this).attr('data-baseurl')
                }]
                startStopTenant(tenant, true, function(success) {
                    // Hide the dialog when done
                    $('#starttenant_modal').modal('hide');
                    // Show a success or failure message
                    if (success) {
                        showSuccess({
                            'title': 'Tenant started.',
                            'message': 'Tenant ' + tenantName + ' was successfully started.'
                        });
                        initializeTenants();
                    } else {
                        showError({
                            'title': 'Tenant not started.',
                            'message': 'The tenant could not be started.'
                        });
                    }
                });
            },
            confirmdata: {
                'id': $(this).attr('data-id'),
                'name': $(this).attr('data-name'),
                'description': $(this).attr('data-description'),
                'port': $(this).attr('data-port'),
                'baseurl': $(this).attr('data-baseurl')
            }
        });
    };


    //////////////////////
    //// DATA STORING ////
    //////////////////////

    /**
     * Writes the configuration changes for a tenant/global to Cassandra
     */
    var writeConfig = function() {
        var data = {};
        $.each($(this).context, function(index, item) {
            if ($(item).attr('data-tenantid')) {
                if ($(item).attr('type') === "text") {
                    data[$(item).attr('id')] = {
                        'tenantid': $(item).attr('data-tenantid'),
                        'value': $(item).val()
                    };
                } else if ($(item).attr('type') === "checkbox") {
                    if ($(item).is(':checked') + '' != $(item).attr('data-originalvalue')) {
                        data[$(item).attr('id')] = {
                            'tenantid': $(item).attr('data-tenantid'),
                            'value': $(item).is(':checked')
                        };
                    }
                }
            }
        });

        if (!$.isEmptyObject(data)) {
            $.ajax({
                url: '/admin/update',
                type: 'POST',
                data: data,
                success: function() {
                    $.each(data, function(i, item){
                        $('#' + i.replace(/\//g, '\\/')).attr('data-originalvalue', item.value);
                    });
                    showSuccess({
                        'title': 'Configuration saved.',
                        'message': 'The configuration was successfully saved.'
                    });
                }, error: function() {
                    showError({
                        'title': 'Configuration not saved.',
                        'message': 'The configuration could not be saved successfully.'
                    });
                }
            });
        }
        return false;
    };

    /**
     * Creates a new tenant and starts it up immediately
     */
    var createTenant = function() {
        $.ajax({
            url: '/api/tenant/create',
            type: 'POST',
            data: {
                'id': $('#createtenant_id').val(),
                'name': $('#createtenant_name').val(),
                'description': $('#createtenant_description').val(),
                'port': $('#createtenant_port').val(),
                'baseurl': $('#createtenant_baseurl').val()
            },
            success: function(data) {
                initializeTenants();
            }
        });
    };

    /**
     * Deletes a tenant server
     * @param {Object} tenants Array of tenants to be deleted
     * @param {Function} callback Executed after the tenants have been deleted
     */
    var deleteTenant = function(tenants, callback) {
        var ports = [];
        $.each(tenants, function(index, tenant) {
            ports.push(tenant.port);
        });

        $.ajax({
            url: '/api/tenant/delete',
            type: 'POST',
            data: {
                'tenants': ports
            },
            success: function(data) {
                if ($.isFunction(callback)) {
                    callback(true);
                }
            }, error: function() {
                if ($.isFunction(callback)) {
                    callback();
                }
            }
        });
    };

    /**
     * Starts or stops a tenant server
     * @param {Object} tenants Array of tenants to be started/stopped
     * @param {Boolean} isStart If set to true the tenants need to be started
     * @param {Function} callback Executed after the tenants have been started/stopped
     */
    var startStopTenant = function(tenants, isStart, callback) {
        var ports = [];
        $.each(tenants, function(index, tenant) {
            ports.push(tenant.port);
        });

        var url = '/api/tenant/stop';
        if (isStart) {
            url = '/api/tenant/start';
        }

        $.ajax({
            url: url,
            type: 'POST',
            data: {
                'tenants': ports
            },
            success: function(data) {
                if ($.isFunction(callback)) {
                    callback(true);
                }
            }, error: function() {
                if ($.isFunction(callback)) {
                    callback();
                }
            }
        });
    };

    ///////////////////////
    //// DATA FETCHING ////
    ///////////////////////

    /**
     * Gets the configuration for the tenant (includes all module and tenant configuration)
     * @param {Function} callback Callback function executed after the request completes. Passes through the returned data
     */
    var getConfiguration = function(callback) {
        $.ajax({
            url: '/api/configuration',
            data: {
                'tenantid': adminContext.tenant.tenantid
            },
            success: function(data) {
                if ($.isFunction(callback)) {
                    callback(sortModulesOnTitle(data));
                }
            }
        });
    };

    /**
     * Gets the configuration for the tenant (includes all module and tenant configuration)
     * @param {Function} callback Callback function executed after the request completes. Passes through the returned data
     */
    var getAvailableLoginStrategies = function(module, callback) {
        if (!adminContext.tenant || !adminContext.tenant.tenantid) {
            if ($.isFunction(callback)) {
                callback(false);
            }
        } else {
            $.ajax({
                url: '/api/auth/strategies',
                data: {
                    'tenantid': adminContext.tenant.tenantid
                },
                success: function(data) {
                    if ($.isFunction(callback)) {
                        callback(data);
                    }
                }
            });
        }
    };

    /**
     * Gets the data for tenants
     * @param {Function} callback Callback function executed after the request completes. Passes through the returned data
     */
    var getTenants = function(callback) {
        $.ajax({
            url: '/api/tenants',
            success: function(data) {
                if ($.isFunction(callback)) {
                    callback(sortTenantsOnPort(data));
                }
            }
        });
    };

    /**
     * Gets more information about the current context and stores it in a variable 'context'
     * @param {Function} callback Function to be executed after the request completes.
     */
    var getContext = function(callback) {
        $.ajax({
            url: '/api/me',
            success: function(meData) {
                adminContext.me = meData;

                $.ajax({
                    url: '/api/tenant',
                    success: function(data) {
                        if ($.isFunction(callback)) {
                            adminContext.tenant = {
                                'context': 'tenant',
                                'tenantid': data.alias || 'global',
                                'name': data.name || '',
                                'description': data.description || '',
                                'port': data.port || ''
                            }
                            callback();
                        }
                    }, error: function(err) {
                        if (err.status === 404) {
                            if ($.isFunction(callback)) {
                                adminContext.tenant = {
                                    'context': 'global',
                                    'tenantid': 'global'
                                }
                                callback();
                            }
                        }
                    }
                });
            }, error: function(err) {
                adminContext.me = false;
                adminContext.tenant = false;
                callback();
            }
        });
    };


    ////////////////////////
    //// INITIALIZATION ////
    ////////////////////////

    /**
     * Adds binding to various elements in the admin UI
     */
    var addBinding = function() {
        var $adminTenantsContainer = $('#admin_tenants_container');
        var $adminModulesContainer = $('#admin_modules_container');
        var $adminHeaderContainer = $('#admin_header_container');
        var $adminLoginContainer = $('#admin_login_container');

        $adminHeaderContainer.on('click', '#admin_header_user_logout', doLogOut);
        $adminLoginContainer.on('submit', '#admin_login_form', doLogin);
        $adminLoginContainer.on('click', '.admin_login_tab', switchLoginStrategy);
        $adminTenantsContainer.on('click', '.createtenant_toggle_button', toggleContainer);
        $adminTenantsContainer.on('click', '#createtenant_submit_button', createTenant);
        $adminTenantsContainer.on('click', '.stop_tenant', stopTenantHandler);
        $adminTenantsContainer.on('click', '.stop_all_tenants', stopAllTenantsHandler);
        $adminTenantsContainer.on('click', '.start_tenant', startTenantHandler);
        $adminTenantsContainer.on('click', '.start_all_tenants', startAllTenantsHandler);
        $adminTenantsContainer.on('click', '.delete_tenant', deleteTenantHandler);
        $adminTenantsContainer.on('click', '.delete_all_tenants', deleteAllTenantsHandler);
        $adminModulesContainer.on('click', '.module_configuration_toggle_button', toggleContainer);
        $adminModulesContainer.on('submit', '.module_configuration_form', writeConfig);
    };

    /**
     * Initializes the header
     */
    var initializeHeader = function() {
        renderTemplate('admin_header_template', {
            'context': adminContext
        }, $('#admin_header_container'));

        // Set the page title
        if (adminContext.tenant.context === 'tenant') {
            document.title = 'Tenant Administration UI - Sakai OAE';
        } else {
            document.title = 'Global Administration UI - Sakai OAE';
        }
    };

    /**
     * Initializes the list of modules and renders them in a view
     */
    var initializeModules = function(configuration) {
        renderTemplate('admin_modules_template', {
            'modules': configuration,
            'context': adminContext
        }, $('#admin_modules_container'));
    };

    /**
     * Initializes the list of tenants and renders them in a view
     */
    var initializeTenants = function() {
        if (adminContext.tenant.context === 'global') {
            getTenants(function(tenants) {
                preProcessTenants(tenants, function(tenants) {
                    cachedTenants = tenants;
                    renderTemplate('admin_tenants_template', {
                        'tenants': tenants,
                        'context': adminContext
                    }, $('#admin_tenants_container'));
                });
            });
        }
    };

    /**
    * Renders the login view
    */
    var showLogin = function(strategies) {
        renderTemplate('admin_login_template', {
            'strategies': strategies[0].config
        }, $('#admin_login_container'));
    };

    /**
     * Initializes the admin UI
     */
    var doInit = function() {
        addBinding();

        // Get tenant context and me info
        getContext(function() {
            console.log(adminContext);
            initializeHeader();

            if (adminContext.me && !adminContext.me.anon) {
                getConfiguration(function(configuration){
                    initializeModules(configuration);
                    initializeTenants();
                });
            } else {
                if (adminContext.tenant.tenantid === 'global') {
                    showLogin([{
                        'config': {
                            'options': {
                                'local-authentication': {
                                    'enabled': true,
                                    'name': 'Local Authentication'
                                }
                            }
                        }
                    }])
                } else {
                    getAvailableLoginStrategies('authentication', function(strategies) {
                        showLogin(strategies);
                    });
                }
            }
        });
    };

    $(document).ready(doInit);
})();
