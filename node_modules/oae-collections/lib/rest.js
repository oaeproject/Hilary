/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var CollectionsAPI = require('oae-collections');
var CollectionsConstants = require('oae-collections/lib/constants').CollectionsConstants;

/*!
 * Create a collection
 */
OAE.tenantRouter.on('post', '/api/collection', function(req, res) {
    var managerIds = OaeUtil.getArrayParam(req.body.managers);
    var viewerIds = OaeUtil.getArrayParam(req.body.viewers);

    // Hold the user roles to initialize the collection with
    var roles = {};

    // Apply the manager roles
    _.each(managerIds, function(managerId) {
        roles[managerId] = CollectionsConstants.roles.MANAGER;
    });

    // Apply the viewer roles
    _.each(viewerIds, function(viewerId) {
        roles[viewerId] = CollectionsConstants.roles.VIEWER;
    });

    CollectionsAPI.createCollection(req.ctx, req.body.displayName, req.body.description, req.body.visibility, roles, function(err, collection) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, collection);
    });
});

/*!
 * Get a collection by its id
 */
OAE.tenantRouter.on('get', '/api/collection/:collectionId', function(req, res) {
    CollectionsAPI.getFullCollectionProfile(req.ctx, req.params.collectionId, function(err, collection) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, collection);
    });
});

/*!
 * Share a collection with a set of users and groups
 */
OAE.tenantRouter.on('post', '/api/collection/:collectionId/share', function(req, res) {
    var viewers = OaeUtil.getArrayParam(req.body.viewers);
    CollectionsAPI.shareCollection(req.ctx, req.params.collectionId, viewers, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/*!
 * Update the members of a collection
 */
OAE.tenantRouter.on('post', '/api/collection/:collectionId/members', function(req, res) {
    // Parse the incoming false values
    var permissionUpdates = {};
    _.each(req.body, function(value, key) {
        permissionUpdates[key] = OaeUtil.castToBoolean(value);
    });

    CollectionsAPI.setCollectionPermissions(req.ctx, req.params.collectionId, permissionUpdates, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/*!
 * Get the members list of a collection
 */
OAE.tenantRouter.on('get', '/api/collection/:collectionId/members', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    CollectionsAPI.getCollectionMembers(req.ctx, req.params.collectionId, req.query.start, limit, function(err, members, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': members, 'nextToken': nextToken});
    });
});

/*!
 * Get the collections library for a given user or group
 */
OAE.tenantRouter.on('get', '/api/collection/library/:principalId', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 12, 1, 25);
    CollectionsAPI.getCollectionsLibrary(req.ctx, req.params.principalId, req.query.start, limit, function(err, results, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': results, 'nextToken': nextToken});
    });
});

/*!
 * Add a set of content items to a collection
 */
OAE.tenantRouter.on('post', '/api/collection/:collectionId/library', function(req, res) {
    var contentIds = OaeUtil.getArrayParam(req.body.contentIds);
    CollectionsAPI.addContentItemsToCollection(req.ctx, req.params.collectionId, req.body.contentIds, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/*!
 * Get the content library of a collection
 */
OAE.tenantRouter.on('get', '/api/collection/:collectionId/library', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 12, 1, 25);
    CollectionsAPI.getCollectionContentLibrary(req.ctx, req.params.collectionId, req.query.start, limit, function(err, results, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': results, 'nextToken': nextToken});
    });
});
