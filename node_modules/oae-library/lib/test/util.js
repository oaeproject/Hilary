/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var LibraryAPI = require('oae-library');

/**
 * Purge a library, ensuring that before it is purged that it was "fresh" (i.e., not stale). Useful
 * to include a sanity check to avoid invalid library purges as a result of inaccurate library ids
 * or index names
 *
 * @param  {String}     indexName   The name of the index in which the library exists
 * @param  {String[]}   libraryIds  The ids of the libraries to purge
 * @param  {Function}   callback    Invoked when the purge has completed successfully
 * @throws {AssertionError}         Thrown if the the library was not previously fresh or if there is an issue purging it
 */
var assertPurgeFreshLibraries = module.exports.assertPurgeFreshLibraries = function(indexName, libraryId, callback) {
    // Wait to ensure there are no pending library updates which could impact the purging while it
    // is in progress
    LibraryAPI.Index.whenUpdatesComplete(function() {
        return _assertPurgeFreshLibraries(indexName, libraryId.slice(), callback);
    });
};

/**
 * Purge a library, ensuring that before it is purged that it was "fresh" (i.e., not stale). Useful
 * to include a sanity check to avoid invalid library purges as a result of inaccurate library ids
 * or index names
 *
 * This method is a delegate of `assertPurgeFreshLibraries`, the only difference is that this
 * internal method is destructive to the `libraryIds` parameter
 *
 * @param  {String}     indexName   The name of the index in which the library exists
 * @param  {String[]}   libraryIds  The ids of the libraries to purge
 * @param  {Function}   callback    Invoked when the purge has completed successfully
 * @throws {AssertionError}         Thrown if the the library was not previously fresh or if there is an issue purging it
 * @api private
 */
var _assertPurgeFreshLibraries = function(indexName, libraryIds, callback) {
    if (_.isEmpty(libraryIds)) {
        return callback();
    }

    // Purge the libraries
    var libraryId = libraryIds.pop();
    LibraryAPI.Index.isStale(indexName, libraryId, 'private', function(err, isStale) {
        assert.ok(!err);
        assert.strictEqual(isStale, false);
        LibraryAPI.Index.purge(indexName, libraryId, function(err) {
            assert.ok(!err);
            LibraryAPI.Index.isStale(indexName, libraryId, 'private', function(err, isStale) {
                assert.ok(!err);
                assert.strictEqual(isStale, true);
                return _assertPurgeFreshLibraries(indexName, libraryIds, callback);
            });
        });
    });
};
