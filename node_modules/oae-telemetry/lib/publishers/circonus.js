/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');

var log = require('oae-logger').logger('telemetry-circonus');

var circonusConfig = null;

/**
 * Will push data into redis and publish histogram data to circonus via HTTPTrap
 */
var init = module.exports.init = function(telemetryConfig) {
    circonusConfig = telemetryConfig.circonus || {};
};

/**
 * Publishes the given telemetry data to a circonus HTTPTrap.
 *
 * @param  {Object}     data    The telemetry data to publish in the format: `module -> name -> value`
 */
var publish = module.exports.publish = function(data) {
    if (!data || _.isEmpty(data)) {
        return;
    }

    // Expand the data into a circonus friendly object
    var metricsToSend = 0;
    var circonusData = {};
    _.each(data, function(nameValue, module) {
        circonusData[module] = {};
        _.each(nameValue, function(value, name) {
            metricsToSend++;
            circonusData[module][name] = {
                '_value': value,
                '_type': 'I'
            };
        });
    });

    // Do not send empty data to circonus
    if (metricsToSend === 0) {
        return;
    }

    log().trace({'data': circonusData}, 'Publishing telemetry data to circonus');

    var requestOpts = {
        'method': 'PUT',
        'uri': circonusConfig.url,
        'body': JSON.stringify(circonusData),
        'strictSSL': false
    };

    // Invoke the HTTP request to the circonus HTTP Trap
    request(requestOpts, function(err, response, body) {
        if (err) {
            return log().warn({'err': err}, 'Error publishing telemetry data to circonus');
        } else if (response.statusCode !== 200) {
            return log().warn({'body': body, 'code': response.statusCode}, 'Circonus replied with a non-200 response');
        }

        return log().info('Sent %d metrics to circonus', metricsToSend);
    });
};

