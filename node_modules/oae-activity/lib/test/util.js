/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var clone = require('clone');
var events = require('events');
var ShortId = require('shortid');
var sjsc = require('sockjs-client-ws');

var MqTestsUtil = require('oae-util/lib/test/mq-util');
var OaeUtil = require('oae-util/lib/util');
var RestAPI = require('oae-rest');

var ActivityAggregator = require('oae-activity/lib/internal/aggregator');
var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;

/**
 * Refresh the activity module's configuration, keeping in mind default test configuration. This is
 * important to ensure test defaults, particularly the fact that aggregation collection should
 * always be disabled during tests to avoid intermittent test failures.
 *
 * @param  {Object}     [config]        The configuration with which to reset configuration
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var refreshConfiguration = module.exports.refreshConfiguration = function(config, callback) {
    config = _.extend({
        'collectionPollingFrequency': -1,
        'numberOfProcessingBuckets': 1
    }, config);
    ActivityAPI.refreshConfiguration(config, callback);
};

/**
 * Get the activity stream by its id, but delay and perform an activity collection first to ensure the stream is
 * updated.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {String}         [activityStreamId]  The id of the activity stream to get. If `null`, will get the stream of the current user
 * @param  {Object}         [opts]              @see RestAPI.Activity#getActivityStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getActivityStream for more information.
 */
var collectAndGetActivityStream = module.exports.collectAndGetActivityStream = function(restCtx, activityStreamId, opts, callback) {
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            if (activityStreamId) {
                RestAPI.Activity.getActivityStream(restCtx, activityStreamId, opts, callback);
            } else {
                RestAPI.Activity.getCurrentUserActivityStream(restCtx, opts, callback);
            }
        });
    });
};

/**
 * Get the notification stream, but delay and perform an activity collection first to ensure the stream is
 * updated.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {Object}         [opts]              @see RestAPI.Activity#getNotificationStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getNotificationStream for more information.
 */
var collectAndGetNotificationStream = module.exports.collectAndGetNotificationStream = function(restCtx, opts, callback) {
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            RestAPI.Activity.getNotificationStream(restCtx, opts, callback);
        });
    });
};

/**
 * Marks all the notifications for a user as read and waits till the activity aggregation for that user's notification
 * stream has been reset.
 *
 * @param  {RestContext}    restContext     The context of the current request
 * @param  {Function}       callback        Standard callback function
 * @throws {Error}                          An assertion error is thrown if the notifications could not be marked as read or the response was invalid
 */
var markNotificationsAsRead = module.exports.markNotificationsAsRead = function(restContext, callback) {
    var result = null;

    ActivityAPI.once(ActivityConstants.events.RESET_AGGREGATION, function(activityStreams) {
        return callback(result);
    });

    RestAPI.Activity.markNotificationsRead(restContext, function(err, _result) {
        assert.ok(!err);

        // Assert we're getting back a number
        result = _result;
        var lastReadTime = _result.lastReadTime;
        assert.strictEqual(lastReadTime, OaeUtil.getNumberParam(lastReadTime));
    });
};

/**
 * Assert an activity stream contains an activity specified by the given `activityType`
 *
 * @param  {RestContext}    restContext         The rest context to use to retrieve the activity stream
 * @param  {String}         activityStreamId    The id of the activity stream to check
 * @param  {String}         activityType        The type of the activity that should be in the activity stream
 * @param  {String}         verb                The verb of the activity
 * @param  {String}         actorId             The id of the actor of the activity
 * @param  {String}         objectId            The id of the object of the activity
 * @param  {String}         targetId            The id of the target of the activity
 * @param  {Function}       callback            Standard callback function
 * @throws {Error}                              An assertion error gets thrown if the activity was not found or some of its properties are not what was expected
 */
var assertFeedContainsActivity = module.exports.assertFeedContainsActivity = function(restContext, activityStreamId, activityType, verb, actorId, objectId, targetId, callback) {
    collectAndGetActivityStream(restContext, activityStreamId, null, function(err, response) {
        assert.ok(!err);
        var activity = _.findWhere(response.items, {'oae:activityType': activityType});
        assert.ok(activity);
        assertActivity(activity, activityType, verb, actorId, objectId, targetId);
        return callback();
    });
};

/**
 * Assert an activity stream does not contain an activity
 *
 * @param  {RestContext}    restContext         The rest context to use to retrieve the activity stream
 * @param  {String}         activityType        The type of the activity that should not be in the activity stream
 * @param  {Function}       callback            Standard callback function
 * @throws {Error}                              An assertion error gets thrown if the activity was found
 */
var _assertFeedDoesNotContainActivity = module.exports.assertFeedDoesNotContainActivity = function(restContext, activityStreamId, activityType, callback) {
    collectAndGetActivityStream(restContext, activityStreamId, null, function(err, response) {
        assert.ok(!err);
        var activity = _.findWhere(response.items, {'oae:activityType': activityType});
        assert.ok(!activity);
        return callback();
    });
};

/**
 * Assert a notification stream contains an activity specified by the given `activityType`
 *
 * @param  {RestContext}    restContext         The rest context to use to retrieve the notification stream
 * @param  {String}         activityStreamId    The id of the activity stream to check
 * @param  {String}         activityType        The type of the activity that should be in the notification stream
 * @param  {String}         verb                The verb of the activity
 * @param  {String}         actorId             The id of the actor of the activity
 * @param  {String}         objectId            The id of the object of the activity
 * @param  {String}         targetId            The id of the target of the activity
 * @param  {Function}       callback            Standard callback function
 * @throws {Error}                              An assertion error gets thrown if the activity was not found or some of its properties are not what was expected
 */
var _assertNotificationStreamContainsActivity = module.exports.assertNotificationStreamContainsActivity = function(restContext, activityType, verb, actorId, objectId, targetId, callback) {
    collectAndGetNotificationStream(restContext, null, function(err, notificationStream) {
        assert.ok(!err);
        var activity = _.findWhere(notificationStream.items, {'oae:activityType': activityType});
        assert.ok(activity);
        assertActivity(activity, activityType, verb, actorId, objectId, targetId);
        return callback();
    });
};

/**
 * Assert a notification stream does not contain an activity
 *
 * @param  {RestContext}    restContext         The rest context to use to retrieve the notification stream
 * @param  {String}         activityType        The type of the activity that should not be in the notification stream
 * @param  {Function}       callback            Standard callback function
 * @throws {Error}                              An assertion error gets thrown if the activity was found
 */
var _assertNotificationStreamDoesNotContainActivity = module.exports.assertNotificationStreamDoesNotContainActivity = function(restContext, activityType, callback) {
    collectAndGetNotificationStream(restContext, null, function(err, notificationStream) {
        assert.ok(!err);
        var activity = _.findWhere(notificationStream.items, {'oae:activityType': activityType});
        assert.ok(!activity);
        return callback();
    });
};


/**
 * Perform basic assertions of an activity and the entities that it contains
 *
 * @param  {Activity}           activity            The activity whose contents to verify
 * @param  {String}             activityType        The activity type that should be associated to the activity
 * @param  {String}             verb                The verb that should be associated to the activity
 * @param  {String|String[]}    actorEntityId       The id of the entity that should be the actor, or an array of expected actor entity ids if the entity is expected to be an oae:collection aggregate
 * @param  {String|String[]}    [objectEntityId]    The id of the entity that should be the object, or an array of expected object entity ids if the entity is expected to be an oae:collection aggregate. If not specified, an assertion will be performed that the object does not exist
 * @param  {String|String[]}    [targetEntityId]    The id of the entity taht should be the target, or an array of expected target entity ids if the entity is expected to be an oae:collection aggregate. If not specified, an assertion will be performed that the target does not exist
 */
var assertActivity = module.exports.assertActivity = function(activity, activityType, verb, actorEntityId, objectEntityId, targetEntityId) {
    assert.ok(activity);
    assert.equal(activity[ActivityConstants.properties.OAE_ACTIVITY_TYPE], activityType);
    assert.equal(activity.verb, verb);
    _assertActivityEntity(activity.actor, actorEntityId);
    _assertActivityEntity(activity.object, objectEntityId);
    _assertActivityEntity(activity.target, targetEntityId);
};

/**
 * Verify the id(s) of the provided activity entity against the provided entity id
 *
 * @param  {ActivityEntity}     [activityEntity]    The activity entity to validate
 * @param  {String|String[]}    [entityId]          The expected id of the entity, or an array of expected entity ids if the entity is expected to be an oae:collection aggregate. If not specified, an assertion will be performed that the entity does not exist (i.e., it's unspecified)
 * @api private
 */
var _assertActivityEntity = function(activityEntity, entityId) {
    if (!entityId) {
        assert.ok(!activityEntity);
    } else if (_.isString(entityId)) {
        assert.ok(activityEntity);
        assert.equal(activityEntity[ActivityConstants.properties.OAE_ID], entityId);
    } else if (_.isArray(entityId)) {
        // The entity id is an array, so we need to make sure every id in this list is on the activity entity collection
        var entityIds = entityId;
        assert.ok(activityEntity);

        // Ensure it is a collection with the same amount of ids as the given list of entity ids
        assert.equal(activityEntity.objectType, 'collection');
        assert.ok(activityEntity[ActivityConstants.properties.OAE_COLLECTION]);
        assert.strictEqual(activityEntity[ActivityConstants.properties.OAE_COLLECTION].length, entityIds.length);

        // Ensure every id in the list is in the entity collection
        _.each(activityEntity[ActivityConstants.properties.OAE_COLLECTION], function(activityEntity) {
            assert.ok(_.contains(entityIds, activityEntity[ActivityConstants.properties.OAE_ID]));
        });
    }
};

/**
 * Get a WebSocket that is connected to the `localhost` tenant.
 *
 * This client emits the following events:
 *  * `message(msg)`    -   A new message arrived on the socket and it's not a response to an earlier sent message
 *  * `close()`         -   The underlying socket has been closed
 *
 * @param  {Function}   callback                Standard callback method that returns a connected client
 * @param  {Client}     callback.client         The connected client
 */
var getPushClient = module.exports.getPushClient = function(callback) {
    // The client that we'll return to the caller
    var client = new events.EventEmitter();

    // A dictionary that maps message IDs to callbacks
    var messageCallbacks = {};

    // Set up a websocket connection to the localhost tenant
    var socket = sjsc.create('http://localhost:2001/api/push');

    socket.on('error', function (e) {
        assert.fail(e, null, 'Did not expect an error on the websocket');
    });

    socket.on('connection', function() {
        // The socket has been connected and is ready to transmit messages
        callback(client);
    });

    socket.on('data', function (msg) {
        // We ignore 'open', 'heartbeat' or 'close' messages
        if (msg === 'o' || msg === 'h' || msg === 'c') {
            return;
        }

        // Everything we receive at this point, should be sent too us by OAE. This should be proper JSON
        try {
            msg = JSON.parse(msg);
        } catch (err) {
            assert.fail(err, null, 'Did not expect malformed JSON as a response from the server');
        }

        // If we registered a callback for this message, we execute it
        if (msg.replyTo && messageCallbacks[msg.replyTo]) {
            messageCallbacks[msg.replyTo](msg.error, msg);

            // Since we should only get one message from the server with that ID, we change the callback
            // so that if we get another message with that ID, we'll throw an error
            messageCallbacks[msg.replyTo] = function(error, msg) {
                assert.fail(msg, null, 'A message ID can only be responded to once');
            };

        // Otherwise we simply emit the message
        } else {
            client.emit('message', msg);
        }
    });

    socket.on('close', function() {
        client.emit('close');
    });

    /**
     * Returns the raw socket. This allows you to send custom messages
     *
     * @return {Socket}     The raw socket
     */
    client.getRawSocket = function() {
        return socket;
    };

    /**
     * Sends a message over the wire
     *
     * @param  {String}     name            A name for this frame. ex: `authentication` or `register-for-feed`
     * @param  {Object}     payload         A payload object
     * @param  {Function}   [callback]      A function that should be executed when a response is received
     */
    client.sendMessage = function(name, payload, callback) {
        callback = callback || function() {};

        // Generate a random ID for this message so we can identify the response later on
        var id = 'id' + ShortId.generate();
        messageCallbacks[id] = callback;

        // Send the message over the wire
        var msg = JSON.stringify({'id': id, 'name': name, 'payload': payload});
        socket.write(msg);
    };

    /**
     * Utility to help you authenticate a user on the websocket
     *
     * @param  {String}     userId       The ID of the user to authenticate
     * @param  {String}     tenantAlias  The alias of the tenant of which this user originates
     * @param  {Object}     signature    A signature object
     * @param  {Function}   callback     A function that will be executed when the response for the authentication frame is received
     */
    client.authenticate = function(userId, tenantAlias, signature, callback) {
        var payload = {
            'userId': userId,
            'tenantAlias': tenantAlias,
            'signature': signature
        };
        client.sendMessage('authentication', payload, callback);
    };

    /**
     * Utility to register this WS for a stream
     *
     * @param  {String}    resourceId           The ID of the resource, ex: a userId
     * @param  {String}    streamType           The type of the activity stream, ex: `activity`
     * @param  {Object}    token                An object that can be used to authorize the subscription request
     * @param  {String}    format               The format in which the activity entities should be returned
     * @param  {Function}  callback             A function that will be executed once this socket is registered on the feed
     */
    client.subscribe = function(resourceId, streamType, token, format, callback) {
        var payload = {
            'stream': {
                'resourceId': resourceId,
                'streamType': streamType
            },
            'token': token,
            'format': format
        };
        client.sendMessage('subscribe', payload, callback);
    };

    /**
     * Closes the underlying socket.
     * A `close` event will also be emitted once the socket is closed.
     *
     * @param  {Function}   callback    Standard callback function that will get executed once the socket has closed
     */
    client.close = function(callback) {
        callback = callback || function() {};
        socket.on('close', callback);
        socket.close();
    };
};

/**
 * Get a WebSocket that is authenticated and has registered for 0, 1 or multiple feeds.
 *
 * @param  {Object}     data                                A data object that contains the authentication credentials and the feeds that should be registered
 * @param  {Object}     data.authentication                 The object containing the authentication data
 * @param  {String}     data.authentication.userId          The id of the user to authenticate
 * @param  {String}     data.authentication.tenantAlias     The alias of the tenant on which the signature was retrieved
 * @param  {Object}     data.authentication.signature       The signature which can be used to authenticate the client
 * @param  {Object[]}   [data.streams]                      The streams on which we should subscribe
 * @param  {String}     [data.streams[i].resourceId]        The id of the resource for which to retrieve an activity stream
 * @param  {String}     [data.streams[i].streamType]        The type of the stream that should be retrieved, ex: `notification` or `activity`
 * @param  {Object}     [data.streams[i].token]             A token that can be used to authorize the client on the stream
 * @param  {Object}     [data.streams[i].format]            The format in which the activity entities should be returned
 * @param  {Function}   callback                            A function that will be executed once this socket has been set up
 * @param  {Client}     callback.client                     A connected WS client that is authenticated and registered for all the desired feeds
 * @throws {Error}                                          If the client could not be authenticated or registered for a feed
 */
var getFullySetupPushClient = module.exports.getFullySetupPushClient = function(data, callback) {
    getPushClient(function(client) {
        client.authenticate(data.authentication.userId, data.authentication.tenantAlias, data.authentication.signature, function(err) {
            assert.ok(!err, 'Failed to authenticate');

            if (_.isEmpty(data.streams)) {
                return callback(client);
            }

            var allRegisteredCallback = _.after(data.streams.length, callback);
            _.each(data.streams, function(stream) {
                client.subscribe(stream.resourceId, stream.streamType, stream.token, stream.format, function(err) {
                    assert.ok(!err, 'Failed to register for feed');
                    allRegisteredCallback(client);
                });
            });
        });
    });
};
