/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var ActivityTestsUtil = require('oae-activity/lib/test/util');
var log = require('oae-logger').logger('test-activity');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var EmailAPI = require('oae-email');
var EmailConfig = require('oae-config').config('oae-email');
var EmailTestsUtil = require('oae-email/lib/test/util');

describe('Emails', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    var _createDefaultConfig = function(overrides) {
        return _.extend({'debug': true}, overrides);
    };

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

        // Reload the email API with the override templates in oae-email/tests/emailTemplateOverrides
        EmailAPI.init(_createDefaultConfig({'customEmailTemplatesDir': __dirname + '/emailTemplateOverrides'}), callback);
    });

    after(function(callback) {
        // Return the email api to its default test configuration
        EmailAPI.init(_createDefaultConfig(), callback);
    });

    describe('Templates', function() {

        /**
         * Test that verifies validation of the sendEmail method
         */
        it('verifies sendEmail validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];

                // Verify error when there is no email
                EmailTestsUtil.sendEmail('oae-tests', 'TestCaOverride', mrvisser.user, null, null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    mrvisser.user.email = 'blah blah blah';

                    // Verify error when there is invalid email
                    EmailTestsUtil.sendEmail('oae-tests', 'TestCaOverride', mrvisser.user, null, null, function(err, message) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Verify error when there is no user
                        EmailTestsUtil.sendEmail('oae-tests', 'TestCaOverride', null, null, null, function(err, message) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            mrvisser.user.email = 'my.email@my.email.com';

                            // Verify error when there is no module
                            EmailTestsUtil.sendEmail(null, 'TestCaOverride', mrvisser.user, null, null, function(err, message) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Verify error when there is no template id
                                EmailTestsUtil.sendEmail('oae-tests', null, mrvisser.user, null, null, function(err, message) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Verify error with non-existent module
                                    EmailTestsUtil.sendEmail('oae-non-existent', 'TestCaOverride', mrvisser.user, null, null, function(err, message) {
                                        assert.ok(err);
                                        assert.equal(err.code, 500);

                                        // Verify error with non-existent template id
                                        EmailTestsUtil.sendEmail('oae-tests', 'TemplateDoesNotExist', mrvisser.user, null, null, function(err, message) {
                                            assert.ok(err);
                                            assert.equal(err.code, 500);

                                            // Sanity check
                                            EmailTestsUtil.sendEmail('oae-tests', 'TestCaOverride', mrvisser.user, null, null, function(err, message) {
                                                assert.ok(!err);
                                                assert.ok(message);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that templates locales take precedence over the base templates, and that it falls back to default
         * when there is no suitable locale.
         */
        it('verifies locale-specific template selection', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';
                mrvisser.user.locale = 'en_CA';

                var nico = _.values(users)[1];
                nico.user.email = 'nico@email.address.com';

                // Verify mrvisser gets the en_CA template
                EmailTestsUtil.sendEmail('oae-tests', 'TestCaOverride', mrvisser.user, null, null, function(err, message) {
                    assert.ok(!err);

                    message = message._message;
                    assert.equal(message.from, EmailConfig.getValue(mrvisser.user.tenant, 'general', 'from'));
                    assert.equal(message.subject, 'test ca override (en_CA)');
                    assert.equal(message.to, mrvisser.user.email);
                    assert.equal(message.html, '<b>test ca override (en_CA)</b>');
                    assert.equal(message.body, '**test ca override (en_CA)**');

                    // Verify nico gets the base template
                    EmailTestsUtil.sendEmail('oae-tests', 'TestCaOverride', nico.user, null, null, function(err, message) {
                        assert.ok(!err);

                        message = message._message;
                        assert.equal(message.from, EmailConfig.getValue(nico.user.tenant, 'general', 'from'));
                        assert.equal(message.subject, 'test ca override (default)');
                        assert.equal(message.to, nico.user.email);
                        assert.equal(message.html, '<b>test ca override (default)</b>');
                        assert.equal(message.body, '**test ca override (default)**');
                        callback();
                    });
                    
                });
            });
        });

        /**
         * Verifies a 500 error is thrown when there is no meta template available for a template, even if there are
         * content templates.
         */
        it('verifies error with no meta template', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                // Verify error when there is no email
                EmailTestsUtil.sendEmail('oae-tests', 'TestNoMeta', mrvisser.user, null, null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 500);
                    assert.strictEqual(err.msg.indexOf('No email metadata'), 0);
                    callback();
                });
            });
        });

        /**
         * Test that verifies an error is given when a template is chosen that has only metadata and no content.
         */
        it('verifies error with no html or txt template', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                // Verify error when there is no email
                EmailTestsUtil.sendEmail('oae-tests', 'TestMetaOnly', mrvisser.user, null, null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 500);
                    assert.strictEqual(err.msg.indexOf('No email content'), 0);
                    callback();
                });
            });
        });

        /**
         * Verifies the combinations of templates that have only html, only txt and both html and txt.
         */
        it('verifies html and txt templates', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                // Verify HTML only
                EmailTestsUtil.sendEmail('oae-tests', 'TestHtmlOnly', mrvisser.user, null, null, function(err, message) {
                    assert.ok(!err);

                    message = message._message;
                    assert.equal(message.from, EmailConfig.getValue(mrvisser.user.tenant, 'general', 'from'));
                    assert.equal(message.subject, 'test html only');
                    assert.equal(message.to, mrvisser.user.email);
                    assert.equal(message.html, '<b>test html only</b>');
                    assert.equal(message.body, '**test html only**');

                    // Verify text only
                    EmailTestsUtil.sendEmail('oae-tests', 'TestTxtOnly', mrvisser.user, null, null, function(err, message) {
                        assert.ok(!err);

                        message = message._message;
                        assert.equal(message.from, EmailConfig.getValue(mrvisser.user.tenant, 'general', 'from'));
                        assert.equal(message.subject, 'test txt only');
                        assert.equal(message.to, mrvisser.user.email);
                        assert.ok(!message.html);
                        assert.equal(message.body, 'test txt only');

                        // Verify contents with both html and text
                        EmailTestsUtil.sendEmail('oae-tests', 'TestHtmlAndTxt', mrvisser.user, null, null, function(err, message) {
                            assert.ok(!err);

                            message = message._message;
                            assert.equal(message.from, EmailConfig.getValue(mrvisser.user.tenant, 'general', 'from'));
                            assert.equal(message.subject, 'test html and txt');
                            assert.equal(message.to, mrvisser.user.email);
                            assert.equal(message.html, '<b>test html and txt</b>');
                            assert.equal(message.body, 'test html and txt');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies how errors are handled when templates trigger exceptions:
         *
         *  * When the meta template throws exception, the email fails to send
         *  * When the html template throws exception but there is a text template, the email sends with the text
         *  * When the text template throws exception but there is an html template, the email sends with the html
         *  * When both html and text templates throw exception, the email fails
         */
        it('verifies exception handling from template rendering', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                mrvisser.user.email = 'mrvisser@email.address.com';

                // Verify we get an error when exception thrown from meta
                EmailTestsUtil.sendEmail('oae-tests', 'TestThrowError', mrvisser.user, {'throwMeta': true}, null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 500);
                    assert.strictEqual(err.msg.indexOf('Error parsing email metadata'), 0);

                    // Verify if an error is thrown from HTML but we still have a valid text, a message is still sent
                    EmailTestsUtil.sendEmail('oae-tests', 'TestThrowError', mrvisser.user, {'throwHtml': true}, null, function(err, message) {
                        assert.ok(!err);

                        message = message._message;
                        assert.ok(!message.html);
                        assert.equal(message.body, 'throwing a text error: OK');

                        // Verify if an error is thrown from HTML but we still have a valid text, a message is still sent
                        EmailTestsUtil.sendEmail('oae-tests', 'TestThrowError', mrvisser.user, {'throwTxt': true}, null, function(err, message) {
                            assert.ok(!err);

                            message = message._message;
                            assert.equal(message.html, 'throwing an html error: OK');

                            // The HTML template gets auto-converted to text if it does not exist
                            assert.ok(message.body, 'throwing an html error: OK');

                            // Verify we get an error when exception thrown from meta
                            EmailTestsUtil.sendEmail('oae-tests', 'TestThrowError', mrvisser.user, {'throwContent': true}, null, function(err, message) {
                                assert.ok(err);
                                assert.equal(err.code, 500);
                                assert.strictEqual(err.msg.indexOf('Could not parse a suitable content template'), 0);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verifies selection of a template when there are potential overrides. The selection priority is:
         *
         *  1. The override template with a locale match; if there is no template for the user's local, then
         *  2. the 'default' override template; if there is no default override template, then
         *  3. The base template with a locale match; and finally
         *  4. The 'default' base template
         *
         * If none of the above match, the template doesn't exist.
         */
        it('verifies tenant override templates override even when there are no template matches', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, camUsers) {
                assert.ok(!err);

                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, gtUsers) {

                    var mrvisser = _.values(camUsers)[0];
                    mrvisser.user.email = 'mrvisser@email.address.com';
                    mrvisser.user.locale = 'en_CA';

                    var nico = _.values(camUsers)[1];
                    nico.user.email = 'nico@email.address.com';
                    nico.user.locale = 'fr_FR';

                    var stuart = _.values(gtUsers)[0];
                    stuart.user.email = 'discostu@email.address.com';
                    stuart.user.locale = 'fr_FR';

                    var clay = _.values(gtUsers)[1];
                    clay.user.email = 'clay@email.address.com';

                    // Verify mrvisser gets the en_CA template in the override, because it matches
                    EmailTestsUtil.sendEmail('oae-tests', 'TestOverrideOverrides', mrvisser.user, null, null, function(err, message) {
                        assert.ok(!err);

                        message = message._message;
                        assert.equal(message.from, EmailConfig.getValue(mrvisser.user.tenant, 'general', 'from'));
                        assert.equal(message.subject, 'test override (override) (en_CA)');
                        assert.equal(message.to, mrvisser.user.email);
                        assert.equal(message.html, 'test override (override) (en_CA)');
                        assert.equal(message.body, 'test override (override) (en_CA)');

                        // Verify nico gets the default template in the override, even though there is a locale match in the base
                        EmailTestsUtil.sendEmail('oae-tests', 'TestOverrideOverrides', nico.user, null, null, function(err, message) {
                            assert.ok(!err);

                            message = message._message;
                            assert.equal(message.from, EmailConfig.getValue(nico.user.tenant, 'general', 'from'));
                            assert.equal(message.subject, 'test override (override) (default)');
                            assert.equal(message.to, nico.user.email);
                            assert.equal(message.html, 'test override (override) (default)');
                            assert.equal(message.body, 'test override (override) (default)');

                            // Verify stuart gets the base fr_FR template, because the gt tenant is not overridden and he is fr_FR
                            EmailTestsUtil.sendEmail('oae-tests', 'TestOverrideOverrides', stuart.user, null, null, function(err, message) {
                                assert.ok(!err);

                                message = message._message;
                                assert.equal(message.from, EmailConfig.getValue(stuart.user.tenant, 'general', 'from'));
                                assert.equal(message.subject, 'test override (fr_FR)');
                                assert.equal(message.to, stuart.user.email);
                                assert.equal(message.html, 'test override (fr_FR)');
                                assert.equal(message.body, 'test override (fr_FR)');

                                // Verify clay gets the base default template, because gt tenant is not overridden and there is no locale match
                                EmailTestsUtil.sendEmail('oae-tests', 'TestOverrideOverrides', clay.user, null, null, function(err, message) {
                                    assert.ok(!err);

                                    message = message._message;
                                    assert.equal(message.from, EmailConfig.getValue(clay.user.tenant, 'general', 'from'));
                                    assert.equal(message.subject, 'test override (default)');
                                    assert.equal(message.to, clay.user.email);
                                    assert.equal(message.html, 'test override (default)');
                                    assert.equal(message.body, 'test override (default)');

                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
