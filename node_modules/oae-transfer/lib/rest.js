/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var OAE = require('oae-util/lib/oae');
var TransferAPI = require('oae-transfer');
var TransferConstants = require('oae-transfer/lib/constants').TransferConstants;

/**
 * @REST postTransferCreate
 *
 * Create a new transfer
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /transfer
 * @FormParam   {Context}           ctx                 Context
 * @FormParam   {string}            originalEmail       The email of the account from which the data will be transferred
 * @FormParam   {string}            targetEmail         The email of the account to which the data will be transferred  		
 * @FormParam   {string}            originalUserId      TThe account identifier from which the data will be transferred
 * @Return      {transfer}                              The created transfer
 * @HttpResponse                    200                 Transfer created
 * @HttpResponse                    400                 targetEmail cannot be empty
 * @HttpResponse                    400                 Transfer not found
 */
OAE.tenantRouter.on('post', '/api/transfer', function (req, res) {
    TransferAPI.initiateTransfer(req.ctx, req.body.originalUserId, req.body.originalEmail, req.body.targetEmail, function (err, transfer) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }
        return res.status(200).send(transfer);
    });
});

/**
 * @REST getTransferById
 *
 * Get transfer
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /transfer/:originalUserId
 * @FormParam   {Context}           ctx                 Context
 * @FormParam   {string}            originalUserId      The account identifier from which the data will be transferred
 * @Return      {transfer}                              The created transfer
 * @HttpResponse                    200                 Transfer created
 * @HttpResponse                    400                 Transfer not found
 */
OAE.tenantRouter.on('get', '/api/transfer/:originalUserId', function (req, res) {
    TransferAPI.getTransferById(req.ctx, req.params.originalUserId, function (err, transfer) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }
        return res.status(200).send(transfer);
    });
});

/**
 * @REST completeOrCancelTransfer
 *
 * Complete or Cancel a transfer
 *
 * @Server      tenant
 * @Method      PUT
 * @Path        /transfer/:userId
 * @FormParam   {Context}           ctx                 Context
 * @FormParam   {string}            originalEmail       The email of the account from which the data will be transferred
 * @FormParam   {string}            code                The code used by the user to secure the transfer
 * @FormParam   {string}            targetEmail         The email of the account to which the data will be transferred  
 * @FormParam   {string}            targetUserId        The identifier of the account to which the data will be transferred                 
 * @Return      {transfer}                              The created transfer
 * @HttpResponse                    200                 Transfer created
 * @HttpResponse                    400                 Email cannot be empty
 * @HttpResponse                    400                 Code cannot be empty
 * @HttpResponse                    400                 Invalid email
 * @HttpResponse                    400                 Transfer not found
 * @HttpResponse                    400                 There is no data to transfer
 * @HttpResponse                    400                 Code doesn't match
 * @HttpResponse                    400                 Transfer not found
 */
OAE.tenantRouter.on('put', '/api/transfer/:userId', function (req, res) {

    // Completed the transfer
    if (req.body.status === TransferConstants.status.COMPLETED) {
        TransferAPI.completeTransfer(req.ctx, req.body.originalEmail, req.body.code, req.body.targetEmail, req.params.userId, function (err, managers) {
            if (err) {
                return res.status(err.code).send(err.msg);
            }
            return res.status(200).send(managers);
        });

    // Cancel the transfer
    } else if (req.body.status === TransferConstants.status.CANCELED) {
        TransferAPI.cancelTransfer(req.ctx, req.body.originalEmail, req.body.code, req.params.userId, function (err) {
            if (err) {
                return res.status(err.code).send(err.msg);
            }
            return res.status(200).send();
        });
    } else {
        return res.status(400).send('Invalid transfer status');
    }
});
