/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');
var Validator = require('oae-util/lib/validator').Validator;
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
require('oae-authz/lib/validator');

var PrincipalsUtil = require('./util');
var Visibility = require('./model').VISIBILITY_OPTIONS;
var Joinable = require('./model').JOINABLE_OPTIONS;

var Constants = {

    // role and permission management constants
    PRINCIPAL_TYPE_GROUP: 'g',
    roles: {
        MEMBER: 'member',
        MANAGER: 'manager'
    }
};

/**
 * Get the basic profile for a group.
 *
 * @param  {Context}  ctx             The current context.
 * @param  {String}   groupId         An identifier for a group. ex: g:cam:oae-team
 * @param  {Function} callback        A standard callback method takes arguments `err` and `group`.
 * @param  {Object}   callback.err    An error object (if any.)
 * @param  {Group}    callback.group  The group object
 */
var getGroup = module.exports.getGroup = function(ctx, groupId, callback) {
    var validator = new Validator();
    validator.check(groupId, {'code': 400,'msg': 'An invalid group id was specified'}).isGroupId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    PrincipalsUtil.getPrincipal(ctx, groupId, callback);
};

/**
 * Get a group by it's alias.
 * Each group will have it's own alias which is unique within the tenant of that group.
 * The group ID can be determined by prefixing the group alias with 'g:tenantId:'.
 * The tenantId will be retrieved from the current execution context.
 *
 * @param  {Context}   ctx             The current context.
 * @param  {String}    alias           A group alias.
 * @param  {Function}  callback        A standard callback method takes arguments `err` and `group`.
 * @param  {Object}    callback.err    An error object (if any.)
 * @param  {Group}     callback.group  The group object
 */
var getGroupByAlias = module.exports.getGroupByAlias = function(ctx, alias, callback) {
    var id = AuthzUtil.toId(Constants.PRINCIPAL_TYPE_GROUP, ctx.tenant().alias, alias);
    getGroup(ctx, id, callback);
};

/**
 * Augments a group object with 2 fields that indicate whether the current user is a member and/or manager
 * of the specified group.
 * @param  {Context}   ctx             The current context.
 * @param  {String}    groupId         The group identifier.
 * @param  {Function}  callback        A standard callback method takes arguments `err` and `group`.
 * @param  {Object}    callback.err    An error object (if any.)
 * @param  {Group}     callback.group  The agumented group object
 */
var getFullGroupProfile = module.exports.getFullGroupProfile = function(ctx, groupId, callback) {
    getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }
        group.isMember = false;
        group.isManager = false;
        if (ctx.user() === null) {
            return callback(false, group);
        }
        AuthzAPI.getAllRoles(ctx.user().id, groupId, function(err, roles) {
            if (err) {
                return callback(err);
            }
            group.isMember = (_.contains(roles, Constants.roles.MEMBER) || _.contains(roles, Constants.roles.MANAGER));
            group.isManager = _.contains(roles, Constants.roles.MANAGER);
            callback(false, group);
        });
    });
};

/**
 * Get all the members of a group. If the group is set as private (or loggedin and the current user is anonymous)
 * this will return a 401 error.
 *
 * @param  {Context}   ctx                     The current execution context.
 * @param  {String}    groupId                 An identifier for a group. ex: g:cam-oae-team
 * @param  {String}    start                   The principalId that comes just before the first principal you wish to have in your results.
 * @param  {Number}    limit                   The number of members you wish to retrieve.
 * @param  {Function}  callback                Standard callback method that has an error if it occurs and an array of the direct members of a group.
 * @param  {Object}    callback.err            An error object (if any.)
 * @param  {User[]}    callback.members        An array of the direct members of the group
 */
var getGroupMembers = module.exports.getGroupMembers = function(ctx, groupId, start, limit, callback) {
    limit = limit || 10;

    var validator = new Validator();
    validator.check(groupId, {'code': 400,'msg': 'An invalid group id was specified'}).isGroupId();
    validator.check(limit, {'code': 400, 'msg': 'limit should be a positive integer'}).isInt();
    validator.check(limit, {'code': 400, 'msg': 'limit should be a positive integer'}).min(1);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure that this group exists.
    getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        var getMembers = function() {
            AuthzAPI.getAuthzMembers(groupId, start, limit, function(err, members) {
                if (err) {
                    return callback(err);
                }

                var memberIds = _.map(members, function(member){ return member.id; });
                PrincipalsUtil.getPrincipals(ctx, memberIds, function(err, memberProfiles) {
                    if (err) {
                        return callback(err);
                    }

                    var memberList = [];
                    for (var m = 0; m < members.length; m++) {
                        var member = members[m].id;
                        if (memberProfiles[member]) {
                            memberList.push({
                                'profile': memberProfiles[member],
                                'role': members[m].role
                            });
                        }
                     }
                    callback(null, memberList);
                });
            });
        };

        if (ctx.user() === null && (group.visibility === Visibility.LOGGEDIN || group.visibility === Visibility.PRIVATE)) {
            return callback({'code': 401, 'msg': 'You need to log in to see the members of this group'});
        } else if (group.visibility === Visibility.PRIVATE) {
            // Check if the current user is a member.
            AuthzAPI.hasAnyRole(ctx.user().id, group.id, function(err, isMember) {
                if (err) {
                    return callback(err);
                }
                if (!isMember) {
                    return callback({'code': 401, 'msg': 'Only members of this group can see the memberlist.'});
                } else {
                    getMembers();
                }
             });
        } else {
            getMembers();
        }
    });
};

/**
 * Gets all the groups a principal (both user or groups) is a member of. This includes all group ancestors to which the user is indicrectly
 * a member.
 *
 * @param  {Context}     ctx                     The current exectution context.
 * @param  {String}      principalId             The principal to retrieve all the groups for
 * @param  {String}      start (NOT IMPLEMENTED) The principalId that comes just before the first principal you wish to have in your results.
 * @param  {Number}      limit (NOT IMPLEMENTED) The number of parent principals you wish to retrieve (default: 10)
 * @param  {Function}    callback                Standard callback method invoked when the process completes takes arguments `err` and `groups`
 * @param  {Object}      callback.err            An error that occured, if any
 * @param  {Group[]}     callback.groups         An (inconsistently ordered) array of groups to which the user belongs, either directly or indirectly
 */
var memberOf = module.exports.memberOf = function(ctx, principalId, start, limit, callback) {
    // Anonymous isn't member of any groups.
    if (principalId === null) {
        return callback(false, []);
    }

    AuthzAPI.getPrincipalMemberships(principalId, function(err, groups) {
        if (err) {
            return callback(err);
        }

        var startIndex = 0;
        if (start) {
            startIndex = _.indexOf(groups, start);
        }
        PrincipalsUtil.getPrincipals(ctx, groups.slice(start, start + limit), function(err, principalHash) {
            if (err) {
                return callback(err);
            }
            var ids = _.keys(principalHash);
            var results = [];
            for (var i = 0, j = ids.length; i < j; i++) {
                results.push(principalHash[ids[i]]);
            }
            callback(false, results);
        });
    });
};

/**
 * Set, update or remove the role for group members.
 *
 * @param  {Context}     ctx             The current execution context
 * @param  {String}      groupId         The identifier of a group. ex: g:cam:oae-team
 * @param  {Object}      members         Object where the keys represent the principal ids which should be updated/added/removed. The value is a string representing the new role. If false is passed in, the membership for that principal will be removed e.g. {'user1': 'manager', 'user2': 'viewer', 'user3': false}
 * @param  {Function}    callback        A function executed when the process has completed takes arguments `err` and `added`
 * @param  {Object}      callback.err    The error that occured, if any
 */
var setGroupMembers = module.exports.setGroupMembers = function(ctx, groupId, members, callback) {
    callback = callback || function() {};
    members = members || {};

    // Validation
    var principals = _.keys(members);
    var validator = new Validator();
    validator.check(groupId, {'code': 400, 'msg': 'Invalid groupId specified'}).isGroupId();
    validator.check(principals.length, {'code': 400, 'msg': 'You should specify at least 1 user/group to set content permissions on'}).min(1);
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to create a group'}).isLoggedInUser(ctx);
    for (var i = 0; i < principals.length;i++) {
        validator.check(principals[i], {'code': 400, 'msg': 'You cannot make the group a member of itself'}).not(groupId);
        validator.check(principals[i], {'code': 400, 'msg': 'Invalid principal specified as member for this group.'}).isPrincipalId();
        validator.check(members[principals[i]], {'code': 400, 'msg': 'Invalid principal specified as member for this group.'}).isValidRoleChange();
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if the group exists and whether or not we have access to edit.
    canManage(ctx, groupId, function(err, canManage) {
        if (err) {
            return callback(err);
        } else if (!canManage) {
            return callback({'code': 401, 'msg': 'Permission denied.'});
        }
        _setGroupMembers(ctx, groupId, members, callback);
    });
};

/**
 * Create a new group within this tenant.
 *
 * @param  {Context}   ctx             The current execution context
 * @param  {String}    alias           The alias for this group. This will be prefixed with 'g:tenantId:' to construct the group id. The only requirement for this parameter is that it doesn't contain any colons (:).
 * @param  {String}    name            The name for this group. This will be stemmed down to something that we can use in Cassandra and prefixed with g:tenant.alias:
 * @param  {String}    description     A description for this group.
 * @param  {String}    visibility      The visibility that should be set for this group. If left undefined, it defaults to public. Valid values are: public, loggedin or private
 * @param  {String}    joinable        Whether or not this group can be joined by people. One of 'yes', 'no' or 'request'.
 * @param  {Object}    members         A hash where each key is a principal id and the value is one of 'manager', 'member' or false. If the value is set to false, the principal will be removed from the group.
 * @param  {Object}    otherValues     A hash of optional other values.
 * @param  {Function}  callback        A function invoked when the process is complete takes arguments `err` and `group`
 * @param  {Object}    callback.err    An error that occured, if any. It contains a code suitable as http statuscode and a corresponding message.
 * @param  {Group}     callback.group  The group created.
 */
var createGroup = module.exports.createGroup = function(ctx, alias, name, description, visibility, joinable, members, otherValues, callback) {
    callback = callback || function() {};

    // Use an empty description if no description has been provided
    description = description || '';
    // Setting visibility to public if none is set.
    visibility = visibility || Visibility.PUBLIC;
    joinable = joinable || Joinable.YES;

    // Parameter validation
    var validator = new Validator();
    validator.check(alias, {'code': 400, 'msg': 'You need to provide an alias for this group.'}).notEmpty();
    validator.check(alias, {'code': 400, 'msg': 'An alias cannot contain colons (:).'}).notContains(':');
    validator.check(name, {'code': 400, 'msg': 'You need to provide a name for this group.'}).notEmpty();
    validator.check(visibility, {'code': 400, 'msg': 'The visibility setting must be one of: ' + _.values(Visibility)}).isIn(_.values(Visibility));
    validator.check(joinable, {'code': 400, 'msg': 'The joinable setting must be one of: ' + _.values(Joinable)}).isIn(_.values(Joinable));
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to create a group'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Generate the group id.
    var tenant = ctx.tenant();
    var id = AuthzUtil.toId(Constants.PRINCIPAL_TYPE_GROUP, tenant.alias, alias);

    canCreateGroup(ctx, id, function(err) {
        if (!err) {
            // Create the group.
            Cassandra.runQuery('INSERT INTO Principals (principalId, alias, tenant, name, description, visibility, joinable) VALUES (?, ?, ?, ?, ?, ?, ?) USING CONSISTENCY QUORUM',
                [id, alias, tenant.alias, name, description, visibility, joinable], function (err) {
                if (err) {
                    return callback(err);
                }
                var currentUser = getUserId(ctx);
                // Immediately add the current user as a manager
                members[currentUser] = Constants.roles.MANAGER;
                _setGroupMembers(ctx, id, members, function(err) {
                    if (err) {
                        return callback(err);
                    }
                    callback(null, id);
                });
            });
        } else {
            return callback(err);
        }
    });
};

/**
 * Update a group's metadata.
 *
 * @param  {Context}         ctx             The current execution context.
 * @param  {String}          groupId         The ID of the group
 * @param  {Object}          profileFields   Object where the keys represent the profile fields that need to be updated and the values represent the new values for those profile fields/ e.g. {'name': 'New group name', 'description': 'New group description', 'visibility': 'private', 'joinable': 'no'}
 * @param  {Function}        callback        Standard callback method takes argument `err`
 * @param  {Obect}           callback.err    An error object (if any).
 */
var updateGroup = module.exports.updateGroup = function(ctx, groupId, profileFields, callback) {
     // Parameter validation
    var fieldNames = profileFields ? _.keys(profileFields) : [];
    var validator = new Validator();
    validator.check(groupId, {'code': 400, 'msg': 'A valid group id must be provided'}).isGroupId();
    validator.check(fieldNames.length, {'code': 400, 'msg': 'You should specify at least one field'}).min(1);
    fieldNames.forEach(function(fieldName) {
        validator.check(fieldName, {'code': 400, 'msg': fieldName + ' is not a recognized group profile field'}).isIn(['name', 'description', 'visibility', 'joinable']);
        if (fieldName === 'visibility') {
            validator.check(profileFields['visibility'], {'code': 400, 'msg': 'The visibility setting must be one of: ' + _.values(Visibility)}).isIn(_.values(Visibility));
        } else if (fieldName === 'joinable') {
            validator.check(profileFields['joinable'], {'code': 400, 'msg': 'The joinable setting must be one of: ' + _.values(Joinable)}).isIn(_.values(Joinable));
        }
    });
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to update a group'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if we can update this group.
    canManage(ctx, groupId, function(err, canManage) {
        if (err) {
            return callback(err);
        }
        if (!canManage) {
            return callback({'code': 401, 'msg': 'Permission denied.'});
        }

        // Update the row in Cassandra.
        var q = Cassandra.constructUpsertCQL('Principals', 'principalId', groupId, profileFields, 'QUORUM');
        if (!q) {
            return callback({'code': 500, 'msg': 'Couldn\'t create query.'});
        }
        Cassandra.runQuery(q.query, q.parameters, function(err) {
            if (err) {
                return callback(err);
            }
            callback();
        });
    });
};

/**
 * Determine whether or not the user in the context is allowed to create the given group.
 * 
 * @param  {Context}    ctx          The current execution context
 * @param  {String}     groupId      The group to check
 * @param  {Function}   callback     The function to invoke when the process completes
 * @param  {Object}     callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var canCreateGroup = function(ctx, groupId, callback) {
    if (getUserId(ctx) !== null) {
        getGroup(ctx, groupId, function(err, group) {
            if (err && err.code === 404) {
                // we're expecting an error, indicating that the group does not exist  
                return callback();
            } else {
                return callback({'code': 400, 'msg': 'This name is not available.'});
            }
        });
    } else {
        return callback({code: 401, msg: 'Cannot create a group anonymously.'});
    }
};


/**
 * Determine whether or not the user in the context can manage a given group.
 *
 * @param  {Context}    ctx                 The current execution context
 * @param  {String}     groupId             The group to check
 * @param  {Function}   callback            The function to invoke when the process completes
 * @param  {Object}     callback.err        If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 * @param  {Boolean}    callback.canManage  Whether or not the user can manage the group.
 */
var canManage = module.exports.canManage = function(ctx, groupId, callback) {
    var currentgetUserId = getUserId(ctx);

    if (currentgetUserId !== null) {
        getGroup(ctx, groupId, function(err, group) {
            if (err) {
                return callback(err);
            }
            _canManage(ctx, groupId, function(err, canManage) {
                if (err) {
                    return callback(err);
                }
                callback(null, canManage);
            });
        });
    } else {
        return callback({code: 401, msg: 'Permission denied'});
    }
};

/**
 * Internal function that checks whether or not the current user can manage a group. This function assumes that
 * the passed in groupId actually exists
 *
 * @param  {Context}     ctx                 The current execution context.
 * @param  {String}      groupId             The id of the group.
 * @param  {Function}    callback            Callback method. takes arguments `err` and `canManage`
 * @param  {Object}      callback.err        If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 * @param  {Boolean}     callback.canManage  Whether or not the user can manage the group.
 */
var _canManage = function(ctx, groupId, callback) {
    AuthzAPI.hasRole(getUserId(ctx), groupId, Constants.roles.MANAGER, callback);
};

/**
 * Internal function used to update, add or remove the role of a set of principals in a group.
 * This function will assume that the group exists and that the current user is a manager of the group
 *
 * @param  {Context}     ctx             The user Context
 * @param  {String}      groupId         The ID of the group to which the members should be added
 * @param  {Object}      members         Object where the keys represent the principal ids which should be updated/added/removed. The value is a string representing the new role. If false is passed in, the membership for that principal will be removed e.g. {'user1': 'manager', 'user2': 'viewer', 'user3': false}
 * @param  {Function}    callback        The Function called when the process is finished takes arguments `err` 
 * @param  {Object}      callback.err    An error that occurred, if any
 */
var _setGroupMembers = function(ctx, groupId, members, callback) {
    // Check if all the principals exist.
    // Check if all of the provided principals exist
    PrincipalsUtil.getPrincipals(ctx, _.keys(members), function(err, principals) {
        if (err) {
            return callback(err);
        }

        AuthzAPI.updateRoles(groupId, members, callback);
    });
};

/**
 * Get the current user UUID from the context, if any
 * 
 * @param  {Context} ctx     The user context
 * @return {String}          The UUID of the user in the context. Returns null if there is no active user (i.e., anonymous)
 */
var getUserId = function(ctx) {
    var user = ctx.user();
    return user ? user.id : null;
};
