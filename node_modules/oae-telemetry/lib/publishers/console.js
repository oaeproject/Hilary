/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var TelemetryAPI = require('oae-telemetry');
var Config = require('../../../../config').config;
var log = require('oae-logger').logger('telemetry-console');


/**
 * Starts monitoring redis and logs the telemetry data on the console.
 */
module.exports.init = function() {
    setInterval(showTelemetry, Config.telemetry.console.interval);
};

/**
 * Displays the telemetry data on the console.
 *
 * @api private
 */
var showTelemetry = function() {
    showStats(TelemetryAPI.getTelemetryData().counts);
    showStats(TelemetryAPI.getTelemetryData().histograms);
};

/**
 * Display either a count or a histogram.
 * After displaying the stats will be reset.
 *
 * @param  {Object} data The data to display
 * @api private
 */
var showStats = function(data) {
    var modules = Object.keys(data);
    for (var i = 0; i < modules.length; i++) {
        var module = modules[i];

        var keys = Object.keys(data[module]);
        for (var j = 0; j < keys.length;j++) {
            var key = keys[j];

            var val = data[module][key];
            if (Array.isArray(val) && val.length > 0) {
                val = val.join(', ');
                log().info('%s %s %s', padString(module, ' ', 20), padString(key, ' ', 30), val);
                data[module][key] = [];
            } else if (val > 0) {
                log().info('%s %s %s', padString(module, ' ', 20), padString(key, ' ', 30), val);
                data[module][key] = 0;
            }
        }
    }
};

/**
 * Rightpads a string with `char` untill the specified `length` is reached.
 *
 * @param  {String} str     The string to pad
 * @param  {String} char    The character to pad with.
 * @param  {Number} length  The total number of characters this string should have
 * @return {String}         The padded string.
 * @api private
 */
var padString = function(str, char, length) {
    while (str.length < length) {
        str = str + char;
    }
    return str;
};
