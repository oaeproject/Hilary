/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var RestAPI = require('oae-rest');

var ConfigAPI = require('oae-config');

/**
 * Update the configuration as described by @see RestAPI.Config#updateConfig. In addition, this test utility will bind
 * and listen on an event that waits for the local configuration to be refreshed from cassandra. This is useful to
 * synchronize with the asynchronous nature of this operation so you can continue tests after everything is in sync.
 *
 * For method parameter descriptions, @see RestAPI.Config#updateConfig
 */
var updateConfigAndWait = module.exports.updateConfigAndWait = function(restCtx, tenantAlias, configField, configValue, callback) {

    var calledBack = false;
    var requestReturned = false;
    var configRefreshed = false;

    var responseArgs = null;

    /*!
     * Monitors the result of both the updateConfig web request and the internal "config refreshed" event
     * to only callback when both the request has executed completely and the asynchronous update process
     * has completed.
     *
     * @param  {Object}     err     An error that occured in either request
     */
    var _callback = function(err) {
        if (calledBack) {
            // Already called back, do nothing
            return;
        }

        if (err) {
            // Received an error from either rest endpoint or internal refresh, throw the error
            calledBack = true;
            return callback(err);
        }

        if (requestReturned && configRefreshed) {
            // Call the callback with the arguments from the web request
            calledBack = true;
            return callback.apply(this, responseArgs);
        }
    };

    RestAPI.Config.updateConfig(restCtx, tenantAlias, configField, configValue, function(err) {
        if (err) {
            // Remove this listener, since it may not be invoked and "leak" due to this error
            ConfigAPI.removeListener('update', _updateListener);
            return _callback(err);
        }

        responseArgs = arguments;
        requestReturned = true;
        _callback();
    });

    /*!
     * Handles the 'update' config event, simply notifying the `_callback` that the config refreshed.
     *
     * @see ConfigAPI events for parameter description
     */
    var _updateListener = function(tenantAlias) {
        configRefreshed = true;
        _callback();
    };

    ConfigAPI.once('update', _updateListener);

};