/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var LDAPStrategy = require('passport-ldapauth').Strategy;

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;


module.exports = function() {
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias) {
        return AuthenticationConfig.getValue(tenantAlias, 'ldap', 'enabled');
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant) {
        // Server config
        var url = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'url');
        var adminDn = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'adminDn');
        var adminPassword = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'adminPassword');
        var searchBase = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'searchBase');
        var searchFilter = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'searchFilter');

        // The LDAP Attribute names
        var mapDisplayName = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'mapDisplayName');
        var mapExternalId = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'mapExternalId');
        var mapEmail = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'mapEmail');
        var mapLocale = AuthenticationConfig.getValue(tenant.alias, 'ldap', 'mapLocale');

        if (!mapExternalId || !mapDisplayName) {
            log().error('The LDAP externalId and displayName attributes must be configured in order for this strategy to be enabled.');
            return false;
        }

        var options = {
            'server': {
                'url': url,
                'adminDn': adminDn,
                'adminPassword': adminPassword,
                'searchBase': searchBase,
                'searchFilter': searchFilter
            }
        };
        var passportStrategy = new LDAPStrategy(options, function(profile, done) {
            log().trace({
                'tenant': tenant,
                'profile': profile
            }, 'Received LDAP authentication callback.');

            // Re-use the username as the external id
            var externalId = profile[mapExternalId];
            var displayName = profile[mapDisplayName];
            var opts = {};
            if (mapEmail) {
                opts.email = profile[mapEmail];
                if (opts.email) {
                    opts.emailVerified = true;
                }
            }
            if (mapLocale) {
                opts.locale = profile[mapLocale];
            }

            var ctx = new Context(tenant, null);
            AuthenticationAPI.getOrCreateUser(ctx, AuthenticationConstants.providers.LDAP, externalId, null, displayName, opts, done);
        });
        return passportStrategy;
    };

    // Register our strategy.
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.LDAP, strategy);
};
