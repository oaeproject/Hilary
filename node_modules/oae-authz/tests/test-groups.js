/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');

describe('Authz-Groups', function() {

    /**
     * Creates a batch of userUuids for the given tenant
     *
     * @param  {String} tenantId    The tenant for which to generate the users.
     * @param  {Number} num         The number of tenants to generate
     * @return {String[]}           An array of user uuid's that were generated
     */
    var createUserUuids = function(tenantId, num) {
        var uuids = [];
        for (var i = 0; i < num; i++) {
            uuids.push(AuthzUtil.toUuid('u', tenantId, i));
        }
        return uuids;
    };

    /**
     * Verifies using assertions that the user does not have any membership in the provided group.
     *
     * @param {String}      groupUuid    The UUID of the group to check
     * @param {String}      memberUuid   The UUID of the principal to check
     * @param {Function()}  callback     Invoked when the checks are complete
     */
    var verifyNoBidirectionalGroupMembership = function(groupUuid, memberUuid, callback) {
        AuthzAPI.getRole(memberUuid, groupUuid, function(err, role) {
            assert.ok(!err);
            assert.ok(!role);

            AuthzAPI.getGroupMembers(groupUuid, null, null, function(err, members) {
                assert.ok(!err);
                assert.ok(members);
                
                var hasMember = false;
                for (var i = 0; i < members.length; i++) {
                    if (members[i] === memberUuid) {
                        hasMember = true;
                    }
                }

                assert.ok(!hasMember);

                callback();
            });
        });
    };

    /**
     * Verifies using asertions that the user has membership in the provided group both by group memberships and
     * role checks.
     *
     * @param {String}      groupUuid    The UUID of the group to check
     * @param {String}      memberUuid   The UUID of the principal to check
     * @param {Function()}  callback     Invoked when the checks are complete
     */
    var verifyBidirectionalGroupMembership = function(groupUuid, memberUuid, role, callback) {
        AuthzAPI.hasRole(memberUuid, groupUuid, role, function(err, hasRole) {
            assert.ok(!err);
            assert.ok(hasRole);

            // also verify from the group membership
            AuthzAPI.getGroupMembers(groupUuid, null, null, function(err, members) {
                assert.ok(!err);
                assert.ok(members);
                
                var hasMember = false;
                members.forEach(function(member) {
                    if (member.uuid === memberUuid) {
                        hasMember = true;
                    }
                });

                assert.ok(hasMember);

                callback();
            });
        });
    };

    /**
     * Make a single membership change object to apply to a group membership.
     *
     * @param  {String} principalUuid   The principalUuid whose membership to change
     * @param  {String} role            The role to change to
     * @return {Object}                 The change JSON Object to apply to the group
     */
    var makeMembershipChange = function(principalUuid, role) {
        var change = {};
        change[principalUuid] = role;
        return change;
    };
    
    describe('#addGroupMember()', function() {
        it('verify invalid group uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('not a valid uuid', makeMembershipChange('u:cam:mrvisser', 'member'), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-group group uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('u:cam:mrvisser', makeMembershipChange('u:cam:mrvisser', 'member'), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify invalid member uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', makeMembershipChange('not a valid uuid', 'member'), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal member uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', makeMembershipChange('c:content:uuid', 'member'), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify null role error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', makeMembershipChange('u:cam:mrvisser', null), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify undefined role error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', makeMembershipChange('u:cam:mrvisser', undefined), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify user gets added to group', function(callback) {
            var groupUuid = 'g:agm-add-user:oae-team';
            var memberUuid = 'u:agm-add-user:mrvisser';
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, 'member'), function(err) {
                assert.ok(!err);
                verifyBidirectionalGroupMembership(groupUuid, memberUuid, 'member', callback);
            });
        });

        it('verify update user membership role', function(callback) {
            var groupUuid = 'g:agm-update-user:oae-team';
            var memberUuid = 'u:agm-update-user:mrvisser';
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, 'member'), function(err) {
                assert.ok(!err);
                verifyBidirectionalGroupMembership(groupUuid, memberUuid, 'member', function() {
                    AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, 'manager'), function(err) {
                        assert.ok(!err);
                        verifyBidirectionalGroupMembership(groupUuid, memberUuid, 'manager', function() {
                            // also ensure that the number of members in the group is still 1
                            AuthzAPI.getGroupMembers(groupUuid, null, null, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.length, 1);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify group gets added to group', function(callback) {
            var groupUuid = 'g:agm-add-group:oae-team';
            var memberUuid = 'g:agm-add-group:mrvisser';
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, 'member'), function(err) {
                assert.ok(!err);

                // verify membership exists VIA roles api (bottom-to-top association)
                AuthzAPI.hasRole(memberUuid, groupUuid, 'member', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(hasRole);

                    // verify membership exists VIA groups api (top-to-bottom association)
                    AuthzAPI.getGroupMembers(groupUuid, null, null, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.length, 1);
                        callback();
                    });
                });
            });
        });
    });

    describe('#removeGroupMember()', function() {

        it('verify invalid group uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('not a valid uuid', makeMembershipChange('u:cam:mrvisser', false), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-group group uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('u:cam:mrvisser', makeMembershipChange('u:cam:mrvisser', false), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify invalid member uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', makeMembershipChange('not a valid uuid', false), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal member uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', makeMembershipChange('c:content:uuid', false), function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify user gets removed from group', function(callback) {
            var groupUuid = 'g:rgm-remove-user:oae-team';
            var memberUuid = 'u:rgm-remove-user:mrvisser';

            // 1. add the user
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, 'member'), function(err) {
                assert.ok(!err);

                // 2. sanity check the membership
                verifyBidirectionalGroupMembership(groupUuid, memberUuid, 'member', function() {

                    // 3. remove the user
                    AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, false), function(err) {
                        assert.ok(!err);

                        // verify they are removed
                        verifyNoBidirectionalGroupMembership(groupUuid, memberUuid, callback);
                    });
                });
            });
        });

        it('verify group gets removed from group', function(callback) {
            var groupUuid = 'g:rgm-remove-user:oae-team';
            var memberUuid = 'g:rgm-remove-user:mrvisser';

            // 1. add the user
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, 'member'), function(err) {
                assert.ok(!err);

                // 2. sanity check user is added
                verifyBidirectionalGroupMembership(groupUuid, memberUuid, 'member', function() {

                    // 3. remove the user
                    AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, false), function(err) {
                        assert.ok(!err);

                        // 4. verify the user is removed
                        verifyNoBidirectionalGroupMembership(groupUuid, memberUuid, callback);
                    });
                });
            });
        });
    });

    describe('#applyGroupMembershipChanges()', function() {

        it('verify invalid group uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('not a valid uuid', {'u:cam:mrvisser': 'member'}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-group group uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('u:cam:mrvisser', {'u:cam:mrvisser': 'member'}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify invalid member uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', {'not a valid uuid': 'member'}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal member uuid error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', {'c:sakai:mrvisser': 'member'}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify null role error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', {'u:cam:mrvisser': null}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify undefined role error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', {'u:cam:mrvisser': undefined}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify blank role error', function(callback) {
            AuthzAPI.applyGroupMembershipChanges('g:sakai:oae-team', {'u:cam:mrvisser': '  '}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify general functionality', function(callback) {
            var groupUuid = 'g:agmc-general:oae-team';
            var mrvisserUuid = 'u:agmc-general:mrvisser';
            var simongUuid = 'u:agmc-general:simong';
            var bertUuid = 'u:agmc-general:physx';
            var nicoUuid = 'u:agmc-general:nicolaas';

            var changes = {};
            changes[mrvisserUuid] = 'member';
            changes[simongUuid] = 'manager';
            changes[bertUuid] = 'manager';
            changes[nicoUuid] = 'member';

            AuthzAPI.applyGroupMembershipChanges(groupUuid, changes, function(err) {
                assert.ok(!err);
                verifyBidirectionalGroupMembership(groupUuid, mrvisserUuid, 'member', function() {
                    verifyBidirectionalGroupMembership(groupUuid, simongUuid, 'manager', function() {
                        verifyBidirectionalGroupMembership(groupUuid, bertUuid, 'manager', function() {
                            verifyBidirectionalGroupMembership(groupUuid, nicoUuid, 'member', function() {

                                // now inverse the group roles and check
                                changes[mrvisserUuid] = 'manager';
                                changes[simongUuid] = 'member';
                                changes[bertUuid] = 'member';
                                changes[nicoUuid] = 'manager';

                                AuthzAPI.applyGroupMembershipChanges(groupUuid, changes, function(err) {
                                    assert.ok(!err);

                                    verifyBidirectionalGroupMembership(groupUuid, mrvisserUuid, 'manager', function() {
                                        verifyBidirectionalGroupMembership(groupUuid, simongUuid, 'member', function() {
                                            verifyBidirectionalGroupMembership(groupUuid, bertUuid, 'member', function() {
                                                verifyBidirectionalGroupMembership(groupUuid, nicoUuid, 'manager', function() {

                                                    // now remove mrvisser and nico, while setting bert and simon back to manager
                                                    changes[mrvisserUuid] = false;
                                                    changes[simongUuid] = 'manager';
                                                    changes[bertUuid] = 'manager';
                                                    changes[nicoUuid] = false;

                                                    AuthzAPI.applyGroupMembershipChanges(groupUuid, changes, function(err) {
                                                        assert.ok(!err);
                                                        verifyNoBidirectionalGroupMembership(groupUuid, mrvisserUuid, function() {
                                                            verifyNoBidirectionalGroupMembership(groupUuid, nicoUuid, function() {
                                                                verifyBidirectionalGroupMembership(groupUuid, simongUuid, 'manager', function() {
                                                                    verifyBidirectionalGroupMembership(groupUuid, bertUuid, 'manager', callback);
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#getGroupMembers()', function() {

        it('verify invalid group uuid error', function(callback) {
            AuthzAPI.getGroupMembers('not a valid uuid', null, null, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-group group uuid error', function(callback) {
            AuthzAPI.getGroupMembers('u:cam:mrvisser', null, null, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-numeric limit error', function(callback) {
            AuthzAPI.getGroupMembers('g:cam:mrvisser', null, 'not a number', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify get user from group', function(callback) {
            var groupUuid = 'g:ggm-get:oae-team';
            var memberUuid = 'u:ggm-get:mrvisser';
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(memberUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.getGroupMembers(groupUuid, null, null, function(err, members) {
                    assert.ok(!err);
                    assert.ok(members);
                    assert.ok(members.length, 1);
                    assert.equal(members[0].uuid, memberUuid);
                    callback();
                });
            });
        });

        it('verify user paging', function(callback) {
            var groupUuid = 'g:ggm-paging:oae-team';
            var memberUuids = createUserUuids('ggm-paging', 11);

            var changes = {};
            for (var i = 0; i < memberUuids.length; i++) {
                changes[memberUuids[i]] = 'member';
            }

            AuthzAPI.applyGroupMembershipChanges(groupUuid, changes, function(err) {
                assert.ok(!err);
                AuthzAPI.getGroupMembers(groupUuid, null, 10, function(err, members) {
                    assert.ok(!err);
                    assert.equal(members.length, 10);

                    AuthzAPI.getGroupMembers(groupUuid, members[9].uuid, 10, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.length, 1);
                        callback();
                    });
                });
            });
        });
    });

    describe('#getMemberOf()', function() {

        it('verify invalid principal uuid', function(callback) {
            AuthzAPI.getMemberOf('not a uuid', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal uuid', function(callback) {
            AuthzAPI.getMemberOf('c:cam:Foo.docx', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify empty membership is empty array', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'gmo-empty', 'mrvisser');
            AuthzAPI.getMemberOf(userUuid, function(err, groupUuids) {
                assert.ok(!err);
                assert.ok(groupUuids);
                assert.equal(groupUuids.length, 0);
                callback();
            });
        });

        it('verify single group membership', function(callback) {
            var groupUuid = AuthzUtil.toUuid('g', 'gmo-single', 'oae-team');
            var userUuid = AuthzUtil.toUuid('u', 'gmo-single', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.getMemberOf(userUuid, function(err, groupUuids) {
                    assert.ok(!err);
                    assert.ok(groupUuids);
                    assert.equal(groupUuids.length, 1);
                    assert.equal(groupUuids[0], groupUuid);
                    callback();
                });
            });
        });

        it('verify two direct group membership', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'gmo-two', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'gmo-two', 'oae-backend-team');
            var userUuid = AuthzUtil.toUuid('u', 'gmo-two', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeMembershipChange(userUuid, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.getMemberOf(userUuid, function(err, groupUuids) {
                        assert.ok(!err);
                        assert.ok(groupUuids);
                        assert.equal(groupUuids.length, 2);
                        assert.ok(_.include(groupUuids, groupUuid1));
                        assert.ok(_.include(groupUuids, groupUuid2));
                        callback();
                    });
                });
            });
        });

        it('verify simple group hierarchy', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'gmo-hier', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'gmo-hier', 'oae-backend-team');
            var nonMemberGroupUuid3 = AuthzUtil.toUuid('g', 'gmo-hier', 'non-member');
            var userUuid = AuthzUtil.toUuid('u', 'gmo-hier', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(nonMemberGroupUuid3, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeMembershipChange(groupUuid1, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.getMemberOf(userUuid, function(err, groupUuids) {
                            assert.ok(!err);
                            assert.ok(groupUuids);
                            assert.equal(groupUuids.length, 2);
                            assert.ok(_.include(groupUuids, groupUuid1));
                            assert.ok(_.include(groupUuids, groupUuid2));
                            callback();
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'gmo-circ', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'gmo-circ', 'oae-backend-team');
            var groupUuid3 = AuthzUtil.toUuid('g', 'gmo-circ', 'oae-ui-team');
            var userUuid = AuthzUtil.toUuid('u', 'gmo-circ', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeMembershipChange(groupUuid1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.applyGroupMembershipChanges(groupUuid3, makeMembershipChange(groupUuid2, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(groupUuid3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.getMemberOf(userUuid, function(err, groupUuids) {
                                assert.ok(!err);
                                assert.ok(groupUuids);
                                assert.equal(groupUuids.length, 3);
                                assert.ok(_.include(groupUuids, groupUuid1));
                                assert.ok(_.include(groupUuids, groupUuid2));
                                assert.ok(_.include(groupUuids, groupUuid3));
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#isMemberOf()', function() {
        it('verify invalid principal uuid', function(callback) {
            AuthzAPI.isMemberOf('not a uuid', 'g:oae:mrvisser', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-principal uuid', function(callback) {
            AuthzAPI.isMemberOf('c:cam:Foo.docx', 'g:oae:mrvisser', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify invalid group uuid error', function(callback) {
            AuthzAPI.isMemberOf('u:oae:mrvisser', 'not a uuid', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('verify non-group group uuid error', function(callback) {
            AuthzAPI.isMemberOf('u:oae:mrvisser', 'u:oae:mrvisser', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });


        it('verify empty membership', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'imo-empty', 'mrvisser');
            AuthzAPI.isMemberOf(userUuid, 'g:oae:oae-team', function(err, isMemberOf) {
                assert.ok(!err);
                assert.ok(!isMemberOf);
                callback();
            });
        });

        it('verify single group membership', function(callback) {
            var groupUuid = AuthzUtil.toUuid('g', 'imo-single', 'oae-team');
            var userUuid = AuthzUtil.toUuid('u', 'imo-single', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.isMemberOf(userUuid, groupUuid, function(err, isMemberOf) {
                    assert.ok(!err);
                    assert.ok(isMemberOf);
                    callback();
                });
            });
        });

        it('verify two direct group membership', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'imo-two', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'imo-two', 'oae-backend-team');
            var userUuid = AuthzUtil.toUuid('u', 'imo-two', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeMembershipChange(userUuid, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.isMemberOf(userUuid, groupUuid1, function(err, isMemberOf) {
                        assert.ok(!err);
                        assert.ok(isMemberOf);
                        AuthzAPI.isMemberOf(userUuid, groupUuid2, function(err, isMemberOf) {
                            assert.ok(!err);
                            assert.ok(isMemberOf);
                            callback();
                        });
                    });
                });
            });
        });

        it('verify simple group hierarchy', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'gmo-hier', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'gmo-hier', 'oae-backend-team');
            var nonMemberGroupUuid3 = AuthzUtil.toUuid('g', 'gmo-hier', 'non-member');
            var userUuid = AuthzUtil.toUuid('u', 'gmo-hier', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(nonMemberGroupUuid3, 'member'), function(err) {
                    AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeMembershipChange(groupUuid1, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.isMemberOf(userUuid, groupUuid1, function(err, isMemberOf) {
                            assert.ok(!err);
                            assert.ok(isMemberOf);
                            AuthzAPI.isMemberOf(userUuid, groupUuid2, function(err, isMemberOf) {
                                assert.ok(!err);
                                assert.ok(isMemberOf);
                                AuthzAPI.isMemberOf(userUuid, nonMemberGroupUuid3, function(err, isMemberOf) {
                                    assert.ok(!err);
                                    assert.ok(!isMemberOf);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'gmo-circ', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'gmo-circ', 'oae-backend-team');
            var groupUuid3 = AuthzUtil.toUuid('g', 'gmo-circ', 'oae-ui-team');
            var userUuid = AuthzUtil.toUuid('u', 'gmo-circ', 'mrvisser');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeMembershipChange(groupUuid1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.applyGroupMembershipChanges(groupUuid3, makeMembershipChange(groupUuid2, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeMembershipChange(groupUuid3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.isMemberOf(userUuid, groupUuid1, function(err, isMemberOf) {
                                assert.ok(!err);
                                assert.ok(isMemberOf);
                                AuthzAPI.isMemberOf(userUuid, groupUuid2, function(err, isMemberOf) {
                                    assert.ok(!err);
                                    assert.ok(isMemberOf);
                                    AuthzAPI.isMemberOf(userUuid, groupUuid3, function(err, isMemberOf) {
                                        assert.ok(!err);
                                        assert.ok(isMemberOf);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
