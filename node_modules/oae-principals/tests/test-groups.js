/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Tenant = require('oae-tenants/lib/model').Tenant;
var api = require('oae-principals');
var rolesUtil = require('oae-roles/lib/util');
var permissionsAPI = require('oae-permissions/lib/api');

var tenant = new Tenant('cam', 'Cambridge', 'Cambridge University', 3000);

var createPrincipals = function(test, asUser, callback) {
    var r = Math.floor(Math.random()*100000);
    var principals = 0;
    var createPrincipalDone = function(err) {
        if (err) {
            test.fail("ERROR: " + err.code + ", msg: " + err.msg);
            return test.done();
        }

        principals++;
        if (principals === 12) {
            callback(r);
        }
    };

    api.createGroup(asUser, tenant, 'oae-team-' + r, 'oae-team-' + r, createPrincipalDone);
    api.createGroup(asUser, tenant, 'backend-team-' + r, 'backend-team-' + r, createPrincipalDone);
    api.createGroup(asUser, tenant, 'ui-team-' + r, 'ui-team-' + r, createPrincipalDone);
    api.createGroup(asUser, tenant, 'canadian-' + r, 'canadian-' + r, createPrincipalDone);
    api.createGroup(asUser, tenant, 'not-canadian-' + r, 'not-canadian-' + r, createPrincipalDone);
    api.createGroup(asUser, tenant, 'belgian-' + r, 'belgian-' + r, createPrincipalDone);
    api.createGroup(asUser, tenant, 'west-flemish-' + r, 'west-flemish' + r, createPrincipalDone);
    api.createGroup(asUser, tenant, 'east-flemish-' + r, 'east-flemish' + r, createPrincipalDone);

    api.createUser(tenant, 'bert-' + r, 'password', 'public', 'Bert', 'Pareyn', 'bp323', createPrincipalDone);
    api.createUser(tenant, 'branden-' + r, 'password', 'public', 'Branden', 'Visser', 'mrvisser', createPrincipalDone);
    api.createUser(tenant, 'nicolaas-' + r, 'password', 'public', 'Nicolaas', 'Matthijs', 'nicolaas', createPrincipalDone);
    api.createUser(tenant, 'simon-' + r, 'password', 'public', 'Simon', 'Gaeremynck', 'simong', createPrincipalDone);
};

var createOAEStructure = function(test, asUser, callback) {
    createPrincipals(test, asUser, function(id){
        var checks = 0;
        var principalsAdded = function(err) {
            if (err) {
                test.fail("ERROR: " + err.code + ", msg: " + err.msg);
                return test.done();
            }
            checks++;
            if (checks === 8) {
                callback(id);
            }
        };
        api.addGroupMembers(asUser, 'g:cam:canadian-' + id, ['u:cam:branden-' + id], 'member', principalsAdded);
        api.addGroupMembers(asUser, 'g:cam:not-canadian-' + id, ['u:cam:simon-' + id], 'member', principalsAdded);
        api.addGroupMembers(asUser, 'g:cam:belgian-' + id, ['g:cam:west-flemish-' + id, 'g:cam:east-flemish-' + id], 'member', principalsAdded);
        api.addGroupMembers(asUser, 'g:cam:west-flemish-' + id, ['u:cam:bert-' + id], 'member', principalsAdded);
        api.addGroupMembers(asUser, 'g:cam:east-flemish-' + id, ['u:cam:nicolaas-' + id], 'member', principalsAdded);
        api.addGroupMembers(asUser, 'g:cam:oae-team-' + id, ['g:cam:backend-team-' + id, 'g:cam:ui-team-' + id], 'member', principalsAdded);
        api.addGroupMembers(asUser, 'g:cam:backend-team-' + id, ['g:cam:canadian-' + id, 'g:cam:not-canadian-' + id], 'member', principalsAdded);
        api.addGroupMembers(asUser, 'g:cam:ui-team-' + id, ['g:cam:belgian-' + id], 'member', principalsAdded);
    });
};

assertGroupMembers = function(test, group_id, expected_members, callback) {
    api.getGroupMembers(group_id, false, null, 1000, function(err, members) {
        test.equal(members.length, expected_members.length, "Expected group '" + group_id + "' to have '" + expected_members.length + "' members.");
        for (var i = 0; i < expected_members.length; i++) {
            var has_principal = true;
            for (var c = 0; c < members.length; c++) {
                if (members[c] === expected_members[i]) {
                    has_principal = true;
                    break;
                }
            }
            test.ok(has_principal, "Group '" + group_id + "' does not contain: " + expected_members[i]);
        }
        callback();
    });
};

assertMemberOf = function(test, principal_id, expected_groups, callback) {
    api.memberOf(principal_id, false, 0, 1000, function(err, groups) {
        test.ok(!err);
        test.equal(groups.length, expected_groups.length, "Expected principal '" + principal_id + "' to have '" + expected_groups.length + "' memberships: " + groups.join(","));
        for (var i = 0; i < expected_groups.length; i++) {
            var has_group = true;
            for (var c = 0; c < groups.length; c++) {
                if (groups[c] === expected_groups[i]) {
                    has_group = true;
                    break;
                }
            }
            test.ok(has_group, "Principal '" + principal_id + "' does not contain: " + expected_groups[i]);
        }
        callback();
    });
};

assertExplodedGroupUsers = function(test, group_id, expected_users, callback) {
    api.getGroupUsers(group_id, function(err, users) {
        if (err) {
            test.fail("ERROR: " + err.code + ", msg: " + err.msg);
            test.done();
        }

        test.equal(users.length, expected_users.length, "Expected principal '" + group_id + "' to have '" + expected_users.length + "' users.");
        for (var i = 0; i < expected_users.length; i++) {
            var has_user = true;
            for (var c = 0; c < users.length; c++) {
                if (users[c] === expected_users[i]) {
                    has_user = true;
                    break;
                }
            }
            test.ok(has_user, "Group '" + group_id + "' does not contain: " + expected_users[i]);
        }
        callback();
    });
};

exports.testSimpleGroupStructure = function(test) {
    api.createUser(tenant, 'test-runner', 'password', 'public', 'Test', 'Runner', 'tr123', function(err) {
        var asUser = rolesUtil.toUuid('u', tenant.alias, 'test-runner');
        createOAEStructure(test, asUser, function(id) {
            // Create the oae-team tree in a way that is NOT topdown or bottomup.
            var memberships = 0;
            var checks = 0;
            var done = function() {
                checks++;
                if (checks === 11) {
                    test.done();
                }
            };

            // The group members should only return the direct children.
            assertGroupMembers(test, 'g:cam:oae-team-' + id, [asUser, 'g:cam:backend-team-' + id, 'g:cam:ui-team-' + id], done);
            assertGroupMembers(test, 'g:cam:backend-team-' + id, [asUser, 'g:cam:canadian-' + id, 'g:cam:not-canadian-' + id], done);
            assertGroupMembers(test, 'g:cam:canadian-' + id, [asUser, 'u:cam:branden-' + id], done);
            assertGroupMembers(test, 'g:cam:not-canadian-' + id, [asUser, 'u:cam:simon-' + id], done);
            assertGroupMembers(test, 'g:cam:belgian-' + id, [asUser, 'g:cam:west-flemish-' + id, 'g:cam:east-flemish-' + id], done);
            assertGroupMembers(test, 'g:cam:west-flemish-' + id, [asUser, 'u:cam:bert-' + id], done);
            assertGroupMembers(test, 'g:cam:east-flemish-' + id, [asUser, 'u:cam:nicolaas-' + id], done);

            // ALL groups should be listed against a principal.
            assertMemberOf(test, 'u:cam:bert-' + id, ['g:cam:oae-team-' + id, 'g:cam:ui-team-' + id, 'g:cam:belgian-' + id, 'g:cam:west-flemish-' + id], done);
            assertMemberOf(test, 'u:cam:nicolaas-' + id, ['g:cam:oae-team-' + id, 'g:cam:ui-team-' + id, 'g:cam:belgian-' + id, 'g:cam:east-flemish-' + id], done);
            assertMemberOf(test, 'u:cam:branden-' + id, ['g:cam:oae-team-' + id, 'g:cam:backend-team-' + id, 'g:cam:not-canadian-' + id], done);
            assertMemberOf(test, 'u:cam:simon-' + id, ['g:cam:oae-team-' + id, 'g:cam:backend-team-' + id, 'g:cam:canadian-' + id], done);
            assertMemberOf(test, asUser, ['g:cam:oae-team-' + id, 'g:cam:ui-team-' + id, 'g:cam:backend-team-' + id, 'g:cam:belgian-' + id,
                'g:cam:west-flemish-' + id, 'g:cam:east-flemish-' + id, 'g:cam:not-canadian-' + id, 'g:cam:not-canadian-' + id], done);
        });
    });
};

exports.testExploding = function(test) {
    api.createUser(tenant, 'test-runner', 'password', 'public', 'Test', 'Runner', 'tr123', function(err) {
        var asUser = rolesUtil.toUuid('u', tenant.alias, 'test-runner');
        createOAEStructure(test, asUser, function(id) {
            var checks = 0;
            var done = function(err) {
                checks++;
                if (checks === 7) {
                    test.done();
                }
            };
            assertExplodedGroupUsers(test, 'g:cam:oae-team-' + id, [asUser, 'u:cam:bert-' + id, 'u:cam:branden-' + id, 'u:cam:nicolaas-' + id, 'u:cam:simon-' + id], done);
            assertExplodedGroupUsers(test, 'g:cam:backend-team-' + id, [asUser, 'u:cam:simon-' + id, 'u:cam:branden-' + id], done);
            assertExplodedGroupUsers(test, 'g:cam:canadian-' + id, [asUser, 'u:cam:branden-' + id], done);
            assertExplodedGroupUsers(test, 'g:cam:not-canadian-' + id, [asUser, 'u:cam:simon-' + id], done);
            assertExplodedGroupUsers(test, 'g:cam:belgian-' + id, [asUser, 'u:cam:bert-' + id, 'u:cam:nicolaas-' + id], done);
            assertExplodedGroupUsers(test, 'g:cam:west-flemish-' + id, [asUser, 'u:cam:bert-' + id], done);
            assertExplodedGroupUsers(test, 'g:cam:east-flemish-' + id, [asUser, 'u:cam:nicolaas-' + id], done);
        });
    });
};

exports.testNoneGroup = function(test) {
    api.getGroup("u:cam:simon", function(err, group) {
        test.equal(err.code, 400);
        test.done();
    });
};

exports.testCreateGroup = function(test) {
    var r = Math.floor(Math.random()*100000000);
    api.createUser(tenant, 'test-runner', 'password', 'public', 'Test', 'Runner', 'tr123', function(err) {
        var asUser = rolesUtil.toUuid('u', tenant.alias, 'test-runner');
        api.createGroup(asUser, tenant, "test-group-" + r, "This is a test group", function(err, group) {
            if (err) {
                test.fail("Should be able to create a simple group.");
            }
            // Should be created.
            test.equal(group, "g:cam:test-group-" + r);

            // Create the same one again, should fail.
            api.createGroup(asUser, tenant, "test-group-" + r, "This is a test group", function(err, group) {
                test.equal(err.code, 400, "Creating a group with the same name as an existing group should fail!");
                test.done();
            });
        });
    });
};

exports.testAddMemberNoAccess = function(test) {
    test.expect(17);

    var tenant = new Tenant('cam-'+new Date().getMilliseconds(), 'Cambridge', 'Cambridge University', 3001);

    // 1. create the users
    api.createUser(tenant, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err) {
        test.ok(!err);

        var mrvisserUuid = rolesUtil.toUuid('u', tenant.alias, 'mrvisser');
        api.createUser(tenant, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err) {
            test.ok(!err);

            var nicoUuid = rolesUtil.toUuid('u', tenant.alias, 'nicolaas');
            api.createUser(tenant, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err) {
                test.ok(!err);

                var simongUuid = rolesUtil.toUuid('u', tenant.alias, 'simong');
                api.createGroup(mrvisserUuid, tenant, 'managed-by-canadians', "Group", function(err, groupUuid) {
                    test.ok(!err);

                    // 2. try and add simong to it with an unprivileged user
                    api.addGroupMember(nicoUuid, groupUuid, simongUuid, 'member', function(err) {
                        test.ok(err);
                        test.equal(err.code, 401);

                        // verify simong was not added
                        api.memberOf(simongUuid, false, null, null, function(err, groupUuids) {
                            test.ok(!err);
                            test.equal(groupUuids.length, 0);

                            // 3. add nico as member, then ensure he still cannot add
                            api.addGroupMember(mrvisserUuid, groupUuid, nicoUuid, 'member', function(err) {
                                test.ok(!err);

                                api.addGroupMember(nicoUuid, groupUuid, simongUuid, 'member', function(err) {
                                    test.ok(err);
                                    test.ok(err.code, 401);

                                    api.memberOf(simongUuid, false, null, null, function(err, groupUuids) {
                                        test.ok(!err);
                                        test.equal(groupUuids.length, 0);

                                        // 4. add Nico as manager, ensure he can now add
                                        api.addGroupMember(mrvisserUuid, groupUuid, nicoUuid, 'manager', function(err) {
                                            test.ok(!err);

                                            api.addGroupMember(nicoUuid, groupUuid, simongUuid, 'member', function(err) {
                                                test.ok(!err);

                                                api.memberOf(simongUuid, false, null, null, function(err, groupUuids) {
                                                    test.ok(!err);
                                                    test.equal(groupUuids.length, 1);
                                                    test.done();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

exports.testAddMembersNoAccess = function(test) {
    test.expect(17);
    var tenant = new Tenant('cam-'+new Date().getMilliseconds(), 'Cambridge', 'Cambridge University', 3001);

    // 1. create the users
    api.createUser(tenant, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err) {
        test.ok(!err);

        var mrvisserUuid = rolesUtil.toUuid('u', tenant.alias, 'mrvisser');
        api.createUser(tenant, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err) {
            test.ok(!err);

            var nicoUuid = rolesUtil.toUuid('u', tenant.alias, 'nicolaas');
            api.createUser(tenant, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err) {
                test.ok(!err);

                var simongUuid = rolesUtil.toUuid('u', tenant.alias, 'simong');
                api.createGroup(mrvisserUuid, tenant, 'managed-by-canadians', "Group", function(err, groupUuid) {
                    test.ok(!err);

                    // 2. try and add simong to it with an unprivileged user
                    api.addGroupMembers(nicoUuid, groupUuid, [simongUuid], 'member', function(err) {
                        test.ok(err);
                        test.equal(err.code, 401);

                        // verify simong was not added
                        api.memberOf(simongUuid, false, null, null, function(err, groupUuids) {
                            test.ok(!err);
                            test.equal(groupUuids.length, 0);

                            // 3. add nico as member, then ensure he still cannot add
                            api.addGroupMembers(mrvisserUuid, groupUuid, [nicoUuid], 'member', function(err) {
                                test.ok(!err);

                                api.addGroupMembers(nicoUuid, groupUuid, [simongUuid], 'member', function(err) {
                                    test.ok(err);
                                    test.ok(err.code, 401);

                                    api.memberOf(simongUuid, false, null, null, function(err, groupUuids) {
                                        test.ok(!err);
                                        test.equal(groupUuids.length, 0);

                                        // 4. add Nico as manager, ensure he can now add
                                        api.addGroupMembers(mrvisserUuid, groupUuid, [nicoUuid], 'manager', function(err) {
                                            test.ok(!err);

                                            api.addGroupMembers(nicoUuid, groupUuid, [simongUuid], 'member', function(err) {
                                                test.ok(!err);

                                                api.memberOf(simongUuid, false, null, null, function(err, groupUuids) {
                                                    test.ok(!err);
                                                    test.equal(groupUuids.length, 1);
                                                    test.done();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

exports.testAddMemberIndirectAccess = function(test) {
    test.expect(12);
    
    var tenant = new Tenant('cam-'+new Date().getMilliseconds(), 'Cambridge', 'Cambridge University', 3001);

    // 1. create the users
    api.createUser(tenant, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err) {
        test.ok(!err);

        var mrvisserUuid = rolesUtil.toUuid('u', tenant.alias, 'mrvisser');
        api.createUser(tenant, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err) {
            test.ok(!err);

            var nicoUuid = rolesUtil.toUuid('u', tenant.alias, 'nicolaas');
            api.createUser(tenant, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err) {
                test.ok(!err);

                var simongUuid = rolesUtil.toUuid('u', tenant.alias, 'simong');
                api.createGroup(mrvisserUuid, tenant, 'managed-by-canadians', "Group", function(err, groupUuid) {
                    test.ok(!err);

                    // 2. Create and assign a group that will manage the managed-by-canadians group
                    api.createGroup(mrvisserUuid, tenant, 'canadians', "Group", function(err, canadiansGroupUuid) {
                        test.ok(!err);

                        api.addGroupMember(mrvisserUuid, groupUuid, canadiansGroupUuid, 'manager', function(err) {
                            test.ok(!err);

                            // 3. make nico a member of the 'canadians' group, then verify he can manage managed-by-canadians
                            api.addGroupMember(mrvisserUuid, canadiansGroupUuid, nicoUuid, 'member', function(err) {
                                test.ok(!err);

                                // quick sanity check on the permission itself
                                permissionsAPI.isAllowed(nicoUuid, 'manager', groupUuid, function(err, isAllowed) {
                                    test.ok(!err);
                                    test.ok(isAllowed === true);

                                    // verify he can add someone
                                    api.addGroupMember(nicoUuid, groupUuid, simongUuid, 'member', function(err) {
                                        test.ok(!err);

                                        // verify it worked
                                        api.memberOf(simongUuid, false, null, null, function(err, groupUuids) {
                                            test.ok(!err);
                                            test.ok(groupUuids.length, 1);
                                            test.done();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 Disabled until MemberOf denormalization is implemented

exports.testPaging = function(test) {
    test.expect(3);
    createOAEStructure(test, function(id) {
        api.memberOf('u:cam:bert-'+id, false, null, 2, function(err, groups) {
            test.equal(groups.length, 2);
            test.equal(groups[0], 'g:cam:belgian-' + id);
            test.equal(groups[1], 'g:cam:oae-team-' + id);
            test.done();
        });
    });
};
*/
