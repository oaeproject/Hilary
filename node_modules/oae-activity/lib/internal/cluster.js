/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var ShortId = require('shortid');
var util = require('util');

var log = require('oae-logger').logger('oae-activity-cluster');

// The redis client to use for managing locks
var redisClient = null;

var init = module.exports.init = function(_redisClient) {
    redisClient = _redisClient;
};

/**
 * Try and acquire a temporary lock for the activity processing bucket with the given bucket number.
 *
 * @param   {Number}    bucketNumber            The number of the bucket to try and acquire.
 * @param   {Number}    expiresIn               Maximum number of seconds for which to hold the lock on the bucket.
 * @param   {Function}  callback                Invoked when the lock as been acquired (or failed to be acquired).
 * @param   {Object}    callback.err            An error that occurred, if any.
 * @param   {String}    callback.token          An identifier for the lock that was granted. If unspecified, the bucket was already locked by someone else.
 */
var acquireBucket = module.exports.acquireBucket = function(bucketNumber, expiresIn, callback) {
    log().trace({'bucketNumber': bucketNumber}, 'Trying to acquire bucket.');

    var lockKey = _getLockKey(bucketNumber);
    redisClient.get(lockKey, function(err, token) {
        if (err) {
            return callback(err);
        } else if (!token) {
            // There is no lock on this bucket, try and acquire the lock
            return _acquireLock(lockKey, expiresIn, callback);
        }

        // Make sure this locked bucket has a ttl associated to it. If it doesn't it means that the process
        // that locked it crashed after it locked (setnx) but before it could apply the ttl (setex)
        _ensureTtl(lockKey, token, expiresIn);

        // We failed to acquire the lock.
        return callback();
    });
};

/**
 * Release the lock on the specified bucket.
 *
 * @param  {Number}     bucketNumber        The number of the bucket on which to release the lock.
 * @param  {String}     token               The identifier of the lock that was given when the lock was acquired.
 * @param  {Function}   callback            Invoked when the lock has been released.
 * @param  {Object}     callback.err        An error that occurred, if any.
 * @param  {Boolean}    callback.hadLock    Specifies whether or not we actually released a lock
 */
var releaseBucket = module.exports.releaseBucket = function(bucketNumber, token, callback) {
    var lockKey = _getLockKey(bucketNumber);
    redisClient.get(lockKey, function(err, lockedToken) {
        if (err) {
            return callback(err);
        } else if (lockedToken !== token) {
            log().trace({'bucketNumber': bucketNumber}, 'Attempted to release a bucket that was not locked by us.');
            // There is either no lock for this bucket, or we no longer hold the lock
            return callback(null, false);
        }

        redisClient.del(lockKey, function(err) {
            if (err) {
                return callback(err);
            }

            log().trace({'bucketNumber': bucketNumber}, 'Released a bucket lock.');
            return callback(null, true);
        });
    });
};

/**
 * Acquire a lock with a given key.
 *
 * @param   {String}    lockKey         The key of the lock to acquire.
 * @param   {Number}    expiresIn       The maximum amount of time, in seconds, the lock should be alive for.
 * @param   {Function}  callback        Invoked when the lock has been (or has failed to be) acquired.
 * @param   {Object}    callback.err    An error that occurred, if any.
 * @param   {String}    callback.token  The token that was given for this lock. If unspecified, someone else took the lock before we could.
 * @api private
 */
var _acquireLock = function(lockKey, expiresIn, callback) {
    var token = _createToken();
    // When getting a fresh lock, we use setnx, which is atomic and will tell us if we successfully set the value
    redisClient.setnx(lockKey, token, function(err, wasSet) {
        if (err) {
            return callback(err);
        } else if (wasSet !== 1) {
            log().trace({'key': lockKey}, 'Failed to acquire a bucket lock.');
            // We did not get the lock, we have failed to acquire the bucket
            return callback();
        }

        log().trace({
            'key': lockKey,
            'token': token
        }, 'Acquired bucket lock.', lockKey, token);

        // We got the lock, acquisition of the bucket is successful. Set the key to expire and return
        _ensureTtl(lockKey, token, expiresIn);
        return callback(null, token);
    });
};

/**
 * Ensures that a ttl for the given lock key is set. If it isn't, we will apply the given
 * `expiresIn` seconds for ttl.
 *
 * @param  {String}     lockKey         The key on which to ensure the ttl
 * @param  {String}     val             The value of the entry to set along with the ttl if the ttl was not set
 * @param  {Number}     expiresIn       The ttl (in seconds) to apply to the key if it is not set
 */
var _ensureTtl = function(lockKey, val, expiresIn) {
    // First check the ttl on the key
    redisClient.ttl(lockKey, function(err, ttl) {
        if (err) {
            return callback(err);
        } else if (ttl === -1) {
            // It's not set, so we set one
            redisClient.setex(lockKey, expiresIn, val, function(err) {
                if (err) {
                    return log().error({
                        'err': err,
                        'lockKey': lockKey,
                        'value': val,
                        'expiresIn': expiresIn
                    }, 'Failed to apply a TTL to the bucket lock.');
                }
            });
        }
    });
};

/**
 * Generate a token that can be used to identify a lock being held.
 *
 * @return  {String}    The time (in milliseconds since the epoch) that the lock should expire.
 * @api private
 */
var _createToken = function() {
    return ShortId.generate();
};

/**
 * Get the lock key for the given bucket number. The bucket lock key will look like: oae-activity:bucket:lock-0
 * for the 0th bucket, for example.
 *
 * @param   {Number}    bucketNumber    The bucket number for which to create the lock key.
 * @param   {String}                    The key that can be used to lock the bucket with the given number.
 * @api private
 */
var _getLockKey = function(bucketNumber) {
    return util.format('oae-activity:bucket:lock-%s', bucketNumber);
};
