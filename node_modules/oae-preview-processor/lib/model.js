/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var Path = require('path');
var request = require('request');
var shell = require('shelljs');

var log = require('oae-logger').logger('oae-preview-processor');
var IO = require('oae-util/lib/io');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;

var extensionRegex = /^[a-zA-Z]+$/;

/**
 * @typedef PreviewContext
 * @type {Object}
 * @property {String}      contentId           The ID of the piece of content we're processing.
 * @property {Object}      content             The content object. This gets lazy loaded, so bear in mind that this is not available immediately.
 * @property {String}      baseDir             The directory where all preview related files should be stored. Once the preview process operation finishes, this directory will removed.
 * @property {RestContext} tenantRestContext   The RestContext that is used to download the item from the tenant host. This will be retrieved by letting the global admin log in on the tenant. This will only be filled in once the `login` method is called.
 */

/**
 * A context object that holds various properties and utility methods.
 *
 * @param  {Object}     config      The main configuration object as defined in `config.js`. The full config object should be passed in.
 * @param  {String}     contentId   The ID of the piece of content we'll be processing.
 * @return {PreviewContext}         A PreviewContext object.
 */
var PreviewContext = module.exports.PreviewContext = function(config, contentId) {
    var globalRestContext = new RestContext('http://' + config.servers.globalAdminHost, config.previews.credentials.username, config.previews.credentials.password, config.servers.globalAdminHost);

    var _thumbnailPath = null;
    var _previews = [];
    var _metadata = {};

    var that = {};
    that.contentId = contentId;

    // Should be filled in by the caller.
    that.content = {};

    that.tenantRestContext = null; // Will be filled in by the login method.

    // Some file systems don't like : in filenames.
    var safeContentId = contentId.replace(/:/g, '-');

    // The base directory for anything related to this piece of content.
    // When all the processing is done, this should contain a file called 'thumbnail.png' which can be used as
    // the piece of content's thumbnail image.
    that.baseDir = config.previews.dir + '/' + safeContentId;

    // Create the actual directory.
    shell.mkdir('-p', that.baseDir);

    /**
     * Removes the directory where all images should be stored in.
     */
    that.cleanup = function() {
        log().trace({'contentId': contentId}, 'Removing %s', that.baseDir);
        shell.rm('-rf', that.baseDir);
    };

    /**
     * Logs into the the tenant where this piece of content resides. If we already have a running
     * session for this tenant, it will be re-used.
     *
     * @param {Function}    callback        Standard callback method
     * @param {Object}      callback.err    Standard error object (if any)
     */
    that.login = function(callback) {
        var tenantAlias = that.contentId.split(':')[1];
        log().trace({'contentId': contentId}, 'Logging into %s', tenantAlias);

        // Log in via signed auth, and get a new RestContext.
        RestAPI.Admin.loginOnTenant(globalRestContext, tenantAlias, function(err, restContext) {
            if (err) {
                log().error({'err': err, 'contentId': contentId}, 'We could not log in on the the tenant. The status of the content item will not be set.');
                return callback(err);
            }
            // Use this context
            that.tenantRestContext = restContext;

            callback();
        });
    };

    /**
     * Downloads a file content to disk.
     * A temporary file will be created.
     * It will be removed when the preview processing operation completes
     *
     * @param {Function}    callback        Called when the file has been downloaded
     * @param {Object}      callback.err    Standard error object (if any)
     * @param {String}      callback.path   The path on disk where the file has been downloaded to.
     */
    that.download = function(callback) {
        // For security reasons we will *NOT*use the actual filename
        // as this path could end up in commands that need to be executed.
        // We will tack on the extension if-and-only-if that extension only exists out of a-zA-Z characters.
        var extension = 'unknown';
        var name = that.content.filename;
        if (name.lastIndexOf('.') !== -1) {
            var ext = name.substr(name.lastIndexOf('.') + 1);
            if (ext !== '' && extensionRegex.test(ext)) {
                extension = ext;
            }
        }

        var path = that.baseDir + '/' + safeContentId + '.' + extension;
        log().trace({'contentId': contentId}, 'Downloading %s to %s', that.content.filename, path);

        RestAPI.Content.download(that.tenantRestContext, contentId, null, path, function(err) {
            if (err) {
                log().error({'err': err, 'contentId': contentId}, 'Error trying to download the file.');
                fs.unlink(path, function(unlinkErr) {
                    if (unlinkErr) {
                        log().error({'err': unlinkErr, 'contentId': contentId}, 'Could not remove the downloaded file on download error.');
                    }
                    callback(err);
                });
            } else {
                callback(null, path);
            }
        });
    };

    /**
     * Sets the path to the thumbnail image.
     *
     * @param {String} path The path where the thumbnail image is located.
     */
    that.setThumbnail = function(path) {
        _thumbnailPath = path;
    };

    /**
     * Adds a preview image.
     *
     * @param {String} path The path where a preview image is located.
     * @param {String} size The size of this file. One of 'small', 'medium', 'large' or 'thumbnail'.
     */
    that.addPreview = function(path, size) {
        _previews.push({'path': path, 'size': size});
    };

    /**
     * Any extra metadata that should be stored on the content item.
     * Note: this metadata will only be saved once you call `savePreviews`.
     *
     * @param {String} name  The key that should be used on the piece of content. (ex: pageCount)
     * @param {String} value The value. (ex: 7)
     */
    that.addMetadata = function(name, value) {
        _metadata[name] = value;
    };

    /**
     * @return {Object} An object that holds the extra metadata that should be stored. Any changes made to this object will be passed along the the `savePreviews` method.
     */
    that.getMetadata = function() {
        return _metadata;
    };

    /**
     * @return  {Object[]}  An array of preview objects. Each object has a 'path' key that specifies where the preview is stored and a 'size' key that specifies which type of preview this is.
     */
    that.getPreviews = function() {
        return _previews;
    };

    /**
     * @return  {String}    The path to the thumbnail.
     */
    that.getThumbnail = function() {
        return _thumbnailPath;
    };

    /**
     * Saves the preview and thumbnail images.
     * This will also set the preview status to 'done'.
     *
     * @param {Function}    callback        Standard callback method
     * @param {Object}      callback.err    Standard error object (if any.)
     */
    that.savePreviews = function(callback) {
        log().trace({'contentId': contentId}, 'Saving previews');
        var files = {};
        var sizes = {};
        // The thumbnail (if any)
        if (_thumbnailPath) {
            files['thumbnail.png'] = function() { return fs.createReadStream(_thumbnailPath); };
            sizes['thumbnail.png'] = 'thumbnail';
        }

        // The preview images.
        _previews.forEach(function(preview) {
            var filename = Path.basename(preview.path);
            files[filename] = function() { return fs.createReadStream(preview.path); };
            sizes[filename] = preview.size;
        });

        RestAPI.Content.setPreviewItems(that.tenantRestContext, contentId, 'done', files, sizes, _metadata, callback);
    };

    /**
     * Sets the processing status on the piece of content.
     *
     * @param {String}   status   The status that should be set. One of ContentConstants.previews .
     * @param {Function} callback Standard callback method.
     */
    that.setStatus = function(status, callback) {
        log().trace({'contentId': contentId}, 'Setting status to %s', status);
        RestAPI.Content.setPreviewItems(that.tenantRestContext, contentId, status, {}, {}, {}, callback);
    };

    return that;
};
