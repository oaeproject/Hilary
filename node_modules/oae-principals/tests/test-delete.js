/*
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var FollowingTestUtil = require('oae-following/lib/test/util');
var RestAPI = require('oae-rest');
var SearchTestUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

var PrincipalsDelete = require('oae-principals/lib/delete');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');

describe('Principals Delete and Restore', function() {

    // Rest context that can be used to perform requests as different types of users
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    var globalAdminRestContext = null;
    var globalAdminOnTenantRestContext = null;

    /**
     * Function that will create a user that will be used inside of the tests
     */
    before(function(callback) {
        // Create all the REST contexts before each test
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Log the global admin into a tenant so we can perform user-tenant requests with a global admin to test their access
        RestAPI.Admin.loginOnTenant(globalAdminRestContext, 'localhost', null, function(err, ctx) {
            assert.ok(!err);
            globalAdminOnTenantRestContext = ctx;
            return callback();
        });
    });

    describe('Registration', function() {

        /**
         * Test that verifies that delete and restore handle names must be unique
         */
        it('verify registering multiple delete and restore handlers with the same name results in an exception', function(callback) {
            // Register one of each, these should be fine
            PrincipalsDelete.registerGroupDeleteHandler('test-throws-duplicate', function(group, membershipsGraph, membersGraph, callback) { return callback(); });
            PrincipalsDelete.registerGroupRestoreHandler('test-throws-duplicate', function(group, membershipsGraph, membersGraph, callback) { return callback(); });

            assert.throws(function() {
                PrincipalsDelete.registerGroupDeleteHandler('test-throws-duplicate', function(group, membershipsGraph, membersGraph, callback) { return callback(); });
            });

            assert.throws(function() {
                PrincipalsDelete.registerGroupRestoreHandler('test-throws-duplicate', function(group, membershipsGraph, membersGraph, callback) { return callback(); });
            });

            return callback();
        });

        /**
         * Test that verifies that only functions can be registered to handle deletes and restores
         */
        it('verify registering non-function delete and restore handlers fails', function(callback) {
            assert.throws(function() { PrincipalsDelete.registerGroupDeleteHandler('test-throws-nonfunction'); });
            assert.throws(function() { PrincipalsDelete.registerGroupDeleteHandler('test-throws-nonfunction', 'not-a-function'); });
            assert.throws(function() { PrincipalsDelete.registerGroupRestoreHandler('test-throws-nonfunction'); });
            assert.throws(function() { PrincipalsDelete.registerGroupRestoreHandler('test-throws-nonfunction', 'not-a-function'); });
            return callback();
        });
    });

    describe('Validation', function() {

        /**
         * Test that verifies validation of deleting a group
         */
        it('verify validation of deleting a group', function(callback) {
            // Create a user and a group with which we'll test
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {

                    // Ensure combinations of invalid group ids result in a 400
                    PrincipalsTestUtil.assertDeleteGroupFails(manager.restContext, 'not-an-id', 400, function() {
                        PrincipalsTestUtil.assertDeleteGroupFails(manager.restContext, 'u:oae:not-a-group-id', 400, function() {

                            // Ensure we can't delete a non-existing group
                            PrincipalsTestUtil.assertDeleteGroupFails(manager.restContext, 'g:cam:non-existing-group', 404, function() {

                                // Sanity check that we can delete a group
                                return PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, callback);
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of restoring a group
         */
        it('verify validation of restoring a group', function(callback) {
            // Create a user and a delteed group with which we'll test
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {
                    PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                        // Ensure combinations of invalid group ids result in a 400
                        PrincipalsTestUtil.assertRestoreGroupFails(camAdminRestContext, 'not-an-id', 400, function() {
                            PrincipalsTestUtil.assertRestoreGroupFails(camAdminRestContext, 'u:oae:not-a-group-id', 400, function() {

                                // Ensure we can't restore a group that never existed
                                PrincipalsTestUtil.assertRestoreGroupFails(camAdminRestContext, 'g:cam:non-existing-group', 404, function() {

                                    // Sanity check that we can restore the group with the administrator
                                    return PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, callback);
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of deleting a user
         */
        it('verify validation of deleting a user', function(callback) {
            // Create a user with which we'll test
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user) {

                // Ensure combinations of invalid user ids result in a 400
                PrincipalsTestUtil.assertDeleteUserFails(user.restContext, 'not-an-id', 400, function() {
                    PrincipalsTestUtil.assertDeleteUserFails(user.restContext, 'g:oae:not-a-user-id', 400, function() {

                        // Ensure we can't delete a non-existing user
                        PrincipalsTestUtil.assertDeleteUserFails(user.restContext, 'u:cam:non-existing-user', 404, function() {

                            // Sanity check that we can delete a user
                            return PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, user.restContext, user.user.id, callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of restoring a group
         */
        it('verify validation of restoring a user', function(callback) {
            // Create a deleted user with which we'll test
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user) {
                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, user.user.id, function() {

                    // Ensure combinations of invalid user ids result in a 400
                    PrincipalsTestUtil.assertRestoreUserFails(camAdminRestContext, 'not-an-id', 400, function() {
                        PrincipalsTestUtil.assertRestoreUserFails(camAdminRestContext, 'g:oae:not-a-user-id', 400, function() {

                            // Ensure we can't restore a user that never existed
                            PrincipalsTestUtil.assertRestoreUserFails(camAdminRestContext, 'u:cam:non-existing-user', 404, function() {

                                // Sanity check that we can restore the user with the administrator
                                PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, user.user.id, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Permissions', function() {

        /**
         * Test that verifies that only managers and admins can delete a group
         */
        it('verify only manager and admins can delete a group', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2) {

                // Currently only the tenant admin is a manager on any of the groups. So, ensure
                // that no regular users can delete the group. Note that publicUser is a member
                // of publicGroup
                PrincipalsTestUtil.assertDeleteGroupFails(publicTenant1.anonymousRestContext, publicTenant1.publicGroup.id, 401, function() {
                    PrincipalsTestUtil.assertDeleteGroupFails(publicTenant1.publicUser.restContext, publicTenant1.publicGroup.id, 401, function() {
                        PrincipalsTestUtil.assertDeleteGroupFails(publicTenant1.loggedinUser.restContext, publicTenant1.publicGroup.id, 401, function() {
                            PrincipalsTestUtil.assertDeleteGroupFails(publicTenant1.privateUser.restContext, publicTenant1.publicGroup.id, 401, function() {

                                // Ensure tenant admin of another tenant cannot delete the group
                                PrincipalsTestUtil.assertDeleteGroupFails(publicTenant2.adminRestContext, publicTenant1.publicGroup.id, 401, function() {

                                    // Release 'manage' access from the tenant admin to users of the tenant. This is important because it ensures
                                    // the "tenant admin can delete groups" check doesn't succeed by virtue of the tenant admin also being a
                                    // manager of the group
                                    var permissionChanges = {};
                                    permissionChanges[publicTenant1.adminUser.user.id] = false;
                                    permissionChanges[publicTenant1.publicUser.user.id] = 'manager';
                                    RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.publicGroup.id, permissionChanges, function(err) {
                                        assert.ok(!err);
                                        RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.loggedinGroup.id, permissionChanges, function(err) {
                                            assert.ok(!err);
                                            RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.privateGroup.id, permissionChanges, function(err) {
                                                assert.ok(!err);

                                                // Sanity check that manager, tenant admin and global admin can delete groups
                                                PrincipalsTestUtil.assertDeleteGroupSucceeds(publicTenant1.adminRestContext, publicTenant1.publicUser.restContext, publicTenant1.publicGroup.id, function() {
                                                    PrincipalsTestUtil.assertDeleteGroupSucceeds(publicTenant1.adminRestContext, publicTenant1.adminRestContext, publicTenant1.loggedinGroup.id, function() {
                                                        return PrincipalsTestUtil.assertDeleteGroupSucceeds(publicTenant1.adminRestContext, globalAdminOnTenantRestContext, publicTenant1.privateGroup.id, callback);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only administrators can restore a group
         */
        it('verify only administrators can restore a group', function(callback) {
            // Create a user and a group with which we'll test
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {

                    // Delete the group
                    PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                        // Ensure restoring as the manager, tenant admin of another tenant, and anonymous user all fail with 401
                        PrincipalsTestUtil.assertRestoreGroupFails(manager.restContext, group.group.id, 401, function() {
                            PrincipalsTestUtil.assertRestoreGroupFails(gtAdminRestContext, group.group.id, 401, function() {
                                PrincipalsTestUtil.assertRestoreGroupFails(anonymousRestContext, group.group.id, 401, function() {

                                    // Ensure restoring as tenant admin succeeds
                                    PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                        // Delete the group again and ensure global admin can restore the group
                                        PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {
                                            return PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, globalAdminOnTenantRestContext, group.group.id, callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of deleting a user
         */
        it('verify authorization of deleting a user', function(callback) {
            // Create a user with which we'll test
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, user1, user2, user3) {

                // Anonymous, regular user and admin from another tenant cannot delete this user
                PrincipalsTestUtil.assertDeleteUserFails(anonymousRestContext, user1.user.id, 401, function() {
                    PrincipalsTestUtil.assertDeleteUserFails(user2.restContext, user1.user.id, 401, function() {
                        PrincipalsTestUtil.assertDeleteUserFails(gtAdminRestContext, user1.user.id, 401, function() {

                            // Ensure user1 still exists and is not marked deleted
                            PrincipalsTestUtil.assertGetUserSucceeds(user1.restContext, user1.user.id, function(user1AfterFailedDeletes) {
                                assert.strictEqual(user1AfterFailedDeletes.id, user1.user.id);
                                assert.ok(!user1AfterFailedDeletes.deleted);

                                // An admin and the user themself can delete the user
                                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, globalAdminRestContext, user1.user.id, function() {
                                    PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, user2.user.id, function() {
                                        PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, user3.restContext, user3.user.id, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization of restoring a user
         */
        it('verify authorization of restoring a user', function(callback) {
            // Create 2 deleted users with which we'll test
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, user1, user2) {
                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, user1.user.id, function() {
                    PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, user2.user.id, function() {

                        // Anonymous, the user themself, another user and admin from another tenant cannot restore this user
                        PrincipalsTestUtil.assertRestoreUserFails(anonymousRestContext, user1.user.id, 401, function() {
                            PrincipalsTestUtil.assertRestoreUserFails(user1.restContext, user1.user.id, 401, function() {
                                PrincipalsTestUtil.assertRestoreUserFails(user2.restContext, user1.user.id, 401, function() {
                                    PrincipalsTestUtil.assertRestoreUserFails(gtAdminRestContext, user1.user.id, 401, function() {

                                        // Ensure the global admin and admin of the same tenant can restore the user
                                        PrincipalsTestUtil.assertRestoreUserSucceeds(globalAdminRestContext, user1.user.id, function() {
                                            PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, user2.user.id, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Profile', function() {

        /**
         * Test that verifies that deleting and restoring groups both removes and restores access to
         * its full group profile
         */
        it('verify deleting and restoring groups removes and restores access to its full group profile', function(callback) {
            // Create a user and group that will be deleted and restored
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {

                    // Delete the group, ensuring the side-effects (including 404 on group profile) succeeds
                    PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                        // Restore the group, ensuring the side-effects (including successful access of group profile) succeeds
                        PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                            // Ensure the manager user can still access the group as well, and many of the profile fields
                            // are retained
                            var expectedFields = _.pick(group.group, 'id', 'visibility', 'displayName', 'description', 'joinable', 'created');
                            PrincipalsTestUtil.assertGetGroupSucceeds(manager.restContext, group.group.id, expectedFields, function(restoredGroup) {
                                assert.strictEqual(group.group.createdBy.id, restoredGroup.createdBy.id);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups multiple times re-invokes its
         * associated handler logic
         */
        it('verify deleting and restoring multiple times re-invokes handler logic', function(callback) {

            /*!
             * Create a group delete handler that maintains the count of times it has been invoked
             */
            var deleteHandlerCount = 0;
            PrincipalsDelete.registerGroupDeleteHandler('test-group-reinvoke', function(group, membershipsGraph, membersGraph, callback) {
                deleteHandlerCount++;
                return callback();
            });

            /*!
             * Create a group restore handler that maintains the count of times it has been invoked
             */
            var restoreHandlerCount = 0;
            PrincipalsDelete.registerGroupRestoreHandler('test-group-reinvoke', function(group, membershipsGraph, membersGraph, callback) {
                restoreHandlerCount++;
                return callback();
            });

            // Create a user and group that will be deleted and restored
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {

                    // Delete the group
                    PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                        // Invoke the delete again, ensuring we re-invoke the handlers
                        RestAPI.Group.deleteGroup(camAdminRestContext, group.group.id, function(err) {
                            assert.ok(!err);
                            PrincipalsDelete.whenDeletesComplete(function() {
                                assert.strictEqual(deleteHandlerCount, 2);
                                assert.strictEqual(restoreHandlerCount, 0);

                                // Restore the group
                                PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {
                                    RestAPI.Group.restoreGroup(camAdminRestContext, group.group.id, function(err) {
                                        assert.ok(!err);
                                        PrincipalsDelete.whenDeletesComplete(function() {
                                            assert.strictEqual(deleteHandlerCount, 2);
                                            assert.strictEqual(restoreHandlerCount, 2);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups both removes and restores access
         * to its members list
         */
        it('verify deleting and restoring groups removes and restores access to its members list', function(callback) {
            // Create a user and a deleted group to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {
                    PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                        // Ensure getting the group members fails with a 404
                        PrincipalsTestUtil.assertGetMembersLibraryFails(camAdminRestContext, group.group.id, null, null, 404, function() {
                            PrincipalsTestUtil.assertGetMembersLibraryFails(manager.restContext, group.group.id, null, null, 404, function() {

                                // Restore the group
                                PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                    // Ensure the members list is as expected from before it was deleted
                                    PrincipalsTestUtil.assertGetAllMembersLibraryEquals(manager.restContext, group.group.id, [manager.user.id], function(members) {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups both removes and restores access to
         * update its profile
         */
        it('verify deleting and restoring groups removes and restores access to updates', function(callback) {
            // Create a user and a deleted group to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {
                    PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                        // Ensure updating the group fails with a 404
                        PrincipalsTestUtil.assertUpdateGroupFails(camAdminRestContext, group.group.id, {'displayName': 'Another Display Name'}, 404, function() {
                            PrincipalsTestUtil.assertUpdateGroupFails(manager.restContext, group.group.id, {'displayName': 'Another Display Name'}, 404, function() {

                                // Restore the group
                                PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                    // Ensure the group can now be updated
                                    PrincipalsTestUtil.assertUpdateGroupSucceeds(manager.restContext, group.group.id, {'displayName': 'Another Display Name'}, function(group) {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups both removes and restores access to
         * its memberships library
         */
        it('verify deleting and restoring groups removes and restores access to its memberships library', function(callback) {
            // Create a deleted group (childGroup) who has one group in its memberships library to
            // test with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 2, function(childGroup, parentGroup) {
                    TestsUtil.generateGroupHierarchy(manager.restContext, [parentGroup.group.id, childGroup.group.id], 'member', function() {

                        PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, childGroup.group.id, function() {

                            // Ensure getting the group memberships list fails
                            PrincipalsTestUtil.assertGetMembershipsLibraryFails(camAdminRestContext, childGroup.group.id, null, null, 404, function() {
                                PrincipalsTestUtil.assertGetMembershipsLibraryFails(manager.restContext, childGroup.group.id, null, null, 404, function() {

                                    // Restore the group
                                    PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, childGroup.group.id, function() {

                                        // Ensure the memberships library is restored to its expected result
                                        return PrincipalsTestUtil.assertMembershipsLibraryEquals(manager.restContext, childGroup.group.id, [parentGroup.group.id], callback);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups both removes and restores access to
         * updating its members
         */
        it('verify deleting and restoring groups removes and restores access to updating group members', function(callback) {
            // Create a deleted group (parentGroup) who has one group in its memberships library to
            // test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, manager, member) {
                TestsUtil.generateTestGroups(manager.restContext, 2, function(childGroup, parentGroup) {

                    // Add a group and a user as members of the parentGroup
                    var permissionChanges = {};
                    permissionChanges[member.user.id] = 'manager';
                    permissionChanges[childGroup.group.id] = 'member';
                    PrincipalsTestUtil.assertSetGroupMembersSucceeds(manager.restContext, manager.restContext, parentGroup.group.id, permissionChanges, function() {

                        // Delete the group so we can ensure updates to members no longer succeed
                        PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, parentGroup.group.id, function() {

                            // Alter the permission changes to be different than what the group currently has
                            permissionChanges[member.user.id] = false;
                            permissionChanges[childGroup.group.id] = 'manager';

                            // Ensure setting the group members fails
                            PrincipalsTestUtil.assertSetGroupMembersFails(manager.restContext, camAdminRestContext, parentGroup.group.id, permissionChanges, 404, function() {
                                PrincipalsTestUtil.assertSetGroupMembersFails(manager.restContext, manager.restContext, parentGroup.group.id, permissionChanges, 404, function() {

                                    // Restore the group
                                    PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, parentGroup.group.id, function() {

                                        // Ensure we can now update the members list
                                        PrincipalsTestUtil.assertSetGroupMembersSucceeds(manager.restContext, manager.restContext, parentGroup.group.id, permissionChanges, function(members) {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups both removes and restores access to
         * leaving it
         */
        it('verify deleting and restoring groups removes and restores access to leaving the group', function(callback) {
            // Create a deleted group who has one user in its memberships library to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, manager, member) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {
                    TestsUtil.generateGroupHierarchy(manager.restContext, [group.group.id, member.user.id], 'member', function() {

                        // Delete the group
                        PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                            // Ensure trying to leave the group results in a 404
                            PrincipalsTestUtil.assertLeaveGroupFails(member.restContext, group.group.id, 404, function() {

                                // Restore the group
                                PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                    // Ensure the user can now leave the group
                                    return PrincipalsTestUtil.assertLeaveGroupSucceeds(manager.restContext, member.restContext, group.group.id, callback);
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups both removes and restores access to
         * joining it
         */
        it('verify deleting and restoring groups removes and restores access to joining the group', function(callback) {
            // Create a deleted, joinable group to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, manager, member) {
                TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {
                    PrincipalsTestUtil.assertUpdateGroupSucceeds(manager.restContext, group.group.id, {'joinable': 'yes'}, function() {
                        PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                            // Ensure trying to join the group results in a 404
                            PrincipalsTestUtil.assertJoinGroupFails(member.restContext, group.group.id, 404, function() {

                                // Restore the group
                                PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                    // Ensure the user can now join the group
                                    return PrincipalsTestUtil.assertJoinGroupSucceeds(manager.restContext, member.restContext, group.group.id, callback);
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring users both removes and restores access to
         * its full user profile and me feed
         */
        it('verify deleting and restoring users removes and restores access to its full user profile and me feed', function(callback) {
            // Create a user and group that will be deleted and restored
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, user1, user2) {

                // Delete the user as admin, ensuring it results in a 404 on the profile
                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, user1.user.id, function() {

                    // Delete the user as the user themself, ensuring it results in a 404 and a lost session
                    PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, user2.restContext, user2.user.id, function() {

                        // Restore both users, ensuring their profiles become accessible
                        PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, user1.user.id, function(user1AfterRestore) {
                            PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, user2.user.id, function(user2AfterRestore) {

                                // Ensure their sessions and me feeds reactivate
                                PrincipalsTestUtil.assertGetMeSucceeds(user1.restContext, function(me) {
                                    assert.ok(!me.anon);
                                    assert.strictEqual(me.id, user1.user.id);

                                    // Re-authenticate user2's session, ensuring it is restored. Note that we have to do this with
                                    // user2 because they made a request while they were deleted, so express cleared their
                                    // session. We didn't have to do that as user1 because they never made a request as a deleted
                                    // user
                                    var host = global.oaeTests.tenants.cam.host;
                                    var username = user2.restContext.username;
                                    var password = user2.restContext.userPassword;
                                    var user2RestContext = TestsUtil.createTenantRestContext(host, username, password);
                                    PrincipalsTestUtil.assertGetMeSucceeds(user2RestContext, function(me) {
                                        assert.ok(!me.anon);
                                        assert.strictEqual(me.id, user2.user.id);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Members', function() {

        /**
         * Test that verifies deleting and restoring a user leaves them in members lists but marked
         * "deleted"
         */
        it('verify deleting and restoring a user leaves them in members lists but marked as deleted', function(callback) {
            // Generate a user and a group to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user) {
                assert.ok(!err);
                TestsUtil.generateTestGroups(camAdminRestContext, 1, function(group) {

                    // Add the user to the group members library
                    var roleChanges = {};
                    roleChanges[user.user.id] = 'member';
                    PrincipalsTestUtil.assertSetGroupMembersSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, roleChanges, function() {

                        // Delete the user
                        PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, user.restContext, user.user.id, function() {

                            // Get the members library for the group, ensuring the user is still there and marked as deleted
                            PrincipalsTestUtil.assertGetMembersLibrarySucceeds(camAdminRestContext, group.group.id, null, null, function(result) {
                                result = _.pluck(result.results, 'profile');
                                var userEntry = _.findWhere(result, {'id': user.user.id});
                                assert.ok(userEntry);
                                assert.ok(_.isNumber(userEntry.deleted));

                                // Restore the user
                                PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, user.user.id, function() {

                                    // Get the members library for the group, ensuring the user is still there and no longer marked as deleted
                                    PrincipalsTestUtil.assertGetMembersLibrarySucceeds(camAdminRestContext, group.group.id, null, null, function(result) {
                                        result = _.pluck(result.results, 'profile');
                                        var userEntry = _.findWhere(result, {'id': user.user.id});
                                        assert.ok(userEntry);
                                        assert.ok(!userEntry.deleted);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Memberships', function() {

        /**
         * Test that verifies deleting and restoring a user removes and restores access to its
         * memberships feed
         */
        it('verify deleting and restoring a user removes and restores access to its memberships feed', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, user, userToDelete) {
                assert.ok(!err);

                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete.user.id, function() {

                    // Ensure that the memberships library of the user cannot be accessed
                    PrincipalsTestUtil.assertGetMembershipsLibraryFails(camAdminRestContext, userToDelete.user.id, null, null, 404, function() {

                        // Restore the user, ensuring access to their memberships library is restored
                        PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete.user.id, function() {

                            // Ensure access to the user's membership library is restored
                            PrincipalsTestUtil.assertGetMembershipsLibrarySucceeds(user.restContext, userToDelete.user.id, null, null, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting and restoring groups both removes and restores indirect
         * memberships associations from memberships libraries
         */
        it('verify deleting and restoring a group removes and restores indirect memberships from memberships libraries', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user) {
                assert.ok(!err);

                TestsUtil.generateTestGroups(camAdminRestContext, 4, function() {
                    var groups = Array.prototype.slice.call(arguments);
                    var groupIds = _.chain(groups).pluck('group').pluck('id').value();
                    var principalIds = groupIds.concat(user.user.id);

                    // Create the group hierarchy and ensure it is as expected
                    TestsUtil.generateGroupHierarchy(camAdminRestContext, principalIds, 'member', function() {
                        PrincipalsTestUtil.assertMembershipsLibraryEquals(user.restContext, user.user.id, groupIds, function() {

                            // Delete the group that is directly the parent of the user. This should erase the user's
                            // entire memberships library, not just the direct group itself
                            PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, _.last(groups).restContext, _.last(groupIds), function() {

                                // Ensure that the memberships library of the user is now completely empty
                                PrincipalsTestUtil.assertMembershipsLibraryEquals(user.restContext, user.user.id, [], function() {

                                    // Restore the group, and ensure the entire hierarchy is restored into the user's
                                    // memberships library
                                    PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, _.last(groupIds), function() {

                                        // Ensure the user's memberships library now has all original groups we created
                                        return PrincipalsTestUtil.assertMembershipsLibraryEquals(user.restContext, user.user.id, groupIds, callback);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleted groups still show in a group members feed
         */
        it('verify a deleted group can show in a group members feed', function(callback) {
            // Create a group that has a deleted group as a member
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                TestsUtil.generateTestGroups(manager.restContext, 2, function(childGroup, parentGroup) {
                    TestsUtil.generateGroupHierarchy(manager.restContext, [parentGroup.group.id, childGroup.group.id], 'member', function() {
                        PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, childGroup.group.id, function() {

                            // Verify the members list of the parent still has the group with an
                            // indication that it is deleted and no profile path
                            PrincipalsTestUtil.assertGetAllMembersLibraryEquals(manager.restContext, parentGroup.group.id, [manager.user.id, childGroup.group.id], function(members) {
                                var childGroupEntry = _.find(members, function(memberEntry) {
                                    return memberEntry.profile.id === childGroup.group.id;
                                });

                                assert.ok(_.isNumber(childGroupEntry.profile.deleted));
                                assert.ok(!_.chain(childGroupEntry.profile).keys().contains('profilePath').value());

                                // Restore the group and ensure it appears without the deleted flag
                                // in the group members list
                                PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, childGroup.group.id, function() {

                                    // Ensure the group is still there in the members list, but now
                                    // doesn't have a deleted flag and the profile path is restored
                                    PrincipalsTestUtil.assertGetAllMembersLibraryEquals(manager.restContext, parentGroup.group.id, [manager.user.id, childGroup.group.id], function(members) {
                                        var childGroupEntry = _.find(members, function(memberEntry) {
                                            return memberEntry.profile.id === childGroup.group.id;
                                        });

                                        assert.ok(!_.chain(childGroupEntry.profile).keys().contains('deleted').value());
                                        assert.ok(childGroupEntry.profile.profilePath);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Following', function() {

        /**
         * Test that verifies that deleting and restoring a user removes and restores access to
         * their following and followers lists
         */
        it('verify deleting and restoring a user removes and restores access to their following and followers lists', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, user, userToDelete) {

                // Delete the user
                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete.user.id, function() {

                    // Ensure there is no access to their following or followers feed
                    FollowingTestUtil.assertNoFollowFeedAccess(user.restContext, [userToDelete.user.id], 404, function() {

                        // Restore the user
                        PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete.user.id, function() {

                            // Ensure access is restored to the following and followers feed
                            FollowingTestUtil.assertHasFollowFeedAccess(user.restContext, [userToDelete.user.id], function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies deleting and restoring a user removes and restores them in followers
         * lists
         */
        it('verify deleting and restoring a user removes and restores them in followers lists', function(callback) {
            // Create a user (userToFollow) that is followed by a bunch of other users
            TestsUtil.generateTestUsers(camAdminRestContext, 10, function(err, users, userToFollow, userToDelete0, userToDelete1) {
                var followerUserInfos = _.toArray(arguments).slice(3);
                FollowingTestUtil.followByAll(userToFollow.user.id, followerUserInfos, function() {

                    // Ensure that all users appear in the userToFollow's followers list
                    var followerUserIds = _.chain(followerUserInfos).pluck('user').pluck('id').value();
                    var followerUserIdsAfterDelete = _.without(followerUserIds, userToDelete0.user.id, userToDelete1.user.id);
                    FollowingTestUtil.assertGetAllFollowersEquals(userToFollow.restContext, userToFollow.user.id, {'batchSize': 1}, followerUserIds, function() {

                        // Delete 2 of the users, ensuring they are no longer in the userToFollow's followers list
                        PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete0.user.id, function() {
                            PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete1.user.id, function() {
                                FollowingTestUtil.assertGetAllFollowersEquals(userToFollow.restContext, userToFollow.user.id, {'batchSize': 1}, followerUserIdsAfterDelete, function() {

                                    // Restore the 2 users, ensuring the re-appear in the userToFollow's followers list
                                    PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete0.user.id, function() {
                                        PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete1.user.id, function() {
                                            FollowingTestUtil.assertGetAllFollowersEquals(userToFollow.restContext, userToFollow.user.id, {'batchSize': 1}, followerUserIds, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies deleting and restoring a user removes and restores them in following
         * lists
         */
        it('verify deleting and restoring a user removes and restores them in following lists', function(callback) {
            // Create a user (userFollowing) that follows a bunch of other users
            TestsUtil.generateTestUsers(camAdminRestContext, 10, function(err, users, userFollowing, userToDelete0, userToDelete1) {
                var followingUserInfos = _.toArray(arguments).slice(3);
                var followingUserIds = _.chain(followingUserInfos).pluck('user').pluck('id').value();
                var followingUserIdsAfterDelete = _.without(followingUserIds, userToDelete0.user.id, userToDelete1.user.id);
                FollowingTestUtil.followAll(userFollowing.restContext, followingUserIds, function() {

                    // Ensure the userFollowing sees all the user they follow in their following list
                    FollowingTestUtil.assertGetAllFollowingEquals(userFollowing.restContext, userFollowing.user.id, {'batchSize': 1}, followingUserIds, function() {

                        // Delete 2 of the users, ensuring they are no longer in the userFollowing's following list
                        PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete0.user.id, function() {
                            PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete1.user.id, function() {
                                FollowingTestUtil.assertGetAllFollowingEquals(userFollowing.restContext, userFollowing.user.id, {'batchSize': 1}, followingUserIdsAfterDelete, function() {

                                    // Restore the 2 users, ensuring they re-appear in the userFollowing's following list
                                    PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete0.user.id, function() {
                                        PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete1.user.id, function() {
                                            FollowingTestUtil.assertGetAllFollowingEquals(userFollowing.restContext, userFollowing.user.id, {'batchSize': 1}, followingUserIds, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Search', function() {

        describe('General', function() {

            /**
             * Test that verifies that deleting and restoring groups both removes and restores it in
             * general search
             */
            it('verify deleting and restoring a group removes it and adds it back in general search', function(callback) {
                // Create a group to test with
                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                    TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {

                        // Ensure we can search for it
                        SearchTestUtil.assertSearchContains(manager.restContext, 'general', null, {'q': group.group.displayName}, [group.group.id], function(response) {

                            // Delete the group
                            PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                                // Ensure we now cannot search for it
                                SearchTestUtil.assertSearchNotContains(manager.restContext, 'general', null, {'q': group.group.displayName}, [group.group.id], function(response) {

                                    // Restore the group
                                    PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                        // Ensure we can search for it again
                                        SearchTestUtil.assertSearchContains(manager.restContext, 'general', null, {'q': group.group.displayName}, [group.group.id], function(response) {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that deleting and restoring groups both removes and restores it in
             * general search
             */
            it('verify deleting and restoring a user removes them and adds them back in general search', function(callback) {
                // Create a group to test with
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, userSearcher, userDeleted) {

                    // Ensure we can search for it
                    SearchTestUtil.assertSearchContains(userSearcher.restContext, 'general', null, {'q': userDeleted.displayName}, [userDeleted.user.id], function(response) {

                        // Delete the group
                        PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, userDeleted.restContext, userDeleted.user.id, function() {

                            // Ensure we now cannot search for it
                            SearchTestUtil.assertSearchNotContains(userSearcher.restContext, 'general', null, {'q': userDeleted.user.displayName}, [userDeleted.user.id], function(response) {

                                // Restore the group
                                PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userDeleted.user.id, function() {

                                    // Ensure we can search for it again
                                    SearchTestUtil.assertSearchContains(userSearcher.restContext, 'general', null, {'q': userDeleted.user.displayName}, [userDeleted.user.id], function(response) {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('Memberships', function() {

            /**
             * Test that verifies that deleting and restoring groups both removes and restores
             * access to memberships search
             */
            it('verify deleting and restoring a group removes and adds access to its memberships search', function(callback) {
                // Create a user and group to test with
                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                    TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {

                        // Ensure the memberships library can be searched
                        SearchTestUtil.assertSearchSucceeds(manager.restContext, 'memberships-library', [group.group.id], null, function(response) {

                            // Delete the group
                            PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                                // Ensure the memberships search now results in a 404
                                SearchTestUtil.assertSearchFails(manager.restContext, 'memberships-library', [group.group.id], null, 404, function() {

                                    // Restore the group
                                    PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                        // Ensure the memberships search succeeds again
                                        SearchTestUtil.assertSearchSucceeds(manager.restContext, 'memberships-library', [group.group.id], null, function(response) {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that deleting and restoring users both removes and restores access
             * to memberships search
             */
            it('verify deleting and restoring a user removes and adds access to its memberships search', function(callback) {
                // Create a user to test with
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, user, userToDelete) {

                    // Delete the user
                    PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, userToDelete.restContext, userToDelete.user.id, function() {

                        // Ensure the memberships search results in a 404
                        SearchTestUtil.assertSearchFails(user.restContext, 'memberships-library', [userToDelete.user.id], null, 404, function() {

                            // Restore the user
                            PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete.user.id, function() {

                                // Ensure the memberships search now succeeds
                                SearchTestUtil.assertSearchSucceeds(user.restContext, 'memberships-library', [userToDelete.user.id], null, function(response) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that deleting and restoring groups both removes and restores
             * indirect memberships associations in memberships search
             */
            it('verify deleting and restoring a group removes and adds indirect groups in memberships search', function(callback) {
                // Create a group memberships hierarchy to test with
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, manager, member) {
                    TestsUtil.generateTestGroups(manager.restContext, 4, function(group1, group2, group3, group4) {
                        var groups = Array.prototype.slice.call(arguments);
                        var groupIds = _.chain(groups).pluck('group').pluck('id').value();
                        TestsUtil.generateGroupHierarchy(manager.restContext, groupIds.concat(member.user.id), 'member', function() {

                            // Ensure our member user can find all the groups in their memberships
                            // library search
                            SearchTestUtil.assertSearchContains(member.restContext, 'memberships-library', [member.user.id], null, groupIds, function() {

                                // Delete the group that is a direct parent of the user (group4)
                                PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group4.group.id, function() {

                                    // Ensure the member cannot find any of the groups in their memberships search
                                    SearchTestUtil.assertSearchNotContains(member.restContext, 'memberships-library', [member.user.id], null, groupIds, function() {

                                        // Restore the group and ensure they find them all again
                                        PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group4.group.id, function() {
                                            SearchTestUtil.assertSearchContains(member.restContext, 'memberships-library', [member.user.id], null, groupIds, function() {

                                                // Delete an intermediary group (group2) and ensure group3 and group4 show up, but not group1
                                                PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group2.group.id, function() {
                                                    SearchTestUtil.assertSearchNotContains(member.restContext, 'memberships-library', [member.user.id], null, groupIds.slice(0, 2), function() {
                                                        SearchTestUtil.assertSearchContains(member.restContext, 'memberships-library', [member.user.id], null, groupIds.slice(2), function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that deleting and restoring groups both removes and restores
             * access to its members search
             */
            it('verify deleting and restoring a group removes and adds access to its members search', function(callback) {
                // Create a user and group to test with
                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, manager) {
                    TestsUtil.generateTestGroups(manager.restContext, 1, function(group) {

                        // Ensure the memberships library can be searched
                        SearchTestUtil.assertSearchContains(manager.restContext, 'members-library', [group.group.id], null, [manager.user.id], function(response) {

                            // Delete the group
                            PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, group.group.id, function() {

                                // Ensure the memberships search now results in a 404
                                SearchTestUtil.assertSearchFails(manager.restContext, 'members-library', [group.group.id], null, 404, function() {

                                    // Restore the group
                                    PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, group.group.id, function() {

                                        // Ensure the memberships search succeeds again
                                        SearchTestUtil.assertSearchContains(manager.restContext, 'members-library', [group.group.id], null, [manager.user.id], function(response) {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies that deleting and restoring groups results in groups still showing
             * up in members search with a deletion indication
             */
            it('verify deleting and restoring a group results in it still showing up in members search with a deletion indication', function(callback) {
                // Create a group memberships hierarchy to test with
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, manager, member) {
                    TestsUtil.generateTestGroups(manager.restContext, 4, function(parentGroup, childGroup1, childGroup2, childGroup3) {
                        var groups = Array.prototype.slice.call(arguments);
                        var memberIds = _.chain(groups).pluck('group').pluck('id').value().slice(1).concat(member.user.id);

                        // Add all members to the parent group
                        var roleChanges = {};
                        _.each(memberIds, function(memberId) {
                            roleChanges[memberId] = 'member';
                        });
                        PrincipalsTestUtil.assertSetGroupMembersSucceeds(manager.restContext, manager.restContext, parentGroup.group.id, roleChanges, function() {

                            // Ensure we see all the groups in members search
                            SearchTestUtil.assertSearchContains(manager.restContext, 'members-library', [parentGroup.group.id], null, memberIds, function(response) {

                                // Delete the first child group and ensure it can still be found in the members search
                                PrincipalsTestUtil.assertDeleteGroupSucceeds(camAdminRestContext, manager.restContext, childGroup1.group.id, function() {
                                    SearchTestUtil.assertSearchContains(manager.restContext, 'members-library', [parentGroup.group.id], null, memberIds, function(response) {

                                        // Ensure the document that represents the deleted group indicates it is deleted with
                                        // no profile path
                                        var childGroup1Document = _.findWhere(response.results, {'id': childGroup1.group.id});
                                        assert.ok(childGroup1Document);
                                        assert.ok(_.isNumber(childGroup1Document.deleted));
                                        assert.ok(!_.chain(childGroup1Document).keys().contains('profilePath').value());

                                        // Restore the first child group and ensure it is still in the members search with the deleted indicator removed and its
                                        // `profilePath` property restored
                                        PrincipalsTestUtil.assertRestoreGroupSucceeds(camAdminRestContext, camAdminRestContext, childGroup1.group.id, function() {
                                            SearchTestUtil.assertSearchContains(manager.restContext, 'members-library', [parentGroup.group.id], null, memberIds, function(response) {

                                                // Ensure the document that represents the restored group indicates it is not deleted
                                                // with a profile path
                                                var childGroup1Document = _.findWhere(response.results, {'id': childGroup1.group.id});
                                                assert.ok(childGroup1Document);
                                                assert.ok(!_.chain(childGroup1Document).keys().contains('deleted').value());
                                                assert.ok(childGroup1Document.profilePath);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('Following', function() {

            /**
             * Test that verifies deleting and restoring a user removes and restores access to their
             * following and followers search
             */
            it('verify deleting and restoring a user removes and restores access to their following and followers search', function(callback) {
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, user, userToDelete) {

                    // Delete the user
                    PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete.user.id, function() {

                        // Ensure there is no access to their following or followers feed
                        FollowingTestUtil.assertNoSearchFeedAccess(user.restContext, [userToDelete.user.id], 404, function() {

                            // Restore the user
                            PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete.user.id, function() {

                                // Ensure access is restored to the following and followers feed
                                FollowingTestUtil.assertHasSearchFeedAccess(user.restContext, [userToDelete.user.id], function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies deleting and restoring a user removes and restores them in
             * followers search
             */
            it('verify deleting and restoring a user removes and restores them in followers search', function(callback) {
                // Create a user (userToFollow) that is followed by a bunch of other users
                TestsUtil.generateTestUsers(camAdminRestContext, 10, function(err, users, userToFollow, userToDelete0, userToDelete1) {
                    var followerUserInfos = _.toArray(arguments).slice(3);
                    FollowingTestUtil.followByAll(userToFollow.user.id, followerUserInfos, function() {

                        // Ensure that all users appear in the userToFollow's followers list
                        var followerUserIds = _.chain(followerUserInfos).pluck('user').pluck('id').value();
                        var followerUserIdsAfterDelete = _.without(followerUserIds, userToDelete0.user.id, userToDelete1.user.id);
                        SearchTestUtil.assertSearchEquals(userToFollow.restContext, 'followers', [userToFollow.user.id], null, followerUserIds, function() {

                            // Delete 2 of the users, ensuring they are no longer in the userToFollow's followers list
                            PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete0.user.id, function() {
                                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete1.user.id, function() {
                                    SearchTestUtil.assertSearchEquals(userToFollow.restContext, 'followers', [userToFollow.user.id], null, followerUserIdsAfterDelete, function() {

                                        // Restore the 2 users, ensuring the re-appear in the userToFollow's followers list
                                        PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete0.user.id, function() {
                                            PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete1.user.id, function() {
                                                SearchTestUtil.assertSearchEquals(userToFollow.restContext, 'followers', [userToFollow.user.id], null, followerUserIds, function() {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies deleting and restoring a user removes and restores them in
             * followings search
             */
            it('verify deleting and restoring a user removes and restores them in following search', function(callback) {
                // Create a user (userFollowing) that follows a bunch of other users
                TestsUtil.generateTestUsers(camAdminRestContext, 10, function(err, users, userFollowing, userToDelete0, userToDelete1) {
                    var followingUserInfos = _.toArray(arguments).slice(3);
                    var followingUserIds = _.chain(followingUserInfos).pluck('user').pluck('id').value();
                    var followingUserIdsAfterDelete = _.without(followingUserIds, userToDelete0.user.id, userToDelete1.user.id);
                    FollowingTestUtil.followAll(userFollowing.restContext, followingUserIds, function() {

                        // Ensure the userFollowing sees all the user they follow in their following list
                        SearchTestUtil.assertSearchEquals(userFollowing.restContext, 'following', [userFollowing.user.id], null, followingUserIds, function() {

                            // Delete 2 of the users, ensuring they are no longer in the userFollowing's following list
                            PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete0.user.id, function() {
                                PrincipalsTestUtil.assertDeleteUserSucceeds(camAdminRestContext, camAdminRestContext, userToDelete1.user.id, function() {
                                    SearchTestUtil.assertSearchEquals(userFollowing.restContext, 'following', [userFollowing.user.id], null, followingUserIdsAfterDelete, function() {

                                        // Restore the 2 users, ensuring they re-appear in the userFollowing's following list
                                        PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete0.user.id, function() {
                                            PrincipalsTestUtil.assertRestoreUserSucceeds(camAdminRestContext, userToDelete1.user.id, function() {
                                                SearchTestUtil.assertSearchEquals(userFollowing.restContext, 'following', [userFollowing.user.id], null, followingUserIds, function() {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        describe('Deleted', function() {

            /**
             * Test that verifies authorization of the deleted search
             */
            it('verify authorization of deleted search', function(callback) {
                TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2) {

                    // Ensure non-admin users cannot search deleted items
                    SearchTestUtil.assertSearchFails(publicTenant1.anonymousRestContext, 'deleted', null, null, 401, function() {
                        SearchTestUtil.assertSearchFails(publicTenant1.publicUser.restContext, 'deleted', null, null, 401, function() {

                            // Ensure admin users can search deleted items
                            SearchTestUtil.assertSearchSucceeds(publicTenant1.adminRestContext, 'deleted', null, null, function(response) {
                                SearchTestUtil.assertSearchSucceeds(globalAdminRestContext, 'deleted', null, null, function(response) {
                                    SearchTestUtil.assertSearchSucceeds(globalAdminRestContext, 'deleted', null, null, function(response) {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies scope resolution of the deleted search for global admin
             */
            it('verify scope resolution of deleted search for global admin', function(callback) {
                var description = TestsUtil.generateRandomText(16);
                TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2) {
                    var tenant1Groups = [publicTenant1.publicGroup, publicTenant1.loggedinGroup, publicTenant1.privateGroup];
                    var tenant2Groups = [publicTenant2.publicGroup, publicTenant2.loggedinGroup, publicTenant2.privateGroup];
                    var tenant1Users = [publicTenant1.publicUser, publicTenant1.loggedinUser, publicTenant1.privateUser];
                    var tenant2Users = [publicTenant2.publicUser, publicTenant2.loggedinUser, publicTenant2.privateUser];
                    var tenant1GroupIds = _.chain(tenant1Groups).pluck('id').value();
                    var tenant2GroupIds = _.chain(tenant2Groups).pluck('id').value();
                    var tenant1UserIds = _.chain(tenant1Users).pluck('user').pluck('id').value();
                    var tenant2UserIds = _.chain(tenant2Users).pluck('user').pluck('id').value();
                    var allGroupIds = _.union(tenant1GroupIds, tenant2GroupIds);
                    var allUserIds = _.union(tenant1UserIds, tenant2UserIds);

                    // Update all users and groups groups to have a description that we can search on
                    PrincipalsTestUtil.assertUpdateGroupsSucceeds(publicTenant1.adminRestContext, tenant1GroupIds, {'description': description}, function(tenant1GroupsUpdated) {
                        PrincipalsTestUtil.assertUpdateGroupsSucceeds(publicTenant2.adminRestContext, tenant2GroupIds, {'description': description}, function(tenant2GroupsUpdated) {
                            PrincipalsTestUtil.assertUpdateUsersSucceeds(publicTenant1.adminRestContext, tenant1UserIds, {'displayName': description}, function(tenant1UsersUpdated) {
                                PrincipalsTestUtil.assertUpdateUsersSucceeds(publicTenant2.adminRestContext, tenant2UserIds, {'displayName': description}, function(tenant2UsersUpdated) {

                                    // Delete the groups and users in both of our tenants, LOL!!!
                                    PrincipalsTestUtil.assertDeleteGroupsSucceeds(publicTenant1.adminRestContext, publicTenant1.adminRestContext, tenant1GroupIds, function() {
                                        PrincipalsTestUtil.assertDeleteGroupsSucceeds(publicTenant2.adminRestContext, publicTenant2.adminRestContext, tenant2GroupIds, function() {
                                            PrincipalsTestUtil.assertDeleteUsersSucceeds(publicTenant1.adminRestContext, publicTenant1.adminRestContext, tenant1UserIds, function() {
                                                PrincipalsTestUtil.assertDeleteUsersSucceeds(publicTenant2.adminRestContext, publicTenant2.adminRestContext, tenant2UserIds, function() {

                                                    // Ensure global admin can search all tenant users and groups together with _all/default scope
                                                    SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description}, allGroupIds, function() {
                                                        SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': '_all'}, allGroupIds, function() {
                                                            SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description}, allUserIds, function() {
                                                                SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': '_all'}, allUserIds, function() {

                                                                    // Ensure global admin can search groups and users in tenant1 and tenant2 alone using scope
                                                                    SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant1.tenant.alias}, tenant1GroupIds, function() {
                                                                        SearchTestUtil.assertSearchNotContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant1.tenant.alias}, tenant2GroupIds, function() {
                                                                            SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant2.tenant.alias}, tenant2GroupIds, function() {
                                                                                SearchTestUtil.assertSearchNotContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant2.tenant.alias}, tenant1GroupIds, function() {
                                                                                    SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant1.tenant.alias}, tenant1UserIds, function() {
                                                                                        SearchTestUtil.assertSearchNotContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant1.tenant.alias}, tenant2UserIds, function() {
                                                                                            SearchTestUtil.assertSearchContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant2.tenant.alias}, tenant2UserIds, function() {
                                                                                                SearchTestUtil.assertSearchNotContains(globalAdminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant2.tenant.alias}, tenant1UserIds, function() {
                                                                                                    return callback();
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            /**
             * Test that verifies the scope specification is ignored in deleted search for tenant
             * admins
             */
            it('verify scope is ignored for tenant admin in deleted search', function(callback) {
                var description = TestsUtil.generateRandomText(16);
                TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2) {
                    var tenant1Groups = [publicTenant1.publicGroup, publicTenant1.loggedinGroup, publicTenant1.privateGroup];
                    var tenant2Groups = [publicTenant2.publicGroup, publicTenant2.loggedinGroup, publicTenant2.privateGroup];
                    var tenant1Users = [publicTenant1.publicUser, publicTenant1.loggedinUser, publicTenant1.privateUser];
                    var tenant2Users = [publicTenant2.publicUser, publicTenant2.loggedinUser, publicTenant2.privateUser];
                    var tenant1GroupIds = _.chain(tenant1Groups).pluck('id').value();
                    var tenant2GroupIds = _.chain(tenant2Groups).pluck('id').value();
                    var tenant1UserIds = _.chain(tenant1Users).pluck('user').pluck('id').value();
                    var tenant2UserIds = _.chain(tenant2Users).pluck('user').pluck('id').value();
                    var allGroupIds = _.union(tenant1GroupIds, tenant2GroupIds);
                    var allUserIds = _.union(tenant1UserIds, tenant2UserIds);

                    // Update all groups to have a description that we can search on
                    PrincipalsTestUtil.assertUpdateGroupsSucceeds(publicTenant1.adminRestContext, tenant1GroupIds, {'description': description}, function(tenant1GroupsUpdated) {
                        PrincipalsTestUtil.assertUpdateGroupsSucceeds(publicTenant2.adminRestContext, tenant2GroupIds, {'description': description}, function(tenant2GroupsUpdated) {
                            PrincipalsTestUtil.assertUpdateUsersSucceeds(publicTenant1.adminRestContext, tenant1UserIds, {'displayName': description}, function(tenant1UsersUpdated) {
                                PrincipalsTestUtil.assertUpdateUsersSucceeds(publicTenant2.adminRestContext, tenant2UserIds, {'displayName': description}, function(tenant2UsersUpdated) {

                                    // Delete the groups and users in both of our tenants, LOL!!!
                                    PrincipalsTestUtil.assertDeleteGroupsSucceeds(publicTenant1.adminRestContext, publicTenant1.adminRestContext, tenant1GroupIds, function() {
                                        PrincipalsTestUtil.assertDeleteGroupsSucceeds(publicTenant2.adminRestContext, publicTenant2.adminRestContext, tenant2GroupIds, function() {
                                            PrincipalsTestUtil.assertDeleteUsersSucceeds(publicTenant1.adminRestContext, publicTenant1.adminRestContext, tenant1UserIds, function() {
                                                PrincipalsTestUtil.assertDeleteUsersSucceeds(publicTenant2.adminRestContext, publicTenant2.adminRestContext, tenant2UserIds, function() {

                                                    // Ensure that scope is ignored for tenant1 admin, they can only search deleted groups and users for tenant1
                                                    SearchTestUtil.assertSearchContains(publicTenant1.adminRestContext, 'deleted', null, {'q': description}, _.union(tenant1GroupIds, tenant1UserIds), function() {
                                                        SearchTestUtil.assertSearchNotContains(publicTenant1.adminRestContext, 'deleted', null, {'q': description}, _.union(tenant2GroupIds, tenant2UserIds), function() {
                                                            SearchTestUtil.assertSearchContains(publicTenant1.adminRestContext, 'deleted', null, {'q': description, 'scope': '_all'}, _.union(tenant1GroupIds, tenant1UserIds), function() {
                                                                SearchTestUtil.assertSearchNotContains(publicTenant1.adminRestContext, 'deleted', null, {'q': description, 'scope': '_all'}, _.union(tenant2GroupIds, tenant2UserIds), function() {
                                                                    SearchTestUtil.assertSearchContains(publicTenant1.adminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant2.tenant.alias}, _.union(tenant1GroupIds, tenant1UserIds), function() {
                                                                        SearchTestUtil.assertSearchNotContains(publicTenant1.adminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant2.tenant.alias}, _.union(tenant2GroupIds, tenant2UserIds), function() {

                                                                            // Ensure that scope is ignored for tenant2 admin, they can only search deleted resources for tenant2
                                                                            SearchTestUtil.assertSearchContains(publicTenant2.adminRestContext, 'deleted', null, {'q': description}, _.union(tenant2GroupIds, tenant2UserIds), function() {
                                                                                SearchTestUtil.assertSearchNotContains(publicTenant2.adminRestContext, 'deleted', null, {'q': description}, _.union(tenant1GroupIds, tenant1UserIds), function() {
                                                                                    SearchTestUtil.assertSearchContains(publicTenant2.adminRestContext, 'deleted', null, {'q': description, 'scope': '_all'}, _.union(tenant2GroupIds, tenant2UserIds), function() {
                                                                                        SearchTestUtil.assertSearchNotContains(publicTenant2.adminRestContext, 'deleted', null, {'q': description, 'scope': '_all'}, _.union(tenant1GroupIds, tenant1UserIds), function() {
                                                                                            SearchTestUtil.assertSearchContains(publicTenant2.adminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant1.tenant.alias}, _.union(tenant2GroupIds, tenant2UserIds), function() {
                                                                                                SearchTestUtil.assertSearchNotContains(publicTenant2.adminRestContext, 'deleted', null, {'q': description, 'scope': publicTenant1.tenant.alias}, _.union(tenant1GroupIds, tenant1UserIds), function() {
                                                                                                    return callback();
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
