/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');

module.exports.testKeyspaceExists = function(test) {
    test.expect(6);

    var keyspace = "keyspacetest" + Math.floor(Math.random()*100000000);
    Cassandra.createKeyspace(keyspace, function(err, created) {
        test.ok(!err);
        test.ok(created);

        Cassandra.keyspaceExists(keyspace, function(err, exists) {
            test.ok(!err);
            test.ok(exists);

            Cassandra.dropKeyspace(keyspace, function(err, dropped) {
                test.ok(!err);
                test.ok(dropped);

                test.done();
            });
        });
    });
};

module.exports.testColumnFamily = function(test) {
    test.expect(8);

    var name = "cf" + Math.floor(Math.random()*10000000);
    Cassandra.createColumnFamily(name, "create table " + name + " (key_id text primary key)", function(err, created) {
        test.ok(!err);
        test.ok(created);

         // Check if it exists.
        Cassandra.columnFamilyExists(name, function(err, exists) {
            test.ok(!err);
            test.ok(exists);

            // Drop it.
            Cassandra.dropColumnFamily(name, function(err, dropped) {
                test.ok(!err);
                test.ok(dropped);

                // Make sure it's gone.
                Cassandra.columnFamilyExists(name, function(err, exists) {
                    test.ok(!err);
                    test.ok(!exists);

                    test.done();
                });
            });
        });
    })
};

module.exports.testColumnFamilies = function(test) {
    test.expect(10);

    var name1 = 'cf' + Math.floor(Math.random()*10000000);
    var name2 = 'cf' + Math.floor(Math.random()*10000000);

    Cassandra.createColumnFamilies({
        name1: 'create table ' + name1 + ' (key_id text primary key)',
        name2: 'create table ' + name2 + ' (key_id text primary key)'
    }, function(err) {
        test.ok(!err);
        // Check if it exists.
        Cassandra.columnFamilyExists(name1, function(err, exists) {
            test.ok(!err);
            test.ok(exists);
            Cassandra.columnFamilyExists(name2, function(err, exists) {
                test.ok(!err);
                test.ok(exists);
                // Remove them
                Cassandra.dropColumnFamilies([name1, name2], function(err){
                    test.ok(!err);
                    // Check if they still exist
                    Cassandra.columnFamilyExists(name1, function(err, exists) {
                        test.ok(!err);
                        test.ok(!exists);
                        Cassandra.columnFamilyExists(name2, function(err, exists) {
                            test.ok(!err);
                            test.ok(!exists);
                            test.done();
                        });
                    });
                });
            });
        });
    });
};

/**
 * Test that verifies that simple queries can be run against Cassandra. It will first create a CF, on which
 * a valid insert, an invalid insert, a valid select and an invalid select are run.
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.testQuery = function(test) {
    test.expect(9);

    // Create a CF first
    Cassandra.createColumnFamily('testQuery', "create table testQuery (key_id text primary key)", function(err, created) {
        test.ok(!err);
        test.ok(created);
        // Check if the CF exists
        Cassandra.columnFamilyExists('testQuery', function(err, exists) {
            test.ok(!err);
            test.ok(exists);
            // Try to run a simple insert
            Cassandra.runQuery('INSERT INTO testQuery (key_id, c1, c2) VALUES (?, ?, ?)', ['key1', 'value1', 'value2'], function (err) {
                test.ok(!err);
                // Try to run an invalid insert
                Cassandra.runQuery('INSERT INTO testQuery (key_id, c1, c2) VALUES (?, ?, ?)', ['key2', 'value', null], function (err) {
                    test.ok(err);
                    // Try to run a simple select
                    Cassandra.runQuery('SELECT * FROM testQuery WHERE key_id = ?', ['key1'], function (err, rows) {
                        test.ok(!err);
                        test.equal(rows.rowCount(), 1);
                        // Try to run an invalid select
                        Cassandra.runQuery('SELECT * FROM testQuery WHERE key_id = ?', [null], function (err, rows) {
                            test.ok(err);
                            test.done();
                        });
                    });
                });
            });
        });
    });
};
