/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');
var Zencoder = require('zencoder');

var log = require('oae-logger').logger('oae-zencoder');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var TenantsAPI = require('oae-tenants/lib/api');
var ContentConfig = require('oae-config').config('oae-content');

var ZencoderAPI = require('./api');
var ZencoderConfig = require('oae-config').config('oae-zencoder');

/**
 * Get the Zencoder API values that have been configured in the Admin UI.
 *
 * @return {Object} The Zencoder configuration for the tenant or the generic config for the host
 */
var getConfig = module.exports.getConfig = function(tenantAlias) {
    var config = ZencoderAPI.getConfiguration();

    if (ZencoderConfig.getValue(tenantAlias, 'zencoder', 'enabled') && ZencoderConfig.getValue(tenantAlias, 'zencoder', 'apiKey')) {
        return _.extend(config, {
            'apiKey': ZencoderConfig.getValue(tenantAlias, 'zencoder', 'apiKey'),
            'watermark': null,
            'amazons3-region': ContentConfig.getValue(tenantAlias, 'storage', 'amazons3-region') || config['amazons3-region'],
            'amazons3-bucket': ContentConfig.getValue(tenantAlias, 'storage', 'amazons3-bucket') || config['amazons3-bucket'],
            'amazons3-access-key': ContentConfig.getValue(tenantAlias, 'storage', 'amazons3-access-key') || config['amazons3-access-key'],
            'amazons3-secret-key': ContentConfig.getValue(tenantAlias, 'storage', 'amazons3-secret-key') || config['amazons3-secret-key']
        });
    } else {
        return config;
    }
};

/**
 * Create an encoding job in Zencoder.
 *
 * @param  {Object}     config              The default configuration
 * @param  {String}     tenantAlias         The alias of the tenant whose configuration to use
 * @param  {String}     path                The signed path to video/audio file
 * @param  {Function}   callback            Standard callback function
 * @param  {Error}      callback.err        An error that occurred, if any
 * @param  {Response}   callback.response   The HTTP Response object
 * @param  {String}     callback.body       The body of the response
 */
var job = module.exports.job = function(tenantAlias, path, contentId, revisionId, isVideo, callback) {
    var config = getConfig(tenantAlias);

    var tenant = TenantsAPI.getTenant(tenantAlias);
    var baseUrl = util.format('s3://s3-%s.amazonaws.com/%s/%s', config['amazons3-region'], config['amazons3-bucket'], contentId);
    var extension = isVideo ? 'mp4' : 'mp3';
    var filename = util.format('%s.%s', revisionId.replace(/:/g, '-'), extension);

    var options = {
        input: util.format('https://%s%s', tenant.host, path),
        pass_through: util.format('%s/%s', contentId, filename),
        private: true,
        height: 600,
        output: {
            notifications: util.format('https://%s/api/zencoder/encodingNotification', tenant.host),
            base_url: baseUrl,
            filename: filename,
            format: extension
        }
    };

    if (isVideo) {
        _.extend(options.output, {
                thumbnails: [
                    {
                        label: 'base',
                        number: 1,
                        base_url: baseUrl,
                        height: PreviewConstants.SIZES.IMAGE.LARGE,
                        width: PreviewConstants.SIZES.IMAGE.LARGE,
                        filename: 'base'
                    }
                ]
            });
        if (config.watermark) {
            _.extend(options.output, {
                    watermarks: [
                        {
                            url: config.watermark,
                            opacity: 0.3,
                            width: '20%'
                        }
                    ]
            });
        }
    } else {
        _.extend(options, {
                skip_video: true
        });
    }

    log().info('Creating Zencoder job');

    new Zencoder(config.apiKey).Job.create(options, function(err, data, res) {
        if (err) {
            return callback(err);
        }

        return callback(null, res, data);
    });
};
