/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var PrincipalsUtil = require('oae-principals/lib/util');

/**
 * Convert an annotation into a data object that can be returned in the REST APIs
 *
 * @param  {Context}        ctx                     The context of the current user
 * @param  {Annotation[]}   annotations             The set of annotations that need to be converted
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Standard error object, if any
 * @param  {Object[]}       callback.annotations    Converted annotations that can be returned over the REST apis
 */
var toViewData = module.exports.toViewData = function(ctx, annotations, callback) {
    var userIds = _.union(
        _.pluck(annotations, 'createdBy'),
        _.pluck(annotations, 'updatedBy')
    );
    userIds = _.compact(userIds);

    PrincipalsUtil.getPrincipals(ctx, userIds, function(err, users) {
        if (err) {
            return callback(err);
        }

        var viewData = _.map(annotations, function(annotation) {
            return new AnnotationView(annotation, users);
        });

        return callback(null, viewData);
    });
};


/**
 * The view model for an annotation
 *
 * @param  {Annotation}     dataAnnotation      The "data" annotation that should be converted into a "view" annotation
 * @param  {User[]}         users               A set of users that can be used to augment the `user`, `createdBy` or `updatedBy` properties
 * @api private
 */
var AnnotationView = function(dataAnnotation, users) {
    var that = _.extend({}, dataAnnotation);

    // Replace the user IDs into proper user objects
    that.user = users[dataAnnotation.createdBy];
    that.createdBy = users[dataAnnotation.createdBy];
    that.updatedBy = users[dataAnnotation.updatedBy];

    // Convert dates to ISO 8601
    that.created = new Date(that.created).toISOString();
    if (that.updated) {
        that.updated = new Date(that.updated).toISOString();
    }

    // Properties that are consumed by the annotator UI component
    that.annotator_schema_version = 'v1.0';
    that.consumer = 'OAE';
    return that;
};
