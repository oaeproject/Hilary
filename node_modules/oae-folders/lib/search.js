/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _  = require('underscore');

var AuthzSearch = require('oae-authz/lib/search');
var SearchAPI = require('oae-search');

var FoldersAPI = require('oae-folders');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;

/*!
 * When a folder is created, fire a task to update the memberships search documents of the
 * members of the folder
 */
FoldersAPI.on(FoldersConstants.events.CREATED_FOLDER, function(ctx, folder, members) {
    AuthzSearch.fireMembershipUpdateTasks(_.keys(members));
});

/*!
 * When the members of a folder are updated, fire a task to update the memberships search
 * documents of those whose roles have changed
 */
FoldersAPI.on(FoldersConstants.events.UPDATED_FOLDER_MEMBERS, function(ctx, folder, roleChanges) {
    AuthzSearch.fireMembershipUpdateTasks(_.keys(roleChanges));
});

/*!
 * When content items are added to a folder, fire a task to update the members search document
 * of the content items that were added
 */
FoldersAPI.on(FoldersConstants.events.ADDED_CONTENT_ITEMS, function(ctx, folder, contentItems) {
    var contentIds = _.map(contentItems, function(contentItem) {
        return _.pick(contentItem, 'id');
    });
    _indexContentResourceMembers(contentIds);
});

/*!
 * When content items are removed from a folder, fire a task to update the members search document
 * of the content items that were removed
 */
FoldersAPI.on(FoldersConstants.events.REMOVED_CONTENT_ITEMS, function(ctx, folder, contentIds) {
    contentIds = _.map(contentIds, function(contentId) {
        return {'id': contentId};
    });
    _indexContentResourceMembers(contentIds);
});

/**
 * Index the resource members for a set of content items
 *
 * @param  {Object[]}   contentIds    A set of objects holding the ids for the content items that need their members reindexed
 * @api private
 */
var _indexContentResourceMembers = function(contentIds) {
    SearchAPI.postIndexTask('content', contentIds, {
        'children': {
            'resource_members': true
        }
    });
};
