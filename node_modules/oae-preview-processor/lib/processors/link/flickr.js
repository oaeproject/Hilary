/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');
var util = require('util');

var log = require('oae-logger').logger('oae-preview-processor');
var PreviewConfig = require('oae-config').config('oae-preview-processor');

var LinkProcessorUtil = require('oae-preview-processor/lib/processors/link/util');
var PreviewUtil = require('oae-preview-processor/lib/util');

// A regular expression that can be used to check if a URL points to a specific photo
var REGEX_PHOTO = /^http(s)?:\/\/(www\.)?flickr\.com\/photos\/([-_a-zA-Z0-9\@]+)\/(\d+)/;
// A regular expression that can be used to check if a (short) URL points to a specific photo
var REGEX_SHORT_PHOTO = /^http(s)?:\/\/flic.kr\/p\/([_a-zA-Z0-9]+)/;
// A regular expression that can be used to check if a URL points to a set of photos
var REGEX_SET = /^http(s)?:\/\/(www\.)?flickr\.com\/photos\/([-_a-zA-Z0-9\@]+)\/sets\/(\d+)/;

// The URL where the Flickr REST API can be reached
var apiUrl = 'https://api.flickr.com/services/rest/';

// The URL where the image can be downloaded
var imageUrl = 'https://farm%s.static.flickr.com/%s/%s_%s_b.jpg';

/**
 * Set the URL where the Flickr API can be reached
 *
 * @param  {String}     _apiUrl     Defines the URL (including protocol and path) where the flickr REST API can be reached
 */
var setApiUrl = (module.exports.setApiUrl = function(_apiUrl) {
  apiUrl = _apiUrl;
});

/**
 * Set the URL where a Flickr image can be downloaded (including placeholders)
 *
 * @param  {String}     _imageUrl     Defines the URL (including protocol and path) where an image can be downloaded
 */
var setImageUrl = (module.exports.setImageUrl = function(_imageUrl) {
  imageUrl = _imageUrl;
});

/**
 * @borrows Interface.test as FlickrProcessor.test
 */
var test = (module.exports.test = function(ctx, contentObj, callback) {
  // Don't bother with non-link content items
  if (contentObj.resourceSubType !== 'link') {
    return callback(null, -1);
  }

  // First check that this retriever has been configured in the Admin UI
  var config = _getConfig();
  if (!config.apiKey || !config.apiSecret) {
    return callback(null, -1);
  }

  // Only allow URLs that are on the Flickr domain
  if (
    REGEX_PHOTO.test(contentObj.link) ||
    REGEX_SHORT_PHOTO.test(contentObj.link) ||
    REGEX_SET.test(contentObj.link)
  ) {
    return callback(null, 10);
  } else {
    return callback(null, -1);
  }
});

/**
 * @borrows Interface.generatePreviews as FlickrProcessor.generatePreviews
 */
var generatePreviews = (module.exports.generatePreviews = function(
  ctx,
  contentObj,
  callback,
) {
  /*!
     * Downloads a thumbnail from flickr and processes it
     *
     * @param  {Object}     err     An error object coming from the metadata fetchers
     * @param  {Object}     opts    The object with metadata that we can use to fetch the image and/or a displayname and a description
     * @param  {Boolean}    ignore  If this value is set to `true` we'll ignore the picture
     * @api private
     */
  var handleDownload = function(err, opts, ignore) {
    if (err) {
      return callback(err);
    } else if (ignore) {
      return callback(null, true);
    }

    // Download it.
    var path = ctx.baseDir + '/flickr.jpg';
    PreviewUtil.downloadRemoteFile(opts.imageUrl, path, function(err, path) {
      if (err) {
        return callback(err);
      }

      return LinkProcessorUtil.generatePreviewsFromImage(
        ctx,
        path,
        opts,
        callback,
      );
    });
  };

  // Determine what type it is.
  var flickr = _getType(contentObj.link);
  if (flickr.type === 'photo') {
    _getFlickrPhoto(ctx, flickr.id, handleDownload);
  } else if (flickr.type === 'set') {
    _getFlickrSet(ctx, flickr.id, handleDownload);
  } else {
    // Technically shouldn't happen.
    log().error('Could not identify the type of Flickr url.');
    return callback({
      code: 500,
      msg: 'Could not identify the type of Flickr url.',
    });
  }
});

/**
 * Get the large image URL for a Flickr Photo ID
 *
 * @param  {PreviewContext}     ctx                 The preview context associated to this file
 * @param  {String}             id                  The Photo ID
 * @param  {Function}           callback            Standard callback function
 * @param  {Object}             callback.err        An error that occurred, if any
 * @param  {String}             callback.metadata   The metadata of the Flickr photo
 * @param  {Boolean}            callback.ignore     Whether or not this photo should be ignored
 * @api private
 */
var _getFlickrPhoto = function(ctx, id, callback) {
  var config = _getConfig();

  var url = util.format(
    '%s?method=flickr.photos.getInfo&api_key=%s&photo_id=%s&format=json&nojsoncallback=1',
    apiUrl,
    config.apiKey,
    id,
  );
  request(url, function(err, response, body) {
    if (err) {
      log().error(
        { err: err, body: body },
        'An unexpected error occurred getting a Flickr photo',
      );
      return callback(err);
    } else if (response.statusCode !== 200) {
      err = { code: response.statusCode, msg: body };
      log().error(
        { err: err },
        'An unexpected error occurred getting a Flickr photo',
      );
      return callback(err);
    }

    // Try and parse the Flickr response, returning with an error if it is not valid JSON
    var info = null;
    try {
      info = JSON.parse(body);
    } catch (ex) {
      log().error(
        { err: ex, contentId: ctx.contentId },
        'Could not parse flickr response',
      );
      return callback({ code: 500, msg: ex.message });
    }

    // Ignore this photo if it has no thumbnail
    if (!info.photo) {
      return callback(null, null, true);
    }

    // Return the important Flickr photo metadata
    return callback(null, {
      displayName: info.photo.title._content,
      description: info.photo.description._content,
      imageUrl: _getImageUrl(
        info.photo.farm,
        info.photo.server,
        info.photo.id,
        info.photo.secret,
      ),
    });
  });
};

/**
 * Get the large image URL for a Flickr set
 *
 * @param  {PreviewContext}     ctx                 The preview context associated to this file
 * @param  {String}             id                  The set ID
 * @param  {Function}           callback            Standard callback function
 * @param  {Object}             callback.err        An error that occurred, if any
 * @param  {String}             callback.metadata   The metadata of the Flickr photo
 * @param  {Boolean}            callback.ignore     Whether or not this photo should be ignored
 * @api private
 */
var _getFlickrSet = function(ctx, id, callback) {
  var config = _getConfig();
  var url = util.format(
    '%s?method=flickr.photosets.getInfo&api_key=%s&photoset_id=%s&format=json&nojsoncallback=1',
    apiUrl,
    config.apiKey,
    id,
  );
  request(url, function(err, response, body) {
    if (err) {
      log().error(
        { err: err, body: body },
        'An unexpected error occurred getting a Flickr photo set',
      );
      return callback(err);
    } else if (response.statusCode !== 200) {
      err = { code: response.statusCode, msg: body };
      log().error(
        { err: err },
        'An unexpected error occurred getting a Flickr photo set',
      );
      return callback(err);
    }

    // Try and parse the Flickr response, returning with an error if it is not valid JSON
    var info = null;
    try {
      info = JSON.parse(body);
    } catch (error) {
      log().error(
        { err: error, contentId: ctx.contentId },
        'Could not parse flickr response.',
      );
      return callback({ code: 500, msg: error.message });
    }

    // Ignore this set if it has no thumbnail
    if (!info.photoset) {
      return callback(null, null, true);
    }

    return callback(null, {
      displayName: info.photoset.title._content,
      description: info.photoset.description._content,
      imageUrl: _getImageUrl(
        info.photoset.farm,
        info.photoset.server,
        info.photoset.primary,
        info.photoset.secret,
      ),
    });
  });
};

/**
 * Get the Flickr API values that have been configured in the Admin UI
 *
 * @return {Object}     The apiKey and apiSecret from the Admin UI.
 * @api private
 */
var _getConfig = function() {
  return {
    apiKey: PreviewConfig.getValue('admin', 'flickr', 'apikey'),
    apiSecret: PreviewConfig.getValue('admin', 'flickr', 'apisecret'),
  };
};

/**
 * Get the URL where a JPG image can be downloaded from
 *
 * @param  {Number}     farm        The flickr farm the image is located on
 * @param  {String}     server      The flickr server the image is licated on
 * @param  {String}     id          The id for the flickr photo
 * @param  {String}     secret      The secret identifier for the flickr photo
 * @return {String}                 The URL where the image can be downloaded
 * @api private
 */
var _getImageUrl = function(farm, server, id, secret) {
  return util.format(imageUrl, farm, server, id, secret);
};

/**
 * Get the type for this url.
 *
 * @param  {String}     url     The Flickr URL
 * @return {Object}             An object that has a key `type` that is either set to `photo` or `set` and a key `id` which is set to either the photo-id or the set-id
 * @api private
 */
var _getType = function(url) {
  // Check if it's a URL to a photo
  var match = url.match(REGEX_PHOTO);
  if (match) {
    return { type: 'photo', id: match[4] };
  }
  match = url.match(REGEX_SHORT_PHOTO);
  if (match) {
    return { type: 'photo', id: _base58Decode(match[2]) };
  }

  // Check if it's a set
  match = url.match(REGEX_SET);
  if (match) {
    return { type: 'set', id: match[4] };
  }

  // This shouldn't really happen
  return null;
};

/**
 * Decode a base 58 encoded string into a number.
 *
 * For example:
 *   `_base58Decode('a9uKUe')` will result in `6003353697`
 *
 * @param  {String}     s   The string to decode
 * @return {Number}         The number that was encoded in the string
 * @see {@link https://www.flickr.com/services/api/misc.urls.html#short}
 * @see {@link https://www.flickr.com/groups/api/discuss/72157616713786392/}
 * @api private
 */
var _base58Decode = function(s) {
  var alphabet = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';

  // Reverse the string
  var reversed = s
    .split('')
    .reverse()
    .join('');

  // The following is an iterative process where for each character in the
  // reversed string we:
  //  - Raise the alphabet-length to the power of i (current step)    (=exp)
  //  - Get the index of the character in the alphabet                (=position)
  //  - Multiply the position with the exponentation
  //  - Add it up                                                     (=val)
  var val = 0;
  var exp = 1;
  for (var i = 0; i < reversed.length; i++) {
    var position = alphabet.indexOf(reversed[i]);
    val += exp * position;
    exp = exp * alphabet.length;
  }

  return val;
};
