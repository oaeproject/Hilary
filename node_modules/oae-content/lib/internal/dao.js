/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('content-dao');

/**
 * Get the previews object of all the content items listed by id in `contentIds`. The returned `previews` object
 * contains the standard `previews` object of the content, as well as the lastModified date of the content item
 * so that the preview URL may be determined:
 *
 * ```javascript
 *  {
 *      '<ContentId0>' {
 *          'lastModified': 123456789,
 *          'previews': { <ContentPreviews> }
 *      },
 *      ...
 *  }
 * ```
 *
 * @param  {String[]}   contentIds                  The list of content ids whose previews to get
 * @param  {Function}   callback                    Invoked when the process compeletes
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Object}     callback.contentPreviews    An object keyed by `contentId` whose value contains the lastModified date of the content and its associated previews. If the content has no valid preview object, then its contentId will not be found as a key in this object.
 */
var getContentPreviews = module.exports.getContentPreviews = function(contentIds, callback) {
    if (!contentIds || !contentIds.length) {
        return callback(null, {});
    }

    Cassandra.runQuery('SELECT lastModified, previews FROM Content WHERE contentId IN (?)', [contentIds], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var previews = {};
        rows.forEach(function(row) {
            var lastModified = row.get('lastModified');
            var preview = row.get('previews');
            if (preview && preview.value && lastModified && lastModified.value) {
                lastModified = lastModified.value;
                try {
                    preview = JSON.parse(preview.value);
                } catch (err) {
                    log().warn({'contentId': row.key, 'previews': preview.value}, 'Could not parse preview data for content item.');
                    return;
                }

                previews[row.key] = {'lastModified': lastModified, 'previews': preview};
            }
        });

        return callback(null, previews);
    });
};

