/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var ImageUtil = require('oae-util/lib/image');

/**
 * Most of the tests in this suite don't actually crop or resize anything.
 * Those bits of code get tested via the oae-principals/tests/test-cropping suite.
 */
describe('Image', function() {

    var generateArea = function(x, y, width) {
        return {
            'x': x,
            'y': y,
            'width': width
        };
    };

    var generateSize = function(width, height) {
        return {
            'width': width,
            'height': height
        };
    };


    describe('#cropImage()', function() {

        /**
         * Simple validation checks.
         */
        it('verify parameter validation', function(callback) {
            ImageUtil.cropImage(undefined, generateArea(10, 10, 200), function(err) {
                assert.equal(err.code, 400);
                ImageUtil.cropImage('some/path', generateArea(undefined, 10, 200), function(err) {
                    assert.equal(err.code, 400);
                    ImageUtil.cropImage('some/path', generateArea(10, undefined, 200), function(err) {
                        assert.equal(err.code, 400);
                        ImageUtil.cropImage('some/path', generateArea(10, 10, undefined), function(err) {
                            assert.equal(err.code, 400);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Ensure that errors are being handled correctly.
         */
        it('verify error handling', function(callback) {
            ImageUtil.cropImage('some/path', generateArea(10, 10, 200), function(err) {
                assert.equal(err.code, 500);
                callback();
            });
        });
    });

    describe('#resizeImage()', function() {

        /**
         * Simple validation checks.
         */
        it('verify parameter validation', function(callback) {
            ImageUtil.resizeImage(undefined, generateSize(200, 200), function(err) {
                assert.equal(err.code, 400);
                ImageUtil.resizeImage('some/path', generateSize(-10, 200), function(err) {
                    assert.equal(err.code, 400);
                    ImageUtil.resizeImage('some/path', generateSize(10, -200), function(err) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        /**
         * Ensure that errors are being handled correctly.
         */
        it('verify error handling', function(callback) {
            ImageUtil.resizeImage('some/path', generateSize(200, 200), function(err) {
                assert.equal(err.code, 500);
                callback();
            });
        });
    });

    describe('#cropAndResize()', function(callback) {

        /**
         * Simple validation checks.
         */
        it('verify parameter validation', function(callback) {
            ImageUtil.cropAndResize(undefined, generateArea(0, 0, 200), [generateSize(100, 100)], function(err, files) {
                assert.equal(err.code, 400);
                assert.ok(!files);
                ImageUtil.cropAndResize('some/path', null, [generateSize(100, 100)], function(err, files) {
                    assert.equal(err.code, 400);
                    assert.ok(!files);
                    ImageUtil.cropAndResize('some/path', generateArea(-10, 0, 200), [generateSize(100, 100)], function(err, files) {
                        assert.equal(err.code, 400);
                        assert.ok(!files);
                        ImageUtil.cropAndResize('some/path', generateArea(0, -10, 200), [generateSize(100, 100)], function(err, files) {
                            assert.equal(err.code, 400);
                            assert.ok(!files);
                            ImageUtil.cropAndResize('some/path', generateArea(0, 0, -10), [generateSize(100, 100)], function(err, files) {
                                assert.equal(err.code, 400);
                                assert.ok(!files);
                                ImageUtil.cropAndResize('some/path', generateArea(-10, 0, 200), [generateSize(100, 100)], function(err, files) {
                                    assert.equal(err.code, 400);
                                    assert.ok(!files);
                                    ImageUtil.cropAndResize('some/path', generateArea(-10, 0, 200), null, function(err, files) {
                                        assert.equal(err.code, 400);
                                        assert.ok(!files);
                                        ImageUtil.cropAndResize('some/path', generateArea(-10, 0, 200), [], function(err, files) {
                                            assert.equal(err.code, 400);
                                            assert.ok(!files);
                                            ImageUtil.cropAndResize('some/path', generateArea(-10, 0, 200), [generateSize(-10, 10)], function(err, files) {
                                                assert.equal(err.code, 400);
                                                assert.ok(!files);
                                                ImageUtil.cropAndResize('some/path', generateArea(-10, 0, 200), [generateSize(10, -10)], function(err, files) {
                                                    assert.equal(err.code, 400);
                                                    assert.ok(!files);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#downScale()', function() {

        /**
         * Verify that the method parameters are validated.
         */
        it('verify parameter validation', function(callback) {
            ImageUtil.downScale(undefined, 100, function(err, file) {
                assert.equal(err.code, 400);
                assert.ok(!file);
                ImageUtil.downScale('some/path', NaN, function(err, file) {
                    assert.equal(err.code, 400);
                    assert.ok(!file);
                    ImageUtil.downScale('some/path', -10, function(err, file) {
                        assert.equal(err.code, 400);
                        assert.ok(!file);
                        callback();
                    });
                });
            });
        });
    });
});