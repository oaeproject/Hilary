/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var FoldersAPI = require('oae-folders');
var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;

/**
 * @REST postFolderCreate
 *
 * Create a new folder
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /folder
 * @FormParam   {string}            displayName         The display name of the folder
 * @FormParam   {string}            [description]       A longer description for the folder
 * @FormParam   {string}            [visibility]        The visibility of the folder. Defaults to the configured tenant default     [loggedin,private,public]
 * @FormParam   {string[]}          [managers]          Unique identifier(s) for users and groups to add as managers of the folder. The user creating the folder will be added as a manager automatically
 * @FormParam   {string[]}          [viewers]           Unique identifier(s) for users and groups to add as viewers of the folder
 * @Return      {BasicFolder}                           The created folder
 * @HttpResponse                    201                 The folder was created
 * @HttpResponse                    400                 A display name must be provided and can be at most 1000 characters long
 * @HttpResponse                    400                 A description can be at most 10000 characters long
 * @HttpResponse                    400                 An invalid visibility was provided
 * @HttpResponse                    400                 One or more of the members you're trying to add can not be added due to tenant/visibility boundaries
 * @HttpResponse                    401                 Anonymous users cannot create folders
 */
OAE.tenantRouter.on('post', '/api/folder', function(req, res) {
    var managerIds = OaeUtil.toArray(req.body.managers);
    var viewerIds = OaeUtil.toArray(req.body.viewers);

    // Hold the user roles to initialize the folder with
    var roles = {};

    // Apply the manager roles
    _.each(managerIds, function(managerId) {
        roles[managerId] = FoldersConstants.roles.MANAGER;
    });

    // Apply the viewer roles
    _.each(viewerIds, function(viewerId) {
        roles[viewerId] = FoldersConstants.roles.VIEWER;
    });

    FoldersAPI.createFolder(req.ctx, req.body.displayName, req.body.description, req.body.visibility, roles, function(err, folder) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, folder);
    });
});

/**
 * @REST getFolderManaged
 *
 * Get the folders the current user manages
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /folder/managed
 * @Return      {FoldersLibrary}                The folders the current user manages
 * @HttpResponse                    200         The folders the current user manages are returned
 * @HttpResponse                    401         Anonymous users don't manage any folders
 */
OAE.tenantRouter.on('get', '/api/folder/managed', function(req, res) {
    FoldersAPI.getManagedFolders(req.ctx, function(err, results, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': results, 'nextToken': nextToken});
    });
});

/**
 * @REST getFolderFolderId
 *
 * Get a full folder profile
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /folder/{folderId}
 * @PathParam   {string}            folderId            The id of the folder to get
 * @Return      {Folder}                                Full folder profile
 * @HttpResponse                    200                 The full folder profile is returned
 * @HttpResponse                    400                 An invalid folder id was provided
 * @HttpResponse                    401                 You're not allowed to access this folder
 */
OAE.tenantRouter.on('get', '/api/folder/:folderId', function(req, res) {
    FoldersAPI.getFullFolderProfile(req.ctx, req.params.folderId, function(err, folder) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, folder);
    });
});

/**
 * @REST postFolderFolderId
 *
 * Update a folder
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /folder/{folderId}
 * @PathParam   {string}            folderId            The id of the folder to update
 * @FormParam   {string}            [displayName]       Updated display name for the folder
 * @FormParam   {string}            [description]       Updated description for the folder
 * @FormParam   {string}            [visibility]        Updated visibility for the folder           [loggedin,private,public]
 * @Return      {Folder}                                Full folder profile
 * @HttpResponse                    200                 The folder is updated and its full profile is returned
 * @HttpResponse                    400                 An invalid folder id was provided
 * @HttpResponse                    400                 An invalid display name was provided
 * @HttpResponse                    400                 An invalid description was provided
 * @HttpResponse                    400                 An invalid visibility was provided
 * @HttpResponse                    401                 You're not allowed to update this folder
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId', function(req, res) {
    FoldersAPI.updateFolder(req.ctx, req.params.folderId, req.body, function(err, updatedFolder, failedContent) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, updatedFolder);
    });
});

/**
 * @REST postFolderFolderIdContentVisibility
 *
 * Update a folder
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /folder/{folderId}
 * @PathParam   {string}            folderId            The id of the folder to update
 * @FormParam   {string}            [visibility]        Updated visibility for the content in the folder           [loggedin,private,public]
 * @Return      {FolderContentVisibilityUpdate}         The content items that could not be updated
 * @HttpResponse                    200                 The content items in the folder have been updated. A set of content items that could not be updated are provided
 * @HttpResponse                    400                 An invalid folder id was provided
 * @HttpResponse                    400                 An invalid visibility was provided
 * @HttpResponse                    401                 You're not allowed to update this folder
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId/contentvisibility', function(req, res) {
    FoldersAPI.updateFolderContentVisibility(req.ctx, req.params.folderId, req.body.visibility, function(err, failedContent) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        var data = {'failedContent': failedContent};
        return res.send(200, data);
    });
});

/**
 * @REST deleteFolderFolderId
 *
 * Delete a folder
 *
 * @Server      tenant
 * @Method      DELETE
 * @Path        /folder/{folderId}
 * @PathParam   {string}            folderId            The id of the folder to delete
 * @Return      {void}
 * @HttpResponse                    200                 The folder has been deleted
 * @HttpResponse                    400                 An invalid folder id has been specified
 * @HttpResponse                    401                 You're not allowed to delete this folder
 */
OAE.tenantRouter.on('delete', '/api/folder/:folderId', function(req, res) {
    FoldersAPI.deleteFolder(req.ctx, req.params.folderId, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/**
 * @REST postFolderFolderIdShare
 *
 * Share a folder
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /folder/{folderId}/share
 * @PathParam   {string}            folderId            The id of the folder to share
 * @FormParam   {string[]}          members             Unique identifier(s) for users and groups to share the folder with
 * @Return      {void}
 * @HttpResponse                    200                 The folder has been shared
 * @HttpResponse                    400                 An invalid folder id has been specified
 * @HttpResponse                    400                 An invalid set of principals has been provided
 * @HttpResponse                    401                 You're not allowed to share this folder
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId/share', function(req, res) {
    var viewers = OaeUtil.toArray(req.body.viewers);
    FoldersAPI.shareFolder(req.ctx, req.params.folderId, viewers, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/**
 * @REST postFolderFolderIdMembers
 *
 * Update the members of a folder
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /folder/{folderId}/members
 * @PathParam   {string}                    folderId            The id of the folder to share
 * @BodyParam   {FolderMembersUpdate}       body                Object that describes the membership updates to apply to the folder
 * @Return      {void}
 * @HttpResponse                            200                 The members of the folder have been updated
 * @HttpResponse                            400                 An invalid folder id has been specified
 * @HttpResponse                            400                 Invalid role updates have been provided
 * @HttpResponse                            401                 You're not allowed to update the permissions for this folder
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId/members', function(req, res) {
    // Parse the incoming false values
    var permissionUpdates = {};
    _.each(req.body, function(value, key) {
        permissionUpdates[key] = OaeUtil.castToBoolean(value);
    });

    FoldersAPI.setFolderPermissions(req.ctx, req.params.folderId, permissionUpdates, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/**
 * @REST getFolderFolderIdMembers
 *
 * Get the members of a folder and their roles
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /folder/{folderId}/members
 * @PathParam   {string}                folderId            The id of the folder to get the members for
 * @QueryParam  {number}                [limit]             The maximum number of results to return. Default: 10
 * @QueryParam  {string}                [start]             The folder paging token from which to start fetching folder members
 * @Return      {MembersResponse}                           Members of the specified folder
 * @HttpResponse                    200                     The members of this folder are returned
 * @HttpResponse                    400                     An invalid folder id has been specified
 * @HttpResponse                    401                     You're not allowed to list the members of this folder
 */
OAE.tenantRouter.on('get', '/api/folder/:folderId/members', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    FoldersAPI.getFolderMembers(req.ctx, req.params.folderId, req.query.start, limit, function(err, members, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': members, 'nextToken': nextToken});
    });
});

/**
 * @REST getFolderLibraryPrincipalId
 *
 * Get the folders for a given principal
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /folder/library/{principalId}
 * @PathParam   {string}                principalId         The id of the principal for which to retrieve the folders
 * @QueryParam  {number}                [limit]             The maximum number of results to return. Default: 10
 * @QueryParam  {string}                [start]             The folder paging token from which to start fetching folders
 * @Return      {FoldersLibrary}                            The folders the current user manages
 * @HttpResponse                        200                 The library of folders for the given principal is returned
 * @HttpResponse                        400                 An invalid principal id has been specified
 * @HttpResponse                        401                 You're not allowed to list this folder library
 */
OAE.tenantRouter.on('get', '/api/folder/library/:principalId', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 12, 1, 25);
    FoldersAPI.getFoldersLibrary(req.ctx, req.params.principalId, req.query.start, limit, function(err, results, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': results, 'nextToken': nextToken});
    });
});

/**
 * @REST deleteFolderLibraryPrincipalIdLibraryId
 *
 * Remove a folder from a principal's library
 *
 * @Server      tenant
 * @Method      DELETE
 * @Path        /folder/library/{principalId}/{folderId}
 * @PathParam   {string}            principalId             The id of the principal from whose folder library to remove the folder
 * @PathParam   {string}            folderId                The id of the folder to remove from the library
 * @Return      {void}
 * @HttpResponse                    200                     The folder has been removed from the principal's folder library
 * @HttpResponse                    400                     An invalid principal id has been specified
 * @HttpResponse                    400                     An invalid folder id has been specified
 * @HttpResponse                    401                     You're not allowed to delete this folder from the principal's library
 */
OAE.tenantRouter.on('delete', '/api/folder/library/:principalId/:folderId', function(req, res) {
    FoldersAPI.removeFolderFromLibrary(req.ctx, req.params.principalId, req.params.folderId, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/**
 * @REST postFolderFolderIdLibrary
 *
 * Add a set of content items to a folder
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /folder/{folderId}/library
 * @PathParam   {string}                    folderId            The id of the folder to add content items to
 * @BodyParam   {FolderContentLibrary}      body                Object that lists the content items that should be added to the folder
 * @Return      {void}
 * @HttpResponse                            200                 The content items have been added to the folder
 * @HttpResponse                            400                 An invalid folder id has been specified
 * @HttpResponse                            400                 One or more invalid content ids have been specified
 * @HttpResponse                            400                 You do not have access to one or more of the specified content items
 * @HttpResponse                            401                 You're not allowed to add content items to this folder
 */
OAE.tenantRouter.on('post', '/api/folder/:folderId/library', function(req, res) {
    var contentIds = OaeUtil.toArray(req.body.contentIds);
    FoldersAPI.addContentItemsToFolder(req.ctx, req.params.folderId, contentIds, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/**
 * @REST deleteFolderFolderIdLibrary
 *
 * Remove a set of content items from a folder
 *
 * @Server      tenant
 * @Method      DELETE
 * @Path        /folder/{folderId}/library
 * @PathParam   {string}                    folderId            The id of the folder to remove content items from
 * @BodyParam   {FolderContentLibrary}       body               Object that lists the content items that should be removed from the folder
 * @Return      {void}
 * @HttpResponse                            200                 The content items have been removed from the folder
 * @HttpResponse                            400                 An invalid folder id has been specified
 * @HttpResponse                            400                 One or more invalid content ids have been specified
 * @HttpResponse                            401                 You're not allowed to remove content items from this folder
 */
OAE.tenantRouter.on('delete', '/api/folder/:folderId/library', function(req, res) {
    var contentIds = OaeUtil.toArray(req.body.contentIds);
    FoldersAPI.removeContentItemsFromFolder(req.ctx, req.params.folderId, contentIds, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/**
 * @REST getFolderFolderIdLibrary
 *
 * Get the content library for a folder
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /folder/{folderId}/library
 * @PathParam   {string}                folderId            The id of the folder for which to retrieve the content library
 * @QueryParam  {number}                [limit]             The maximum number of results to return. Default: 10
 * @QueryParam  {string}                [start]             The folder paging token from which to start fetching content items
 * @Return      {ContentLibrary}                            The content items that are present in this folder
 * @HttpResponse                        200                 The content items taht are present in this folder
 * @HttpResponse                        400                 An invalid folder id has been specified
 * @HttpResponse                        400                 You do not have access to one or more of the specified content items
 * @HttpResponse                        401                 You're not allowed to list the content items in this folder
 */
OAE.tenantRouter.on('get', '/api/folder/:folderId/library', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 12, 1, 25);
    FoldersAPI.getFolderContentLibrary(req.ctx, req.params.folderId, req.query.start, limit, function(err, results, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': results, 'nextToken': nextToken});
    });
});
