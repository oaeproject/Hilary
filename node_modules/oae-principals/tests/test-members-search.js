/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Members Search', function() {

    /*!
     * Get the document with the specified id from the search results.
     *
     * @param   {SearchResult}  results     The search results object
     * @param   {String}        docId       The id of the document to search
     * @returns {Object}                    The search document. `null` if it didn't exist
     */
    var _getDocById = function(results, docId) {
        for (var i = 0; i < results.results.length; i++) {
            var doc = results.results[i];
            if (doc.id === docId) {
                return doc;
            }
        }
        return null;
    };

    // REST contexts we can use to do REST requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    // A number of users and groups that are used for group members environment setup. See setup comments in `before` method for more info
    var privateUserMember = null;
    var loggedinUserMember = null;
    var publicUserMember = null;
    var targetPublicGroup = null;
    var targetLoggedinGroup = null;
    var targetPrivateGroup = null;
    var publicGroupMember = null;
    var privateGroupMember = null;

    before(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

        var targetPublicGroupAlias = TestsUtil.generateTestUserId('targetPublicGroup');
        var targetLoggedinGroupAlias = TestsUtil.generateTestUserId('targetLoggedinGroup');
        var targetPrivateGroupAlias = TestsUtil.generateTestUserId('targetPrivateGroup');
        var publicGroupMemberAlias = TestsUtil.generateTestUserId('publicGroup');
        var privateGroupMemberAlias = TestsUtil.generateTestUserId('privateGroup');
        var publicUserMemberUsername = TestsUtil.generateTestUserId('publicUserMember');
        var loggedinUserMemberUsername = TestsUtil.generateTestUserId('loggedinUserMember');
        var privateUserMemberUsername = TestsUtil.generateTestUserId('privateUserMember');


        /*!
         * Creates the following variable setup for testing members search:
         *
         * Users:
         *  privateUserMember:  A user with visibility 'private'. Is a member of all the target groups.
         *  loggedinUserMember: A user with visibility 'loggedin'. Is a member of all the target groups.
         *  publicUserMember:   A user with visibility 'public'. Is a member of all the target groups.
         *
         * Target Groups:
         *  targetPublicGroup:      A group with visibility 'public' that will be a target of members search.
         *  targetLoggedinGroup:    A group with visibility 'loggedin' that will be a target of members search.
         *  targetPrivateGroup:     A group with visibility 'private' that will be a target of members search.
         *
         * Member Groups:
         *  publicGroupMember:      A group with visibility 'public'. Is a member of all the target groups.
         *  privateGroupMember:     A group with visibility 'private'. Is a member of all the target groups.
         */
        RestAPI.User.createUser(camAdminRestContext, publicUserMemberUsername, 'password', 'Public User Member', null, function(err, _publicUserMember) {
            assert.ok(!err);
            publicUserMember = _publicUserMember;

            var loggedinOpts = {
                'visibility': 'loggedin',
                'publicAlias': 'LoggedinHidden'
            };

            var privateOpts = {
                'visibility': 'private',
                'publicAlias': 'PrivateHidden'
            };

            RestAPI.User.createUser(camAdminRestContext, loggedinUserMemberUsername, 'password', 'Loggedin User Member', loggedinOpts, function(err, _loggedinUserMember) {
                assert.ok(!err);
                loggedinUserMember = _loggedinUserMember;

                RestAPI.User.createUser(camAdminRestContext, privateUserMemberUsername, 'password', 'Private User Member', privateOpts, function(err, _privateUserMember) {
                    assert.ok(!err);
                    privateUserMember = _privateUserMember;

                    RestAPI.Group.createGroup(camAdminRestContext, targetPublicGroupAlias, targetPublicGroupAlias, targetPublicGroupAlias, 'public', 'no', [], [], function(err, _targetPublicGroup) {
                        assert.ok(!err);
                        targetPublicGroup = _targetPublicGroup;

                        RestAPI.Group.createGroup(camAdminRestContext, targetLoggedinGroupAlias, targetLoggedinGroupAlias, targetLoggedinGroupAlias, 'loggedin', 'no', [], [], function(err, _targetLoggedinGroup) {
                            assert.ok(!err);
                            targetLoggedinGroup = _targetLoggedinGroup;

                            RestAPI.Group.createGroup(camAdminRestContext, targetPrivateGroupAlias, targetPrivateGroupAlias, targetPrivateGroupAlias, 'private', 'no', [], [], function(err, _targetPrivateGroup) {
                                assert.ok(!err);
                                targetPrivateGroup = _targetPrivateGroup;

                                RestAPI.Group.createGroup(camAdminRestContext, publicGroupMemberAlias, publicGroupMemberAlias, publicGroupMemberAlias, 'public', 'no', [], [], function(err, _publicGroupMember) {
                                    assert.ok(!err);
                                    publicGroupMember = _publicGroupMember;

                                    RestAPI.Group.createGroup(camAdminRestContext, privateGroupMemberAlias, privateGroupMemberAlias, privateGroupMemberAlias, 'public', 'no', [], [], function(err, _privateGroupMember) {
                                        assert.ok(!err);
                                        privateGroupMember = _privateGroupMember;

                                        var memberships = {};
                                        memberships[publicGroupMember.id] = 'member';
                                        memberships[privateGroupMember.id] = 'member';
                                        memberships[publicUserMember.id] = 'member';
                                        memberships[loggedinUserMember.id] = 'member';
                                        memberships[privateUserMember.id] = 'member';

                                        RestAPI.Group.setGroupMembers(camAdminRestContext, targetPublicGroup.id, memberships, function(err) {
                                            assert.ok(!err);

                                            RestAPI.Group.setGroupMembers(camAdminRestContext, targetLoggedinGroup.id, memberships, function(err) {
                                                assert.ok(!err);

                                                RestAPI.Group.setGroupMembers(camAdminRestContext, targetPrivateGroup.id, memberships, function(err) {
                                                    assert.ok(!err);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies a user cannot search members of something that is not a valid group id
     */
    it('verify cannot search for non-group', function(callback) {
        RestAPI.Search.search(anonymousRestContext, 'members', ['not-a-group-id'], null, function(err, results) {
            assert.ok(err);
            assert.ok(err.code, 400);
            assert.ok(!results);
            callback();
        });
    });

    /**
     * Test that verifies the member visibility of a group members search.
     */
    it('verify public group members visibility', function(callback) {
        var jackUsername = TestsUtil.generateTestUserId('jack');
        var janeUsername = TestsUtil.generateTestUserId('jane');
        var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

        RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
            assert.ok(!err);
            var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                var changes = {};
                changes[jack.id] = 'member';
                RestAPI.Group.setGroupMembers(camAdminRestContext, targetPublicGroup.id, changes, function(err) {
                    assert.ok(!err);

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // Verify results and visibility for anonymous user
                        RestAPI.Search.search(anonymousRestContext, 'members', [targetPublicGroup.id], null, function(err, results) {
                            assert.ok(!err);
                            var publicUserResult = _getDocById(results, publicUserMember.id);
                            var loggedinUserResult = _getDocById(results, loggedinUserMember.id);
                            var privateUserResult = _getDocById(results, privateUserMember.id);
                            var privateGroupResult = _getDocById(results, privateGroupMember.id);
                            var publicGroupResult = _getDocById(results, publicGroupMember.id);

                            // Verify anonymous sees all.
                            assert.ok(publicUserResult);
                            assert.ok(loggedinUserResult);
                            assert.ok(privateUserResult);
                            assert.ok(privateGroupResult);
                            assert.ok(publicGroupResult);

                            // Verify user visibility. Loggedin and private should have their publicAlias swapped into the title
                            assert.equal(publicUserResult.title, publicUserMember.displayName);
                            assert.equal(loggedinUserResult.title, loggedinUserMember.publicAlias);
                            assert.equal(privateUserResult.title, privateUserMember.publicAlias);
                            assert.equal(publicGroupResult.title, publicGroupMember.name);
                            assert.equal(privateGroupResult.title, privateGroupMember.name);

                            // Verify results and visibility for cross-tenant user
                            RestAPI.Search.search(darthVaderRestContext, 'members', [targetPublicGroup.id], null, function(err, results) {
                                assert.ok(!err);
                                var publicUserResult = _getDocById(results, publicUserMember.id);
                                var loggedinUserResult = _getDocById(results, loggedinUserMember.id);
                                var privateUserResult = _getDocById(results, privateUserMember.id);
                                var privateGroupResult = _getDocById(results, privateGroupMember.id);
                                var publicGroupResult = _getDocById(results, publicGroupMember.id);

                                // Verify cross-tenant user sees all users
                                assert.ok(publicUserResult);
                                assert.ok(loggedinUserResult);
                                assert.ok(privateUserResult);
                                assert.ok(privateGroupResult);
                                assert.ok(publicGroupResult);

                                // Verify user visibility. Loggedin and private should have their publicAlias swapped into the title
                                assert.equal(publicUserResult.title, publicUserMember.displayName);
                                assert.equal(loggedinUserResult.title, loggedinUserMember.publicAlias);
                                assert.equal(privateUserResult.title, privateUserMember.publicAlias);
                                assert.equal(publicGroupResult.title, publicGroupMember.name);
                                assert.equal(privateGroupResult.title, privateGroupMember.name);

                                // Verify results and visibility for loggedin user
                                RestAPI.Search.search(janeRestContext, 'members', [targetPublicGroup.id], null, function(err, results) {
                                    assert.ok(!err);
                                    var publicUserResult = _getDocById(results, publicUserMember.id);
                                    var loggedinUserResult = _getDocById(results, loggedinUserMember.id);
                                    var privateUserResult = _getDocById(results, privateUserMember.id);
                                    var privateGroupResult = _getDocById(results, privateGroupMember.id);
                                    var publicGroupResult = _getDocById(results, publicGroupMember.id);

                                    // Verify user sees all members
                                    assert.ok(publicUserResult);
                                    assert.ok(loggedinUserResult);
                                    assert.ok(privateUserResult);
                                    assert.ok(privateGroupResult);
                                    assert.ok(publicGroupResult);

                                    // Verify user visibility. Private should have their publicAlias swapped into the title
                                    assert.equal(publicUserResult.title, publicUserMember.displayName);
                                    assert.equal(loggedinUserResult.title, loggedinUserMember.displayName);
                                    assert.equal(privateUserResult.title, privateUserMember.publicAlias);
                                    assert.equal(publicGroupResult.title, publicGroupMember.name);
                                    assert.equal(privateGroupResult.title, privateGroupMember.name);


                                    // Verify results and visibility for member user
                                    RestAPI.Search.search(jackRestContext, 'members', [targetPublicGroup.id], null, function(err, results) {
                                        assert.ok(!err);
                                        var publicUserResult = _getDocById(results, publicUserMember.id);
                                        var loggedinUserResult = _getDocById(results, loggedinUserMember.id);
                                        var privateUserResult = _getDocById(results, privateUserMember.id);
                                        var privateGroupResult = _getDocById(results, privateGroupMember.id);
                                        var publicGroupResult = _getDocById(results, publicGroupMember.id);

                                        // Verify user sees all.
                                        assert.ok(publicUserResult);
                                        assert.ok(loggedinUserResult);
                                        assert.ok(privateUserResult);
                                        assert.ok(privateGroupResult);
                                        assert.ok(publicGroupResult);

                                        // Verify user visibility. Private should have their publicAlias swapped into the title
                                        assert.equal(publicUserResult.title, publicUserMember.displayName);
                                        assert.equal(loggedinUserResult.title, loggedinUserMember.displayName);
                                        assert.equal(privateUserResult.title, privateUserMember.publicAlias);
                                        assert.equal(publicGroupResult.title, publicGroupMember.name);
                                        assert.equal(privateGroupResult.title, privateGroupMember.name);

                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that anonymous and cross-tenant users cannot see the group members of a loggedin group
     */
    it('verify loggedin group members access', function(callback) {
        var jackUsername = TestsUtil.generateTestUserId('jack');
        var janeUsername = TestsUtil.generateTestUserId('jane');
        var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

        RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
            assert.ok(!err);
            var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                var changes = {};
                changes[jack.id] = 'member';
                RestAPI.Group.setGroupMembers(camAdminRestContext, targetLoggedinGroup.id, changes, function(err) {
                    assert.ok(!err);

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // Verify anonymous cannot see loggedin group
                        RestAPI.Search.search(anonymousRestContext, 'members', [targetLoggedinGroup.id], null, function(err, results) {
                            assert.ok(err);
                            assert.ok(err.code, 401);
                            assert.ok(!results);

                            // Verify results and visibility for cross-tenant user. Cross-tenant user cannot see memberships of 'loggedin' groups from other tenants
                            RestAPI.Search.search(darthVaderRestContext, 'members', [targetLoggedinGroup.id], null, function(err, results) {
                                assert.ok(err);
                                assert.ok(err.code, 401);
                                assert.ok(!results);

                                // Verify results and visibility for loggedin user
                                RestAPI.Search.search(janeRestContext, 'members', [targetLoggedinGroup.id], null, function(err, results) {
                                    assert.ok(!err);
                                    var publicUserResult = _getDocById(results, publicUserMember.id);
                                    var loggedinUserResult = _getDocById(results, loggedinUserMember.id);
                                    var privateUserResult = _getDocById(results, privateUserMember.id);
                                    var privateGroupResult = _getDocById(results, privateGroupMember.id);
                                    var publicGroupResult = _getDocById(results, publicGroupMember.id);

                                    // Verify all members are returned
                                    assert.ok(publicUserResult);
                                    assert.ok(loggedinUserResult);
                                    assert.ok(privateUserResult);
                                    assert.ok(privateGroupResult);
                                    assert.ok(publicGroupResult);

                                    // Verify user visibility. Private should have their publicAlias swapped into the title
                                    assert.equal(publicUserResult.title, publicUserMember.displayName);
                                    assert.equal(loggedinUserResult.title, loggedinUserMember.displayName);
                                    assert.equal(privateUserResult.title, privateUserMember.publicAlias);
                                    assert.equal(publicGroupResult.title, publicGroupMember.name);
                                    assert.equal(privateGroupResult.title, privateGroupMember.name);

                                    // Verify results and visibility for member user
                                    RestAPI.Search.search(jackRestContext, 'members', [targetLoggedinGroup.id], null, function(err, results) {
                                        assert.ok(!err);
                                        var publicUserResult = _getDocById(results, publicUserMember.id);
                                        var loggedinUserResult = _getDocById(results, loggedinUserMember.id);
                                        var privateUserResult = _getDocById(results, privateUserMember.id);
                                        var privateGroupResult = _getDocById(results, privateGroupMember.id);
                                        var publicGroupResult = _getDocById(results, publicGroupMember.id);

                                        // Verify member sees all
                                        assert.ok(publicUserResult);
                                        assert.ok(loggedinUserResult);
                                        assert.ok(privateUserResult);
                                        assert.ok(privateGroupResult);
                                        assert.ok(publicGroupResult);

                                        // Verify user visibility. Private should have their publicAlias swapped into the title
                                        assert.equal(publicUserResult.title, publicUserMember.displayName);
                                        assert.equal(loggedinUserResult.title, loggedinUserMember.displayName);
                                        assert.equal(privateUserResult.title, privateUserMember.publicAlias);
                                        assert.equal(publicGroupResult.title, publicGroupMember.name);
                                        assert.equal(privateGroupResult.title, privateGroupMember.name);

                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies only members can search the group members of a private group.
     */
    it('verify private group members access', function(callback) {
        var jackUsername = TestsUtil.generateTestUserId('jack');
        var janeUsername = TestsUtil.generateTestUserId('jane');
        var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

        RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
            assert.ok(!err);
            var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                var changes = {};
                changes[jack.id] = 'member';
                RestAPI.Group.setGroupMembers(camAdminRestContext, targetPrivateGroup.id, changes, function(err) {
                    assert.ok(!err);

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // Verify anonymous cannot see members of private group
                        RestAPI.Search.search(anonymousRestContext, 'members', [targetPrivateGroup.id], null, function(err, results) {
                            assert.ok(err);
                            assert.ok(err.code, 401);
                            assert.ok(!results);

                            // Verify cross-tenant user cannot see members of private group
                            RestAPI.Search.search(darthVaderRestContext, 'members', [targetPrivateGroup.id], null, function(err, results) {
                                assert.ok(err);
                                assert.ok(err.code, 401);
                                assert.ok(!results);

                                // Verify loggedin user cannot see members of private group
                                RestAPI.Search.search(janeRestContext, 'members', [targetPrivateGroup.id], null, function(err, results) {
                                    assert.ok(err);
                                    assert.ok(err.code, 401);
                                    assert.ok(!results);
                                    
                                    // Verify results and visibility for member user
                                    RestAPI.Search.search(jackRestContext, 'members', [targetPrivateGroup.id], null, function(err, results) {
                                        assert.ok(!err);
                                        var publicUserResult = _getDocById(results, publicUserMember.id);
                                        var loggedinUserResult = _getDocById(results, loggedinUserMember.id);
                                        var privateUserResult = _getDocById(results, privateUserMember.id);
                                        var privateGroupResult = _getDocById(results, privateGroupMember.id);
                                        var publicGroupResult = _getDocById(results, publicGroupMember.id);

                                        // Verify member sees all.
                                        assert.ok(publicUserResult);
                                        assert.ok(loggedinUserResult);
                                        assert.ok(privateUserResult);
                                        assert.ok(privateGroupResult);
                                        assert.ok(publicGroupResult);

                                        // Verify user visibility. Private should have their publicAlias swapped into the title
                                        assert.equal(publicUserResult.title, publicUserMember.displayName);
                                        assert.equal(loggedinUserResult.title, loggedinUserMember.displayName);
                                        assert.equal(privateUserResult.title, privateUserMember.publicAlias);
                                        assert.equal(publicGroupResult.title, publicGroupMember.name);
                                        assert.equal(privateGroupResult.title, privateGroupMember.name);

                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies when a member is removed from a group, that principal no longer turns up in the members search.
     */
    it('verify remove from group reflects in members', function(callback) {
        var jackUsername = TestsUtil.generateTestUserId('jack');
        var janeUsername = TestsUtil.generateTestUserId('jane');

        RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
            assert.ok(!err);
            var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

            var changes = {};
            changes[jack.id] = 'member';
            RestAPI.Group.setGroupMembers(camAdminRestContext, targetLoggedinGroup.id, changes, function(err) {
                assert.ok(!err);

                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane McJaneFace', null, function(err, jane) {
                    assert.ok(!err);
                    var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                    // Verify jack exists for jane
                    RestAPI.Search.search(janeRestContext, 'members', [targetLoggedinGroup.id], null, function(err, results) {
                        assert.ok(!err);
                        var jackDoc = _getDocById(results, jack.id);
                        assert.ok(jackDoc);

                        // Remove jack and verify he no longer returns in searches
                        changes[jack.id] = false;
                        RestAPI.Group.setGroupMembers(camAdminRestContext, targetLoggedinGroup.id, changes, function(err) {
                            assert.ok(!err);

                            RestAPI.Search.search(janeRestContext, 'members', [targetLoggedinGroup.id], null, function(err, results) {
                                assert.ok(!err);
                                var jackDoc = _getDocById(results, jack.id);
                                assert.ok(!jackDoc);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });
});
