/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');


describe('Authz-Permissions', function() {

    /**
     * Make a single membership or role change object to apply to a group membership or resource role.
     *
     * @param  {String} principalUuid   The principalUuid whose role to change
     * @param  {String} role            The role to change to
     * @return {Object}                 The change JSON Object to apply
     */
    var makeChange = function(principalUuid, role) {
        var change = {};
        change[principalUuid] = role;
        return change;
    };

    describe('#isAllowed()', function() {

        it('verify invalid principal uuid error', function(callback) {
            AuthzAPI.isAllowed('not a uuid', 'member', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify non-principal member uuid error', function(callback) {
            AuthzAPI.isAllowed('c:cam:mrvisser', 'member', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify null role error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', null, 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify undefined role error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', undefined, 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify false role error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', false, 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify invalid resource uuid error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', 'member', 'not a uuid', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify empty data', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'ia-empty', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-empty', 'SomeContent');
            AuthzAPI.isAllowed(userUuid, 'member', resourceUuid, function(err, isAllowed) {
                assert.ok(!err);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify direct permission', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'ia-direct', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-direct', 'SomeContent');
            AuthzAPI.applyRoleChanges(resourceUuid, makeChange(userUuid, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                    assert.ok(!err);
                    assert.ok(isAllowed);
                    callback();
                });
            });
        });

        it('verify direct single group permission', function(callback) {
            var groupUuid = AuthzUtil.toUuid('g', 'ia-single', 'oae-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-single', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-single', 'SomeContent');

            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid, 'viewer'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);
                        callback();
                    });
                });
            });
        });

        it('verify direct multi group permission', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'ia-multi', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'ia-multi', 'oae-backend-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-multi', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-multi', 'SomeContent');

            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeChange(userUuid, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid1, 'viewer'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid2, 'manager'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(isAllowed);
                                AuthzAPI.isAllowed(userUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(isAllowed);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify multi group hierarchy permission', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'ia-hier', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'ia-hier', 'oae-backend-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-hier', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-hier', 'SomeContent');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeChange(groupUuid1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid1, 'viewer'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid2, 'manager'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(isAllowed);
                                AuthzAPI.isAllowed(userUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(isAllowed);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy permission', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'ia-circ', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'ia-circ', 'oae-backend-team');
            var groupUuid3 = AuthzUtil.toUuid('g', 'ia-circ', 'oae-ui-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-circ', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-circ', 'SomeContent');
            AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyGroupMembershipChanges(groupUuid2, makeChange(groupUuid1, 'member'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.applyGroupMembershipChanges(groupUuid3, makeChange(groupUuid2, 'member'), function(err) {
                        assert.ok(!err);
                        AuthzAPI.applyGroupMembershipChanges(groupUuid1, makeChange(groupUuid3, 'member'), function(err) {
                            assert.ok(!err);
                            AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid1, 'viewer'), function(err) {
                                assert.ok(!err);
                                AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid2, 'manager'), function(err) {
                                    assert.ok(!err);
                                    AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid3, 'editor'), function(err) {
                                        assert.ok(!err);
                                        AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                            assert.ok(!err);
                                            assert.ok(isAllowed);
                                            AuthzAPI.isAllowed(userUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                assert.ok(!err);
                                                assert.ok(isAllowed);
                                                AuthzAPI.isAllowed(userUuid, 'editor', resourceUuid, function(err, isAllowed) {
                                                    assert.ok(!err);
                                                    assert.ok(isAllowed);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#isAllowedAny()', function() {
        it('verify invalid principal uuid error', function(callback) {
            AuthzAPI.isAllowedAny('not a uuid', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify non-principal uuid error', function(callback) {
            AuthzAPI.isAllowedAny('c:cam:mrvisser', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify invalid resource uuid error', function(callback) {
            AuthzAPI.isAllowedAny('u:cam:mrvisser', 'not a uuid', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify empty data', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'iaa-empty', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'iaa-empty', 'SomeContent');
            AuthzAPI.isAllowedAny(userUuid, resourceUuid, function(err, isAllowed) {
                assert.ok(!err);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify direct permission', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'iaa-direct', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'iaa-direct', 'SomeContent');
            AuthzAPI.applyRoleChanges(resourceUuid, makeChange(userUuid, 'viewer'), function(err) {
                assert.ok(!err);
                AuthzAPI.isAllowedAny(userUuid, resourceUuid, function(err, isAllowed) {
                    assert.ok(!err);
                    assert.ok(isAllowed);
                    callback();
                });
            });
        });

        it('verify direct single group permission', function(callback) {
            var groupUuid = AuthzUtil.toUuid('g', 'iaa-single', 'oae-team');
            var userUuid = AuthzUtil.toUuid('u', 'iaa-single', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-single', 'SomeContent');

            AuthzAPI.applyGroupMembershipChanges(groupUuid, makeChange(userUuid, 'member'), function(err) {
                assert.ok(!err);
                AuthzAPI.applyRoleChanges(resourceUuid, makeChange(groupUuid, 'viewer'), function(err) {
                    assert.ok(!err);
                    AuthzAPI.isAllowedAny(userUuid, resourceUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);
                        callback();
                    });
                });
            });
        });
    });
});
