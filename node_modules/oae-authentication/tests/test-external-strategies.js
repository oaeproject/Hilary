/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');
var url = require('url');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var RestUtil = require('oae-rest/lib/util');
var TestsUtil = require('oae-tests');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var Config = require('oae-config/lib/api').config('oae-authentication');

describe('Authentication', function() {

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    var anonymousCamRestContext = null;
    var camAdminRestContext = null;

    /**
     * Function that will fill up the global admin rest context
     */
    before(function() {
        // Fill up global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up Cam anonymous rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up Cam admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    });

    /**
     * Disables an external authentication strategy and verifies the endpoint no longer responds to
     * authentication requests.
     *
     * @param  {String}     strategyName    The strategy to disable. ex: 'twitter', 'facebook', ..
     * @param  {String}     method          The HTTP method to use for the callback URL. Some strategies (ex: SAML2) require a POST callback.
     * @param  {Function}   callback        Standard callback method.
     */
    var verifyEndpointIsDisabled = function(strategyName, method, callback) {
        var options = {
            'uri': 'http://' + global.oaeTests.tenants.localhost.host + '/api/auth/' + strategyName,
            'headers': {
                'host': global.oaeTests.tenants.localhost.host
            },
            'followRedirect': false
        };

        // First verify we can enable it.
        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, 'localhost', 'oae-authentication/' + strategyName + '/enabled', true, function(err) {
            assert.ok(!err);
        });

        // Wait until the authentication api has finished refreshing its strategies
        AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {

            request(options, function (err, response, body) {
                assert.ok(!err);
                assert.equal(response.statusCode, 302);

                // Now disable it
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, 'localhost', 'oae-authentication/' + strategyName + '/enabled', false, function() {
                    assert.ok(!err);
                });

                // Wait until the authentication api has finished refreshing its strategies
                AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {

                    // A disabled endpoint should return a 401.
                    request(options, function (err, response, body) {
                        assert.ok(!err);
                        assert.equal(response.statusCode, 401);
                        assert.equal(body.indexOf('This authentication strategy has been disabled.'), 0);
                        options.uri = 'http://' + global.oaeTests.tenants.localhost.host + '/api/auth/' + strategyName + '/callback';
                        options.method = method;

                        request(options, function (err, response, body) {
                            assert.ok(!err);
                            assert.equal(response.statusCode, 401);
                            assert.equal(body.indexOf('This authentication strategy has been disabled.'), 0);
                            callback();
                        });
                    });
                });
            });
        });
    };

    /**
     * Verifies that the given strategy forwards the client to the given host
     *
     * @param  {String}   strategy    The name of the authentication strategy to use
     * @param  {String}   host        The host that the strategy is expected to forward the user to
     * @param  {Function} callback    Function to call when test is completed
     */
    var verifyForward = function(strategy, host, callback) {
        var strategyStatus = Config.getValue(global.oaeTests.tenants.global.alias, strategy, 'enabled');
        // enable strategy
        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-authentication/' + strategy + '/enabled', true, function(err) {
            assert.ok(!err);
        });

        var options = {
            'uri': anonymousCamRestContext.host + '/api/auth/' + strategy,
            'headers': {
                'host': anonymousCamRestContext.hostHeader
            },
            'followRedirect': false
        };
        // Wait until the authentication api has finished refreshing its strategies
        AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {
            request(options, function(err, res, body) {
                assert.ok(!err);
                assert.equal(res.statusCode, 302);
                assert.equal(url.parse(res.headers['location']).hostname, host);
                // reset strategy to cached status
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, null, 'oae-authentication/' + strategy + '/enabled', strategyStatus, function(err) {
                    assert.ok(!err);
                });
                AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {
                    callback();
                });
            });
        });
    };

    describe('External authentication', function() {

        /**
         * Verifies that /api/auth/google sends the client to google
         */
        it('verify forward to google', function(callback) {
            verifyForward('google', 'accounts.google.com', callback);
        });

        /**
         * Verifies that /api/auth/facebook sends the client to facebook
         */
        it('verify forward to facebook', function(callback) {
            verifyForward('facebook', 'www.facebook.com', callback);
        });

        /**
         * Verifies that /api/auth/twitter sends the client to twitter
         */
        it('verify forward to twitter', function(callback) {
            verifyForward('twitter', 'api.twitter.com', callback);
        });

        /**
         * Verifies that disabling the CAS authentication mechanism in the Config
         * disabled the authentication logic in the REST endpoints.
         */
        it('verify disabling the CAS strategy', function(callback) {
            verifyEndpointIsDisabled('cas', 'GET', callback);
        });

        /**
         * Verifies that disabling the Facebook authentication mechanism in the Config
         * disabled the authentication logic in the REST endpoints.
         */
        it('verify disabling the Facebook strategy', function(callback) {
            verifyEndpointIsDisabled('facebook', 'GET', callback);
        });

        /**
         * Verifies that disabling the Google authentication mechanism in the Config
         * disabled the authentication logic in the REST endpoints.
         */
        it('verify disabling the Google strategy', function(callback) {
            verifyEndpointIsDisabled('google', 'GET', callback);
        });

        /**
         * Verifies that disabling the Shibboleth authentication mechanism in the Config
         * disabled the authentication logic in the REST endpoints.
         */
        it('verify disabling the Shibboleth strategy', function(callback) {
            verifyEndpointIsDisabled('shibboleth', 'POST', callback);
        });

        /**
         * Verifies that disabling the Twitter authentication mechanism in the Config
         * disabled the authentication logic in the REST endpoints.
         */
        it('verify disabling the Twitter strategy', function(callback) {
            verifyEndpointIsDisabled('twitter', 'GET', callback);
        });
    });

});
