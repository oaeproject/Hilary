/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');
var util = require('util');

var log = require('oae-logger').logger('oae-zencoder');
var PreviewContext = require('oae-preview-processor/lib/model').PreviewContext;
var PreviewProcessorAPI = require('oae-preview-processor');
var PreviewUtil = require('oae-preview-processor/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

var ZencoderDAO = require('./internal/dao');
var ZencoderUtil = require('./internal/util');

/**
 * Save data for the completed preview when encoding has been completed.
 *
 * @param  {Object}     notification    The notification data received from Zencoder
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */

var encodingCompleted = module.exports.encodingCompleted = function(notification, callback) {
    log().info('Received encoding completed notification from Zencoder');
    var job = notification.job;

    if (job.state === 'finished') {
        var zencoderId = job['pass_through'];

        ZencoderDAO.getContentRevisionId(zencoderId, function(err, contentRevision) {
            if (err) {
                return callback(err);
            } else if (!contentRevision || !contentRevision.contentId || !contentRevision.revisionId) {
                log().warn('No preview job exists for zencoderId %s', zencoderId);
                return callback({'msg': 'Non-existing Zencoder ID was provided'});
            }
            log().info('Encoding of video content with the contentId %s has finished successfully.', contentRevision.contentId);

            var ctx = new PreviewContext(PreviewProcessorAPI.getConfiguration(), contentRevision.contentId, contentRevision.revisionId);

            var output = notification.output;
            ctx.addPreview(util.format('remote:%s', output.url), 'video');
            ctx.addPreviewMetadata('zencoderId', zencoderId);

            var thumbnail = _.findWhere(output.thumbnails, {label: 'thumb'});

            PreviewUtil.downloadRemoteFile(thumbnail.images[0].url, ctx.basePath, function(err, path) {
                if (err) {
                    return callback(err);
                }

                PreviewUtil.generatePreviewsFromImage(ctx, path, {'removeInput': true}, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    ctx.savePreviews(function(err) {
                        if (err) {
                            return callback(err);
                        }

                        return callback();
                    });
                });
            });
        });
    }

    else if (job.state === 'failed') {
        return callback({'err': notification, 'msg': 'Zencoder could not transcode this video for preview'});
    }

    else {
        return callback({'err': notification, 'msg': 'Could not process notification %s'});
    }
};
