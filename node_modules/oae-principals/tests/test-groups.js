/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var api = require('oae-principals');
var rolesUtil = require('oae-roles/lib/util');
var permissionsAPI = require('oae-permissions/lib/api');
var Context = require('oae-context').Context;

var tenant = new Tenant('cam', 'Cambridge', 'Cambridge University', 3000);
var anonymousContext = new Context(tenant, null);

describe('Principals', function() {
    describe('Groups', function() {


        var createPrincipals = function(ctx, callback) {
            var r = Math.floor(Math.random()*100000);
            var principals = 0;
            var createPrincipalDone = function(err) {
                if (err) {
                    assert.fail("ERROR: " + err.code + ", msg: " + err.msg);
                    return callback();
                }

                principals++;
                if (principals === 12) {
                    callback(r);
                }
            };

            api.createGroup(ctx, 'oae-team-' + r, 'oae-team-' + r, createPrincipalDone);
            api.createGroup(ctx, 'backend-team-' + r, 'backend-team-' + r, createPrincipalDone);
            api.createGroup(ctx, 'ui-team-' + r, 'ui-team-' + r, createPrincipalDone);
            api.createGroup(ctx, 'canadian-' + r, 'canadian-' + r, createPrincipalDone);
            api.createGroup(ctx, 'not-canadian-' + r, 'not-canadian-' + r, createPrincipalDone);
            api.createGroup(ctx, 'belgian-' + r, 'belgian-' + r, createPrincipalDone);
            api.createGroup(ctx, 'west-flemish-' + r, 'west-flemish' + r, createPrincipalDone);
            api.createGroup(ctx, 'east-flemish-' + r, 'east-flemish' + r, createPrincipalDone);

            api.createUser(ctx, 'bert-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Bert', 'Pareyn', 'bp323', createPrincipalDone);
            api.createUser(ctx, 'branden-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Branden', 'Visser', 'mrvisser', createPrincipalDone);
            api.createUser(ctx, 'nicolaas-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Nicolaas', 'Matthijs', 'nicolaas', createPrincipalDone);
            api.createUser(ctx, 'simon-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Simon', 'Gaeremynck', 'simong', createPrincipalDone);
        };

        var createOAEStructure = function(ctx, callback) {
            createPrincipals(ctx, function(id){
                var checks = 0;
                var principalsAdded = function(err) {
                    if (err) {
                        assert.fail("ERROR: " + err.code + ", msg: " + err.msg);
                        return callback();
                    }
                    checks++;
                    if (checks === 8) {
                        callback(id);
                    }
                };
                api.addGroupMembers(ctx, 'g:cam:canadian-' + id, ['u:cam:branden-' + id], 'member', principalsAdded);
                api.addGroupMembers(ctx, 'g:cam:not-canadian-' + id, ['u:cam:simon-' + id], 'member', principalsAdded);
                api.addGroupMembers(ctx, 'g:cam:belgian-' + id, ['g:cam:west-flemish-' + id, 'g:cam:east-flemish-' + id], 'member', principalsAdded);
                api.addGroupMembers(ctx, 'g:cam:west-flemish-' + id, ['u:cam:bert-' + id], 'member', principalsAdded);
                api.addGroupMembers(ctx, 'g:cam:east-flemish-' + id, ['u:cam:nicolaas-' + id], 'member', principalsAdded);
                api.addGroupMembers(ctx, 'g:cam:oae-team-' + id, ['g:cam:backend-team-' + id, 'g:cam:ui-team-' + id], 'member', principalsAdded);
                api.addGroupMembers(ctx, 'g:cam:backend-team-' + id, ['g:cam:canadian-' + id, 'g:cam:not-canadian-' + id], 'member', principalsAdded);
                api.addGroupMembers(ctx, 'g:cam:ui-team-' + id, ['g:cam:belgian-' + id], 'member', principalsAdded);
            });
        };

        assertGroupMembers = function(group_id, expected_members, callback) {
            api.getGroupMembers(group_id, false, null, 1000, function(err, members) {
                assert.equal(members.length, expected_members.length, "Expected group '" + group_id + "' to have '" + expected_members.length + "' members.");
                for (var i = 0; i < expected_members.length; i++) {
                    var has_principal = true;
                    for (var c = 0; c < members.length; c++) {
                        if (members[c] === expected_members[i]) {
                            has_principal = true;
                            break;
                        }
                    }
                    assert.ok(has_principal, "Group '" + group_id + "' does not contain: " + expected_members[i]);
                }
                callback();
            });
        };

        assertMemberOf = function(principal_id, expected_groups, callback) {
            api.memberOf(principal_id, false, 0, 1000, function(err, groups) {
                assert.ok(!err);
                assert.equal(groups.length, expected_groups.length, "Expected principal '" + principal_id + "' to have '" + expected_groups.length + "' memberships: " + groups.join(","));
                for (var i = 0; i < expected_groups.length; i++) {
                    var has_group = true;
                    for (var c = 0; c < groups.length; c++) {
                        if (groups[c] === expected_groups[i]) {
                            has_group = true;
                            break;
                        }
                    }
                    assert.ok(has_group, "Principal '" + principal_id + "' does not contain: " + expected_groups[i]);
                }
                callback();
            });
        };

        assertExplodedGroupUsers = function(group_id, expected_users, callback) {
            api.getGroupUsers(group_id, function(err, users) {
                if (err) {
                    assert.fail("ERROR: " + err.code + ", msg: " + err.msg);
                    return callback();
                }

                assert.equal(users.length, expected_users.length, "Expected principal '" + group_id + "' to have '" + expected_users.length + "' users.");
                for (var i = 0; i < expected_users.length; i++) {
                    var has_user = true;
                    for (var c = 0; c < users.length; c++) {
                        if (users[c] === expected_users[i]) {
                            has_user = true;
                            break;
                        }
                    }
                    assert.ok(has_user, "Group '" + group_id + "' does not contain: " + expected_users[i]);
                }
                callback();
            });
        };

        it('should create a simple group structure', function(callback) {
            createAndGetUser(anonymousContext, 'test-runner', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, user) {
                var ctx = new Context(tenant, user);
                createOAEStructure(ctx, function(id) {
                    var asUser = ctx.user().id;

                    // Create the oae-team tree in a way that is NOT topdown or bottomup.
                    var memberships = 0;
                    var checks = 0;
                    var done = function() {
                        checks++;
                        if (checks === 11) {
                            callback();
                        }
                    };

                    // The group members should only return the direct children.
                    assertGroupMembers('g:cam:oae-team-' + id, [asUser, 'g:cam:backend-team-' + id, 'g:cam:ui-team-' + id], done);
                    assertGroupMembers('g:cam:backend-team-' + id, [asUser, 'g:cam:canadian-' + id, 'g:cam:not-canadian-' + id], done);
                    assertGroupMembers('g:cam:canadian-' + id, [asUser, 'u:cam:branden-' + id], done);
                    assertGroupMembers('g:cam:not-canadian-' + id, [asUser, 'u:cam:simon-' + id], done);
                    assertGroupMembers('g:cam:belgian-' + id, [asUser, 'g:cam:west-flemish-' + id, 'g:cam:east-flemish-' + id], done);
                    assertGroupMembers('g:cam:west-flemish-' + id, [asUser, 'u:cam:bert-' + id], done);
                    assertGroupMembers('g:cam:east-flemish-' + id, [asUser, 'u:cam:nicolaas-' + id], done);

                    // ALL groups should be listed against a principal.
                    assertMemberOf('u:cam:bert-' + id, ['g:cam:oae-team-' + id, 'g:cam:ui-team-' + id, 'g:cam:belgian-' + id, 'g:cam:west-flemish-' + id], done);
                    assertMemberOf('u:cam:nicolaas-' + id, ['g:cam:oae-team-' + id, 'g:cam:ui-team-' + id, 'g:cam:belgian-' + id, 'g:cam:east-flemish-' + id], done);
                    assertMemberOf('u:cam:branden-' + id, ['g:cam:oae-team-' + id, 'g:cam:backend-team-' + id, 'g:cam:not-canadian-' + id], done);
                    assertMemberOf('u:cam:simon-' + id, ['g:cam:oae-team-' + id, 'g:cam:backend-team-' + id, 'g:cam:canadian-' + id], done);
                    assertMemberOf(asUser, ['g:cam:oae-team-' + id, 'g:cam:ui-team-' + id, 'g:cam:backend-team-' + id, 'g:cam:belgian-' + id,
                        'g:cam:west-flemish-' + id, 'g:cam:east-flemish-' + id, 'g:cam:not-canadian-' + id, 'g:cam:not-canadian-' + id], done);
                });

            });
        });

        it('should explode groups correctly', function(callback) {
            createAndGetUser(anonymousContext, 'test-runner', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, user) {
                var ctx = new Context(tenant, user);
                createOAEStructure(ctx, function(id) {
                    var asUser = ctx.user().id;

                    var checks = 0;
                    var done = function(err) {
                        checks++;
                        if (checks === 7) {
                            callback();
                        }
                    };
                    assertExplodedGroupUsers('g:cam:oae-team-' + id, [asUser, 'u:cam:bert-' + id, 'u:cam:branden-' + id, 'u:cam:nicolaas-' + id, 'u:cam:simon-' + id], done);
                    assertExplodedGroupUsers('g:cam:backend-team-' + id, [asUser, 'u:cam:simon-' + id, 'u:cam:branden-' + id], done);
                    assertExplodedGroupUsers('g:cam:canadian-' + id, [asUser, 'u:cam:branden-' + id], done);
                    assertExplodedGroupUsers('g:cam:not-canadian-' + id, [asUser, 'u:cam:simon-' + id], done);
                    assertExplodedGroupUsers('g:cam:belgian-' + id, [asUser, 'u:cam:bert-' + id, 'u:cam:nicolaas-' + id], done);
                    assertExplodedGroupUsers('g:cam:west-flemish-' + id, [asUser, 'u:cam:bert-' + id], done);
                    assertExplodedGroupUsers('g:cam:east-flemish-' + id, [asUser, 'u:cam:nicolaas-' + id], done);
                });
            });
        });

        it('should return 400 when getting a group with a bad identifier.', function(callback) {
            api.getGroup("u:cam:simon", function(err, group) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        it('should be able to create a group', function(callback) {
            var r = Math.floor(Math.random()*100000000);
            createAndGetUser(anonymousContext, 'test-runner', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, user) {
                var ctx = new Context(tenant, user);
                api.createGroup(ctx, "test-group-" + r, "This is a test group", function(err, group) {
                    if (err) {
                        assert.fail("Should be able to create a simple group.");
                    }

                    // Should be created.
                    assert.equal(group, "g:cam:test-group-" + r);

                    // Create the same one again, should fail.
                    api.createGroup(ctx, "test-group-" + r, "This is a test group", function(err, group) {
                        assert.equal(err.code, 400, "Creating a group with the same name as an existing group should fail!");
                        callback();
                    });
                });
            });
        });

        it('should be able to add members in a secure way', function(callback) {
            var tenant = new Tenant('cam-'+new Date().getMilliseconds(), 'Cambridge', 'Cambridge University', 3001);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        api.createGroup(mrvisserCtx, 'managed-by-canadians', "Group", function(err, groupUuid) {
                            assert.ok(!err);

                            // 2. try and add simong to it with an unprivileged user
                            api.addGroupMember(nicoCtx, groupUuid, simong.id, 'member', function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // verify simong was not added
                                api.memberOf(simong.id, false, null, null, function(err, groupUuids) {
                                    assert.ok(!err);
                                    assert.equal(groupUuids.length, 0);

                                    // 3. add nico as member, then ensure he still cannot add
                                    api.addGroupMember(mrvisserCtx, groupUuid, nico.id, 'member', function(err) {
                                        assert.ok(!err);

                                        api.addGroupMember(nicoCtx, groupUuid, simong.id, 'member', function(err) {
                                            assert.ok(err);
                                            assert.ok(err.code, 401);

                                            api.memberOf(simong.id, false, null, null, function(err, groupUuids) {
                                                assert.ok(!err);
                                                assert.equal(groupUuids.length, 0);

                                                // 4. add Nico as manager, ensure he can now add
                                                api.addGroupMember(mrvisserCtx, groupUuid, nico.id, 'manager', function(err) {
                                                    assert.ok(!err);

                                                    api.addGroupMember(nicoCtx, groupUuid, simong.id, 'member', function(err) {
                                                        assert.ok(!err);

                                                        api.memberOf(simong.id, false, null, null, function(err, groupUuids) {
                                                            assert.ok(!err);
                                                            assert.equal(groupUuids.length, 1);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });

            });
        });

        it('should not be able to add members as an unprivileged user', function(callback) {
            var tenant = new Tenant('cam-'+new Date().getMilliseconds(), 'Cambridge', 'Cambridge University', 3001);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        api.createGroup(mrvisserCtx, 'managed-by-canadians', "Group", function(err, groupUuid) {
                            assert.ok(!err);

                            // 2. try and add simong to it with an unprivileged user
                            api.addGroupMembers(nicoCtx, groupUuid, [simong.id], 'member', function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // verify simong was not added
                                api.memberOf(simong.id, false, null, null, function(err, groupUuids) {
                                    assert.ok(!err);
                                    assert.equal(groupUuids.length, 0);

                                    // 3. add nico as member, then ensure he still cannot add
                                    api.addGroupMembers(mrvisserCtx, groupUuid, [nico.id], 'member', function(err) {
                                        assert.ok(!err);

                                        api.addGroupMembers(nicoCtx, groupUuid, [simong.id], 'member', function(err) {
                                            assert.ok(err);
                                            assert.ok(err.code, 401);

                                            api.memberOf(simong.id, false, null, null, function(err, groupUuids) {
                                                assert.ok(!err);
                                                assert.equal(groupUuids.length, 0);

                                                // 4. add Nico as manager, ensure he can now add
                                                api.addGroupMembers(mrvisserCtx, groupUuid, [nico.id], 'manager', function(err) {
                                                    assert.ok(!err);

                                                    api.addGroupMembers(nicoCtx, groupUuid, [simong.id], 'member', function(err) {
                                                        assert.ok(!err);

                                                        api.memberOf(simong.id, false, null, null, function(err, groupUuids) {
                                                            assert.ok(!err);
                                                            assert.equal(groupUuids.length, 1);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('should be able to add members by an indirect user', function(callback) {
            var tenant = new Tenant('cam-'+new Date().getMilliseconds(), 'Cambridge', 'Cambridge University', 3001);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        api.createGroup(mrvisserCtx, 'managed-by-canadians', "Group", function(err, groupUuid) {
                            assert.ok(!err);

                            // 2. Create and assign a group that will manage the managed-by-canadians group
                            api.createGroup(mrvisserCtx, 'canadians', "Group", function(err, canadiansGroupUuid) {
                                assert.ok(!err);

                                api.addGroupMember(mrvisserCtx, groupUuid, canadiansGroupUuid, 'manager', function(err) {
                                    assert.ok(!err);

                                    // 3. make nico a member of the 'canadians' group, then verify he can manage managed-by-canadians
                                    api.addGroupMember(mrvisserCtx, canadiansGroupUuid, nico.id, 'member', function(err) {
                                        assert.ok(!err);

                                        // quick sanity check on the permission itself
                                        permissionsAPI.isAllowed(nico.id, 'manager', groupUuid, function(err, isAllowed) {
                                            assert.ok(!err);
                                            assert.ok(isAllowed === true);

                                            // verify he can add someone
                                            api.addGroupMember(nicoCtx, groupUuid, simong.id, 'member', function(err) {
                                                assert.ok(!err);

                                                // verify it worked
                                                api.memberOf(simong.id, false, null, null, function(err, groupUuids) {
                                                    assert.ok(!err);
                                                    assert.ok(groupUuids.length, 1);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });
});

// create the user and return the created user object (callback(err, user))
var createAndGetUser = function(ctx, username, password, visibility, firstName, lastName, displayName, callback) {
    api.createUser(ctx, username, password, visibility, 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, id) {
        id = id || rolesUtil.toUuid('u', tenant.alias, username);
        api.getUser(ctx, id, callback);
    });
};

/**
 Disabled until MemberOf denormalization is implemented

exports.testPaging = function(test) {
    assert.expect(3);
    createOAEStructure(function(id) {
        api.memberOf('u:cam:bert-'+id, false, null, 2, function(err, groups) {
            assert.equal(groups.length, 2);
            assert.equal(groups[0], 'g:cam:belgian-' + id);
            assert.equal(groups[1], 'g:cam:oae-team-' + id);
            assert.done();
        });
    });
};
*/
