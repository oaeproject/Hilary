/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');


/**
 * Merge the contents of two or more objects together into the first object.
 * Usage of this function is the same as http://api.jquery.com/jQuery.extend/
 * @param  {Boolean}  deep     If true, the merge becomes recursive (aka. deep copy).
 * @param  {Object}   target   The object to extend. It will receive the new properties.
 * @param  {Object}   object1  An object containing additional properties to merge in.
 * @param  {Object}   objectN  Additional objects containing properties to merge in.
 * @return {Object}   target   The result of the merged objects
 */
var extend = module.exports.extend = function() {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
    i = 1,
    length = arguments.length,
    deep = false;
    if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
    }
    for (i; i < length; i++) {
        if ((options = arguments[i]) != null) {
            for (name in options) {
                src = target[name];
                copy = options[name];
                if (deep && copy && (_.isObject(copy))) {
                    clone = src && _.isObject(src) ? src : {};
                    target[name] = extend(deep, clone, copy);
                } else if (copy !== undefined) {
                    target[name] = Cassandra.castToBoolean(copy);
                }
            }
        }
    }
    return target;
}
