/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;

var PrincipalsAPI = require('oae-principals');


describe('Principals', function() {

    describe('Users', function() {

        var tenant = new Tenant('cam', 'Cambridge', 'Cambridge University', 3000);
        var anonymousContext = new Context(tenant, null);

        /**
         * Utility function to create a new user that will be used inside of the tests
         * @param {Function(user)}      callback        Standaard callback function
         * @param {User}                callback.user   Created user
         */
        var createUser = function(callback) {
            var r = Math.floor(Math.random()*10000000);

            var username = 'simong-' + r;
            var firstName = 'Simon';
            var lastName = 'Gaeremynck';
            var displayName = 'simong';
            var password = 'password';
            var visibility = "public";

            PrincipalsAPI.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, id) {
                if (err) {
                    assert.fail("Creating a new user should be possible.");
                    return assert.done();
                }

                PrincipalsAPI.getUser(anonymousContext, id, function(err, user) {
                    assert.equal(username, user.username);
                    assert.equal(firstName, user.firstName);
                    assert.equal(lastName, user.lastName);
                    assert.equal(displayName, user.displayName);
                    assert.equal(visibility, user.visibility);

                    // Try to create one again.
                    PrincipalsAPI.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, foo) {
                        if (!err) {
                            assert.fail("Creating a user with the same username should fail.");
                        }

                        // This way the exports.testCreateUser can be used in other tests.
                        callback(user);
                    });
                });
            });
        };


        /**
         * Test that is possible to create a user
         */
        it('Test create user', function(callback) {
            createUser(function() {
                callback();
            });
        });

        /**
         * Test that it is possible to update a user
         */
        it('Test update user', function(callback) {
            createUser(function(user) {
                // Try to update it.
                var ctx = new Context(tenant, user);
                PrincipalsAPI.updateUser(ctx, user.id, 'private', 'en_GB', 'Europe/London', 'first', 'last', 'displayname', function(err){
                    if (err) {
                        assert.fail("Should be able to update a user.");
                        assert.done();
                    }

                    // Get it.
                    PrincipalsAPI.getUser(ctx, user.id, function(err, user) {
                        if (err) {
                            assert.fail("Should be able to get a user.");
                            assert.done();
                        }

                        assert.equal('private', user.visibility);
                        assert.equal('first', user.firstName);
                        assert.equal('last', user.lastName);
                        assert.equal('displayname', user.displayName);
                        assert.equal('en_GB', user.locale);
                        assert.equal('Europe/London', user.timezone);
                        callback();
                    });

                });
            });
        });

        /**
         * Test that updating a user fails if no parameters are provided
         */
        it('Test failed update', function(callback) {
            createUser(function(user) {
                var ctx = new Context(tenant, user);
                PrincipalsAPI.updateUser(ctx, user.id, undefined, undefined, undefined, undefined, undefined, undefined, function(err){
                    if (!err) {
                        assert.fail('Updating a user with no values should fail.');
                    }
                    callback();
                });
            });
        });

        /**
         * Test that a user can check a user his or her password
         */
        it('Test check password', function(callback) {
            createUser(function(created_user) {
                PrincipalsAPI.checkPassword(tenant, created_user.username, 'password', function(err, pw_user) {
                    assert.ok(!err);
                    assert.equal(created_user.id, pw_user.id);
                    PrincipalsAPI.checkPassword(tenant, 'none_existing_user', 'password', function(err, pw_user) {
                        assert.ok(!err);
                        assert.equal(false, pw_user);
                        callback();
                    });
                });
            });
        });

        it('Test updating the user visibility', function(callback) {
            createUser(function(created_user) {
                var context = new Context(tenant, created_user);
                PrincipalsAPI.setUserVisibility(context, created_user.id, 'private', function(err) {
                    assert.ok(!err);

                    // Try updating it with a bad visibility.
                    PrincipalsAPI.setUserVisibility(context, created_user.id, 'totally-not-a-setting', function(err) {
                        assert.equal(err.code, 400);

                        // Try updating someone else his profile.
                        createUser(function(bad_user) {
                            var badContext = new Context(tenant, bad_user);
                            PrincipalsAPI.setUserVisibility(badContext, created_user.id, 'loggedin', function(err) {
                                assert.equal(err.code, 401);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('Test getting a user by username and tenant', function(callback) {
            createUser(function(created_user) {
                var context = new Context(tenant, created_user);
                PrincipalsAPI.getTenantUser(context, created_user.username, function(err, user) {
                    assert.ok(!err);
                    assert.equal(user.id, created_user.id);
                    assert.equal(user.username, created_user.username);
                    assert.equal(user.firstName, created_user.firstName);
                    assert.equal(user.lastName, created_user.lastName);
                    assert.equal(user.displayName, created_user.displayName);
                    callback();
                });
            });
        });

        it('Test getting a bad userid', function(callback) {
            createUser(function(created_user) {
                var context = new Context(tenant, created_user);
                PrincipalsAPI.getUser(context, undefined, function(err, user) {
                    assert.ok(err.code, 400);
                    PrincipalsAPI.getUser(context, 'totally-not-a-valid-id', function(err, user) {
                        assert.ok(err.code, 400);
                        callback();
                    });
                });
            });
        });
    });
});