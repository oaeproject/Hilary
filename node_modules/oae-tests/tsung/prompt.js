/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */


var readline = require('readline');
var tsung = require('node-tsung');


var config = {
    'loglevel': 'notice',
    'version': '1.0',
    'dumpTraffic': false
};

// A simple runner that tests a server running on localhost:2001
var runner = new tsung.Tsung(config);



// Read from the commandline.
var rl = readline.createInterface({
  'input': process.stdin,
  'output': process.stdout
});

rl.question("What clients are you driving your tests from? [hostname1,hostname2,...]? ", function(answer) {
    runner.addClient(answer, true, 10000);


    var promptServer = function() {
        rl.question("What server are you running this test against? [hostname:port] ", function(answer) {
            var server = answer.split(':');
            if (server.length !== 2 || !parseInt(server[1], 10)) {
                console.log('Please provide a valid server.');
                promptServer();
            } else {
                runner.addServer(server[0], server[1]);
                rl.question('Add another server? [y/N] ', function(answer) {
                    if (answer === 'y') {
                        promptServer();
                    } else {
                        setupPhase(1);
                    }
                });
            }
        });
    };
    promptServer();

    var setupPhase = function(i) {
        rl.question('Phase ' + i + ': In what unit should the phase time be measured? [hour, minute, second] ', function(answer) {
            if (answer === 'hour' || answer === 'minute' || answer === 'second') {
                var phaseUnit = answer;
                rl.question('Phase ' + i + ': How long should the phase take (in ' + phaseUnit +'s) ? ', function(answer) {
                    var time = parseInt(answer, 10);
                    if (time > 0) {
                        rl.question('Phase ' + i + ': In what unit should users be added [hour, minute, second] ? ', function(answer) {
                            if (answer === 'hour' || answer === 'minute' || answer === 'second') {
                                var usersUnit = answer;
                                rl.question('Phase ' + i + ': How many users should be added per ' + usersUnit + ' ? ', function(answer) {
                                    var newUsers = parseInt(answer, 10);
                                    if (newUsers > 0) {
                                        runner.addPhase(time, phaseUnit, newUsers, usersUnit);
                                        rl.question('Add another phase? [y/N]', function(answer) {
                                            if (answer === 'y') {
                                                setupPhase(i+1);
                                            } else {
                                                addDataDirectory();
                                            }
                                        });
                                    } else {
                                        console.log('Invalid amount');
                                        setupPhase(i);
                                    }
                                });
                            } else {
                                console.log('Invalid timeunit');
                                setupPhase(i);
                            }
                        });
                    } else {
                        console.log('Invalid amount');
                        setupPhase(i);
                    }
                });
            } else {
                console.log('Invalid timeunit');
                setupPhase(i);
            }
        });
    };


    var addDataDirectory = function() {
        rl.question('Data directory? (Leave blank to skip) ', function(answer) {
            if (answer) {
                runner.addDataDirectory(answer);
            }

            addTests();
        })
    };

    var addTests = function() {
        // everything under /tests
        console.log(runner.to_xml());
        rl.close();
    };
  
});