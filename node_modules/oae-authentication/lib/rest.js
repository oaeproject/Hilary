/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var passport = require('passport');

var OAE = require('oae-util/lib/oae');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');



////////////////////////////////////
////////////////////////////////////
// COMMON AUTHENTICATION HANDLERS //
////////////////////////////////////
////////////////////////////////////

/**
 * Logs out of the current session.
 *
 * @param  {Request}    req     The express request object
 * @param  {Response}   res     The express response object
 * @api private
 */
var _handleLogout = function(req, res) {
    req.telemetryUrl = '/api/auth/logout';
    req.logOut();
    res.send(200);
};

/**
 * Performs local authentication.
 *
 * @param  {Request}    req     The express request object
 * @param  {Response}   res     The express response object
 * @api private
 */
var _handleLocalAuthentication = function(req, res, next) {
    // This callback only gets called when we log in succesfully.
    req.telemetryUrl = '/api/auth/login';
    return res.send(200, req.user);
};



//////////////////////////////////
//////////////////////////////////
// GLOBAL TENANT AUTHENTICATION //
//////////////////////////////////
//////////////////////////////////

OAE.globalAdminServer.post('/api/auth/login', passport.authenticate('local'), _handleLocalAuthentication);
OAE.globalAdminServer.post('/api/auth/logout', _handleLogout);



////////////////////////////////
////////////////////////////////
// USER TENANT AUTHENTICATION //
////////////////////////////////
////////////////////////////////

OAE.tenantServer.post('/api/auth/logout', _handleLogout);


///////////
// LOCAL //
///////////

OAE.tenantServer.post('/api/auth/login', passport.authenticate('local'), _handleLocalAuthentication);

/////////////////
// SIGNED AUTH //
/////////////////

OAE.globalAdminServer.get('/api/auth/signed', function(req, res) {
    req.telemetryUrl = '/api/auth/signed';
    AuthenticationAPI.getSignedToken(req.ctx, req.query.tenant, function(err, data) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(data);
    });
});

OAE.tenantServer.post('/api/auth/signed', function(req, res, next) {
    req.telemetryUrl = '/api/auth/signed';
    passport.authenticate('signed', { 'successRedirect': '/',
                                      'failureRedirect': '/' })(req, res, next);
});

//////////////
//  GOOGLE  //
//////////////

// Redirect the user to Google for authentication.  When complete, Google
// will redirect the user back to the application at
// /api/auth/google/return
OAE.tenantServer.get('/api/auth/google', function(req, res, next) {
    req.telemetryUrl = '/api/auth/google';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.GOOGLE);
    passport.authenticate(strategyId)(req, res, next);
});

// Google will redirect the user to this URL after authentication.  Finish
// the process by verifying the assertion.  If valid, the user will be
// logged in.  Otherwise, authentication has failed.
OAE.tenantServer.get('/api/auth/google/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/google/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.GOOGLE);
    passport.authenticate(strategyId, {'successRedirect': '/', 'failureRedirect': '/'})(req, res, next);
});


///////////////
//  TWITTER  //
///////////////

// Redirect the user to Twitter for authentication.  When complete, Twitter
// will redirect the user back to the application at
// /api/auth/twitter/callback
OAE.tenantServer.get('/api/auth/twitter', function(req, res, next) {
    req.telemetryUrl = '/api/auth/twitter';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.TWITTER);
    passport.authenticate(strategyId)(req, res, next);
});

// Twitter will redirect the user to this URL after approval.  Finish the
// authentication process by attempting to obtain an access token.  If
// access was granted, the user will be logged in.  Otherwise,
// authentication has failed.
OAE.tenantServer.get('/api/auth/twitter/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/twitter/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.TWITTER);
    passport.authenticate(strategyId, {'successRedirect': '/', 'failureRedirect': '/'})(req, res, next);
});


////////////////
//  FACEBOOK  //
////////////////

// Redirect the user to Facebook for authentication.  When complete,
// Facebook will redirect the user back to the application at
// /api/auth/facebook/callback
OAE.tenantServer.get('/api/auth/facebook', function(req, res, next) {
    req.telemetryUrl = '/api/auth/facebook';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.FACEBOOK);
    passport.authenticate(strategyId)(req, res, next);
});

// Facebook will redirect the user to this URL after approval.  Finish the
// authentication process by attempting to obtain an access token.  If
// access was granted, the user will be logged in.  Otherwise,
// authentication has failed.
OAE.tenantServer.get('/api/auth/facebook/callback', function(req, res, next) {
    req.telemetryUrl = '/api/auth/facebook/callback';
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.FACEBOOK);
    passport.authenticate(strategyId, {'successRedirect': '/', 'failureRedirect': '/'})(req, res, next);
});



/////////////////////////
/////////////////////////
// PASSWORD MANAGEMENT //
/////////////////////////
/////////////////////////

/*!
 * Change the password of the currently authenticated user in the global tenant
 */
OAE.globalAdminServer.post('/api/user/:id/password', function(req, res) {
    req.telemetryUrl = '/api/user/id/password';
    AuthenticationAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/*!
 * Change the password of the currently authenticated user in the user tenant
 */
OAE.tenantServer.post('/api/user/:id/password', function(req, res) {
    req.telemetryUrl = '/api/user/id/password';
    AuthenticationAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/*!
 * Checks whether or not a user id exists
 */
OAE.tenantServer.get('/api/auth/exists/:username', function(req, res) {
    req.telemetryUrl = '/api/auth/exists/username';
    AuthenticationAPI.loginIdExists(req.ctx, req.params.username, function(err, exists) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // If the login id doesn't exist yet, we send back a 404
        if (exists) {
            res.send(200);
        } else {
            res.send(404);
        }
    });
});
