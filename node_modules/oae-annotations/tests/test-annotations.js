/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * visibilitys and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var temp = require('temp');
var url = require('url');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var Config = require('oae-config').config('oae-content');
var ConfigTestUtil = require('oae-config/lib/test/util');
var ContentInternalUtil = require('oae-content/lib/internal/util');
var MQ = require('oae-util/lib/mq');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var RestUtil = require('oae-rest/lib/util');
var TestsUtil = require('oae-tests');
var User = require('oae-principals/lib/model.user').User;



describe('Annotations', function(){
    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
   
    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    var createUser = function(identifier, visibility, displayName, callback) {
        var contexts = {};
        var userId = TestsUtil.generateTestUserId(identifier);
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', displayName, {'visibility' : visibility}, function(err, createdUser) {
            if (err) {
                assert.fail('Could not create test user');
            }
            contexts[identifier] = {
                'user': createdUser,
                'restContext': TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password')
            };
            callback(contexts);
        });
    };

    describe('API annotations', function(){
        var testData = {
            "ranges": JSON.stringify([{"start":"/div[1]/div[1]/div[1]/div[8]/span[2]","startOffset":13,"end":"/div[1]/div[1]/div[1]/div[13]","endOffset":29}]),
            "quote":"he exit to cover the new path.",
            "text":"test"
        };
        var testPage = 1;
        var testRevisionId = 'x1L-v2f7x';
        describe('create annotation', function(){
            it('create a annotation', function(callback){
                createUser('tim', 'loggedin', 'Tim Bloeme', function(contexts){
                    RestAPI.Annotations.createAnnotation(contexts['tim'].restContext, testRevisionId, testPage, testData, function(err, data){
                        if (err) {
                            console.log(err);
                        }
                        assert.ok(!err);
                        assert.ok(section);
                        assert.ok(data.id);
                        assert.ok(data.ranges);
                        assert.ok(data.text);
                        assert.equel(data.userId, contexts['tim'].restContext.user().id);
                        testId = data.id;
                        callback();
                    });
                });
            });
        });
    });
});
            /*it('Invalid context test', function(callback){
                RestAPI.Annotations.createAnnotation(null, testRevisionId, testPage, testData, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
            it('Invalid revision id test', function(callback){
                RestAPI.Annotations.createAnnotation(contexts['tim'].restContext, null, testPage, testData, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
            it('Invalid page test', function(callback){
                RestAPI.Annotations.createAnnotation(contexts['tim'].restContext, testRevisionId, null, testData, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
            it('Invalid data test', function(callback){
                RestAPI.Annotations.createAnnotation(contexts['tim'].restContext, testRevisionId, testPage, null, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
        });
        describe('update a annotation', function(callback){
            it('update a annotation', function(callback){
                RestAPI.Annotations.updateAnnotation(contexts['tim'].restContext, testRevisionId, testPage, testId, testData, function(err, data){
                    assert.ok(!err);
                    assert.ok(section);
                    assert.ok(data.id);
                    assert.ok(data.ranges);
                    assert.ok(data.text);
                    assert.equel(data.userId, contexts['tim'].restContext.user().id);
                    callback();
                });
            });
            it('Invalid context id test', function(callback){
                RestAPI.Annotations.updateAnnotation(null, testRevisionId, testPage, testId, testData, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
            it('Invalid revision id test', function(callback){
                RestAPI.Annotations.updateAnnotation(contexts['tim'].restContext, null, testPage, testId, testData, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
            it('Invalid page test', function(callback){
                RestAPI.Annotations.updateAnnotation(contexts['tim'].restContext, testRevisionId, null, testId, testData, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
            it('Invalid annotation id', function(callback){
                RestAPI.Annotations.updateAnnotation(contexts['tim'].restContext, testRevisionId, testPage, null, testData, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
            it('Invalid annotation data', function(callback){
                RestAPI.Annotations.updateAnnotation(contexts['tim'].restContext, testRevisionId, testPage, testId, null, function(err, data){
                    assert.ok(err);
                    assert.equel(err.code, 401);
                    callback();
                });
            });
        });
    });
});*/