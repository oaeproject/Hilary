/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthenticationAPI = require('oae-authentication');
var AuthzInvitationsDAO = require('oae-authz/lib/invitations/dao');
var AuthzUtil = require('oae-authz/lib/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context').Context;
var EmailTestUtil = require('oae-email/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsTestUtil = require('oae-tenants/lib/test/util');
var TestsUtil = require('oae-tests');
var TZ = require('oae-util/lib/tz');

var PrincipalsAPI = require('oae-principals');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');


describe('Users', function() {

    // Rest contexts that can be used to make requests as different types of users
    var anonymousRestContext = null;        // anonymous user associated to a tenant
    var camAdminRestContext = null;         // cambridge tenant admin
    var gtAdminRestContext = null;          // georgia tech tenant admin
    var globalAdminRestContext = null;      // global administrator
    var anonymousGlobalRestContext = null;  // anonymous user browsing the global admin tenant
    var globalAdminContext = null;          // API context for the global admin (to be used on back-end API calls, not REST calls)

    /**
     * @return {Stream} A stream to jpg image
     * @api private
     */
    var _getPictureStream = function() {
        return fs.createReadStream(util.format('%s/data/restroom.jpg', __dirname));
    };

    /**
     * Function that will fill up the REST and admin contexts
     */
    before(function(callback) {
        // Fill up the request contexts
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        globalAdminContext = TestsUtil.createGlobalAdminContext();
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        return callback();
    });

    describe('Full User Profile Decorators', function() {

        /**
         * Test that verifies you cannot register a duplicate profile decorator, nor can you register one without a function
         */
        it('verify register full user profile decorator error scenarios', function(callback) {
            var testId = TestsUtil.generateRandomText();
            assert.throws(function() {
                PrincipalsAPI.registerFullUserProfileDecorator(testId);
            });

            // Verify we can successfully register one with a function afterward
            PrincipalsAPI.registerFullUserProfileDecorator(testId, function(ctx, user, callback) { return callback(); });

            // Verify we cannot register a duplicate
            assert.throws(function() {
                PrincipalsAPI.registerFullUserProfileDecorator(testId, function(ctx, user, callback) { return callback(); });
            });

            return callback();
        });

        /**
         * Test that verifies the serialization of many different possible types provided by some test decorators
         */
        it('verify various user profile decorator response types', function(callback) {
            var testUndefinedNamespace = TestsUtil.generateRandomText();
            var testNullNamespace = TestsUtil.generateRandomText();
            var testZeroNamespace = TestsUtil.generateRandomText();
            var testEmptyStringNamespace = TestsUtil.generateRandomText();
            var testFalseNamespace = TestsUtil.generateRandomText();
            var testErrorNamespace = TestsUtil.generateRandomText();

            PrincipalsAPI.registerFullUserProfileDecorator(testUndefinedNamespace, function(ctx, user, callback) { return callback(); });
            PrincipalsAPI.registerFullUserProfileDecorator(testNullNamespace, function(ctx, user, callback) { return callback(null, null); });
            PrincipalsAPI.registerFullUserProfileDecorator(testZeroNamespace, function(ctx, user, callback) { return callback(null, 0); });
            PrincipalsAPI.registerFullUserProfileDecorator(testEmptyStringNamespace, function(ctx, user, callback) { return callback(null, ''); });
            PrincipalsAPI.registerFullUserProfileDecorator(testFalseNamespace, function(ctx, user, callback) { return callback(null, false); });
            PrincipalsAPI.registerFullUserProfileDecorator(testErrorNamespace, function(ctx, user, callback) { return callback({'code': 500, 'msg': 'Expected'}); });

            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.User.getUser(user.restContext, user.user.id, function(err, userProfile) {
                    assert.ok(!err);

                    // Ensure the key for the undefined value or error do not get returned in the feed
                    assert.ok(!_.contains(_.keys(userProfile), testUndefinedNamespace));
                    assert.ok(!_.contains(_.keys(userProfile), testErrorNamespace));

                    // Ensure all the others return exactly as-is
                    assert.strictEqual(userProfile[testNullNamespace], null);
                    assert.strictEqual(userProfile[testZeroNamespace], 0);
                    assert.strictEqual(userProfile[testEmptyStringNamespace], '');
                    assert.strictEqual(userProfile[testFalseNamespace], false);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies a user profile decorator cannot override existing properties
         */
        it('verify a user profile decorator cannot overwrite existing user properties', function(callback) {
            var testNamespace = TestsUtil.generateRandomText();

            PrincipalsAPI.registerFullUserProfileDecorator('visibility', function(ctx, user, callback) {
                // Try setting the user visibility on the fly
                user.visibility = 'loggedin';

                // Try setting the user visibility VIA using the 'visibility' property as the namespace of our decorator
                return callback(null, 'private');
            });

            // Create a public user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                // Verify the visibility of the user is still public
                RestAPI.User.getUser(user.restContext, user.user.id, function(err, user) {
                    assert.ok(!err);
                    assert.equal(user.visibility, 'public');
                    return callback();
                });
            });
        });
    });

    describe('Create user', function() {

        /**
         * Test that verifies that recaptcha is bypassed when a valid invitation token is specified
         */
        it('verify recaptcha is bypassed with valid invitation token', function(callback) {
            // Create a tenant with recaptcha enabled and clear up any pending emails
            TestsUtil.setupMultiTenantPrivacyEntities(function(tenant) {
                ConfigTestUtil.updateConfigAndWait(tenant.adminRestContext, null, {'oae-principals/recaptcha/enabled': true}, function(err) {
                    assert.ok(!err);
                    EmailTestUtil.collectAndFetchAllEmails(function() {
                        var email = TestsUtil.generateTestEmailAddress();
                        var profile = {
                            'username': TestsUtil.generateTestUserId(),
                            'password': 'password',
                            'displayName': TestsUtil.generateRandomText(),
                            'email': email
                        };

                        // Ensure a user creating an account without an invitation token results in 400
                        PrincipalsTestUtil.assertCreateUserFails(tenant.anonymousRestContext, profile, 400, function() {

                            // Perform a create request with a token that does not map to any
                            // existing invitation token, ensuring it fails
                            var profileWithInvalidToken = _.extend({}, profile, {
                                'invitationToken': 'nonexistingtoken'
                            });
                            PrincipalsTestUtil.assertCreateUserFails(tenant.anonymousRestContext, profile, 400, function() {

                                // Generate an invitation token for the email address
                                AuthzInvitationsDAO.getOrCreateTokensByEmails([email], function(err, emailTokens) {
                                    assert.ok(!err);

                                    // Perform the same request, but with a valid invitation token,
                                    // which should create the user and not send an email
                                    // verification (because the token email matches the specified
                                    // email)
                                    var profileWithValidToken = _.extend({}, profile, {
                                        'invitationToken': emailTokens[email]
                                    });
                                    PrincipalsTestUtil.assertCreateUserSucceeds(tenant.anonymousRestContext, profileWithValidToken, function(user, token) {
                                        assert.ok(user);
                                        assert.strictEqual(user.email, email.toLowerCase());
                                        assert.ok(!token);

                                        // Ensure no verification email was sent since we had a
                                        // verification token
                                        EmailTestUtil.collectAndFetchAllEmails(function(messages) {
                                            assert.ok(_.isEmpty(messages));
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that it should only be possible to create a user if there are valid reCaptcha tokens present or the current user is an admin
         */
        it('verify create user', function(callback) {
            // Try to create a user as an anonymous user with no reCaptcha tokens
            var username = TestsUtil.generateTestUserId();
            var recaptchaTenantAlias = TenantsTestUtil.generateTestTenantAlias();

            // Verify recaptcha token is needed when feature is enabled
            TenantsTestUtil.createTenantAndWait(globalAdminRestContext, recaptchaTenantAlias, recaptchaTenantAlias, recaptchaTenantAlias, null, function(err, recaptchaTenant) {
                assert.ok(!err);
                var recaptchaAnonymousRestContext = TestsUtil.createTenantRestContext(recaptchaTenantAlias);

                // Enable recaptcha for this tenant
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, recaptchaTenantAlias, {'oae-principals/recaptcha/enabled': true}, function(err) {
                    assert.ok(!err);

                    var email = TestsUtil.generateTestEmailAddress();
                    RestAPI.User.createUser(recaptchaAnonymousRestContext, username, 'password', 'Test User', email, {'visibility': 'public'}, function(err, userObj) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!userObj);

                        RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Test User', email, {'visibility': 'public'}, function(err, createdUser) {
                            assert.ok(!err);
                            assert.ok(createdUser);
                            assert.equal(createdUser.displayName, 'Test User');
                            assert.equal(createdUser.publicAlias, 'Test User');
                            assert.equal(createdUser.visibility, 'public');
                            assert.equal(createdUser.resourceType, 'user');
                            assert.equal(createdUser.email, email.toLowerCase());
                            assert.equal(createdUser.profilePath, '/user/' + createdUser.tenant.alias + '/' + AuthzUtil.getResourceFromId(createdUser.id).resourceId);
                            var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                            // Try creating a user with the same username, which should fail
                            var email2 = TestsUtil.generateTestEmailAddress();
                            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Test User', email2, {}, function(err, userObj) {
                                assert.ok(err);
                                assert.ok(!userObj);

                                // Try creating a new user as the created user
                                var newUsername = TestsUtil.generateTestUserId();
                                RestAPI.User.createUser(userRestContext, newUsername, 'password', 'Test User', email2, {}, function(err, userObj) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);

                                    // We promote the created user to be a tenant admin
                                    RestAPI.User.setTenantAdmin(globalAdminRestContext, createdUser.id, true, function(err) {
                                        assert.ok(!err);

                                        // Try creating the user again
                                        RestAPI.User.createUser(userRestContext, newUsername, 'password', 'Test User', email2, {}, function(err, userObj) {
                                            assert.ok(!err);
                                            assert.ok(userObj);

                                            // Create a user on a tenant as the global administrator
                                            newUsername = TestsUtil.generateTestUserId();
                                            var email3 = TestsUtil.generateTestEmailAddress();
                                            RestAPI.User.createUserOnTenant(globalAdminRestContext, global.oaeTests.tenants.cam.alias, newUsername, 'password', 'Test User', email3, {'visibility': 'public'}, function(err, userObj) {
                                                assert.ok(!err);
                                                assert.ok(userObj);
                                                assert.equal(userObj.displayName, 'Test User');
                                                assert.equal(userObj.publicAlias, 'Test User');
                                                assert.equal(userObj.visibility, 'public');
                                                assert.equal(userObj.resourceType, 'user');
                                                assert.equal(userObj.profilePath, '/user/' + userObj.tenant.alias + '/' + AuthzUtil.getResourceFromId(userObj.id).resourceId);

                                                // Create a user on the global tenant as the global administrator
                                                newUsername = TestsUtil.generateTestUserId();
                                                var email4 = TestsUtil.generateTestEmailAddress();
                                                RestAPI.User.createUserOnTenant(globalAdminRestContext, global.oaeTests.tenants.cam.alias, newUsername, 'password', 'Test User', email4, {'visibility': 'public'}, function(err, userObj) {
                                                    assert.ok(!err);
                                                    assert.ok(userObj);

                                                    // Verify we cannot create a user on the global admin tenant as an anonymous user
                                                    newUsername = TestsUtil.generateTestUserId();
                                                    var email5 = TestsUtil.generateTestEmailAddress();
                                                    RestAPI.User.createUserOnTenant(anonymousGlobalRestContext, 'admin', newUsername, 'password', 'Test User', email5, {}, function(err, userObj) {
                                                        assert.ok(err);
                                                        assert.equal(err.code, 401);

                                                        // Verify we cannot create a user on another tenant as global admin anonymous user
                                                        RestAPI.User.createUserOnTenant(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, newUsername, 'password', 'Test User', email5, {}, function(err, userObj) {
                                                            assert.ok(err);
                                                            assert.equal(err.code, 401);

                                                            // Verify we cannot create a user on another tenant as a tenant admin. We check for a 404 because at the moment there is no
                                                            // such endpoint bound to the user tenant
                                                            newUsername = TestsUtil.generateTestUserId();
                                                            RestAPI.User.createUserOnTenant(camAdminRestContext, global.oaeTests.tenants.gt.alias, newUsername, 'password', 'Test User', email5, {'visibility': 'public'}, function(err, userObj) {
                                                                assert.ok(err);
                                                                assert.strictEqual(err.code, 404);
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the default tenant user visibility is used when creating a user without a visibility
         */
        it('verify user visibility defaults to the tenant default when created', function(callback) {
            var camTenantAlias = global.oaeTests.tenants.cam.alias;

            // Create a user to ensure the default user visibility of the tenant starts as public
            var email1 = TestsUtil.generateTestEmailAddress();
            RestAPI.User.createUser(camAdminRestContext, TestsUtil.generateTestUserId(), 'password', 'Bart', email1, {}, function(err, createdUser) {
                assert.ok(!err);
                assert.equal(createdUser.visibility, 'public');

                // Change the default user visibility of the tenant to loggedin
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, camTenantAlias, {'oae-principals/user/visibility': 'loggedin'}, function(err) {
                    assert.ok(!err);

                    // Create a user to ensure its visibility defaults to loggedin
                    var email2 = TestsUtil.generateTestEmailAddress();
                    RestAPI.User.createUser(camAdminRestContext, TestsUtil.generateTestUserId(), 'password', 'Lisa', email2, {}, function(err, createdUser) {
                        assert.ok(!err);
                        assert.equal(createdUser.visibility, 'loggedin');

                        // Reset the default user visibility of the tenant back to the global default
                        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, camTenantAlias, ['oae-principals/user/visibility'], function(err) {
                            assert.ok(!err);

                            // Ensure a user's visibility can be overridden when they are created
                            var email3 = TestsUtil.generateTestEmailAddress();
                            RestAPI.User.createUser(camAdminRestContext, TestsUtil.generateTestUserId(), 'password', 'Homer', email3, {'visibility': 'private'}, function(err, createdUser) {
                                assert.ok(!err);
                                assert.equal(createdUser.visibility, 'private');
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the default tenant user email preference is used when creating a user without an email preference
         */
        it('verify email preference defaults to the tenant default when created', function(callback) {
            var camTenantAlias = global.oaeTests.tenants.cam.alias;

            // Create a user to ensure the default user email preference of the tenant starts as immediate
            var email1 = TestsUtil.generateTestEmailAddress();
            RestAPI.User.createUser(camAdminRestContext, TestsUtil.generateTestUserId(), 'password', 'Bert', email1, {}, function(err, createdUser) {
                assert.ok(!err);
                assert.equal(createdUser.emailPreference, 'immediate');

                // Change the default user email preference of the tenant to weekly
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, camTenantAlias, {'oae-principals/user/emailPreference': 'weekly'}, function(err) {
                    assert.ok(!err);

                    // Create a user to ensure its email preference defaults to weekly
                    var email2 = TestsUtil.generateTestEmailAddress();
                    RestAPI.User.createUser(camAdminRestContext, TestsUtil.generateTestUserId(), 'password', 'Lisa', email2, {}, function(err, createdUser) {
                        assert.ok(!err);
                        assert.equal(createdUser.emailPreference, 'weekly');

                        // Reset the default user email preference of the tenant back to the global default
                        ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, camTenantAlias, ['oae-principals/user/emailPreference'], function(err) {
                            assert.ok(!err);

                            // Ensure a user's email preference can be overridden when they are created
                            var email3 = TestsUtil.generateTestEmailAddress();
                            RestAPI.User.createUser(camAdminRestContext, TestsUtil.generateTestUserId(), 'password', 'Homer', email3, {'emailPreference': 'daily'}, function(err, createdUser) {
                                assert.ok(!err);
                                assert.equal(createdUser.emailPreference, 'daily');
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users their usernames get lowercased.
         * See https://github.com/oaeproject/Hilary/issues/594
         */
        it('verify lowercasing of usernames', function(callback) {
            var username = TestsUtil.generateTestUserId() + 'Aa';
            var lowerCasedUsername = username.toLowerCase();
            var upperCasedUsername = username.toUpperCase();

            var email = TestsUtil.generateTestEmailAddress();
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Test User', email, {}, function(err, createdUser) {
                assert.ok(!err);

                // Verify we cannot create another user account where the username only differs in the casing
                var email2 = TestsUtil.generateTestEmailAddress();
                RestAPI.User.createUser(camAdminRestContext, lowerCasedUsername, 'password', 'Test User', email2, {}, function(err) {
                    assert.equal(err.code, 400);
                    RestAPI.User.createUser(camAdminRestContext, upperCasedUsername, 'password', 'Test User', email2, {}, function(err) {
                        assert.equal(err.code, 400);

                        // When logging in with the same username but in lower case we should succesfully log in
                        var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, lowerCasedUsername, 'password');
                        RestAPI.Authentication.login(userRestContext, lowerCasedUsername, 'password', function(err) {
                            assert.ok(!err);
                            RestAPI.User.getMe(userRestContext, function(err, meData) {
                                assert.ok(!err);
                                assert.equal(meData.id, createdUser.id);

                                // When logging in with the same username but in upper case we should succesfully log in
                                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, upperCasedUsername, 'password');
                                RestAPI.Authentication.login(userRestContext, upperCasedUsername, 'password', function(err) {
                                    assert.ok(!err);
                                    RestAPI.User.getMe(userRestContext, function(err, meData) {
                                        assert.ok(!err);
                                        assert.equal(meData.id, createdUser.id);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users created without a locale get the default tenant locale
         */
        it('verify user gets default locale', function(callback) {
            var userId1 = TestsUtil.generateTestUserId();
            var userId2 = TestsUtil.generateTestUserId();
            var userId3 = TestsUtil.generateTestUserId();

            // Create user without locale
            var email1 = TestsUtil.generateTestEmailAddress();
            RestAPI.User.createUser(camAdminRestContext, userId1, 'password', 'Test User 1', email1, {}, function(err, createdUser1) {
                assert.ok(!err);
                assert.ok(createdUser1);
                // Check that the user has been given the default locale
                assert.equal(createdUser1.locale, 'en_GB');

                // Set default language to Spanish
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/user/defaultLanguage': 'es_ES'}, function(err) {
                    assert.ok(!err);

                    // Create user without locale
                    var email2 = TestsUtil.generateTestEmailAddress();
                    RestAPI.User.createUser(camAdminRestContext, userId2, 'password', 'Test User 2', email2, {}, function(err, createdUser2) {
                        assert.ok(!err);
                        assert.ok(createdUser2);
                        // Check that the user has been given the new default locale
                        assert.equal(createdUser2.locale, 'es_ES');

                        // Create a user with no locale, but using an Accept-Language header
                        var acceptLanguageRestContext = new RestContext('http://localhost:2001', {
                            'hostHeader': global.oaeTests.tenants.cam.host,
                            'additionalHeaders': { 'Accept-Language': 'en-us' }
                        });
                        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/recaptcha/enabled': false}, function(err) {
                            assert.ok(!err);

                            var email3 = TestsUtil.generateTestEmailAddress();
                            RestAPI.User.createUser(acceptLanguageRestContext, userId3, 'password', 'Test User 3', email3, {}, function(err, createdUser3) {
                                assert.ok(!err);
                                assert.ok(createdUser3);
                                assert.equal(createdUser3.locale, 'en_US');

                                ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-principals/recaptcha/enabled'], function(err) {
                                    assert.ok(!err);
                                    // Check that the first user still has the old default locale
                                    RestAPI.User.getUser(camAdminRestContext, createdUser1.id, function(err, user) {
                                        assert.ok(!err);
                                        assert.ok(user);
                                        assert.equal(user.locale, 'en_GB');

                                        // Set default language to British English again
                                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, global.oaeTests.tenants.cam.alias, {'oae-principals/user/defaultLanguage': 'en_GB'}, function(err) {
                                            assert.ok(!err);

                                            // Check that the second user still has the Spanish locale
                                            RestAPI.User.getUser(camAdminRestContext, createdUser2.id, function(err, user) {
                                                assert.ok(!err);
                                                assert.ok(user);
                                                assert.equal(user.locale, 'es_ES');
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that anonymous users with accept-language headers get a
         * locale in the me feed
         */
        it('verify anonymous locale', function(callback) {
            var acceptLanguageRestContext = new RestContext('http://localhost:2001', {
                'hostHeader': global.oaeTests.tenants.cam.host,
                'additionalHeaders': { 'Accept-Language': 'en-us' }
            });
            RestAPI.User.getMe(acceptLanguageRestContext, function(err, meData) {
                assert.ok(!err);
                assert.ok(meData.anon);
                assert.equal(meData.locale, 'en_US');

                // This guy prefers US English but will take Spanish if that's all we have
                var acceptLanguageRestContext = new RestContext('http://localhost:2001', {
                    'hostHeader': global.oaeTests.tenants.cam.host,
                    'additionalHeaders': { 'Accept-Language': 'es-es;q=0.5, en-us' }
                });
                RestAPI.User.getMe(acceptLanguageRestContext, function(err, meData) {
                    assert.ok(!err);
                    assert.ok(meData.anon);
                    assert.equal(meData.locale, 'en_US');

                    // If you just say a language without specifying the country we'll give you some form of that language
                    var acceptLanguageRestContext = new RestContext('http://localhost:2001', {
                        'hostHeader': global.oaeTests.tenants.cam.host,
                        'additionalHeaders': { 'Accept-Language': 'en' }
                    });
                    RestAPI.User.getMe(acceptLanguageRestContext, function(err, meData) {
                        assert.ok(!err);
                        assert.ok(meData.anon);
                        assert.equal(meData.locale.substring(0,2), 'en');

                        // Make sure polyglots serve the most preferred language
                        // @see https://github.com/oaeproject/Hilary/pull/862
                        var acceptLanguageRestContext = new RestContext('http://localhost:2001', {
                            'hostHeader': global.oaeTests.tenants.cam.host,
                            'additionalHeaders': { 'Accept-Language': 'en-US,en;q=0.93,es-ES;q=0.87,es;q=0.80,it-IT;q=0.73,it;q=0.67,de-DE;q=0.60,de;q=0.53,fr-FR;q=0.47,fr;q=0.40,ja;q=0.33,zh-Hans-CN;q=0.27,zh-Hans;q=0.20,ar-SA;q=0.13,ar;q=0.067' }
                        });
                        RestAPI.User.getMe(acceptLanguageRestContext, function(err, meData) {
                            assert.ok(!err);
                            assert.ok(meData.anon);
                            assert.equal(meData.locale, 'en_US');

                            // If the user only speaks a language that we don't support, the me object will indicate
                            // that the user has no language preference
                            var acceptLanguageRestContext = new RestContext('http://localhost:2001', {
                                'hostHeader': global.oaeTests.tenants.cam.host,
                                'additionalHeaders': { 'Accept-Language': 'qq-ZZ' }
                            });
                            RestAPI.User.getMe(acceptLanguageRestContext, function(err, meData) {
                                assert.ok(!err);
                                assert.ok(meData.anon);
                                assert.ok(!meData.locale);

                                // If the user only speaks languages that we don't support, the me object will indicate
                                // that the user has no language preference
                                var acceptLanguageRestContext = new RestContext('http://localhost:2001', {
                                    'hostHeader': global.oaeTests.tenants.cam.host,
                                    'additionalHeaders': { 'Accept-Language': 'qq-ZZ, zz-ZZ;q=0.50, qq-QQ;q=0.30' }
                                });
                                RestAPI.User.getMe(acceptLanguageRestContext, function(err, meData) {
                                    assert.ok(!err);
                                    assert.ok(meData.anon);
                                    assert.ok(!meData.locale);

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that validation on user creation is done appropriately
         */
        it('verify validation', function(callback) {
            var userId = TestsUtil.generateTestUserId();
            var email = TestsUtil.generateTestEmailAddress();

            // Create user with no user id
            RestAPI.User.createUser(camAdminRestContext, null, 'password', 'Test User', email, {}, function(err, userObj) {
                assert.ok(err);
                assert.ok(!userObj);

                // Create user with empty password
                RestAPI.User.createUser(camAdminRestContext, userId, null, 'Test User', email, {}, function(err, userObj) {
                    assert.ok(err);
                    assert.ok(!userObj);

                    // Create user with short password
                    RestAPI.User.createUser(camAdminRestContext, userId, 'short', 'Test User', email, {}, function(err, userObj) {
                        assert.ok(err);
                        assert.ok(!userObj);

                        // Create user with no display name
                        RestAPI.User.createUser(camAdminRestContext, userId, 'password', null, email, {}, function(err, userObj) {
                            assert.ok(err);
                            assert.ok(!userObj);

                            // Create user with unkown visibility setting
                            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', email, {'visibility': 'unknown'}, function(err, userObj) {
                                assert.ok(err);
                                assert.ok(!userObj);

                                // Create user with displayName that is longer than the maximum allowed size
                                var longDisplayName = TestsUtil.generateRandomText(100);
                                RestAPI.User.createUser(camAdminRestContext, userId, 'password', longDisplayName, email, {}, function(err, userObj) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Create a user with no email address
                                    RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test user', null, {}, function(err, userObj) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);

                                        // Create a user with an invalid email address
                                        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test user', 'not an email address', {}, function(err, userObj) {
                                            assert.ok(err);
                                            assert.equal(err.code, 400);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Import users', function() {

        /**
         * Return a function that gets a stream to a file in the 'data' directory of the current test directory
         *
         * @param  {String}     filename    The name of the file in the test data directory to be loaded
         * @return {Function}               A function that, when executed without parameters, returns a stream to the file in the test data directory with the provided filename
         */
        var getDataFileStream = function(filename) {
            return function() {
                return fs.createReadStream(util.format('%s/data/%s', __dirname, filename));
            };
        };

        /**
         * Verify that a user object matches its expected content
         *
         * @param  {Object}       err                  An error object, if truthy this user will be considered invalid
         * @param  {User}         meObj                The user me object to verify
         * @param  {String}       expectedDisplayName  The displayName the meObj is expected to contain
         * @param  {String}       expectedPublicAlias  The public alias the meObj is expected to contain
         * @param  {String}       expectedEmail        The email address the meObj is expected to contain
         * @api private
         */
        var _verifyUser = function(err, meObj, expectedDisplayName, expectedPublicAlias, expectedEmail) {
            assert.ok(!err);
            assert.ok(meObj);
            assert.equal(meObj.displayName, expectedDisplayName);
            assert.equal(meObj.publicAlias, expectedPublicAlias);
            assert.equal(meObj.email, expectedEmail);
        };

        /*!
         * Test that verifies that a CSV user file can be imported using a local authentication strategy and that a user's
         * display name will be overridden when the account already exists and the display name is the same as the user's
         * external id
         */
        it('verify import local users and display name override', function(callback) {
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Import users as a global admin using a local authentication strategy
                PrincipalsTestUtil.importUsers(globalAdminRestContext, tenant.alias, getDataFileStream('users-with-password-displayname.csv'), 'local', null, function(err) {
                    assert.ok(!err);

                    // Verify that all imported users have been created
                    // First user in the csv
                    var nicolaasRestContext = TestsUtil.createTenantRestContext(tenant.host, 'user-zfdHliPLa', 'password1');
                    RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                        _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@displayname.test.com');

                        // User with missing first name
                        var simonRestContext = TestsUtil.createTenantRestContext(tenant.host, 'user-HlKKreaDP', 'password4');
                        RestAPI.User.getMe(simonRestContext, function(err, simonMeObj) {
                            _verifyUser(err, simonMeObj, 'Gaeremynck', 'Gaeremynck', 'simon@displayname.test.com');

                            // User with more complex display name
                            var stuartRestContext = TestsUtil.createTenantRestContext(tenant.host, 'user-IrewPDSAw', 'password5');
                            RestAPI.User.getMe(stuartRestContext, function(err, stuartMeObj) {
                                _verifyUser(err, stuartMeObj, 'Stuart D. Freeman', 'Stuart D. Freeman', 'stuart@displayname.test.com');

                                // Last user in the csv
                                var stephenRestContext = TestsUtil.createTenantRestContext(tenant.host, 'user-bbLwAWxpd', 'password26');
                                RestAPI.User.getMe(stephenRestContext, function(err, stephenMeObj) {
                                    _verifyUser(err, stephenMeObj, 'Stephen Thomas', 'Stephen Thomas', 'stephen@displayname.test.com');

                                    // Update a user's display name to be the same as its external id
                                    RestAPI.User.updateUser(nicolaasRestContext, nicolaasMeObj.id, {'displayName': 'user-zfdHliPLa'}, function (err, user) {
                                        assert.ok(!err);
                                        assert.ok(user);
                                        assert.equal(user.id, nicolaasMeObj.id);
                                        assert.equal(user.displayName, 'user-zfdHliPLa');

                                        // Verify that the update is reflected in the me feed
                                        RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                            _verifyUser(err, nicolaasMeObj, 'user-zfdHliPLa', 'Nicolaas Matthijs', 'nicolaas@displayname.test.com');

                                            // Re-import the users to verify that the displayName is reverted back to the display name
                                            // provided in the CSV file. This time, the import is attempted as a tenant admin
                                            PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-with-password-displayname.csv'), 'local', null, function(err) {
                                                assert.ok(!err);

                                                // Verify that the display name is correctly reverted
                                                RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                    _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@displayname.test.com');

                                                    // Update the user's display name to a different real display name
                                                    RestAPI.User.updateUser(nicolaasRestContext, nicolaasMeObj.id, {'displayName': 'N. Matthijs'}, function (err, user) {
                                                        assert.ok(!err);
                                                        assert.ok(user);
                                                        assert.equal(user.id, nicolaasMeObj.id);
                                                        assert.equal(user.displayName, 'N. Matthijs');

                                                        // Verify that the update is reflected in the me feed
                                                        RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                            _verifyUser(err, nicolaasMeObj, 'N. Matthijs', 'Nicolaas Matthijs', 'nicolaas@displayname.test.com');

                                                            // Re-import the users as a tenant admin to verify that the displayName is not reverted
                                                            // back to the display name provided in the CSV file
                                                            PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-with-password-displayname.csv'), 'local', null, function(err) {
                                                                assert.ok(!err);

                                                                // Verify that the display name has not been reverted
                                                                RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                                    _verifyUser(err, nicolaasMeObj, 'N. Matthijs', 'Nicolaas Matthijs', 'nicolaas@displayname.test.com');

                                                                    // Re-import the users using the `forceProfileUpdate` flag to verify that the displayName is reverted to
                                                                    // the display name provided in the CSV file
                                                                    PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-with-password-displayname.csv'), 'local', true, function(err) {
                                                                        assert.ok(!err);

                                                                        // Verify that the display name is correctly reverted
                                                                        RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                                            _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@displayname.test.com');

                                                                            // Update the user's display name to be the same as its external id
                                                                            RestAPI.User.updateUser(nicolaasRestContext, nicolaasMeObj.id, {'displayName': 'user-zfdHliPLa'}, function (err, user) {
                                                                                assert.ok(!err);
                                                                                assert.ok(user);
                                                                                assert.equal(user.id, nicolaasMeObj.id);
                                                                                assert.equal(user.displayName, 'user-zfdHliPLa');

                                                                                // Re-import the users using the `forceProfileUpdate` flag to verify that the displayName is correctly reverted to
                                                                                // the display name provided in the CSV file when providing the flag
                                                                                PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-with-password-displayname.csv'), 'local', true, function(err) {
                                                                                    assert.ok(!err);

                                                                                    // Verify that the display name is correctly reverted
                                                                                    RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                                                        _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@displayname.test.com');
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Test that verifies that a CSV user file can be imported using a local authentication strategy and that a user's
         * email address will be overridden when the account already exists and the email address is not set
         */
        it('verify import local users and email address override', function(callback) {
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Import users as a global admin using a local authentication strategy
                PrincipalsTestUtil.importUsers(globalAdminRestContext, tenant.alias, getDataFileStream('users-with-password-email.csv'), 'local', null, function(err) {
                    assert.ok(!err);

                    var nicolaasRestContext = TestsUtil.createTenantRestContext(tenant.host, 'user-zfdHliPLa', 'password1');
                    RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                        _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@email.test.com');

                        // Update the user's email address to a different real one
                        var email = 'nicolaas@my.other.mail.address.com';
                        PrincipalsTestUtil.assertUpdateUserSucceeds(nicolaasRestContext, nicolaasMeObj.id, {'email': email}, function(user, token) {
                            assert.ok(!err);
                            // Verify the email address
                            PrincipalsTestUtil.assertVerifyEmailSucceeds(nicolaasRestContext, nicolaasMeObj.id, token, function() {

                                // Verify that the update is reflected in the me feed
                                RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                    _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@my.other.mail.address.com');

                                    // Re-import the users as a tenant admin to verify that the email adress is not reverted
                                    // back to the email address provided in the CSV file
                                    PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-with-password-email.csv'), 'local', null, function(err) {
                                        assert.ok(!err);

                                        // Verify that the email address has not been reverted
                                        RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                            _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@my.other.mail.address.com');

                                            // Re-import the users using the `forceProfileUpdate` flag to verify that the email address is reverted to
                                            // the email address provided in the CSV file
                                            PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-with-password-email.csv'), 'local', true, function(err) {
                                                assert.ok(!err);

                                                // Verify that the email address is correctly reverted
                                                RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                    _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@email.test.com');
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Test that verifies that a CSV user file can be imported using a local authentication strategy and that a user's
         * publicAlias will be overridden with the displayname from the CSV file when the account already exists and the publicAlias is not set
         */
        it('verify import local users and public alias override', function(callback) {
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Import users as a global admin using a local authentication strategy
                PrincipalsTestUtil.importUsers(globalAdminRestContext, global.oaeTests.tenants.cam.alias, getDataFileStream('users-with-password-alias.csv'), 'local', null, function(err) {
                    assert.ok(!err);

                    var nicolaasRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, 'user-zfdHliPLa', 'password1');
                    RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                        _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@alias.test.com');

                        // Empty a user's public alias
                        RestAPI.User.updateUser(nicolaasRestContext, nicolaasMeObj.id, {'publicAlias': ''}, function (err, user) {
                            assert.ok(!err);
                            assert.ok(user);
                            assert.equal(user.id, nicolaasMeObj.id);
                            assert.equal(user.publicAlias, '');

                            // Verify that the update is reflected in the me feed
                            RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', '', 'nicolaas@alias.test.com');

                                // Re-import the users to verify that the public alias is reverted back to the display name
                                // provided in the CSV file. This time, the import is attempted as a tenant admin
                                PrincipalsTestUtil.importUsers(camAdminRestContext, null, getDataFileStream('users-with-password-alias.csv'), 'local', null, function(err) {
                                    assert.ok(!err);

                                    // Verify that the public alias is correctly reverted
                                    RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                        _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@alias.test.com');

                                        // Update the user's public alias to a different real one
                                        RestAPI.User.updateUser(nicolaasRestContext, nicolaasMeObj.id, {'publicAlias': 'Nico'}, function (err, user) {
                                            assert.ok(!err);
                                            assert.ok(user);
                                            assert.equal(user.id, nicolaasMeObj.id);
                                            assert.equal(user.publicAlias, 'Nico');

                                            // Verify that the update is reflected in the me feed
                                            RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nico', 'nicolaas@alias.test.com');

                                                // Re-import the users as a tenant admin to verify that the public alias is not reverted
                                                // back to the display name provided in the CSV file
                                                PrincipalsTestUtil.importUsers(camAdminRestContext, null, getDataFileStream('users-with-password-alias.csv'), 'local', null, function(err) {
                                                    assert.ok(!err);

                                                    // Verify that the public alias has not been reverted
                                                    RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                        _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nico', 'nicolaas@alias.test.com');

                                                        // Re-import the users using the `forceProfileUpdate` flag to verify that the public alias is reverted to
                                                        // the display name provided in the CSV file
                                                        PrincipalsTestUtil.importUsers(camAdminRestContext, null, getDataFileStream('users-with-password-alias.csv'), 'local', true, function(err) {
                                                            assert.ok(!err);

                                                            // Verify that the public alias is correctly reverted
                                                            RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                                _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@alias.test.com');

                                                                // Empty the user's public alias
                                                                RestAPI.User.updateUser(nicolaasRestContext, nicolaasMeObj.id, {'publicAlias': ''}, function (err, user) {
                                                                    assert.ok(!err);
                                                                    assert.ok(user);
                                                                    assert.equal(user.id, nicolaasMeObj.id);
                                                                    assert.equal(user.publicAlias, '');

                                                                    // Re-import the users using the `forceProfileUpdate` flag to verify that the public alias is correctly reverted to
                                                                    // the display name provided in the CSV file when providing the flag
                                                                    PrincipalsTestUtil.importUsers(camAdminRestContext, null, getDataFileStream('users-with-password-alias.csv'), 'local', true, function(err) {
                                                                        assert.ok(!err);

                                                                        // Verify that the public alias is correctly reverted
                                                                        RestAPI.User.getMe(nicolaasRestContext, function(err, nicolaasMeObj) {
                                                                            _verifyUser(err, nicolaasMeObj, 'Nicolaas Matthijs', 'Nicolaas Matthijs', 'nicolaas@alias.test.com');
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Test that verifies importing a user by CSV respects the default visibility configured for the tenant
         */
        it('verify import local users respects default user visibility of the tenant', function(callback) {
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Do a CSV user import to test that the default user visibility of the tenant starts out as public
                PrincipalsTestUtil.importUsers(globalAdminRestContext, tenant.alias, getDataFileStream('users-default-visibility-test1.csv'), 'local', null, function(err) {
                    assert.ok(!err);

                    // Ensure the user was created with public visibility
                    var mrvisser1RestContext = TestsUtil.createTenantRestContext(tenant.host, 'userdefaultvisibilitytest1', 'password');
                    RestAPI.User.getMe(mrvisser1RestContext, function(err, createdUser) {
                        assert.ok(!err);
                        assert.equal(createdUser.visibility, 'public');

                        // Change the default user visibility of the tenant to loggedin
                        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenant.alias, {'oae-principals/user/visibility': 'loggedin'}, function(err) {
                            assert.ok(!err);

                            // Do a CSV user import to test that the default user visibility of the tenant has changed to loggedin
                            PrincipalsTestUtil.importUsers(globalAdminRestContext, tenant.alias, getDataFileStream('users-default-visibility-test2.csv'), 'local', null, function(err) {
                                assert.ok(!err);

                                // Ensure the user was created with loggedin visibility
                                var mrvisser2RestContext = TestsUtil.createTenantRestContext(tenant.host, 'userdefaultvisibilitytest2', 'password');
                                RestAPI.User.getMe(mrvisser2RestContext, function(err, createdUser) {
                                    assert.ok(!err);
                                    assert.equal(createdUser.visibility, 'loggedin');

                                    // Reset the default visibility of the tenant to the global default
                                    ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, tenant.alias, ['oae-principals/user/visibility'], function(err) {
                                        assert.ok(!err);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Test that verifies that a CSV user file can be imported using an external authentication strategy
         */
        it('verify import external users', function(callback) {
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Import users as a global admin using the CAS authentication strategy
                PrincipalsTestUtil.importUsers(globalAdminRestContext, tenant.alias, getDataFileStream('users-without-password.csv'), 'cas', null, function(err) {
                    assert.ok(!err);

                    // Verify that the users have been created and a CAS login id has been associated to those accounts.
                    // We have to use the internal APIs for this as there is no REST endpoint that exposes this
                    AuthenticationAPI.getUserIdFromLoginId(tenant.alias, 'cas', 'user-TGdDSdadW', function(err, nicolaasUserId) {
                        assert.ok(!err);
                        assert.ok(nicolaasUserId);
                        // Verify that the external id is not associated to a different authentication strategy
                        AuthenticationAPI.getUserIdFromLoginId(tenant.alias, 'ldap', 'user-TGdDSdadW', function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 404);
                            // Verify that the user has the appropriate basic profile information
                            RestAPI.User.getUser(tenantAdminRestContext, nicolaasUserId, function(err, nicolaasUserObj) {
                                assert.ok(!err);
                                assert.ok(nicolaasUserObj);
                                assert.equal(nicolaasUserObj.displayName, 'Nicolaas Matthijs');
                                assert.equal(nicolaasUserObj.email, 'nicolaas@test.com');

                                // User with missing first name
                                AuthenticationAPI.getUserIdFromLoginId(tenant.alias, 'cas', 'user-PQasQsaWQ', function(err, simonUserId) {
                                    assert.ok(!err);
                                    assert.ok(simonUserId);
                                    // Verify that the external id is not associated to a different authentication strategy
                                    AuthenticationAPI.getUserIdFromLoginId(tenant.alias, 'shibboleth', 'user-PQasQsaWQ', function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 404);
                                        // Verify that the user has the appropriate basic profile information
                                        RestAPI.User.getUser(tenantAdminRestContext, simonUserId, function(err, simonUserObj) {
                                            assert.ok(!err);
                                            assert.ok(simonUserObj);
                                            assert.equal(simonUserObj.displayName, 'Gaeremynck');
                                            assert.equal(simonUserObj.email, 'simon@test.com');

                                            // User with more complex display name
                                            AuthenticationAPI.getUserIdFromLoginId(tenant.alias, 'cas', 'user-CXzsaWasX', function(err, stuartUserId) {
                                                assert.ok(!err);
                                                assert.ok(nicolaasUserId);
                                                // Verify that the external id is not associated to a different authentication strategy
                                                AuthenticationAPI.getUserIdFromLoginId(tenant.alias, 'facebook', 'user-CXzsaWasX', function(err) {
                                                    assert.ok(err);
                                                    assert.equal(err.code, 404);
                                                    // Verify that the user has the appropriate basic profile information
                                                    RestAPI.User.getUser(tenantAdminRestContext, stuartUserId, function(err, stuartUserObj) {
                                                        assert.ok(!err);
                                                        assert.ok(stuartUserObj);
                                                        assert.equal(stuartUserObj.displayName, 'Stuart D. Freeman');
                                                        assert.equal(stuartUserObj.email, 'stuart@test.com');

                                                        // Update a user's display name to be the same as its external id
                                                        RestAPI.User.updateUser(tenantAdminRestContext, nicolaasUserId, {'displayName': 'user-TGdDSdadW'}, function (err, user) {
                                                            assert.ok(!err);
                                                            assert.ok(user);
                                                            assert.equal(user.id, nicolaasUserId);
                                                            assert.equal(user.displayName, 'user-TGdDSdadW');

                                                            // Verify that the update is reflected when getting the user
                                                            RestAPI.User.getUser(tenantAdminRestContext, nicolaasUserId, function(err, nicolaasUserObj) {
                                                                assert.ok(!err);
                                                                assert.ok(nicolaasUserObj);
                                                                assert.equal(nicolaasUserObj.displayName, 'user-TGdDSdadW');
                                                                assert.equal(nicolaasUserObj.email, 'nicolaas@test.com');

                                                                // Re-import the users to verify that the displayName is reverted back to the display name
                                                                // provided in the CSV file. This time, the import is attempted as a tenant admin
                                                                PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-without-password.csv'), 'cas', null, function(err) {
                                                                    assert.ok(!err);

                                                                    // Verify that the display name is correctly reverted
                                                                    RestAPI.User.getUser(tenantAdminRestContext, nicolaasUserId, function(err, nicolaasUserObj) {
                                                                        assert.ok(!err);
                                                                        assert.ok(nicolaasUserObj);
                                                                        assert.equal(nicolaasUserObj.displayName, 'Nicolaas Matthijs');
                                                                        assert.equal(nicolaasUserObj.email, 'nicolaas@test.com');

                                                                        // Update the user's display name to a different real display name
                                                                        RestAPI.User.updateUser(tenantAdminRestContext, nicolaasUserId, {'displayName': 'N. Matthijs'}, function (err, user) {
                                                                            assert.ok(!err);
                                                                            assert.ok(user);
                                                                            assert.equal(user.id, nicolaasUserId);
                                                                            assert.equal(user.displayName, 'N. Matthijs');

                                                                            // Verify that the update is reflected when getting the user
                                                                            RestAPI.User.getUser(tenantAdminRestContext, nicolaasUserId, function(err, nicolaasUserObj) {
                                                                                assert.ok(!err);
                                                                                assert.ok(nicolaasUserObj);
                                                                                assert.equal(nicolaasUserObj.displayName, 'N. Matthijs');
                                                                                assert.equal(nicolaasUserObj.email, 'nicolaas@test.com');

                                                                                // Re-import the users as a tenant admin to verify that the displayName is not reverted
                                                                                // back to the display name provided in the CSV file
                                                                                PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-without-password.csv'), 'cas', null, function(err) {
                                                                                    assert.ok(!err);

                                                                                    // Verify that the display name has not been reverted
                                                                                    RestAPI.User.getUser(tenantAdminRestContext, nicolaasUserId, function(err, nicolaasUserObj) {
                                                                                        assert.ok(!err);
                                                                                        assert.ok(nicolaasUserObj);
                                                                                        assert.equal(nicolaasUserObj.displayName, 'N. Matthijs');
                                                                                        assert.equal(nicolaasUserObj.email, 'nicolaas@test.com');

                                                                                        // Re-import the users using the `forceProfileUpdate` flag to verify that the displayName is reverted to
                                                                                        // the display name provided in the CSV file
                                                                                        PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-without-password.csv'), 'cas', true, function(err) {
                                                                                            assert.ok(!err);

                                                                                            // Verify that the display name is correctly reverted
                                                                                            RestAPI.User.getUser(tenantAdminRestContext, nicolaasUserId, function(err, nicolaasUserObj) {
                                                                                                assert.ok(!err);
                                                                                                assert.ok(nicolaasUserObj);
                                                                                                assert.equal(nicolaasUserObj.displayName, 'Nicolaas Matthijs');
                                                                                                assert.equal(nicolaasUserObj.email, 'nicolaas@test.com');

                                                                                                // Update the user's display name to be the same as its external id
                                                                                                RestAPI.User.updateUser(tenantAdminRestContext, nicolaasUserId, {'displayName': 'user-TGdDSdadW'}, function (err, user) {
                                                                                                    assert.ok(!err);
                                                                                                    assert.ok(user);
                                                                                                    assert.equal(user.id, nicolaasUserId);
                                                                                                    assert.equal(user.displayName, 'user-TGdDSdadW');

                                                                                                    // Re-import the users using the `forceProfileUpdate` flag to verify that the displayName is correctly reverted to
                                                                                                    // the display name provided in the CSV file when providing the flag
                                                                                                    PrincipalsTestUtil.importUsers(tenantAdminRestContext, null, getDataFileStream('users-without-password.csv'), 'cas', true, function(err) {
                                                                                                        assert.ok(!err);

                                                                                                        // Verify that the display name is correctly reverted
                                                                                                        RestAPI.User.getUser(tenantAdminRestContext, nicolaasUserId, function(err, nicolaasUserObj) {
                                                                                                            assert.ok(!err);
                                                                                                            assert.ok(nicolaasUserObj);
                                                                                                            assert.equal(nicolaasUserObj.displayName, 'Nicolaas Matthijs');
                                                                                                            assert.equal(nicolaasUserObj.email, 'nicolaas@test.com');
                                                                                                            return callback();
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that parameters are validated appropriately when importing users from a CSV file
         */
        it('verify parameter validation', function(callback) {
            // Verify that an existing tenant alias is required
            PrincipalsTestUtil.importUsers(globalAdminRestContext, 'foobar', getDataFileStream('users-without-password.csv'), 'cas', null, function(err) {
                assert.ok(err);
                assert.ok(err.code, 400);

                // Verify that an authentication method is required
                PrincipalsTestUtil.importUsers(globalAdminRestContext, global.oaeTests.tenants.cam.alias, getDataFileStream('users-without-password.csv'), null, null, function(err) {
                    assert.ok(err);
                    assert.ok(err.code, 400);

                    // Verify that an existing authentication method is required
                    PrincipalsTestUtil.importUsers(globalAdminRestContext, global.oaeTests.tenants.cam.alias, getDataFileStream('users-without-password.csv'), 'foobar', null, function(err) {
                        assert.ok(err);
                        assert.ok(err.code, 400);

                        // Verify that a CSV file is required
                        PrincipalsTestUtil.importUsers(globalAdminRestContext, global.oaeTests.tenants.cam.alias, null, 'cas', null, function(err) {
                            assert.ok(err);
                            assert.ok(err.code, 400);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that only global or tenant administrators are able to import users from CSV
         */
        it('verify only admins can import users', function(callback) {
            // Verify that an anonymous user on the global admin tenant cannot import users
            PrincipalsTestUtil.importUsers(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, getDataFileStream('users-without-password.csv'), 'cas', null, function(err) {
                assert.ok(err);
                assert.ok(err.code, 401);

                // Verify that an anonymous user on a user tenant cannot import users
                PrincipalsTestUtil.importUsers(anonymousRestContext, null, getDataFileStream('users-without-password.csv'), 'cas', null, function(err) {
                    assert.ok(err);
                    assert.ok(err.code, 401);

                    // Create a non-admin user on a user tenant
                    TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                        assert.ok(!err);

                        // Verify that an authenticated non-admin user on a user tenant cannot import users
                        PrincipalsTestUtil.importUsers(jack.restContext, null, getDataFileStream('users-without-password.csv'), 'cas', null, function(err) {
                            assert.ok(err);
                            assert.ok(err.code, 401);
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('Get user', function() {

        /**
         * Test that verifies that a user's basic profile can be retrieved
         */
        it('verify get user', function(callback) {
            // Create a test user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                assert.ok(!err);

                // Get the user on the global admin tenant
                RestAPI.User.getUser(globalAdminRestContext, jack.user.id, function(err, retrievedUser) {
                    assert.ok(!err);
                    assert.ok(retrievedUser);
                    assert.equal(retrievedUser.visibility, jack.user.visibility);
                    assert.equal(retrievedUser.displayName, jack.user.displayName);
                    assert.equal(retrievedUser.resourceType, 'user');
                    assert.equal(retrievedUser.profilePath, '/user/' + retrievedUser.tenant.alias + '/' + AuthzUtil.getResourceFromId(retrievedUser.id).resourceId);
                    assert.ok(_.isObject(retrievedUser.tenant));
                    assert.equal(_.keys(retrievedUser.tenant).length, 2);
                    assert.equal(retrievedUser.tenant.displayName, global.oaeTests.tenants.cam.displayName);
                    assert.equal(retrievedUser.tenant.alias, global.oaeTests.tenants.cam.alias);

                    // Get the user
                    RestAPI.User.getUser(anonymousRestContext, jack.user.id, function(err, retrievedUser) {
                        assert.ok(!err);
                        assert.ok(retrievedUser);
                        assert.equal(retrievedUser.visibility, jack.user.visibility);
                        assert.equal(retrievedUser.displayName, jack.user.displayName);
                        assert.equal(retrievedUser.resourceType, 'user');
                        assert.equal(retrievedUser.profilePath, '/user/' + retrievedUser.tenant.alias + '/' + AuthzUtil.getResourceFromId(retrievedUser.id).resourceId);
                        assert.ok(_.isObject(retrievedUser.tenant));
                        assert.equal(_.keys(retrievedUser.tenant).length, 2);
                        assert.equal(retrievedUser.tenant.displayName, global.oaeTests.tenants.cam.displayName);
                        assert.equal(retrievedUser.tenant.alias, global.oaeTests.tenants.cam.alias);

                        // Upload a profile picture for the user so we can verify its data on the user profile model
                        PrincipalsTestUtil.uploadAndCropPicture(jack.restContext, jack.user.id, _getPictureStream, {'x': 10, 'y': 10, 'width': 200}, function() {
                            // Get the user
                            RestAPI.User.getUser(anonymousRestContext, jack.user.id, function(err, retrievedUser) {
                                assert.ok(!err);

                                // Ensure the profile picture URL is signed, and back-end URIs are not returned
                                assert.ok(retrievedUser.picture.small);
                                assert.ok(!retrievedUser.picture.smallUri);
                                assert.ok(retrievedUser.picture.medium);
                                assert.ok(!retrievedUser.picture.mediumUri);
                                assert.ok(retrievedUser.picture.large);
                                assert.ok(!retrievedUser.picture.largeUri);

                                // Ensure we can get the user from the global admin tenant
                                RestAPI.User.getUser(globalAdminRestContext, jack.user.id, function(err, retrievedUser) {
                                    assert.ok(!err);
                                    assert.ok(retrievedUser);
                                    assert.equal(retrievedUser.visibility, jack.user.visibility);
                                    assert.equal(retrievedUser.displayName, jack.user.displayName);
                                    assert.equal(retrievedUser.resourceType, 'user');
                                    assert.equal(retrievedUser.profilePath, '/user/' + retrievedUser.tenant.alias + '/' + AuthzUtil.getResourceFromId(retrievedUser.id).resourceId);
                                    assert.ok(_.isObject(retrievedUser.tenant));
                                    assert.equal(_.keys(retrievedUser.tenant).length, 2);
                                    assert.equal(retrievedUser.tenant.displayName, global.oaeTests.tenants.cam.displayName);
                                    assert.equal(retrievedUser.tenant.alias, global.oaeTests.tenants.cam.alias);

                                    // Ensure the profile picture URL is signed, and back-end URIs are not returned
                                    assert.ok(retrievedUser.picture.small);
                                    assert.ok(!retrievedUser.picture.smallUri);
                                    assert.ok(retrievedUser.picture.medium);
                                    assert.ok(!retrievedUser.picture.mediumUri);
                                    assert.ok(retrievedUser.picture.large);
                                    assert.ok(!retrievedUser.picture.largeUri);

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the tenant data is returned in the me feed.
         */
        it('verify that the me feed returns a tenant object', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2, privateTenant1, privateTenant2) {

                // Verify it for a regular user
                RestAPI.User.getMe(publicTenant1.publicUser.restContext, function(err, meData) {
                    assert.ok(!err);
                    assert.ok(!meData.anon);
                    assert.ok(_.isObject(meData.tenant));
                    assert.strictEqual(_.keys(meData.tenant).length, 3);
                    assert.strictEqual(meData.tenant.displayName, publicTenant1.tenant.displayName);
                    assert.strictEqual(meData.tenant.alias, publicTenant1.tenant.alias);
                    assert.strictEqual(meData.tenant.isPrivate, false);

                    // Verify it for an anonymous user
                    RestAPI.User.getMe(publicTenant1.anonymousRestContext, function(err, meData) {
                        assert.ok(!err);
                        assert.ok(meData.anon);
                        assert.ok(_.isObject(meData.tenant));
                        assert.strictEqual(_.keys(meData.tenant).length, 3);
                        assert.strictEqual(meData.tenant.displayName, publicTenant1.tenant.displayName);
                        assert.strictEqual(meData.tenant.alias, publicTenant1.tenant.alias);
                        assert.strictEqual(meData.tenant.isPrivate, false);

                        // Verify it for a user on a private tenant
                        RestAPI.User.getMe(privateTenant1.publicUser.restContext, function(err, meData) {
                            assert.ok(!err);
                            assert.ok(!meData.anon);
                            assert.ok(_.isObject(meData.tenant));
                            assert.strictEqual(_.keys(meData.tenant).length, 3);
                            assert.strictEqual(meData.tenant.displayName, privateTenant1.tenant.displayName);
                            assert.strictEqual(meData.tenant.alias, privateTenant1.tenant.alias);
                            assert.strictEqual(meData.tenant.isPrivate, true);

                            // Verify it for an anonymous user on a private tenant
                            RestAPI.User.getMe(privateTenant1.anonymousRestContext, function(err, meData) {
                                assert.ok(!err);
                                assert.ok(meData.anon);
                                assert.ok(_.isObject(meData.tenant));
                                assert.strictEqual(_.keys(meData.tenant).length, 3);
                                assert.strictEqual(meData.tenant.displayName, privateTenant1.tenant.displayName);
                                assert.strictEqual(meData.tenant.alias, privateTenant1.tenant.alias);
                                assert.strictEqual(meData.tenant.isPrivate, true);

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies when a user is being impostered, the imposter user object
         * is returned in the me feed
         */
        it('verify the imposter user object', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simon) {
                assert.ok(!err);

                // Make simon a tenant admin and imposter mrvisser with him
                RestAPI.User.setTenantAdmin(camAdminRestContext, simon.user.id, true, function(err) {
                    assert.ok(!err);
                    RestAPI.Admin.loginAsUser(simon.restContext, mrvisser.user.id, util.format('http://%s', global.oaeTests.tenants.localhost.host), function(err, simonImpersonatingMrvisserRestContext) {
                        assert.ok(!err);

                        // Get the me feed of the impersonator to verify the data model
                        RestAPI.User.getMe(simonImpersonatingMrvisserRestContext, function(err, me) {
                            assert.ok(!err);

                            // Verify the top-level me object is that of mrvisser
                            assert.ok(me.tenant);
                            assert.equal(me.tenant.alias, mrvisser.user.tenant.alias);
                            assert.equal(me.tenant.displayName, mrvisser.user.tenant.displayName);
                            assert.equal(me.id, mrvisser.user.id);
                            assert.equal(me.displayName, mrvisser.user.displayName);
                            assert.equal(me.visibility, mrvisser.user.visibility);
                            assert.equal(me.email, mrvisser.user.email);
                            assert.equal(me.locale, mrvisser.user.locale);
                            assert.equal(me.publicAlias, mrvisser.user.publicAlias);
                            assert.equal(me.profilePath, mrvisser.user.profilePath);
                            assert.equal(me.resourceType, mrvisser.user.resourceType);
                            assert.strictEqual(me.acceptedTC, 0);
                            assert.ok(!me.isGlobalAdmin);
                            assert.ok(!me.isTenantAdmin);

                            // Verify the imposter user object is that of simon
                            assert.ok(me.imposter);
                            assert.ok(me.imposter.tenant);
                            assert.equal(me.imposter.tenant.alias, simon.user.tenant.alias);
                            assert.equal(me.imposter.tenant.displayName, simon.user.tenant.displayName);
                            assert.equal(me.imposter.id, simon.user.id);
                            assert.equal(me.imposter.displayName, simon.user.displayName);
                            assert.equal(me.imposter.visibility, simon.user.visibility);
                            assert.equal(me.imposter.email, simon.user.email);
                            assert.equal(me.imposter.locale, simon.user.locale);
                            assert.equal(me.imposter.publicAlias, simon.user.publicAlias);
                            assert.equal(me.imposter.profilePath, simon.user.profilePath);
                            assert.equal(me.imposter.resourceType, simon.user.resourceType);
                            assert.strictEqual(me.imposter.acceptedTC, 0);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the name of the authentication strategy is exposed in the me feed
         */
        it('verify the name of the authentication strategy is exposed in the me feed', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simon) {
                assert.ok(!err);

                RestAPI.User.getMe(simon.restContext, function(err, me) {
                    assert.ok(!err);
                    assert.strictEqual(me.authenticationStrategy, 'local');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that the user's `isGlobalAdmin` and `isTenantAdmin` properties are only visible for
         * global admins and within the tenant admins' scope
         */
        it('verify visibility of isGlobalAdmin and isTenantAdmin properties', function(callback) {

            // Create a Cambridge user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, camUsers, camUser) {
                assert.ok(!err);
                assert.ok(camUser);

                // Create a GT user
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, gtUsers, gtUser) {
                    assert.ok(!err);
                    assert.ok(gtUser);

                    // Verify the camUser's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the global admin
                    RestAPI.User.getUser(globalAdminRestContext, camUser.user.id, function(err, user) {
                        assert.ok(!err);
                        assert.ok(user);
                        assert.strictEqual(user.isGlobalAdmin, false);
                        assert.strictEqual(user.isTenantAdmin, false);

                        // Verify the gtUsers's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the global admin
                        RestAPI.User.getUser(globalAdminRestContext, gtUser.user.id, function(err, user) {
                            assert.ok(!err);
                            assert.ok(user);
                            assert.strictEqual(user.isGlobalAdmin, false);
                            assert.strictEqual(user.isTenantAdmin, false);

                            // Verify the camAdminUser's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the global admin
                            RestAPI.User.getMe(camAdminRestContext, function(err, camAdminUser) {
                                assert.ok(!err);
                                assert.strictEqual(camAdminUser.isGlobalAdmin, false);
                                assert.strictEqual(camAdminUser.isTenantAdmin, true);
                                RestAPI.User.getUser(globalAdminRestContext, camAdminUser.id, function(err, user) {
                                    assert.ok(!err);
                                    assert.ok(user);
                                    assert.strictEqual(user.isGlobalAdmin, false);
                                    assert.strictEqual(user.isTenantAdmin, true);

                                    // Verify the globalAdminUser's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the global admin
                                    RestAPI.User.getMe(globalAdminRestContext, function(err, globalAdminUser) {
                                        assert.ok(!err);
                                        assert.strictEqual(globalAdminUser.isGlobalAdmin, true);
                                        assert.strictEqual(globalAdminUser.isTenantAdmin, false);
                                        RestAPI.User.getUser(globalAdminRestContext, globalAdminUser.id, function(err, user) {
                                            assert.ok(!err);
                                            assert.ok(user);
                                            assert.strictEqual(user.isGlobalAdmin, true);
                                            assert.strictEqual(user.isTenantAdmin, false);

                                            // Verify the camUser's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the cam admin
                                            RestAPI.User.getUser(camAdminRestContext, camUser.user.id, function(err, user) {
                                                assert.ok(!err);
                                                assert.ok(user);
                                                assert.strictEqual(user.isGlobalAdmin, false);
                                                assert.strictEqual(user.isTenantAdmin, false);

                                                // Verify the camUser's `isGlobalAdmin` and `isTenantAdmin` properties are NOT visible for the gt admin
                                                RestAPI.User.getUser(gtAdminRestContext, camUser.user.id, function(err, user) {
                                                    assert.ok(!err);
                                                    assert.ok(user);
                                                    assert.strictEqual(user.isGlobalAdmin, undefined);
                                                    assert.strictEqual(user.isTenantAdmin, undefined);

                                                    // Verify the gtUsers's `isGlobalAdmin` and `isTenantAdmin` properties are NOT visible for the cam admin
                                                    RestAPI.User.getUser(camAdminRestContext, gtUser.user.id, function(err, user) {
                                                        assert.ok(!err);
                                                        assert.ok(user);
                                                        assert.strictEqual(user.isGlobalAdmin, undefined);
                                                        assert.strictEqual(user.isTenantAdmin, undefined);

                                                        // Verify the gtUsers's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the gt admin
                                                        RestAPI.User.getUser(gtAdminRestContext, gtUser.user.id, function(err, user) {
                                                            assert.ok(!err);
                                                            assert.ok(user);
                                                            assert.strictEqual(user.isGlobalAdmin, false);
                                                            assert.strictEqual(user.isTenantAdmin, false);

                                                            // Verifty the camUsers's `isGlobalAdmin` and `isTenantAdmin` properties are NOT visible for the GT user
                                                            RestAPI.User.getUser(camUser.restContext, camUser.user.id, function(err, user) {
                                                                assert.ok(!err);
                                                                assert.ok(user);
                                                                assert.strictEqual(user.isGlobalAdmin, undefined);
                                                                assert.strictEqual(user.isTenantAdmin, undefined);

                                                                // Verifty the camUsers's `isGlobalAdmin` and `isTenantAdmin` properties are NOT visible for the anonymous user
                                                                RestAPI.User.getUser(anonymousRestContext, camUser.user.id, function(err, user) {
                                                                    assert.ok(!err);
                                                                    assert.ok(user);
                                                                    assert.strictEqual(user.isGlobalAdmin, undefined);
                                                                    assert.strictEqual(user.isTenantAdmin, undefined);

                                                                    // Verifty the camUsers's `isGlobalAdmin` and `isTenantAdmin` properties are NOT visible for the global anonymous user
                                                                    RestAPI.User.getUser(anonymousGlobalRestContext, camUser.user.id, function(err, user) {
                                                                        assert.ok(!err);
                                                                        assert.ok(user);
                                                                        assert.strictEqual(user.isGlobalAdmin, undefined);
                                                                        assert.strictEqual(user.isTenantAdmin, undefined);

                                                                        // Make camUser a tenant admin
                                                                        RestAPI.User.setTenantAdmin(globalAdminRestContext, camUser.user.id, true, function(err) {
                                                                            assert.ok(!err);

                                                                            // Verify the camUser's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the global admin
                                                                            RestAPI.User.getUser(globalAdminRestContext, camUser.user.id, function(err, user) {
                                                                                assert.ok(!err);
                                                                                assert.ok(user);
                                                                                assert.strictEqual(user.isGlobalAdmin, false);
                                                                                assert.strictEqual(user.isTenantAdmin, true);

                                                                                // Verify the camUser's `isGlobalAdmin` and `isTenantAdmin` properties are visible for the cam admin
                                                                                RestAPI.User.getUser(camAdminRestContext, camUser.user.id, function(err, user) {
                                                                                    assert.ok(!err);
                                                                                    assert.ok(user);
                                                                                    assert.strictEqual(user.isGlobalAdmin, false);
                                                                                    assert.strictEqual(user.isTenantAdmin, true);

                                                                                    // Verify the camUser's `isGlobalAdmin` and `isTenantAdmin` properties are NOT visible for the gt admin
                                                                                    RestAPI.User.getUser(gtAdminRestContext, camUser.user.id, function(err, user) {
                                                                                        assert.ok(!err);
                                                                                        assert.ok(user);
                                                                                        assert.strictEqual(user.isGlobalAdmin, undefined);
                                                                                        assert.strictEqual(user.isTenantAdmin, undefined);

                                                                                        // Verify the camUser's `isGlobalAdmin` and `isTenantAdmin` properties are NOT visible for the gt user
                                                                                        RestAPI.User.getUser(gtUser.restContext, camUser.user.id, function(err, user) {
                                                                                            assert.ok(!err);
                                                                                            assert.ok(user);
                                                                                            assert.strictEqual(user.isGlobalAdmin, undefined);
                                                                                            assert.strictEqual(user.isTenantAdmin, undefined);
                                                                                            return callback();
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user with an ugly username and a UTF-8 username can be retrieved
         */
        it('verify get user by ugly username', function(callback) {
            // Create a test user with an ugly user name
            var userId1 = TestsUtil.generateTestUserId('some.weird@`user\\name');
            var email1 = TestsUtil.generateTestEmailAddress();
            RestAPI.User.createUser(camAdminRestContext, userId1, 'password', 'Test User', email1, {'visibility': 'public'},  function(err, userObj1) {
                assert.ok(!err);
                assert.ok(userObj1);

                // Get the user
                RestAPI.User.getUser(anonymousRestContext, userObj1.id, function(err, retrievedUser1) {
                    assert.ok(!err);
                    assert.ok(retrievedUser1);
                    assert.equal(retrievedUser1.visibility, 'public');
                    assert.equal(retrievedUser1.displayName, 'Test User');
                    assert.equal(retrievedUser1.resourceType, 'user');
                    assert.equal(retrievedUser1.profilePath, '/user/' + retrievedUser1.tenant.alias + '/' + AuthzUtil.getResourceFromId(retrievedUser1.id).resourceId);

                    // Create a test user with a UTF-8 username
                    var userId2 = TestsUtil.generateTestUserId('стремился');
                    var email2 = TestsUtil.generateTestEmailAddress();
                    RestAPI.User.createUser(camAdminRestContext, userId2, 'password', 'Кругом шумел', email2, {'visibility': 'public'}, function(err, userObj2) {
                        assert.ok(!err);
                        assert.ok(userObj2);

                        // Get the user
                        RestAPI.User.getUser(anonymousRestContext, userObj2.id, function(err, retrievedUser2) {
                            assert.ok(!err);
                            assert.ok(retrievedUser2);
                            assert.equal(retrievedUser2.visibility, 'public');
                            assert.equal(retrievedUser2.displayName, 'Кругом шумел');
                            assert.equal(retrievedUser2.resourceType, 'user');
                            assert.equal(retrievedUser2.profilePath, '/user/' + retrievedUser2.tenant.alias + '/' + AuthzUtil.getResourceFromId(retrievedUser2.id).resourceId);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a non-existing user cannot be retrieved
         */
        it('verify get a bad userId', function(callback) {
            // Try and get an invalid user id
            RestAPI.User.getUser(anonymousRestContext, 'totally-not-a-valid-id', function(err, retrievedUser) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!retrievedUser);

                // Try and get an almost-valid user id
                RestAPI.User.getUser(anonymousRestContext, 'u:camtotally-not-a-valid-id', function(err, retrievedUser) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.ok(!retrievedUser);

                    // Try and get a non-existent user id
                    RestAPI.User.getUser(anonymousRestContext, 'u:cam:totally-not-existing', function(err, retrievedUser) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        assert.ok(!retrievedUser);
                        return callback();
                    });
                });
            });
        });
    });


    describe('Update user', function() {

        /**
         * Test that verifies that it is possible for a user to update its own basic profile, including non standard fields
         */
        it('verify update user', function(callback) {
            // Create a test user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                assert.ok(!err);

                // Set a profile picture
                PrincipalsTestUtil.uploadAndCropPicture(jack.restContext, jack.user.id, _getPictureStream, {'x': 10, 'y': 10, 'width': 200}, function() {
                    var timeBeforeUpdate = Date.now();

                    // Update the user
                    var updateValues = {
                        'displayName': 'displayname',
                        'publicAlias': 'publicalias',
                        'visibility': 'private',
                        'locale': 'nl_NL'
                    };
                    PrincipalsTestUtil.assertUpdateUserSucceeds(jack.restContext, jack.user.id, updateValues, function(user) {
                        assert.ok(user.lastModified <= Date.now());
                        assert.ok(user.lastModified >= timeBeforeUpdate);
                        assert.equal(user.resourceType, 'user');
                        assert.equal(user.profilePath, '/user/' + user.tenant.alias + '/' + AuthzUtil.getResourceFromId(user.id).resourceId);
                        assert.ok(!user.picture.largeUri);
                        assert.ok(user.picture.large);
                        assert.ok(!user.picture.mediumUri);
                        assert.ok(user.picture.medium);
                        assert.ok(!user.picture.smallUri);
                        assert.ok(user.picture.small);

                        // Get the user's me feed
                        RestAPI.User.getMe(jack.restContext, function(err, me) {
                            assert.ok(!err);
                            assert.ok(me);
                            assert.equal(me.visibility, 'private');
                            assert.equal(me.displayName, 'displayname');
                            assert.equal(me.publicAlias, 'publicalias');
                            assert.equal(me.locale, 'nl_NL');
                            assert.equal(me.resourceType, 'user');
                            assert.equal(me.profilePath, '/user/' + me.tenant.alias + '/' + AuthzUtil.getResourceFromId(me.id).resourceId);
                            assert.equal(me.lastModified, user.lastModified);
                            assert.ok(!me.picture.largeUri);
                            assert.ok(me.picture.large);
                            assert.ok(!me.picture.mediumUri);
                            assert.ok(me.picture.medium);
                            assert.ok(!me.picture.smallUri);
                            assert.ok(me.picture.small);

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that it is possible for an admin user to update another user's basic profile
         */
        it('verify admin update other user', function(callback) {
            // Create a test user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                assert.ok(!err);
                var timeBeforeUpdate = Date.now();

                // Update the user as a global admin
                var updateValues = {
                    'displayName': 'displayname',
                    'publicAlias': 'publicalias',
                    'visibility': 'private',
                    'locale': 'nl_NL',
                    'emailPreference': 'weekly'
                };
                PrincipalsTestUtil.assertUpdateUserSucceeds(globalAdminRestContext, jack.user.id, updateValues, function(user) {
                    assert.ok(user.lastModified <= Date.now());
                    assert.ok(user.lastModified >= timeBeforeUpdate);
                    assert.equal(user.resourceType, 'user');
                    assert.equal(user.profilePath, '/user/' + user.tenant.alias + '/' + AuthzUtil.getResourceFromId(user.id).resourceId);

                    // Ensure the user's `me` feed contains the updated information
                    RestAPI.User.getMe(jack.restContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.ok(meObj);
                        assert.equal(meObj.visibility, 'private');
                        assert.equal(meObj.displayName, 'displayname');
                        assert.equal(meObj.publicAlias, 'publicalias');
                        assert.equal(meObj.locale, 'nl_NL');
                        assert.equal(meObj.emailPreference, 'weekly');
                        assert.equal(meObj.resourceType, 'user');
                        assert.equal(meObj.profilePath, '/user/' + meObj.tenant.alias + '/' + AuthzUtil.getResourceFromId(meObj.id).resourceId);
                        assert.equal(meObj.lastModified, user.lastModified);

                        // Verify that a tenant admin can also update a user's basic profile
                        updateValues = {
                            'displayName': 'Test User',
                            'publicAlias': 'updatedalias',
                            'visibility': 'public',
                            'locale': 'en_GB',
                            'emailPreference': 'daily'
                        };
                        PrincipalsTestUtil.assertUpdateUserSucceeds(camAdminRestContext, jack.user.id, updateValues, function(user) {
                            assert.ok(user.lastModified <= Date.now());
                            assert.ok(user.lastModified >= timeBeforeUpdate);
                            assert.equal(user.resourceType, 'user');
                            assert.equal(user.profilePath, '/user/' + user.tenant.alias + '/' + AuthzUtil.getResourceFromId(user.id).resourceId);

                            // Ensure the user's `me` feed contains the updated information
                            RestAPI.User.getMe(jack.restContext, function(err, meObj) {
                                assert.ok(!err);
                                assert.ok(meObj);
                                assert.equal(meObj.visibility, 'public');
                                assert.equal(meObj.displayName, 'Test User');
                                assert.equal(meObj.publicAlias, 'updatedalias');
                                assert.equal(meObj.locale, 'en_GB');
                                assert.equal(meObj.emailPreference, 'daily');
                                assert.equal(meObj.resourceType, 'user');
                                assert.equal(meObj.profilePath, '/user/' + meObj.tenant.alias + '/' + AuthzUtil.getResourceFromId(meObj.id).resourceId);
                                assert.equal(meObj.lastModified, user.lastModified);

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that it is not possible for a user to be updated with restricted fields being set
         */
        it('verify cannot update user to tenant admin', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                assert.ok(!err);

                // Verify a user cannot promote themselves to a tenant administrator
                PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id,  {'admin:tenant': 'true'}, 400, function() {

                    // Verify a user cannot promote themselves to a global administrator
                    PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id,  {'admin:global': 'true'}, 400, function() {

                        // Sanity check the user has not been promoted
                        PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.user.id, function(err, userObj) {
                            assert.ok(!err);
                            assert.ok(userObj);
                            assert.ok(!userObj.isTenantAdmin(global.oaeTests.tenants.cam.alias), 'Expected user to not be update-able to tenant or global admin');
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that updating a user fails when:
         *
         *  * no parameters are provided; or
         *  * a user is trying to update a different user's basic profile; or
         *  * an anonymous user tries to update a user's profile; or
         *  * a user tries to update a non-existing user's profile
         */
        it('verify validation of updating a user', function(callback) {
            // Create a test user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, jack, jane) {
                assert.ok(!err);

                // Ensure the user id must be a valid principal id
                PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, 'notavalidid',  {'displayName': 'Casper, the friendly horse'}, 400, function() {

                    // Update a non-existing variation of a valid user id (so we know it is a valid id)
                    PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id + 'nonexisting',  {'displayName': 'Casper, the friendly horse'}, 401, function() {

                        // Try to update the user's profile without parameters
                        PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id,  {}, 400, function() {

                            // Try to update the user's profile as a different user
                            PrincipalsTestUtil.assertUpdateUserFails(jane.restContext, jack.user.id,  {'displayName': 'Stinky Jack LOL'}, 401, function() {

                                // Try to update the user's profile as the anonymous user
                                PrincipalsTestUtil.assertUpdateUserFails(anonymousRestContext, jack.user.id,  {'displayName': 'Stinky Jack LOL'}, 401, function() {

                                     // Create user with displayName that is longer than the maximum allowed size
                                    var longDisplayName = TestsUtil.generateRandomText(100);
                                    PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id,  {'displayName': longDisplayName}, 400, function() {

                                        // Create user with an empty displayName
                                        PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id,  {'displayName': '\n'}, 400, function() {

                                            // Verify an incorrect visibility is invalid
                                            PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id,  {'visibility': 'so incorrect'}, 400, function() {

                                                // Verify an incorrect email preference is invalid
                                                PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id,  {'emailPreference': 'so incorrect'}, 400, function() {

                                                    // Verify an incorrect email is invalid
                                                    PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id, {'email': 'so incorrect'}, 400, function() {

                                                        // Verify unknown fields aren't allowed
                                                        PrincipalsTestUtil.assertUpdateUserFails(jack.restContext, jack.user.id, {'wumptiedumpty': true}, 400, function() {

                                                            // Make sure that the user's basic profile is unchanged
                                                            RestAPI.User.getUser(jack.restContext, jack.user.id, function(err, userObj) {
                                                                assert.ok(!err);
                                                                assert.ok(userObj);
                                                                assert.equal(userObj.visibility, jack.user.visibility);
                                                                assert.equal(userObj.displayName, jack.user.displayName);
                                                                assert.equal(userObj.resourceType, 'user');
                                                                assert.equal(userObj.profilePath, '/user/' + userObj.tenant.alias + '/' + AuthzUtil.getResourceFromId(userObj.id).resourceId);
                                                                assert.equal(userObj.email, jack.user.email);
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users can update their email address
         */
        it('verify updating a user their email address', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                assert.ok(!err);

                // Jack should be able to use a new email address
                var email = 'Aa' + TestsUtil.generateTestEmailAddress();
                PrincipalsTestUtil.assertUpdateUserSucceeds(jack.restContext, jack.user.id, {'email': email}, function(user, token) {
                    // Verify the new email address
                    PrincipalsTestUtil.assertVerifyEmailSucceeds(jack.restContext, jack.user.id, token, function() {

                        // "Updating" the email address by changing its case
                        // should have no effect as the API will lower-case it
                        PrincipalsTestUtil.assertUpdateUserSucceeds(jack.restContext, jack.user.id, {'email': email.toUpperCase()}, function(user, token) {
                            assert.strictEqual(user.email, email.toLowerCase());

                            // Assert there's no need to verify the email address (as it hasn't changed)
                            RestAPI.User.getMe(jack.restContext, function(err, me) {
                                assert.ok(!err);
                                assert.strictEqual(me.email, email.toLowerCase());

                                PrincipalsTestUtil.assertUpdateUserSucceeds(jack.restContext, jack.user.id, {'email': email.toLowerCase()}, function(user, token) {
                                    assert.strictEqual(user.email, email.toLowerCase());

                                    // Assert there's no need to verify the email address (as it hasn't changed)
                                    RestAPI.User.getMe(jack.restContext, function(err, me) {
                                        assert.ok(!err);
                                        assert.strictEqual(me.email, email.toLowerCase());

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });


    describe('User visibility', function() {

        /*!
         * Verifies the profile permissions of the provided user, according to the given criteria.
         *
         * @param  {RestContext}   restContext             The RestContext to use to fetch the user
         * @param  {String}        userToCheck             The id of the user to check
         * @param  {Boolean}       expectAccess            Whether or not we should expect the context have full access to the user
         * @param  {String}        expectedDisplayName     The expected display name of the user
         * @param  {String}        expectedPublicAlias     The expected public alias of the user
         * @param  {String}        expectedVisibility      The expected visibility of the user, one of 'public', 'loggedin', 'private'
         * @param  {Function}      callback                Standard callback function
         */
        var verifyProfilePermissions = function(restContext, userToCheck, expectAccess, expectedDisplayName, expectedPublicAlias, expectedVisibility, callback) {
            // Try to get user 1 as an anonymous user and a logged in user. Both should work
            RestAPI.User.getUser(restContext, userToCheck, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                assert.equal(userObj.visibility, expectedVisibility);
                assert.equal(userObj.displayName, expectedDisplayName);
                assert.equal(userObj.publicAlias, expectedPublicAlias);
                assert.equal(userObj.resourceType, 'user');
                // The profile path should only be present if you're allowed to view the user
                if (!expectAccess) {
                    assert.equal(userObj.profilePath, undefined);
                } else {
                    assert.equal(userObj.profilePath, '/user/' + userObj.tenant.alias + '/' + AuthzUtil.getResourceFromId(userObj.id).resourceId);
                }
                callback();
            });
        };

        /**
         * Test that verifies that user visibility settings work as expected. Public users should be visible to everyone. Loggedin users should be
         * visible to all users, other than the anonymous user. Private user should only be visible to the user himself. When a user is not visible,
         * only the display name should be visible
         */
        it('verify user permissions', function(callback) {
            // Create 2 public test users
            var jackUserId = TestsUtil.generateTestUserId();
            var jackEmail = TestsUtil.generateTestEmailAddress();
            var jackOpts = {
                'visibility': 'public',
                'publicAlias': 'Jack'
            };

            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'Jack Doe', jackEmail, jackOpts, function(err, jack) {
                assert.ok(!err);
                assert.ok(jack);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');

                var janeUserId = TestsUtil.generateTestUserId();
                var janeEmail = TestsUtil.generateTestEmailAddress();
                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'Jane Doe', janeEmail, {'visibility': 'public'}, function(err, jane) {
                    assert.ok(!err);
                    assert.ok(jane);
                    var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUserId, 'password');

                    // Try to get jack as an anonymous user and a logged in user and the user himself. All should work
                    verifyProfilePermissions(anonymousRestContext, jack.id, true, 'Jack Doe', undefined, 'public', function() {
                        verifyProfilePermissions(janeRestContext, jack.id, true, 'Jack Doe', undefined, 'public', function() {
                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'public', function() {

                                // Set jack's visibility to logged in
                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'loggedin'}, function(err) {
                                    assert.ok(!err);

                                    // Try to get jack as an anonymous user and a logged in user and the user himself. The anonymous user
                                    // should only be able to get the display name
                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'Jack', undefined, 'loggedin', function() {
                                        verifyProfilePermissions(janeRestContext, jack.id, true, 'Jack Doe', undefined, 'loggedin', function() {
                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'loggedin', function() {

                                                // Set jack's visibility to private
                                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'private'}, function(err) {
                                                    assert.ok(!err);

                                                    // Try to get jack as an anonymous user and a logged in user and the user himself. The anonymous user
                                                    // and the logged in user should only be able to get the display name
                                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                        verifyProfilePermissions(janeRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'private', function() {

                                                                // Set jack's visibility to an invalid option
                                                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'non-existing'}, function(err) {
                                                                    assert.ok(err);

                                                                    // Make sure that the jack's visibility has not changed
                                                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                                        verifyProfilePermissions(janeRestContext, jack.id, false, 'Jack', undefined, 'private', function() {
                                                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'Jack Doe', 'Jack', 'private', callback);
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a public user's profile is fully visible beyond the tenant scope.
         */
        it('verify public user is visible beyond tenant scope', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                assert.ok(!err);
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, jane) {
                    assert.ok(!err);

                    verifyProfilePermissions(jane.restContext, jack.user.id, true, jack.user.displayName, undefined, 'public', callback);
                });
            });
        });

        /**
         * Test that verifies that a user's basic profile is hidden when their visibility is restricted to 'loggedin' users and they are
         * accessed by an authenticated user from a different tenant.
         */
        it('verify loggedin user is hidden beyond tenant scope', function(callback) {
            var usernameA = TestsUtil.generateTestUserId();
            var usernameB = TestsUtil.generateTestUserId();

            // Create user in tenant A
            var loggedInUserOpts = {
                'visibility': 'loggedin',
                'publicAlias': 'A user.'
            };
            var email = TestsUtil.generateTestEmailAddress();

            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'LoggedIn User', email, loggedInUserOpts, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                // Create user B in GT tenant
                email = TestsUtil.generateTestEmailAddress();
                RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', email, {}, function(err, userB) {
                    assert.ok(!err);
                    var restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                    verifyProfilePermissions(restCtxB, userA.id, false, 'A user.', undefined, 'loggedin', callback);
                });
            });
        });
    });

    describe('Global and tenant admin', function() {

        /**
         * Test that verifies valid and invalid access to making users global or tenant admins. setGlobalAdmin will use the internal APIs as there
         * is not yet a way in which global admins can be set through the REST endpoints
         */
        it('verify making someone an admin', function(callback) {
            // Create 2 test users
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, jack, jane) {
                assert.ok(!err);
                jack.context = new Context(global.oaeTests.tenants.cam, jack.user);

                // Verify an anonymous user cannot promote someone to global admin
                PrincipalsAPI.setGlobalAdmin(new Context(global.oaeTests.tenants.cam), jack.user.id, true, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // Verify an anonymous user-tenant user cannot promote someone to tenant admin
                    RestAPI.User.setTenantAdmin(anonymousRestContext, jack.user.id, true, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        // Verify that anonymous admin-tenant users cannot make users tenant-admin
                        RestAPI.User.setTenantAdmin(anonymousGlobalRestContext, jack.user.id, true, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Jack will try to make himself and Jane an admin. Both should fail.
                            PrincipalsAPI.setGlobalAdmin(jack.context, jack.user.id, true, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                                PrincipalsAPI.setGlobalAdmin(jack.context, jane.user.id, true, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);

                                    // We make Jack a global admin
                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, jack.user.id, true, function(err) {
                                        assert.ok(!err);
                                        // Verify that Jack is a global admin
                                        PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.user.id, function(err, user) {
                                            assert.ok(!err);
                                            assert.equal(user.isGlobalAdmin(), true);
                                            assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                            assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                            jack.context = new Context(global.oaeTests.tenants.cam, user);

                                            // Jack will make Jane a global admin
                                            PrincipalsAPI.setGlobalAdmin(jack.context, jane.user.id, true, function(err) {
                                                assert.ok(!err);

                                                // Check that Jane is a global admin
                                                PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jane.user.id, function(err, user) {
                                                    assert.ok(!err);
                                                    assert.equal(user.isGlobalAdmin(), true);
                                                    assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                                    assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);

                                                    // Revoke Jack's global admin rights
                                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, jack.user.id, false, function(err) {
                                                        assert.ok(!err);

                                                        // Check that Jack is no longer an admin
                                                        PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.user.id, function(err, user) {
                                                            assert.ok(!err);
                                                            assert.equal(user.isGlobalAdmin(), false);
                                                            assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), false);
                                                            assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                                            jack.context = new Context(global.oaeTests.tenants.cam, user);

                                                            // Make sure that Jack can no longer revoke the admin rights of Jane
                                                            PrincipalsAPI.setGlobalAdmin(jack.context, jane.user.id, false, function(err) {
                                                                assert.ok(err);
                                                                assert.equal(err.code, 401);

                                                                // Make sure that Jane is still an admin
                                                                PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jane.user.id, function(err, user) {
                                                                    assert.ok(!err);
                                                                    assert.equal(user.isGlobalAdmin(), true);
                                                                    assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                                                    assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the access restrictions for revoking admin access from users.
         */
        it('verify revoking admin rights access restrictions', function(callback) {
            // Create 3 test users
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, jack, jane, sam) {
                assert.ok(!err);

                // Make jane a tenant admin and verify it worked
                RestAPI.User.setTenantAdmin(globalAdminRestContext, jane.user.id, true, function(err) {
                    assert.ok(!err);

                    PrincipalsAPI.getUser(globalAdminContext, jane.user.id, function(err, user) {
                        assert.ok(!err);
                        assert.ok(user.isTenantAdmin(global.oaeTests.tenants.cam.alias));

                        // Make sam a global admin and verify it worked
                        PrincipalsAPI.setGlobalAdmin(globalAdminContext, sam.user.id, true, function(err) {
                            assert.ok(!err);

                            PrincipalsAPI.getUser(globalAdminContext, sam.user.id, function(err, user) {
                                assert.ok(!err);
                                assert.ok(user.isGlobalAdmin());

                                // Get jack's API user so we can build an API context later
                                PrincipalsAPI.getUser(globalAdminContext, jack.user.id, function(err, user) {
                                    assert.ok(!err);
                                    jack.context = new Context(global.oaeTests.tenants.cam, user);

                                    // Verify an anonymous user (user-tenant or admin-tenant) or auth user cannot revoke jane's tenant-admin rights
                                    RestAPI.User.setTenantAdmin(anonymousRestContext, jane.user.id, false, function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 401);

                                        RestAPI.User.setTenantAdmin(anonymousGlobalRestContext, jane.user.id, false, function(err) {
                                            assert.ok(err);
                                            assert.equal(err.code, 401);

                                            RestAPI.User.setTenantAdmin(jack.restContext, jane.user.id, false, function(err) {
                                                assert.ok(err);
                                                assert.equal(err.code, 401);

                                                // Verify an anonymous user (user-tenant or admin-tenant) or auth user cannot revoke sam's global-admin rights
                                                PrincipalsAPI.setGlobalAdmin(new Context(global.oaeTests.tenants.cam), sam.user.id, false, function(err) {
                                                    assert.ok(err);
                                                    assert.equal(err.code, 401);

                                                    PrincipalsAPI.setGlobalAdmin(new Context(global.oaeTests.tenants.global), sam.user.id, false, function(err) {
                                                        assert.ok(err);
                                                        assert.equal(err.code, 401);

                                                        PrincipalsAPI.setGlobalAdmin(jack.context, sam.user.id, false, function(err) {
                                                            assert.ok(err);
                                                            assert.equal(err.code, 401);

                                                            // Ensure jane and sam have their admin rights
                                                            PrincipalsAPI.getUser(globalAdminContext, jane.user.id, function(err, user) {
                                                                assert.ok(!err);
                                                                assert.ok(user.isTenantAdmin(global.oaeTests.tenants.cam.alias));

                                                                PrincipalsAPI.getUser(globalAdminContext, sam.user.id, function(err, user) {
                                                                    assert.ok(!err);
                                                                    assert.ok(user.isGlobalAdmin());
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant admin cannot make a user a global admin.
         */
        it('verify tenant admin restrictions', function(callback) {
            // Create a test user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, jack) {
                assert.ok(!err);

                // We make Jack a tenant admin
                RestAPI.User.setTenantAdmin(globalAdminRestContext, jack.user.id, true, function(err) {
                    assert.ok(!err);
                    // Verify that Jack is a tenant admin
                    PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.user.id, function(err, user) {
                        assert.ok(!err);
                        assert.equal(user.isGlobalAdmin(), false);
                        assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                        assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), true);
                        jack.context = new Context(global.oaeTests.tenants.cam, user);

                        // Jack will try to make herself a global admin. This should fail
                        PrincipalsAPI.setGlobalAdmin(jack.context, jack.user.id, true, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                            // Verify that Jack is not a global admin
                            PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.user.id, function(err, user) {
                                assert.ok(!err);
                                assert.equal(user.isGlobalAdmin(), false);
                                assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                                assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), true);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that unknown users and groups cannot be made admins
         */
        it('verify admin parameter validation', function(callback) {
            // Try to make an invalid user an admin
            RestAPI.User.setTenantAdmin(globalAdminRestContext, 'invalid-id', true, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Try to make a non-existing user an admin
                RestAPI.User.setTenantAdmin(globalAdminRestContext, 'u:cam:non-existing', true, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 404);

                    // Try to make a group an admin
                    RestAPI.User.setTenantAdmin(globalAdminRestContext, 'g:cam:group', true, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that tenant admins can only update items inside of their own tenant.
         */
        it('verify tenant admin separation', function(callback) {
            // We create 3 users: jack, jane and joe. Jack and Joe are in tenant A, Jane is in tenant B.
            // We promote John to a tenant admin (for A) and try to update the profile info for Jack and Jane.
            // It should only work for Jack.
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, jack, joe) {
                assert.ok(!err);

                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, jane) {
                    assert.ok(!err);

                    // Make Jack a tenant admin
                    RestAPI.User.setTenantAdmin(camAdminRestContext, jack.user.id, true, function(err) {
                        assert.ok(!err);

                        // Verify that Jack is a tenant admin
                        PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.user.id, function(err, user) {
                            assert.ok(!err);
                            assert.equal(user.isGlobalAdmin(), false);
                            assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), true);
                            assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), true);

                            // Update Joe
                            var updateData = {
                                'locale': 'en_CA',
                                'displayName': 'Foo Bar'
                            };
                            RestAPI.User.updateUser(jack.restContext, joe.user.id, updateData, function(err) {
                                assert.ok(!err);
                                // Verify that the update has worked
                                RestAPI.User.getMe(joe.restContext, function(err, meObj) {
                                    assert.ok(!err);
                                    assert.ok(meObj);
                                    assert.equal(meObj.displayName, 'Foo Bar');
                                    assert.equal(meObj.locale, 'en_CA');
                                    assert.equal(meObj.resourceType, 'user');
                                    assert.equal(meObj.profilePath, '/user/' + meObj.tenant.alias + '/' + AuthzUtil.getResourceFromId(meObj.id).resourceId);

                                    // Try to update Jane
                                    RestAPI.User.updateUser(jack.restContext, jane.user.id, updateData, function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 401);

                                        // Verify that the update has not happened
                                        RestAPI.User.getMe(jane.restContext, function(err, meObj) {
                                            assert.ok(!err);
                                            assert.ok(meObj);
                                            assert.equal(meObj.displayName, jane.user.displayName);
                                            assert.equal(meObj.locale, jane.user.locale);
                                            assert.equal(meObj.resourceType, 'user');
                                            assert.equal(meObj.profilePath, '/user/' + meObj.tenant.alias + '/' + AuthzUtil.getResourceFromId(meObj.id).resourceId);

                                            // Disable Jack's admin status
                                            RestAPI.User.setTenantAdmin(camAdminRestContext, jack.user.id, false, function(err) {
                                                assert.ok(!err);

                                                // Verify he is no longer an admin
                                                PrincipalsAPI.getUser(new Context(global.oaeTests.tenants.cam), jack.user.id, function(err, user) {
                                                    assert.ok(!err);
                                                    assert.equal(user.isGlobalAdmin(), false);
                                                    assert.equal(user.isAdmin(global.oaeTests.tenants.cam.alias), false);
                                                    assert.equal(user.isTenantAdmin(global.oaeTests.tenants.cam.alias), false);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
