var OAE = require('oae-util/lib/OAE');
var api = require('oae-roles/lib/api');
var schema = require('oae-roles/lib/schema');
var PrincipalTypes = api.PrincipalTypes;
var ObjectTypes = api.ObjectTypes;

module.exports.setUp = function(callback) {
    OAE.initializeKeySpace(function() {
        schema.dropSchema(function(err) {
            if (err) throw err;
            schema.ensureSchema(function(err) {
                if (err) throw err;
                callback();
            });
        });
    });
};

module.exports.tearDown = function(callback) {
  schema.dropSchema(function(err) {
    callback();
  });
}

module.exports.testTenantSeparation = function(test) {
    test.expect(8);

    var securityContextA = new api.SecurityContext('testTenantSeparationA', PrincipalTypes.USER, 'mrvisser');
    var securityContextB = new api.SecurityContext('testTenantSeparationB', PrincipalTypes.USER, 'mrvisser');

    securityContextA.addRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'manager', function(err) {
        test.ok(!err);

        // verify tenant B user does not have a role on that content
        securityContextB.hasAnyRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', function(hasAnyRole, err) {
            test.ok(!err);
            test.ok(!hasAnyRole);

            // add 'viewer' for security context B
            securityContextB.addRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'viewer', function(err) {
                test.ok(!err);

                // ensure user from tenant A is still manager, not viewer
                securityContextA.hasRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'manager', function(hasRole, err) {
                    test.ok(!err);
                    test.ok(hasRole);

                    // ensure user from context B is a viewer, not manager
                    securityContextB.hasRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'viewer', function(hasRole, err) {
                        test.ok(!err);
                        test.ok(hasRole);
                        test.done();
                    });
                });
            });
        });
    });
};

module.exports.testHasRole = function(test) {
    test.expect(6);

    var securityContext = new api.SecurityContext('testHasRole', PrincipalTypes.USER, 'mrvisser');

    // add the 'manager' role
    securityContext.addRole(ObjectTypes.CONTENT, 'testHasRoleContent', 'manager', function(err) {
        test.ok(!err);

        // verify that hasRole reports that the user has the manager role
        securityContext.hasRole(ObjectTypes.CONTENT, 'testHasRoleContent', 'manager', function(hasRole, err) {
            test.ok(!err);
            test.ok(hasRole);

            // remove the role from the user
            securityContext.removeRole(ObjectTypes.CONTENT, 'testHasRoleContent', function(err) {
                test.ok(!err);

                // verify that the user no longer has the role
                securityContext.hasRole(ObjectTypes.CONTENT, 'testHasRoleContent', 'manager', function(hasRole, err) {
                    test.ok(!err);
                    test.ok(!hasRole);
                    test.done();
                });
            });
        });
    });
};

module.exports.testHasAnyRole = function(test) {
    test.expect(6);

    var securityContext = new api.SecurityContext('testHasAnyRole', PrincipalTypes.USER, 'mrvisser');

    // add the 'manager' role
    securityContext.addRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', 'manager', function(err) {
        test.ok(!err);

        // verify that hasRole reports that the user has the manager role
        securityContext.hasAnyRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', function(hasAnyRole, err) {
            test.ok(!err);
            test.ok(hasAnyRole);

            // remove the role from the user
            securityContext.removeRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', function(err) {
                test.ok(!err);

                // verify that the user no longer has the role
                securityContext.hasRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', 'manager', function(hasAnyRole, err) {
                    test.ok(!err);
                    test.ok(!hasAnyRole);
                    test.done();
                });
            });
        });
    });
};