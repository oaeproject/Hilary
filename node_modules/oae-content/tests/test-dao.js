/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ContentDAO = require('oae-content/lib/internal/dao');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Content DAO', function() {

    // Rest contexts that will be used for requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and tenant admin REST context
     */
    before(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Log in the tenant admin so their cookie jar is set up appropriately
        RestAPI.User.getMe(camAdminRestContext, function(err, meObj) {
            assert.ok(!err);
            callback();
        });
    });

    /**
     * Test that verifies the iterateAll functionality of the content DAO
     */
    it('verify ContentDAO iterateAll functionality', function(callback) {
        var contentName = TestsUtil.generateTestUserId('content-name');
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);

            var mrvisser = users[_.keys(users)[0]].user;
            var mrvisserRestCtx = users[_.keys(users)[0]].restContext;

            // Create the content item we will iterate over
            RestAPI.Content.createLink(mrvisserRestCtx, contentName, contentName, 'public', 'http://google.ca', null, null, function(err, link) {
                assert.ok(!err);

                var foundLink = false;

                /*!
                 * Verifies that only the contentId is returned in the content row
                 */
                var _onEach = function(contentRows, done) {
                    // Ensure we only get the contentId of the content item
                    _.each(contentRows, function(contentRow) {
                        assert.equal(_.keys(contentRow).length, 1, 'Expected to have only one key on the content row, the content id');
                        assert.ok(contentRow.contentId, 'Expected the row to have contentId');

                        // Remember whether or not we found the link
                        if (contentRow.contentId === link.id) {
                            foundLink = true;
                        }
                    });

                    done();
                };

                // Verify the link information when we iterate over it
                ContentDAO.Content.iterateAll(null, 100, _onEach, function(err) {
                    assert.ok(!err, JSON.stringify(err, null, 4));
                    assert.ok(foundLink, 'Expected to find the link we just created');

                    foundLink = false;

                    /*!
                     * Verifies that only the contentId and displayName of the content rows are returned, and that they are
                     * accurate.
                     */
                    var _onEach = function(contentRows, done) {
                        // Ensure we only get the contentId and displayName of the content item
                        _.each(contentRows, function(contentRow) {
                            assert.equal(_.keys(contentRow).length, 2, 'Expected to have only two keys on the content row, the content id and displayName');
                            assert.ok(contentRow.contentId, 'Expected the row to have contentId');

                            // Remember whether or not we found the link
                            if (contentRow.contentId === link.id) {
                                // Verify the displayName is accurate
                                assert.equal(contentRow.displayName, contentName);
                                foundLink = true;
                            }
                        });

                        done();
                    };

                    // Do the same thing but fetch the contentId and the displayName, and ensure they match
                    ContentDAO.Content.iterateAll(['contentId', 'displayName'], 100, _onEach, function(err) {
                        assert.ok(!err, JSON.stringify(err, null, 4));
                        assert.ok(foundLink, 'Expected to find the link we just created');
                        return callback();
                    });
                });
            });
        });
    });
});
