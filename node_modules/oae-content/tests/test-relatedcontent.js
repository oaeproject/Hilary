/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var RestAPI = require('oae-rest');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

describe('Related content', function() {

    // REST contexts we can use to do REST requests
    var anonymousRestContext = null;
    var loggedinCamRestContexts = null;
    var loggedinGtRestContexts = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    var globalAdminRestContext = null;

    var TITLES = [
        'Socio-economic impact of miss universe pageants on the eco-system of the average beaver',
        'Socio-economic impact of redditors on the eco-system of the average beaver',
        'Physical impact of miss universe pageans on the eco-system of the average beaver',
        'Physical impact of miss universe reviews on the eco-system of the average beaver',
        'Techinial impact of miss universe pageans on the eco-system of the average developer',
        'Physical impact of miss review pageans on the eco-system of the average beaver'
    ];

    var contentItems = {
        'BY_TENANT': {
            'CAM': {
                'PUBLIC': [],
                'LOGGEDIN': [],
                'PRIVATE': []
            },
            'GT': {
                'PUBLIC': [],
                'LOGGEDIN': [],
                'PRIVATE': []
            }
        }
    };

    /**
     * Fill up the admin rest contexts and create some dummy content.
     */
    before(function(callback) {
        // Create the user sessions
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        anonymousGtRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
            assert.ok(!err);
            loggedinCamRestContexts = _.map(users, function(value, key) { value.restContext.id = key; return value.restContext; });

            TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                loggedinGtRestContexts = _.map(users, function(value, key) { return value.restContext; });

                // Create a set of content items that fulfill the following permutations:
                //  * various visibility settings
                //  * various tenants
                //  * some have similar display names
                createContent(loggedinCamRestContexts, 'CAM',  function() {
                    createContent(loggedinGtRestContexts, 'GT', function() {
                        // Refresh the search index ones, so the tests don't have to refresh it.
                        SearchTestsUtil.searchRefreshed(camAdminRestContext, 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], {}, function(err) {
                            assert.ok(!err);
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Utility method that returns a stream that points to the sakaiger image.
     *
     * @return {Stream}     A stream that points to sakaiger that can be uploaded.
     */
    var getFileStream = function() {
        var file = __dirname + '/data/sakaiger.png';
        return fs.createReadStream(file);
    };

    /**
     * Creates 6 content items for a user.
     *  * 2 public ones,
     *  * 2 logged in ones
     *  * 2 private ones.
     *  Their displaynames are all related.
     *
     * @param  {Context}    restContext     The restcontext to use when creating the items.
     * @param  {String}     tenant          The tenant identifier: 'CAM' or 'GT'.
     * @param  {Function}   callback        Standard callback method.
     */
    var createContentForUser = function(restContext, tenant, callback) {
        // Create a set of content items without a description or thumbnail
        RestAPI.Content.createLink(restContext, TITLES[0], null, 'public', 'http://www.sakaiproject.org', [], [], function(err, contentObj) {
            assert.ok(!err);
            contentItems.BY_TENANT[tenant].PUBLIC.push(contentObj.id);

            RestAPI.Content.createLink(restContext, TITLES[1], null, 'loggedin', 'http://www.sakaiproject.org', [], [], function(err, contentObj) {
                assert.ok(!err);
                contentItems.BY_TENANT[tenant].LOGGEDIN.push(contentObj.id);

                RestAPI.Content.createLink(restContext, TITLES[2], null, 'private', 'http://www.sakaiproject.org', [], [], function(err, contentObj) {
                    assert.ok(!err);
                    contentItems.BY_TENANT[tenant].PRIVATE.push(contentObj.id);

                    RestAPI.Content.createLink(restContext, TITLES[3], null, 'public', 'http://www.sakaiproject.org', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        contentItems.BY_TENANT[tenant].PUBLIC.push(contentObj.id);

                        RestAPI.Content.createLink(restContext, TITLES[4], null, 'loggedin', 'http://www.sakaiproject.org', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            contentItems.BY_TENANT[tenant].LOGGEDIN.push(contentObj.id);

                            RestAPI.Content.createLink(restContext, TITLES[5], null, 'private', 'http://www.sakaiproject.org', [], [], function(err, contentObj) {
                                assert.ok(!err);
                                contentItems.BY_TENANT[tenant].PRIVATE.push(contentObj.id);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    };

    /**
     * Creates a set of content items.
     * It will create 6 content items per user
     *
     * @param  {Context[]}  restContexts    An array with 2 rest contexts in.
     * @param  {String}     tenant          The tenant identifier: 'CAM' or 'GT'.
     * @param  {Function}   callback        Standard callback method.
     */
    var createContent = function(restContexts, tenant, callback) {
        createContentForUser(restContexts[0], tenant, function() {
            createContentForUser(restContexts[1], tenant, callback);
        });
    };

    /**
     * Checks if the results contain any results they should or should not have.
     *
     * @param  {Object}     results             The results as returned by the API endpont.
     * @param  {Number}     nrOfResultsToCheck  The maximum number of valid results we can have. (Because there might be other content in the system, we limit the things that we check to what we know that should be there at the top.)
     * @param  {String[]}   allowedResults      An array of content IDs that are allowed.
     * @param  {String[]}   disallowedResults   An array of content IDs which should NOT be returned from the feed.
     */
    var checkResults = function(results, nrOfResultsToCheck, allowedResults, disallowedResults) {
        assert.ok(nrOfResultsToCheck <= results.total);
        for (var i = 0; i < nrOfResultsToCheck; i++) {
            var id = results.results[i].id;

            // The id must be in one of the arrays of content ids in allowedResults.
            assert.ok(_.contains(allowedResults, id), id + ' could not be found in ' + allowedResults.join(', '));

            // The id cannot be in one of the arrays of content ids in disallowedResults.
            assert.ok(!_.contains(disallowedResults, id));
        }
    };

    /**
     * Verify anonymous users can just see the public content in both tenants.
     */
    it('verify anonymous users can only see public content', function(callback) {
        // The anonymous user can only see 1 relevant (other) public item.
        RestAPI.Search.search(anonymousCamRestContext, 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], null, function(err, results) {
            assert.ok(!err);
            checkResults(results, 1, contentItems.BY_TENANT.CAM.PUBLIC, _.union(contentItems.BY_TENANT.CAM.LOGGEDIN, contentItems.BY_TENANT.CAM.PRIVATE, contentItems.BY_TENANT.GT.PUBLIC, contentItems.BY_TENANT.GT.LOGGEDIN, contentItems.BY_TENANT.GT.PRIVATE));

            // When we include the GT tenant, he can see the 1 (other) item in his own tenant + 2 in the GT tenant
            RestAPI.Search.search(anonymousCamRestContext, 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], {'includeExternal': true}, function(err, results) {
                assert.ok(!err);
                checkResults(results, 3, _.union(contentItems.BY_TENANT.CAM.PUBLIC, contentItems.BY_TENANT.GT.PUBLIC), _.union(contentItems.BY_TENANT.CAM.LOGGEDIN, contentItems.BY_TENANT.CAM.PRIVATE, contentItems.BY_TENANT.GT.LOGGEDIN, contentItems.BY_TENANT.GT.PRIVATE) );
                callback();
            });
        });
    });

    /**
     * verify that the loggedin users can see the public/logged in content from their own tenant and the public content from another.
     */
    it('verify logged in users can see both public and logged in content', function(callback) {
        // 1 other public item, 1 logged in item ==> 2
        RestAPI.Search.search(loggedinCamRestContexts[1], 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], null, function(err, results) {
            assert.ok(!err);
            checkResults(results, 2, _.union(contentItems.BY_TENANT.CAM.PUBLIC, contentItems.BY_TENANT.CAM.LOGGEDIN), _.union(contentItems.BY_TENANT.CAM.PRIVATE, contentItems.BY_TENANT.GT.PUBLIC, contentItems.BY_TENANT.GT.LOGGEDIN, contentItems.BY_TENANT.GT.PRIVATE) );

            // When we include the GT tenant, he can see the 1 (other) public item + 1 loggedin item in his own tenant + 2 public ones in the GT tenant
            RestAPI.Search.search(loggedinCamRestContexts[1], 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], {'includeExternal': true}, function(err, results) {
                assert.ok(!err);
                checkResults(results, 4, _.union(contentItems.BY_TENANT.CAM.PUBLIC, contentItems.BY_TENANT.CAM.LOGGEDIN, contentItems.BY_TENANT.GT.PUBLIC), _.union(contentItems.BY_TENANT.CAM.PRIVATE, contentItems.BY_TENANT.GT.LOGGEDIN, contentItems.BY_TENANT.GT.PRIVATE) );
                callback();
            });
        });
    });

    /**
     * Assume the situation:
     *  * User A created a document with some displayName X
     *  * User B created a document with some displayName Y but without a description
     *  * User C created a document with some displayName Y and a description
     *  * The actual string values for displayNames X and Y are similar.
     * If we search for related content against X, we should get Y documents.
     * However, the Y-document of user C should be of a higher rank than the Y-document of user B as it has a description
     */
    it('verify description boosting', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users) {
            assert.ok(!err);
            var userA = _.values(users)[0].restContext;
            var userB = _.values(users)[1].restContext;
            var userC = _.values(users)[2].restContext;

            var nameX = "Cows eat grass but love to drink whiskey";
            var nameY = "Cows eat weeds but love to drink vodka";

            RestAPI.Content.createLink(userA, nameX, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, baseContent) {
                assert.ok(!err);

                RestAPI.Content.createLink(userB, nameY, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, noDescriptionContent) {
                    assert.ok(!err);
                    RestAPI.Content.createLink(userC, nameY, 'description or some such', 'public', 'http://www.sakaiproject.org', [], [], function(err, withDescriptionContent) {
                        assert.ok(!err);

                        SearchTestsUtil.searchAll(anonymousCamRestContext, 'relatedcontent', [baseContent.id], null, function(err, results) {
                            assert.ok(!err);
                            assert.equal(results.results[0].id, withDescriptionContent.id);
                            assert.equal(results.results[1].id, noDescriptionContent.id);
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Assume the situation:
     *  * User A created a document with some displayName X
     *  * User B created a document with some displayName Y but without a thumbnail
     *  * User C created a document with some displayName Y and a thumbnail
     *  * The actual string values for displayNames X and Y are similar.
     * If we search for related content against X, we should get Y documents.
     * However, the Y-document of user C should be of a higher rank than the Y-document of user B as it has a thumbnail
     */
    it('verify thumbnail boosting', function(callback) {
        // Get the global admin context on a tenant
        RestAPI.Admin.loginOnTenant(globalAdminRestContext, global.oaeTests.tenants.localhost.alias, function(err, globalTenantAdminRestContext) {
            assert.ok(!err);

            TestsUtil.generateTestUsers(globalTenantAdminRestContext, 3, function(err, users) {
                assert.ok(!err);
                var userA = _.values(users)[0].restContext;
                var userB = _.values(users)[1].restContext;
                var userC = _.values(users)[2].restContext;

                var nameX = "Green water is not uncommon in red caves";
                var nameY = "Yellow water is not uncommon in red caves";

                RestAPI.Content.createLink(userA, nameX, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, baseContent) {
                    assert.ok(!err);

                    RestAPI.Content.createLink(userB, nameY, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, noThumbnailContent) {
                        assert.ok(!err);
                        RestAPI.Content.createLink(userC, nameY, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, withThumbnailContent) {
                            assert.ok(!err);

                            // Give the Y-document of user C a thumbnail.
                            var files = {'thumbnail.png': getFileStream};
                            var sizes = {'thumbnail.png': 'thumbnail'};
                            RestAPI.Content.setPreviewItems(globalTenantAdminRestContext, withThumbnailContent.id, 'done', files, sizes, {}, function(err) {
                                assert.ok(!err);

                                SearchTestsUtil.searchAll(userA, 'relatedcontent', [baseContent.id], null, function(err, results) {
                                    assert.ok(!err);
                                    assert.equal(results.total, 2);
                                    assert.equal(results.results[0].id, withThumbnailContent.id);
                                    assert.equal(results.results[1].id, noThumbnailContent.id);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Assume the situation:
     *  * User A created documents with some displayNames X and Y
     *  * User B created a document with some displayName Y
     *  * The actual string values for displayNames X and Y are similar.
     * If we search for related content against the X-document, we should get Y-documents.
     * However, the Y-document of user A should be of a higher rank than the Y-document of user B
     */
    it('verify createdBy boosting', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
            assert.ok(!err);
            var userA = _.values(users)[0].restContext;
            var userB = _.values(users)[1].restContext;

            var alfa = 'Background subtract with ViBe and shadow detection';
            var beta = 'Background Subtraction Experiments and Improvements for ViBe';

            RestAPI.Content.createLink(userA, alfa, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, baseContent) {
                assert.ok(!err);

                RestAPI.Content.createLink(userA, beta, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, sameCreatorContent) {
                    assert.ok(!err);
                    RestAPI.Content.createLink(userB, beta, null, 'public', 'http://www.sakaiproject.org', [], [], function(err, otherCreatorContent) {
                        assert.ok(!err);

                        SearchTestsUtil.searchAll(anonymousCamRestContext, 'relatedcontent', [baseContent.id], null, function(err, results) {
                            assert.ok(!err);
                            assert.equal(results.results[0].id, sameCreatorContent.id);
                            assert.equal(results.results[1].id, otherCreatorContent.id);
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Verify the limit request parameter gets handled properly.
     */
    it('verify limit handling', function(callback) {
        SearchTestsUtil.searchRefreshed(anonymousCamRestContext, 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], {'limit': 1, 'includeExternal': true}, function(err, data) {
            assert.ok(!err);

            // This user has access to 7 related contents.
            // 3 other publics within the cam tenant and 4 public items within the GT tenant
            assert.equal(data.total, 7);
            assert.equal(data.results.length, 1);

            SearchTestsUtil.searchRefreshed(anonymousCamRestContext, 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], {'limit': 2, 'includeExternal': true}, function(err, data) {
                assert.ok(!err);
                assert.equal(data.total, 7);
                assert.equal(data.results.length, 2);

                // The default limit is 5 and should be fallen back to when the
                // request parameter has been omitted or is not an int.
                SearchTestsUtil.searchRefreshed(anonymousCamRestContext, 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], {'limit': 'non-numeric', 'includeExternal': true}, function(err, data) {
                    assert.ok(!err);
                    assert.equal(data.total, 7);
                    assert.equal(data.results.length, 5);

                    SearchTestsUtil.searchRefreshed(anonymousCamRestContext, 'relatedcontent', [contentItems.BY_TENANT.CAM.PUBLIC[0]], {'includeExternal': true}, function(err, data) {
                        assert.ok(!err);
                        assert.equal(data.total, 7);
                        assert.equal(data.results.length, 5);
                        callback();
                    });
                });
            });
        });
    });
});
