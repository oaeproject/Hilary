/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzUtil = require('oae-authz/lib/util');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-discussions');
var MessageBoxAPI = require('oae-messagebox');
var MessageBoxUtil = require('oae-messagebox/lib/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var TenantsUtil = require('oae-tenants/lib/util');
var User = require('oae-principals/lib/model').User;

var DiscussionsAPI = require('./api');
var DiscussionsConstants = require('./constants').DiscussionsConstants;
var DiscussionsDAO = require('./internal/dao');


///////////////////////
// DISCUSSION-CREATE //
///////////////////////

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_CREATE, {
    'groupBy': [{'actor': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-discussions',
        'emailTemplateId': 'notify-discussion-share'
    },
    'routers': {
        'activity': {
            'actor': ['self', 'followers'],
            'object': ['members']
        },
        'notification': {
            'object': ['members']
        }
    }
});

/*!
 * Post a discussion-create activity when a user creates a discussion.
 */
DiscussionsAPI.on(DiscussionsConstants.events.CREATED_DISCUSSION, function(ctx, discussion, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('discussion', discussion.id, {'discussion': discussion});
    var activitySeed = new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


////////////////////////////////////////////////////////
// DISCUSSION-UPDATE and DISCUSSION-UPDATE-VISIBILITY //
////////////////////////////////////////////////////////

var _updateDiscussionRouters = {
    'activity': {
        'actor': ['self'],
        'object': ['members']
    },
    'notification': {
        'object': ['managers']
    }
};

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE, {
    // "Discussion Item was updated by 5 users"
    'groupBy': [{'object': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-discussions',
        'emailTemplateId': 'notify-discussion-update'
    },
    'routers': _updateDiscussionRouters
});

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE_VISIBILITY, {
    'routers': _updateDiscussionRouters
});

/*!
 * Post either a discussion-update or discussion-update-visibility activity when a user updates a discussion's metadata.
 */
DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION, function(ctx, oldDiscussion, newDiscussion) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('discussion', newDiscussion.id, {'discussion': newDiscussion});

    // We discriminate between general updates and visibility changes.
    // If the visibility has changed, we fire a visibility changed activity *instead* of an update activity
    var activityType = null;
    if (newDiscussion.visibility === oldDiscussion.visibility) {
        activityType = DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE;
    } else {
        activityType = DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


////////////////////////
// DISCUSSION-MESSAGE //
////////////////////////

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_MESSAGE, {
    'groupBy': [{'target': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-discussions',
        'emailTemplateId': 'notify-discussion-message'
    },
    'routers': {
        'activity': {
            'actor': ['self'],
            'target': ['message-contributors', 'members']
        },
        'notification': {
            'target': ['message-contributors', 'managers']
        }
    }
});

/*!
 * Post a discussion-message activity when a user comments on a discussion
 */
DiscussionsAPI.on(DiscussionsConstants.events.CREATED_DISCUSSION_MESSAGE, function(ctx, discussion, message) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('discussion-message', message.id, {'discussionId': discussion.id, 'message': message});
    var targetResource = new ActivityModel.ActivitySeedResource('discussion', discussion.id, {'discussion': discussion});
    var activitySeed = new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_MESSAGE, millis, ActivityConstants.verbs.POST, actorResource, objectResource, targetResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


///////////////////////////////////////////////////////////////////////////////////
// DISCUSSION-SHARE, DISCUSSION-ADD-TO-LIBRARY and DISCUSSION-UPDATE-MEMBER-ROLE //
///////////////////////////////////////////////////////////////////////////////////s

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_ADD_TO_LIBRARY, {
    // "Branden Visser added 5 items to his library"
    'groupBy': [{'actor': true}],
    'routers': {
        'activity': {
            'actor': ['self', 'followers'],
            'object': ['managers']
        }
    }
});

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_SHARE, {
    'groupBy': [
        // "Branden Visser shared a discussion with 5 users and groups"
        {'actor': true, 'object': true},

        // "Branden Visser shared 8 discussions with OAE Team"
        {'actor': true, 'target': true}
    ],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-discussions',
        'emailTemplateId': 'notify-discussion-share'
    },
    'routers': {
        'activity': {
            'actor': ['self'],
            'object': ['managers'],
            'target': ['self', 'members', 'followers']
        },
        'notification': {
            'target': ['self']
        }
    }
});

ActivityAPI.registerActivityType(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE_MEMBER_ROLE, {
    'groupBy': [{'actor': true, 'target': true}],
    'routers': {
        'activity': {
            'actor': ['self'],
            'object': ['self', 'members'],
            'target': ['managers']
        }
    }
});

/*!
 * Post a discussion-share or discussion-add-to-library activity based on discussion sharing
 */
DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION_MEMBERS, function(ctx, discussion, roleChanges, newPrincipalIds, updatedPrincipalIds) {
    newPrincipalIds = newPrincipalIds || [];
    updatedPrincipalIds = updatedPrincipalIds || [];

    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var discussionResource = new ActivityModel.ActivitySeedResource('discussion', discussion.id, {'discussion': discussion});
    var activitySeeds = [];

    // For users that are newly added to the discussion, post either a share or "add to library" activity, depending on context
    _.each(newPrincipalIds, function(principalId) {
        if (principalId === ctx.user().id) {
            // Users can't "share" with themselves, they actually "add it to their library"
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_ADD_TO_LIBRARY, millis, ActivityConstants.verbs.ADD, actorResource, discussionResource));
        } else {
            // A user shared discussion with some other user, fire the discussion share activity
            var principalResourceType = (PrincipalsUtil.isGroup(principalId)) ? 'group' : 'user';
            var principalResource = new ActivityModel.ActivitySeedResource(principalResourceType, principalId);
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_SHARE, millis, ActivityConstants.verbs.SHARE, actorResource, discussionResource, principalResource));
        }
    });

    // For users whose role changed, post the discussion-update-member-role activity
    _.each(updatedPrincipalIds, function(principalId) {
        var principalResourceType = (PrincipalsUtil.isGroup(principalId)) ? 'group' : 'user';
        var principalResource = new ActivityModel.ActivitySeedResource(principalResourceType, principalId);
        ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(DiscussionsConstants.activity.ACTIVITY_DISCUSSION_UPDATE_MEMBER_ROLE, millis, ActivityConstants.verbs.UPDATE, actorResource, principalResource, discussionResource));
    });
});


///////////////////////////
// ACTIVITY ENTITY TYPES //
///////////////////////////

/*!
 * Produces a persistent 'discussion' activity entity
 * @see ActivityAPI#registerActivityEntityType
 */
var _discussionProducer = function(resource, callback) {
    var discussion = (resource.resourceData && resource.resourceData.discussion) ? resource.resourceData.discussion : null;

    // If the discussion item was fired with the resource, use it instead of fetching
    if (discussion) {
        return callback(null, _createPersistentDiscussionActivityEntity(discussion));
    }

    DiscussionsDAO.getDiscussion(resource.resourceId, function(err, discussion) {
        if (err) {
            return callback(err);
        }

        return callback(null, _createPersistentDiscussionActivityEntity(discussion));
    });
};

/**
 * Create the persistent discussion entity that can be transformed into an activity entity for the UI.
 *
 * @param  {Discussion}     discussion      The discussion that provides the data for the entity.
 * @return {Object}                         An object containing the entity data that can be transformed into a UI discussion activity entity
 * @api private
 */
var _createPersistentDiscussionActivityEntity = function(discussion) {
    var persistentEntity = {'objectType': 'discussion', 'discussion': discussion};
    persistentEntity[ActivityConstants.properties.OAE_ID] = discussion.id;
    return persistentEntity;
};

/*!
 * Produces an persistent activity entity that represents a message that was posted
 * @see ActivityAPI#registerActivityEntityType
 */
var _discussionMessageProducer = function(resource, callback) {
    var discussionId = resource.resourceData.discussionId;
    var message = resource.resourceData.message;
    DiscussionsDAO.getDiscussion(discussionId, function(err, discussion) {
        if (err) {
            return callback(err);
        }

        MessageBoxUtil.createPersistentMessageActivityEntity(message, function(err, entity) {
            if (err) {
                return callback(err);
            }

            // Store the discussion id and visibility on the entity as these are required for routing the activities.
            entity.discussionId = discussion.id;
            entity.discussionVisibility = discussion.visibility;
            return callback(null, entity);
        });
    });
};

/*!
 * Transform the discussion persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _discussionTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};

    var allRevisionIds = [];
    _.each(activityEntities, function(entities, activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.each(entities, function(entity, entityId) {
            // Transform the persistent entity with its up-to-date preview status
            transformedActivityEntities[activityId][entityId] = _transformPersistentDiscussionActivityEntity(ctx, entity);
        });
    });
    return callback(null, transformedActivityEntities);
};

/**
 * Transform a discussion object into an activity entity suitable to be displayed in an activity stream.
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityTransformer
 *
 * @param  {Context}           ctx         The context of the current request
 * @param  {Object}            entity      The persistent activity entity to transform
 * @return {ActivityEntity}                The activity entity that represents the given discussion item
 */
var _transformPersistentDiscussionActivityEntity = function(ctx, entity) {
    var discussion = entity.discussion;

    // Generate URLs for this activity
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var globalId = baseUrl + '/api/discussion/' + discussion.id;
    var resource = AuthzUtil.getResourceFromId(discussion.id);
    var profileUrl = baseUrl + '/discussion/' + resource.tenantAlias + '/' + resource.resourceId;

    var opts = {};
    opts.url = profileUrl;
    opts.displayName = discussion.displayName;
    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = discussion.id;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = discussion.visibility;
    opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = discussion.profilePath;
    return new ActivityModel.ActivityEntity('discussion', globalId, opts);
};

/*!
 * Transform the persisted message activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _discussionMessageTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            var discussionId = entity.message.messageBoxId;
            var resource = AuthzUtil.getResourceFromId(discussionId);
            var profilePath = '/discussion/' + resource.tenantAlias + '/' + resource.resourceId;
            var urlFormat = '/api/discussion/' + discussionId + '/messages/%s';
            transformedActivityEntities[activityId][entityId] = MessageBoxUtil.transformPersistentMessageActivityEntity(ctx, entity.message, entity.messageContext, profilePath, urlFormat);
        });
    });
    return callback(null, transformedActivityEntities);
};

ActivityAPI.registerActivityEntityType('discussion', {
    'producer': _discussionProducer,
    'transformer': _discussionTransformer,
    'propagation': function(associationsCtx, entity, callback) {
        ActivityUtil.getStandardResourcePropagation(entity.discussion.visibility, AuthzConstants.joinable.NO, callback);
    }
});

ActivityAPI.registerActivityEntityType('discussion-message', {
    'producer': _discussionMessageProducer,
    'transformer': _discussionMessageTransformer,
    'propagation': function(associationsCtx, entity, callback) {
        ActivityUtil.getStandardResourcePropagation(entity.discussionVisibility, AuthzConstants.joinable.NO, callback);
    }
});


//////////////////////////////////
// ACTIVITY ENTITY ASSOCIATIONS //
//////////////////////////////////

/*!
 * Register an association that presents the members of a content item categorized by role
 */
ActivityAPI.registerActivityEntityAssociation('discussion', 'members-by-role', function(associationsCtx, entity, callback) {
    ActivityUtil.getAllAuthzMembersByRole(entity.discussion.id, callback);
});

/*!
 * Register an association that presents all the indirect members of a content item
 */
ActivityAPI.registerActivityEntityAssociation('discussion', 'members', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, _.flatten(_.values(membersByRole)));
    });
});

/*!
 * Register an association that presents all the managers of a content item
 */
ActivityAPI.registerActivityEntityAssociation('discussion', 'managers', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, membersByRole[DiscussionsConstants.roles.MANAGER]);
    });
});

/*!
 * Register an assocation that presents all the commenting contributors of a content item
 */
ActivityAPI.registerActivityEntityAssociation('discussion', 'message-contributors', function(associationsCtx, entity, callback) {
    MessageBoxAPI.getRecentContributions(entity.discussion.id, null, 100, callback);
});

/*!
 * Register an association that presents all the indirect members of the content item to which the comment belongs
 */
ActivityAPI.registerActivityEntityAssociation('discussion-message', 'members', function(associationsCtx, entity, callback) {
    // It is possible that the parent content item is not actually associated to the activity (e.g., an activity where a comment is edited),
    // therefore we only use the content's members if they exist in the associationsCtx
    associationsCtx.getSession().getByEntityId('content', entity.discussionId, 'members', function(err, members) {
        if (err) {
            return callback(err);
        } else if (members) {
            return callback(null, members);
        }

        ActivityUtil.getAllAuthzMembersByRole(entity.discussionId, function(err, membersByRole) {
            if (err) {
                return callback(err);
            }

            return callback(null, _.flatten(_.values(membersByRole)));
        });
    });
});
