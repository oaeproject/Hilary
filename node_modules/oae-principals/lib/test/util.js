/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ConfigTestsUtil = require('oae-config/lib/test/util');
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Import a batch of users from a CSV file. This function is a test utility function that wraps the REST API call and listens
 * for the event that indicates that the user import has fully finised, as the actual loading of users is an asynchronous
 * operation.
 *
 * @see RestAPI.Admin#importUsers for the meaning of the method parameters
 */
var importUsers = module.exports.importUsers = function(restCtx, tenantAlias, csvGenerator, authenticationStrategy, callback) {
    RestAPI.Admin.importUsers(restCtx, tenantAlias, csvGenerator, authenticationStrategy, function(err) {
        if (err) {
            return callback(err);
        }

        PrincipalsAPI.once('postCSVUserImport', callback);
    });
};

/**
 * Fetch the full memberships library, not just a single page
 *
 * @param  {RestContext}    restCtx         The REST context to use to fetch the memberships library
 * @param  {String}         libraryId       The id of the principal whose memberships library to fetch
 * @param  {Function}       callback        Standard callback function
 * @param  {Group[]}        callback.groups The memberships in the library
 */
var getFullMembershipsLibrary = module.exports.getFullMembershipsLibrary = function(restCtx, libraryId, callback, _memberships, _nextToken) {
    _memberships = _memberships || [];
    RestAPI.Group.getMembershipsLibrary(restCtx, libraryId, _nextToken, 25, function(err, response) {
        assert.ok(!err);
        _.each(response.results, function(membership) {
            _memberships.push(membership);
        });

        if (response.nextToken) {
            return getFullMembershipsLibrary(restCtx, libraryId, callback, _memberships, response.nextToken);
        } else {
            return callback(_memberships);
        }
    });
};

/**
 * Add the provided member user to all the groups in the provided tenants.
 *
 * @param  {Object}         memberUser              An object containing the User and RestContext of the user to add as a member
 * @param  {RestContext}    memberUser.restContext  The rest context of the member user
 * @param  {User}           memberUser.user         The user object of the member user
 * @param  {Object}         publicTenant1           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Object}         publicTenant2           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Object}         privateTenant           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Function}       callback                Standard callback function
 * @throws {Error}                                  An assertion error is thrown if there are any errors adding the users to the groups
 */
var addUserToAllGroups = module.exports.addUserToAllGroups = function(memberUser, publicTenant1, publicTenant2, privateTenant, callback) {
    // Temporarily make the private tenant public
    ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), privateTenant.tenant.alias, {'oae-tenants/tenantprivacy/tenantprivate': false}, function(err) {
        assert.ok(!err);

        var permissions = {};
        permissions[memberUser.user.id] = 'member';

        // Add the user to all the first public tenant groups
        RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.publicGroup.id, permissions, function(err) {
            assert.ok(!err);
            RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.loggedinGroup.id, permissions, function(err) {
                assert.ok(!err);
                RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.privateGroup.id, permissions, function(err) {
                    assert.ok(!err);

                    // Add the user to all the second public tenant groups
                    RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.publicGroup.id, permissions, function(err) {
                        assert.ok(!err);
                        RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.loggedinGroup.id, permissions, function(err) {
                            assert.ok(!err);
                            RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.privateGroup.id, permissions, function(err) {
                                assert.ok(!err);

                                // Add the user to all the private tenant groups
                                RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.publicGroup.id, permissions, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.loggedinGroup.id, permissions, function(err) {
                                        assert.ok(!err);
                                        RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.privateGroup.id, permissions, function(err) {
                                            assert.ok(!err);

                                            // Make the private tenant private again
                                            ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), privateTenant.tenant.alias, {'oae-tenants/tenantprivacy/tenantprivate': true}, function(err) {
                                                assert.ok(!err);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};


/**
 * Update all of the provided groups with the given modifications
 *
 * @param  {Object}     publicTenant1   An object containing the public, loggedin and private group to update
 * @param  {Object}     publicTenant2   An object containing the public, loggedin and private group to update
 * @param  {Object}     privateTenant   An object containing the public, loggedin and private group to update
 * @param  {Object}     modifications   An object keyed by the name of the field to update, whose value is the value to which to set the field
 * @param  {Function}   callback        Standard callback function
 * @throws {Error}                      An assertion error is thrown if there are any errors adding the users to the groups
 */
var updateAllGroups = module.exports.updateAllGroups = function(publicTenant1, publicTenant2, privateTenant, modifications, callback) {
    // Update the groups from publicTenant1
    RestAPI.Group.updateGroup(publicTenant1.adminRestContext, publicTenant1.publicGroup.id, modifications, function(err) {
        assert.ok(!err);
        RestAPI.Group.updateGroup(publicTenant1.adminRestContext, publicTenant1.loggedinGroup.id, modifications, function(err) {
            assert.ok(!err);
            RestAPI.Group.updateGroup(publicTenant1.adminRestContext, publicTenant1.privateGroup.id, modifications, function(err) {
                assert.ok(!err);

                // Update the groups from publicTenant2
                RestAPI.Group.updateGroup(publicTenant2.adminRestContext, publicTenant2.publicGroup.id, modifications, function(err) {
                    assert.ok(!err);
                    RestAPI.Group.updateGroup(publicTenant2.adminRestContext, publicTenant2.loggedinGroup.id, modifications, function(err) {
                        assert.ok(!err);
                        RestAPI.Group.updateGroup(publicTenant2.adminRestContext, publicTenant2.privateGroup.id, modifications, function(err) {
                            assert.ok(!err);

                            // Update the groups from privateTenant
                            RestAPI.Group.updateGroup(privateTenant.adminRestContext, privateTenant.publicGroup.id, modifications, function(err) {
                                assert.ok(!err);
                                RestAPI.Group.updateGroup(privateTenant.adminRestContext, privateTenant.loggedinGroup.id, modifications, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Group.updateGroup(privateTenant.adminRestContext, privateTenant.privateGroup.id, modifications, function(err) {
                                        assert.ok(!err);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
