/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var passport = require('passport');

var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var OAE = require('oae-util/lib/oae');
var PrincipalsAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var AuthenticationAPI = require('./api');
var AuthenticationUtil = require('./util');

var cookieSecret = null;

module.exports = function(config, callback) {

    cookieSecret = config.cookie.secret;

    // Attach the Authentication middleware
    AuthenticationUtil.setupAuthMiddleware(OAE.globalAdminServer);
    AuthenticationUtil.setupAuthMiddleware(OAE.tenantServer);

    // Register the shared Authentication strategies
    AuthenticationAPI.initSharedAuthenticationStrategies();

    // Setup the passport serializers.
    setupPassportSerializers();

    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        AuthenticationAPI.init(config.servers.globalAdminAlias, config.saml.SAMLParserJarPath);
        
        return callback();
    });
};

/**
 * Sets up the serialization methods for passport. This should only be run onces.
 *
 * @api private
 */
var setupPassportSerializers = function() {
    // This method will determine what goes into the cookie.
    // We only need the principalId in there.
    passport.serializeUser(function(user, done) {
        done(null, _encryptCookieData(user.id));
    });

    // A user has a cookie with a principalId in it.
    // By returning the user (from the DB) to the done callback
    // it will be set on the request at request.user
    passport.deserializeUser(function(principalId, done) {
        principalId = _decryptCookieData(principalId);
        var principal = AuthzUtil.getPrincipalFromId(principalId);
        var tenant = new Tenant(principal.tenantAlias);
        PrincipalsAPI.getUser(new Context(tenant, new User(principal.tenantAlias, principalId)), principalId, function (err, user) {
            if (!err) {
                done(null, user);
            } else if (err && err.code === 404) {
                done(null, false);
            } else {
                done(err);
            }
        });
    });
};

/**
 * Encrypt a piece of cookie data to be sent back to the client.
 *
 * @param  {String}     cookieData  The data to encrypt
 * @return {String}                 The encrypted data that is safe to return to the client
 * @api private
 */
var _encryptCookieData = function(cookieData) {
    var cipher = crypto.createCipher('aes-256-cbc', cookieSecret);
    return cipher.update(cookieData, 'utf8', 'base64') + cipher.final('base64');
};

/**
 * Decrypt a piece of cookie data that was provided by the client.
 *
 * @param  {String}     encryptedData   The encrypted data to decrypt
 * @return {String}                     The decrypted cookie data
 * @api private
 */
var _decryptCookieData = function(encryptedData) {
    var decipher = crypto.createDecipher('aes-256-cbc', cookieSecret);
    return decipher.update(encryptedData, 'base64', 'utf8') + decipher.final('utf8');
};

/**
 * Ensure that the all of the authentication-related schemas are created. If they already exist, this method will not do anything.
 *
 * @param  {Function}    callback       Invoked when the process completes
 * @param  {Object}      callback.err   Error object, containing the error message if any
 * @api private
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'AuthenticationLoginId': 'CREATE COLUMNFAMILY AuthenticationLoginId (loginId text PRIMARY KEY, userId text);',
        'AuthenticationUserLoginId': 'CREATE COLUMNFAMILY AuthenticationUserLoginId (userId text PRIMARY KEY);'
    }, callback);
};
