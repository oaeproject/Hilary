/*!
 * Copyright 2018 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

const Redis = require('oae-util/lib/redis');
const log = require('oae-logger').logger('oae-ethercalc');

/**
 * Given an Ethercalc room ID, retrieve the corresponding OAE content ID
 *
 * @param  {String}     roomId              An ethercalc room id for which the OAE content id should be retrieved
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {String}     callback.contentId  The OAE content ID that is mapped against an Ethercalc room ID
 */
const getContentId = module.exports.getContentId = function(roomId, callback) {
    const key = _getMappingKey(roomId);
    Redis.getClient().get(key, function(err, reply) {
        if (err) {
            log().error({'err': err, 'roomId': roomId}, 'Failed to retrieve OAE content ID for an Ethercalc room id');
            return callback({'code': 500, 'msg': 'Failed to retrieve OAE content ID for an Ethercalc room id'});
        }

        return callback(null, reply);
    });
};

/**
 * Store an Ethercalc room ID to an OAE content ID mapping
 *
 * @param  {String}     contentId       The OAE content ID to store
 * @param  {String}     roomId          The Ethercalc room ID for an Ethercalc room
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
const setContentId = module.exports.setContentId = function(contentId, roomId, callback) {
    const key = _getMappingKey(roomId);
    Redis.getClient().set(key, contentId, function(err) {
        if (err) {
            log().error({'err': err, 'contentId': contentId, 'roomId': roomId}, 'Failed to store Ethercalc content mapping');
            return callback({'code': 500, 'msg': 'Failed to store Ethercalc content mapping'});
        }

        return callback();
    });
};

/**
 * Get the Redis key used to map an Ethercalc room to an OAE content ID
 *
 * @param  {String}     roomId      An Ethercalc room ID
 * @return {String}                 The Redis key used to map the Ethercalc room to the corresponding OAE content ID
 * @api private
 */
var _getMappingKey = function(roomId) {
    return `ethercalc:mapping:${roomId}`;
};
