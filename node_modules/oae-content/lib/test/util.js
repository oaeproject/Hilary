/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var ShortId = require('shortid');
var util = require('util');

var ConfigTestsUtil = require('oae-config/lib/test/util');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var LibraryAPI = require('oae-library');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Set up 2 public tenants and 2 private tenants, each with a public, loggedin, private set of users, groups and
 * content. The resulting model looks like this:
 *
 * ```
 *  {
 *      "publicTenant": {
 *          "tenant": <Tenant>,
 *          "anonymousRestContext": <RestContext>,
 *          "adminRestContext": <RestContext>,
 *          "publicGroup": <Group>,
 *          "loggedinGroup": <Group>,
 *          "privateGroup": <Group>,
 *          "publicContent": <Content>,
 *          "loggedinContent": <Content>,
 *          "privateContent": <Content>,
 *          "publicUser": {
 *              "user": <User>,
 *              "restContext": <RestContext>
 *          },
 *          "loggedinUser": { ... }
 *          "privateUser": { ... }
 *      },
 *      "publicTenant1": { ... },
 *      "privateTenant": { ... },
 *      "privateTenant1": { ... }
 *  }
 * ```
 *
 * @param  {Function}   Invoked when all the entities are set up
 * @throws {Error}      An assertion error is thrown if something does not get created properly
 */
var setupMultiTenantPrivacyEntities = module.exports.setupMultiTenantPrivacyEntities = function(callback) {
    // Create the tenants and users
    TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
        // Create the content
        _setupTenant(publicTenant, function() {
            _setupTenant(publicTenant1, function() {
                _setupTenant(privateTenant, function() {
                    _setupTenant(privateTenant1, function() {
                        return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                    });
                });
            });
        });
    });
};

/**
 * Get the members library of a content item, ensuring the request is successful
 *
 * @param  {RestContext}    restContext                         The context to use to issue the request
 * @param  {String}         contentId                           The id of the content item whose members library to get
 * @param  {String}         [start]                             From where in the list to start listing results
 * @param  {Number}         [limit]                             The maximum number of member results to return. Default: 25
 * @param  {Function}       callback                            Invoked when the assertions have completed
 * @param  {Object}         callback.result                     The member results
 * @param  {Object[]}       callback.result.results             An array of members library results
 * @param  {User|Group}     callback.result.results[i].profile  The profile of the user or group member
 * @param  {String}         callback.result.results[i].role     The role the user or group has on the content item
 * @param  {String}         callback.result.nextToken           The token to use for the next members library request to get the next page of members
 * @throws {AssertionError}                                     Thrown if there is an error getting the content members library
 */
var assertGetContentMembersSucceeds = module.exports.assertGetContentMembersSucceeds = function(restContext, contentId, start, limit, callback) {
    RestAPI.Content.getMembers(restContext, contentId, start, limit, function(err, result) {
        assert.ok(!err);
        assert.ok(result);
        assert.ok(_.isArray(result.results));
        assert.ok(_.isString(result.nextToken) || _.isNull(result.nextToken));

        // If a valid limit was specified (valid meaning above 0 and below the maximum amount of
        // 25), ensure the `nextToken` is shown if there were less than the expected amount of
        // results
        if (_.isNumber(limit) && limit > 0 && result.results.length < limit && limit <= 25) {
            assert.strictEqual(result.nextToken, null);
        }

        // Ensure each result has an id and a valid role
        _.each(result.results, function(result) {
            assert.ok(result);
            assert.ok(result.profile);
            assert.ok(result.profile.id);
            assert.ok(_.contains(['manager', 'viewer'], result.role));
        });

        return callback(result);
    });
};

/**
 * Try and get the members library of a content item, ensuring the request fails in a particular way
 *
 * @param  {RestContext}    restContext     The context to use to issue the request
 * @param  {String}         [contentId]     The id of the content item whose members library to get
 * @param  {String}         [start]         From where in the list to start listing results
 * @param  {Number}         [limit]         The maximum number of member results to return
 * @param  {Number}         httpCode        The expected failure HTTP code of the get content members library request
 * @param  {Function}       callback        Invoked when the assertions have completed
 * @throws {AssertionError}                 Thrown if the the request did not fail in the expected manner
 */
var assertGetContentMembersFails = module.exports.assertGetContentMembersFails = function(restContext, contentId, start, limit, httpCode, callback) {
    RestAPI.Content.getMembers(restContext, contentId, start, limit, function(err, result) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Try and update the members of a content item, ensuring that the request fails in a specified manner
 *
 * @param  {RestContext}    managerRestContext  The rest context of a manager of the content item. This is needed to ensure that the membership is not impacted by the failure
 * @param  {RestContext}    actorRestContext    The rest context of the user who should perform the update members action
 * @param  {String}         [contentId]         The id of the content item whose members to try and update
 * @param  {Object}         [roleChanges]       A hash keyed by user id, whose values are the role to set for each member
 * @param  {Number}         httpCode            The expected failure HTTP code of the update members request
 * @param  {Function}       callback            Invoked when the assertions have completed
 * @throws {AssertionError}                     Thrown if there is an error ensuring that the request fails in the specified manner
 */
var assertUpdateContentMembersFails = module.exports.assertUpdateContentMembersFails = function(managerRestContext, actorRestContext, contentId, roleChanges, httpCode, callback) {
    // Get the members library so we can ensure it does not change after the failure
    getAllContentMembers(managerRestContext, contentId, null, function(membersBeforeUpdate) {
        membersBeforeUpdate = _getMemberRolesFromResults(membersBeforeUpdate);

        // Perform the update and ensure it fails as expected
        RestAPI.Content.updateMembers(actorRestContext, contentId, roleChanges, function(err) {
            assert.ok(err);
            assert.strictEqual(err.code, httpCode);

            // Ensure the library members did not change
            getAllContentMembers(managerRestContext, contentId, null, function(membersAfterUpdate) {
                assert.deepEqual(membersBeforeUpdate, _getMemberRolesFromResults(membersAfterUpdate));

                // Test once more that the library did not change by purging and rebuilding it
                _purgeMembersLibrary(contentId, function() {

                    // Ensure the library members still did not change
                    getAllContentMembers(managerRestContext, contentId, null, function(membersAfterUpdate) {
                        assert.deepEqual(membersBeforeUpdate, _getMemberRolesFromResults(membersAfterUpdate));
                        return callback();
                    });
                });
            });
        });
    });
};

/**
 * Update the members of a content item, ensuring that the request fails in a specified manner
 *
 * @param  {RestContext}    managerRestContext  The rest context of a manager of the content item. This is needed to ensure that the membership is impacted by the role changes in the expected manner
 * @param  {RestContext}    actorRestContext    The rest context of the user who should perform the update members action
 * @param  {String}         contentId           The id of the content item whose members to update
 * @param  {Object}         roleChanges         A hash keyed by user id, whose values are the role to set for each member
 * @param  {Function}       callback            Invoked when the assertions have completed
 * @throws {AssertionError}                     Thrown if there is an error ensuring that the update members operation was successful
 */
var assertUpdateContentMembersSucceeds = module.exports.assertUpdateContentMembersSucceeds = function(managerRestContext, actorRestContext, contentId, roleChanges, callback) {
    // Ensure the members library is currently built
    getAllContentMembers(managerRestContext, contentId, null, function(membersBeforeUpdate) {

        // Build the membership of the content item before we update it, and the expected membership
        // after the update
        membersBeforeUpdate = _getMemberRolesFromResults(membersBeforeUpdate);

        var expectedMembersAfterUpdate = _.extend({}, membersBeforeUpdate);
        _.each(roleChanges, function(role, memberId) {
            if (role === false) {
                delete expectedMembersAfterUpdate[memberId];
            } else {
                expectedMembersAfterUpdate[memberId] = role;
            }
        });

        // Perform the update, causing the library to update on-the-fly
        RestAPI.Content.updateMembers(actorRestContext, contentId, roleChanges, function(err) {
            assert.ok(!err);

            // Get the content members again and ensure they have the expected
            getAllContentMembers(managerRestContext, contentId, null, function(membersAfterUpdate) {
                membersAfterUpdate = _getMemberRolesFromResults(membersAfterUpdate);
                assert.deepEqual(membersAfterUpdate, expectedMembersAfterUpdate);

                // Test the library once more by purging and building the library from scratch
                _purgeMembersLibrary(contentId, function() {

                    // Now that we're running with a fresh library, ensure that the members we receive are what we expect
                    getAllContentMembers(managerRestContext, contentId, null, function(membersAfterUpdate) {
                        membersAfterUpdate = _getMemberRolesFromResults(membersAfterUpdate);
                        assert.deepEqual(membersAfterUpdate, expectedMembersAfterUpdate);

                        return callback();
                    });
                });
            });
        });
    });
};

/**
 * Get the full content members library of a content item
 *
 * @param  {RestContext}    restContext         The rest context to use to get the content members library
 * @param  {String}         contentId           The id of the content item whose members to get
 * @param  {Object}         [opts]              Optional arguments for getting the content members library
 * @param  {Number}         [opts.batchSize]    The size of the pages to use when paging through the content members library
 * @param  {Function}       callback            Invoked when all the members in the library have been fetched
 * @param  {Object[]}       callback.members    An array of users and groups that were fetched from the library
 * @param  {Object[][]}     callback.responses  The raw response objects for each page request that was made to get the content members library
 * @throws {AssertionError}                     Thrown if an error occurrs while paging through the content members library
 */
var getAllContentMembers = module.exports.getAllContentMembers = function(restContext, contentId, opts, callback, _members, _responses, _nextToken) {
    _members = _members || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_members, _responses);
    }

    opts = opts || {};
    opts.batchSize = opts.batchSize || 25;
    assertGetContentMembersSucceeds(restContext, contentId, _nextToken, opts.batchSize, function(result) {
        _responses.push(result);
        return getAllContentMembers(restContext, contentId, opts, callback, _.union(_members, result.results), _responses, result.nextToken);
    });
};

/**
 * Create the content within a tenant
 *
 * @param  {Tenant}     tenant          The tenant to setup
 * @param  {Function}   callback        Invoked when all the entities are set up
 * @throws {Error}                      An assertion error is thrown if something does not get created properly
 * @api private
 */
var _setupTenant = function(tenant, callback) {
    _createMultiPrivacyContent(tenant.adminRestContext, function(publicContent, loggedinContent, privateContent) {
        tenant.publicContent = publicContent;
        tenant.loggedinContent = loggedinContent;
        tenant.privateContent = privateContent;
        return callback();
    });
};

/**
 * Set up content of all privacies using the given rest context
 *
 * @param  {RestContext}    restCtx         The rest context to use
 * @param  {Function}       callback        Invoked when all the entities are set up
 * @throws {Error}                          An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createMultiPrivacyContent = function(restCtx, callback) {
    _createContentWithVisibility(restCtx, 'public', function(publicContent) {
        _createContentWithVisibility(restCtx, 'loggedin', function(loggedinContent) {
            _createContentWithVisibility(restCtx, 'private', function(privateContent) {
                return callback(publicContent, loggedinContent, privateContent);
            });
        });
    });
};

/**
 * Create a piece of content with the specified visibility
 *
 * @param  {RestContext}    restCtx             The rest context to use
 * @param  {String}         visibility          The visibility of the user
 * @param  {Function}       callback            Invoked when all the entities are set up
 * @param  {Content}        callback.content    The piece of content that was created
 * @throws {Error}                              An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createContentWithVisibility = function(restCtx, visibility, callback) {
    var randomId = util.format('%s-%s', visibility, ShortId.generate());
    RestAPI.Content.createLink(restCtx, 'displayName-' + randomId, 'description-' + randomId, visibility, 'http://www.oaeproject.org', null, null, function(err, content) {
        assert.ok(!err);
        return callback(content);
    });
};

/**
 * Purge a non-stale members library. If the library is not currently non-stale (i.e., it has not
 * been built since the last time it was purged), then this will fail
 *
 * @param  {String}     contentId   The id of the content item whose members library to purge
 * @param  {Function}   callback    Invoked when the library has been purged
 * @throws {AssertionError}         Thrown if there is an error purging the library
 * @api private
 */
var _purgeMembersLibrary = function(contentId, callback) {
    LibraryAPI.Index.isStale(ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME, contentId, 'private', function(err, isStale) {
        assert.ok(!err);
        assert.strictEqual(isStale, false);
        LibraryAPI.Index.purge(ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME, contentId, function(err) {
            assert.ok(!err);
            LibraryAPI.Index.isStale(ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME, contentId, 'private', function(err, isStale) {
                assert.ok(!err);
                assert.strictEqual(isStale, true);
                return callback();
            });
        });
    });
};

/**
 * Get a simple memberId->role hash from the list of members library results
 *
 * @param  {Object[]}   members     The array of member objects containing `profile` and `role` returned from the content members library
 * @return {Object}                 The memberId->role hash for the members library
 * @api private
 */
var _getMemberRolesFromResults = function(members) {
    var memberRoles = {};
    _.each(members, function(member) {
        memberRoles[member.profile.id] = member.role;
    });
    return memberRoles;
};
