/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var clone = require('clone');
var exec = require('child_process').exec;
var fs = require('fs');
var Path = require('path');
var util = require('util');

var log = require('oae-logger').logger('oae-preview-processor');

var PreviewConstants = require('./constants');
var PreviewImages = require('./api.images');


var _pdftkBinary = null;
var _timeout = 120000;

/**
 * Inits the Office parser.
 * This method will check if the Libre Office binary can be executed.
 *
 * @param  {Object} config                          The main config object.
 * @param  {Object} config.previews                 The namespace for all preview related configuration.
 * @param  {Object} config.previews.pdf             The namespace for all PDF related configuration.
 * @param  {String} config.previews.pdf.binary      The path to the `pdftk` executable. This should either be a direct path or the filename that's on the `PATH` environment.
 * @param  {Number} config.previews.pdf.timeout     Specifies the time (in ms) when the process is considered to be hanging and should be killed. (Default: 120000ms)
 */
var init = module.exports.init = function(config, callback) {
    if (config && config.previews && config.previews.pdf) {
        if (config.previews.pdf.binary) {
            _pdftkBinary = config.previews.pdf.binary;
        }
        if (config.previews.pdf.timeout) {
            _timeout = config.previews.pdf.timeout;
        }
    }

    // Try to execute `pdftk --help`.
    var cmd = util.format('%s --help', _pdftkBinary);
    log().trace('Executing %s to verify if the path to the pdftk binary is configured correctly.', cmd);
    exec(cmd, { 'timeout': 10000 }, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'stdout': stdout, 'stderr': stderr}, 'Could not properly execute the pdftk binary.');
            return callback({'code': 500, 'msg': 'The path for the pdftk binary is misconfigured.'});
        }
        callback();
    });
};

/**
 * Generates previews for a PDF file.
 * This method will download the file first and then generate previews for the PDF file.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, callback) {
    // Download the file.
    ctx.download(function(err, path) {
        if (err) {
            return callback(err);
        }

        // generate the previews for it.
        previewPDF(ctx, path, callback);
    });
};

/**
 * Generates previews for a PDF file.
 * Three images will be generated for each page.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {String}              path            The path where the PDF file is stored.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 */
var previewPDF = module.exports.previewPDF = function(ctx, path, callback) {
    // Create a directory where we can store the files.
    var pagesDir = ctx.baseDir + '/pages';
    fs.mkdir(pagesDir, function(err) {
        if (err) {
            log().error({'err': err, 'contentId': ctx.contentId}, 'Could not create a directory %s to store the pages in.', pagesDir);
            return callback({'code': 500, 'msg': 'Could not create a directory to store the splitted pages in.'});
        }

        // Split the PDF pages.
        _splitPDF(ctx, path, pagesDir, function(err, pageFilenames) {
            if (err) {
                return callback(err);
            }

            // The amount of pages should be stored as metadata.
            ctx.addMetadata('pageCount', pageFilenames.length);

            // Convert each page into 3 images.
            var todo = pageFilenames.length;
            var called = false;
            var sizes = [
                { 'width': PreviewConstants.SIZES.LARGE, 'height': PreviewConstants.SIZES.LARGE, 'size': 'large' },
                { 'width': PreviewConstants.SIZES.MEDIUM, 'height': PreviewConstants.SIZES.MEDIUM, 'size': 'medium' },
                { 'width': PreviewConstants.SIZES.SMALL, 'height': PreviewConstants.SIZES.SMALL, 'size': 'small' }
            ];

            /*!
             * Resizes each page we retrieved from the PDF splitter.
             * Rather than simply iterating over the `pageFilenames` array, we recursively go trough the array
             * as doing (n pages) * (3 images per page) would be too cpu intensive otherwise.
             */
            var resize = function() {
                var page = pageFilenames.shift();

                // The absolute path where the pdf page is stored.
                var pagePath = pagesDir + '/' + page;

                var pageSizes = clone(sizes);
                // Remove the 'pdf' extension.
                var name = page.substr(0, page.length - 3);
                pageSizes[0].prefix = name;
                pageSizes[1].prefix = name;
                pageSizes[2].prefix = name;

                // Although `pagePath` points to a PDF file we can still handle it as an image
                // as GraphicsMagick as able to read and convert PDF files.
                PreviewImages.resizeImages(ctx, pagePath, pageSizes, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    if (pageFilenames.length === 0) {
                        _generateThumbnail(ctx, pagesDir, callback);
                    } else {
                        resize();
                    }
                });
            };

            // Start resizing.
            resize();
        });
    });
};

/**
 * Adds the thumbnail to a piece of content.
 * There should be a file in the pagesDir called 'page.1.pdf'.
 * This is the file we'll use to generate a thumbnail from.
 * There is no need to do a `ctx.setThumbnail` as the `PreviewAPI.cropThumbnail` takes care of that.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {String}              pagesDir        The path of the directory that contains the splitted pages.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 * @api private
 */
var _generateThumbnail = function(ctx, pagesDir, callback) {
    var path = pagesDir + '/page.1.pdf';
    fs.exists(path, function(exists) {
        if (!exists) {
            log().error({'contentId': ctx.contentId}, 'The first page could not be found at %s', path);
            return callback({'code': 500, 'msg': 'Could not find the first page of a PDF file.'});
        }
        PreviewImages.cropThumbnail(ctx, path, callback);
    });
};

/**
 * Splits one PDF file into a PDF file per page.
 * ie: If a PDF file has 5 pages in it, this method will generate 5 pdf files in a directory.
 * The files will be named 'page.i.pdf'.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {String}              path            The path where the PDF file is stored.
 * @param {String}              pagesDir        The directory where the pages can be stored in.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 * @param {String[]}            callback.files  An array of file names that were generated and stored in `pagesDir`.
 * @api private
 */
var _splitPDF = function(ctx, path, pagesDir, callback) {
    var cmd = util.format('%s "%s" burst output %s/page.%d.pdf', _pdftkBinary, path, pagesDir);
     // Execute the command.
    log().trace({'contentId': ctx.contentId}, 'Executing %s', cmd);
    var child = exec(cmd, { 'timeout': _timeout }, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'contentId': ctx.contentId, 'stdout': stdout, 'stderr': stderr}, 'Could not split the PDF.');
            return callback({'code': 500, 'msg': 'Could not split the PDF file.'});
        }

        // Splitting was succesful, get a list of files we generated.
        fs.readdir(pagesDir, function(err, files) {
            if (err) {
                log().error({'err': err, 'contentId': ctx.contentId}, 'Could not read the %s directory to list the files', pagesDir);
                return callback({'code': 500, 'msg': 'Could not read the directory'});
            }
            callback(null, files);
        });
    });
};
