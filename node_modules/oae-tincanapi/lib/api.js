/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var AuthzUtil = require('oae-authz/lib/util');
var ConfigAPI = require('oae-config');
var log = require('oae-logger').logger('oae-doc');
var TenantsAPI = require('oae-tenants');
var TenantsUtil = require('oae-tenants/lib/util');

var TinCanAPIConstants = require('./constants').TinCanAPIConstants;
var TinCanModel = require('./model');
var Statement = require('./model').Statement;
var TinCanConfig = ConfigAPI.config('oae-tincanapi');

var config = null;

/*
 * Function maps an OAE activity verb to a TinCanAPI verb
 * @see /node_modules/oae-tincanapi/lib/constants.js
 * 
 * @param  {String}     verb    OAE activity verb that needs to be mapped to a TinCan API verb
 * @return {VerbModel}  string  Converted verb
 * @api private
 */
var _mapVerb = function(oaeVerb) {

    // The verb object that will be used
    var verb = null;

    switch (oaeVerb) {
        case ActivityConstants.verbs.ADD:
            verb = TinCanAPIConstants.verbs.ADDED;
            break;
        case ActivityConstants.verbs.CREATE:
            verb = TinCanAPIConstants.verbs.CREATED;
            break;
        case ActivityConstants.verbs.JOIN:
            verb = TinCanAPIConstants.verbs.JOINED;
            break;
        case ActivityConstants.verbs.POST:
            verb = TinCanAPIConstants.verbs.POSTED;
            break;
        case ActivityConstants.verbs.SHARE:
            verb = TinCanAPIConstants.verbs.SHARED;
            break;
        case ActivityConstants.verbs.UPDATE:
            verb = TinCanAPIConstants.verbs.UPDATED;
            break;
    }

    return new TinCanModel.TinCanVerb(verb.id, verb.display);
};

/*
 * Submit a statement to the Learning Record Store.
 * @see http://rusticisoftware.github.io/TinCanJS/
 * 
 * For testing in Terminal, paste following string:
 * curl -H "X-Experience-API-Version: 1.0.0" https://[APP-ID]]:[APP-SECRET]@cloud.scorm.com/tc/[APP-ID]/statements?statementId=[STATEMENT-ID]
 *
 * @param  {TinCanStatement[]}   activities             Array of tenant activities
 * @param  {String}              tenantAlias            Alias for the tenant on which the activity took place
 */
var sendStatementsToLRS = module.exports.sendActivitiesToLRS = function(activities, tenantAlias) {

    // Check if Learning Record Store integration is enabled for the tenant
    if (TinCanConfig.getValue(tenantAlias, 'lrs', 'enabled')) {
        
        // Create an options object that can be submitted to the TinCan API
        var options = {
            'method': 'POST',
            'url': TinCanConfig.getValue(tenantAlias, 'lrs', 'endpoint'),
            'timeout': config.tincanapi.timeout,
            'auth': {
                'user': TinCanConfig.getValue(tenantAlias, 'lrs', 'appid'),
                'pass': TinCanConfig.getValue(tenantAlias, 'lrs', 'appsecret'),
                'sendImmediately': true
            },
            'headers': {
                'Content-Type': 'application/json',
                'X-Experience-API-Version': '1.0.0'
            },
            'body': JSON.stringify(activities)
        };
    
        // Perform the request
        request(options, function(err, response, body) {
            if (err) {
                log().error({'err': err, 'body': body}, 'An error ocurred whilst sending statements to the LRS');
            }
        });
    }
};

/*
 * Initializes the TinCan API. 
 * This will listen for OAE activities and will convert these into TinCan statements that can be posted to a Learning Record Store.
 *
 * @param  {Object}    config       Configuration for the TinCanAPI module
 * @param  {Function}  callback     Standard callback function
 */
var initializeTinCanAPI = module.exports.initializeTinCanAPI = function(_config, callback) {

    // Store the configuration values
    config = _config;

    // Listen for OAE activities that are taking place
    ActivityAPI.on('deliveredActivities', function(routedActivities) {

        // Object that will contain the statements for each tenant
        var tenantStatements = {};

        // Loop through all the activities and send each activity to LRS
        _.each(routedActivities, function(activities, route) {

            _.each(activities, function(activity) {

                // A triggered activity can end up as multiple routed activities (one for the actor, one for the target, one for each follower, ...)
                // We only need to send a single statement per triggered activity and only for the actor.
                // We can do this by only sending a statement if the route we're dealing with is the same as the activity's actor.  
                if (route === activity.actor.user.id) {

                    // Stores the tenant alias to retrieve values from the configAPI later on
                    var tenantAlias = AuthzUtil.getResourceFromId(activity.actor.user.id).tenantAlias;

                    // If the object doesn't contain the tenant yet, we add the tenant as a new key
                    // Each tenant will have an array containing all the activities to be sent to the LRS for that tenant
                    tenantStatements[tenantAlias] = tenantStatements[tenantAlias] || [];

                    // Construct the tenants profile link
                    var homePage = TenantsUtil.getBaseUrl(TenantsAPI.getTenant(tenantAlias)) + activity.actor.user.profilePath;

                    // Fill the actor, verb and object objects
                    var actor = new TinCanModel.TinCanActor(activity.actor.user.displayName, homePage);
                    var verb = _mapVerb(activity.verb);
                    var obj = new TinCanModel.TinCanObject(activity.object['oae:id'], activity.object[activity.object.objectType].displayName, activity.object[activity.object.objectType].description);

                    // Add a new statement to the array of statements
                    tenantStatements[tenantAlias].push(new Statement(actor, verb, obj));
                }
            });
        });

        // A single batch request is done to the LRS for each tenant in the provided activities
        _.each(tenantStatements, sendStatementsToLRS);
    });

    callback();
};
