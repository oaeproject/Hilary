/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var querystring = require('querystring');
var request = require('request');
var urlAPI = require('url');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-preview-processor');

var PreviewUtil = require('oae-preview-processor/lib/util');

/**
 * Whether or not this retriever can handle the passed in URL.
 *
 * @param  {String}     url     The URL to generate images for.
 * @return {Boolean}            true if this retriever can handle the URL, false otherwise.
 */
var test = module.exports.test = function(url) {
    return (_getId(url) !== null);
};


/**
 * Get an image for a URL.
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {String}             url             The URL to generate images for.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 * @param  {String}             callback.path   The path on disk where the image is stored.
 * @param  {Object}             [callback.opts] Extra options that should be posted to the main content object. ex: displayName, description, ..
 */
var getImage = module.exports.getImage = function(ctx, url, callback) {
    // There is an image at http://img.youtube.com/vi/<movie id>/0.jpg that you can download
    var id = _getId(url);
    var imageUrl = 'http://img.youtube.com/vi/' + id + '/0.jpg';

    // Download it.
    var path = ctx.baseDir + '/youtube.jpg';
    PreviewUtil.downloadRemoteFile(imageUrl, path, callback);
};

/**
 * Gets a YouTube movie identifier out of a url.
 * If the url is 'http://www.youtube.com/watch?v=bXdb3fvDOMI', 'bXdb3fvDOMI' will be returned.
 *
 * @param  {String} url The YouTube URL.
 * @return {String}     The movie identifier (or null.)
 * @api private
 */
var _getId = function(url) {
    try {
        var parsedUrl = urlAPI.parse(url);
        if (!/youtube\.com/.test(parsedUrl.hostname)) {
            return null;
        }
        var qs = querystring.parse(parsedUrl.query);
        return qs.v;
    } catch (err) {
        return null;
    }
};
