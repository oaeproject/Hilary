/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var clone = require('clone');
var events = require('events');

var Context = require('oae-context').Context;
var EmailAPI = require('oae-email');
var log = require('oae-logger').logger('oae-activity-notifications');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var TenantsAPI = require('oae-tenants');
var Validator = require('oae-authz/lib/validator').Validator;

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityDAO = require('./dao');
var ActivityEmitter = require('./emitter');
var ActivityRegistry = require('./registry');
var ActivityTransformer = require('./transformer');

// Tracks the handling of notifications for synchronization to determine when there are no notifications being processed
var notificationsCount = 0;
var notificationsEmptyEmitter = new events.EventEmitter();

/*!
 * When a batch of notifications are delivered, we increment all the target user notifications and
 * fire off emails.
 */
ActivityEmitter.on(ActivityConstants.events.DELIVERED_NOTIFICATIONS, function(deliveredNotifications) {

    var userIdsIncrBy = {};
    _.each(deliveredNotifications, function(activities, userId) {

        // Increment the notifications count, when each one of these potential notifications is handled / complete,
        // they should be decremented
        _incrementNotifications();

        userIdsIncrBy[userId] = activities.length;
    });

    // All users receiving notifications will have their "notifications unread" counter incremented
    incrementNotificationsUnread(userIdsIncrBy, function(err) {
        if (err) {
            // We don't have to break on an error here, we can still send e-mails
            log().error({'err': new Error(err.msg), 'userIdsIncrBy': userIdsIncrBy}, 'Could not mark notifications as unread');
        }

        var tenantsForContext = TenantsAPI.getTenantsForContext();
        _.each(deliveredNotifications, function(activities, userId) {

            // Only send an email if this notification is configured to do so.
            var activitiesToEmail = _.filter(activities, function(activity) {
                var activityTypeOptions = _getRegisteredActivityOptions(activity);
                return (activityTypeOptions.notifications && activityTypeOptions.notifications.email);
            });

            if (activitiesToEmail.length === 0) {
                // Don't bother continuing if there are no emails to send
                _decrementNotifications();
                return;
            }

            // The activities will be transformed in-place when being emailed to a user. So we should clone them
            // so that we don't modify them in place while another notification listener is trying to use them
            activitiesToEmail = clone(activitiesToEmail);

            PrincipalsDAO.getPrincipal(userId, function(err, user) {
                if (err) {
                    _decrementNotifications();
                    return log().error({'err': err, 'userId': userId}, 'Failed to fetch user to deliver notifications.');
                } else if (!user.email) {
                    // Cannot send notifications to a user without an email address
                    _decrementNotifications();
                    return;
                }

                // Create an API context for the receiving users with which we can transform the emailed activities
                var ctx = new Context(tenantsForContext[user.tenant], user);
                ActivityTransformer.transformActivities(ctx, activitiesToEmail, function(err) {
                    if (err) {
                        _decrementNotifications();
                        return log().error({'err': err, 'userId': userId}, 'Failed to transform activities for notifications.');
                    }

                    // Tracks how many emails have been sent/complete, so we know when we're done
                    var emailsSent = 0;
                    _.each(activitiesToEmail, function(activity) {

                        // Determine which module and template id should be used for this activity
                        var notificationOptions = _getRegisteredActivityOptions(activity).notifications;
                        var templateModule = notificationOptions.emailTemplateModule;
                        var templateId = notificationOptions.emailTemplateId;

                        // Finally send the email
                        EmailAPI.sendEmail(templateModule, templateId, user, {'activity': activity}, null, function(err) {
                            if (err) {
                                log().error({'err': err}, 'Error sending e-mail to user');
                            }
                            
                            emailsSent++;
                            if (emailsSent === activitiesToEmail.length) {
                                _decrementNotifications();
                                return;
                            }
                        });
                    });
                });
            });
        });
    });
});

/**
 * Marks all notifications as read for a given user.
 *
 * @param  {String}     userId                  The id of the user whose notifications to mark as read
 * @param  {Function}   callback                Invoked when the process completes
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Number}     callback.lastReadTime   The timestamp (millis since epoch) that were persisted as the "last read time" of notifications
 */
var markNotificationsRead = module.exports.markNotificationsRead = function(userId, callback) {
    // In addition to the notification count, the lastReadTime will help determine which of the notifications are
    // new and which are not.
    var lastReadTime = Date.now();
    var profileFields = {
        'notificationsUnread': 0,
        'notificationsLastRead': lastReadTime
    };

    // Clear all the notifications unread to 0
    ActivityDAO.clearNotificationsUnreadCount(userId, function(err) {
        if (err) {
            return callback(err);
        }

        // Update the notifications values in the basic profile
        PrincipalsDAO.updatePrincipal(userId, profileFields, function(err) {
            if (err) {
                return callback(err);
            }

            return callback(null, lastReadTime);
        });
    });
};

/**
 * Increment the notifications unread count for the given user ids.
 *
 * @param  {Object}     userIdIncrs         An object keyed by user id, whose value is the number by which to increment the count
 * @param  {Function}   callback            Invoked when the counts have been incremented
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var incrementNotificationsUnread = module.exports.incrementNotificationsUnread = function(userIdIncrs, callback) {
    /*!
     * First update the cached new notification counts, then update Cassandra. Some very clear drawbacks here:
     *
     *  1.  If 2 nodes increment and then persist to cassandra, and the first incr wins into cassandra, counts are
     *      off by 1. The next time a notification comes around it will be fixed.
     *  2.  If Redis is completely flushed or crashes with no disk storage, kiss all your counts good-bye. Will not
     *      become accurate again for a user until they "mark as read".
     *
     * Some ways to improve could be to repair by using a SELECT COUNT(*)... with the notificationsLastRead property,
     * but it is currently not clear how to detect which counts are incorrect -- perhaps auto-repair when a user reads
     * their list of notifications. This is all out of scope ATM.
     */
    ActivityDAO.incrementNotificationsUnreadCounts(userIdIncrs, function(err, newValues) {
        if (err) {
            return callback(err);
        }

        var todo = _.keys(newValues).length;
        var complete = false;

        if (todo === 0) {
            return callback();
        }

        /*!
         * Determines when the process of updating all principal counts in cassandra is complete.
         *
         * @param  {Object}     err     An error that occurred, if any.
         */
        var _monitorUpdatePrincipal = function(err) {
            if (complete) {
                // Nothing to do.
            } else if (err) {
                complete = true;
                return callback(err);
            } else {
                todo--;
                if (todo === 0) {
                    completed = true;
                    return callback();
                }
            }
        };

        // Update all principal profiles with the new count
        _.each(userIdIncrs, function(newValue, userId) {
            PrincipalsDAO.updatePrincipal(userId, {'notificationsUnread': newValue}, _monitorUpdatePrincipal);
        });
    });
};

/**
 * Perform an action when the notifications queue becomes empty. This is useful to determine when the notifications
 * are no longer processing, for purposes of gracefully stopping the server or synchronization of processing for
 * tests.
 *
 * @param  {Function}   callback    The function to invoke when there are 0 notifications being processed
 */
var whenNotificationsEmpty = module.exports.whenNotificationsEmpty = function(callback) {
    if (notificationsCount === 0) {
        return callback();
    }

    notificationsEmptyEmitter.once('empty', callback);
};

/**
 * Get the registered activity options (via `ActivityAPI#registerActivityType`) that apply to this activity.
 *
 * @param  {Activity}   activity    The activity object for which to get the registered options
 * @api private
 */
var _getRegisteredActivityOptions = function(activity) {
    var activityType = activity[ActivityConstants.properties.OAE_ACTIVITY_TYPE];
    return ActivityRegistry.getRegisteredActivityTypes()[activityType];
};

/**
 * Increment the notifications counter to indicate that we have received a new set of notifications for a user.
 * @api private
 */
var _incrementNotifications = function() {
    notificationsCount++;
    log().trace('Incremented notifications: %s', notificationsCount);
};

/**
 * Decrement the notifications counter to indicate that we have completed handling a set of notifications for a user. If
 * the notifications are now empty, the "empty" event on the internal emitter is fired so `whenNotificationsEmpty` will
 * trigger any waiting listeners.
 * @api private
 */
var _decrementNotifications = function() {
    notificationsCount--;
    log().trace('Decremented notificiations: %s', notificationsCount);
    if (notificationsCount <= 0) {
        notificationsCount = 0;
        notificationsEmptyEmitter.emit('empty');
    }
};
