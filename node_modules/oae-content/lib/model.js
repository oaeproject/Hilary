/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

///////////
// Model //
///////////

/**
 * The main content object model.
 * 
 * @param  {String}     tenant          The alias of the tenant this content item is being created in
 * @param  {String}     id              The globally unique content ID for this content item
 * @param  {String}     visibility      The visibility of the content item (e.g. public, loggedin, private)
 * @param  {String}     displayName     The title of the content item
 * @param  {String}     description     The description of the content item
 * @param  {String}     resourceSubType The type of content this content item represents (e.g. file, collabdoc, link)
 * @param  {String}     createdBy       The ID of the user who created this content item
 * @param  {Number}     created         The timestamp at which this content item was created in milliseconds since epoch
 * @param  {Number}     lastModified    The timestamp at which this content item was modified for the last time in milliseconds since epoch
 */
module.exports.Content = function(tenant, id, visibility, displayName, description, resourceSubType, createdBy, created, lastModified) {
    var that = {};

    that.tenant = tenant;
    that.id = id;
    that.visibility = visibility;
    that.displayName = displayName;
    that.description = description;
    that.resourceSubType = resourceSubType;
    that.createdBy = createdBy;
    that.created = created;
    that.lastModified = lastModified;
    that.profilePath = '/content/' + that.id;
    that.resourceType = 'content';

    return that;
};

/**
 * The revision model.
 *
 * @param  {String}     contentId       The globally unique content ID of the piece of content that is getting a revision.
 * @param  {String}     revisionId      The ID of the revision
 * @param  {String}     createdBy       The ID of the user who created this revision.
 * @param  {Number}     created         The timestamp that this revision was created in milliseconds since epoch.
 * @param  {String}     uri             The storage URI for this revision.
 * @param  {Object}     opts            Any optional parameters (such as filename, mimetype, ..) you wish to pass along.
 */
module.exports.Revision = function(contentId, revisionId, createdBy, created, uri, opts) {
    var that = {};
    that.contentId = contentId;
    that.revisionId = revisionId;
    that.createdBy = createdBy;
    that.created = created;
    that.uri = uri;
    that.opts = opts;
    return that;
};

/**
 * The comment model
 * 
 * @param  {String}     commentId       The globally unique comment ID
 * @param  {String}     body            The text of the comment
 * @param  {String}     contentId       The ID of the content item this comment belongs to
 * @param  {String}     createdBy       The ID of the user who created this comment
 * @param  {Number}     created         The timestamp at which this comment was created in milliseconds since epoch
 * @param  {Number}     level           The level at which the comment was made. For example, a top level comment would be level `0`, a reply to a top level comment would be level `1`, etc.
 * @param  {String}     [replyTo]       The comment ID of the comment this comment is a reply to. If this comment is a top-level comment, replyTo will not be provided
 * @param  {Boolean}    [deleted]       Will be `true` when the comment has been marked as deleted (but still exists in the database). This will only be done for deleted comments that have replies.
 */
module.exports.Comment = function(commentId, body, contentId, createdBy, created, level, replyTo, deleted) {
    var that = {};

    that.commentId = commentId;
    that.body = body;
    that.contentId = contentId;
    that.createdBy = createdBy;
    that.created = created;
    that.level = level || 0;
    that.replyTo = replyTo;
    that.deleted = deleted;

    return that;
};
