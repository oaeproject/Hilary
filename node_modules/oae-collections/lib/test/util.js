/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var ShortId = require('shortid');
var util = require('util');

var ContentTestUtil = require('oae-content/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Generate a number of collections for use in testing
 *
 * @param  {RestContext}    restContext             The REST context to use for making requests
 * @param  {Number}         numCollections          How many collections to generate
 * @param  {Function}       callback                Standard callback function
 * @param  {Collection}     callback.collection...  All collections that were generated as separate callback parameters
 * @throws {AssertionError}                         Thrown if an error occurred generating the collections
 */
var generateTestCollections = module.exports.generateTestCollections = function(restContext, numCollections, callback, _collections) {
    _collections = _collections || [];
    if (numCollections === 0) {
        return callback.apply(this, _collections);
    }

    RestAPI.Collections.createCollection(restContext, util.format('displayName-%s', ShortId.generate()), null, null, null, null, function(err, createdCollection) {
        assert.ok(!err);
        _collections.push(createdCollection);
        return generateTestCollections(restContext, numCollections - 1, callback, _collections);
    });
};

/**
 * Generate a number of collections with the provided visibility for use in testing
 *
 * @param  {RestContext}    restContext             The REST context to use for making requests
 * @param  {Number}         numCollections          How many collections to generate
 * @param  {String}         visibility              The visibility to apply to each collection. One of the options enumerated by `Authz.visibility`
 * @param  {Function}       callback                Standard callback function
 * @param  {Collection}     callback.collection...  All collections that were generated as separate callback parameters
 * @throws {AssertionError}                         Thrown if an error occurred generating the collections
 */
var generateTestCollectionsWithVisibility = module.exports.generateTestCollectionsWithVisibility = function(restContext, numCollections, visibility, callback, _collections) {
    _collections = _collections || [];
    if (numCollections === 0) {
        return callback.apply(this, _collections);
    }

    RestAPI.Collections.createCollection(restContext, util.format('displayName-%s', ShortId.generate()), null, visibility, null, null, function(err, createdCollection) {
        assert.ok(!err);
        _collections.push(createdCollection);
        return generateTestCollectionsWithVisibility(restContext, numCollections - 1, visibility, callback, _collections);
    });
};

/**
 * Set up 2 public tenants and 2 private tenants, each with a public, loggedin, private set of
 * users, groups, content and collections. The resulting model looks like this:
 *
 * ```
 *  {
 *      "publicTenant": {
 *          "tenant": <Tenant>,
 *          "anonymousRestContext": <RestContext>,
 *          "adminRestContext": <RestContext>,
 *          "publicGroup": <Group>,
 *          "loggedinGroup": <Group>,
 *          "privateGroup": <Group>,
 *          "publicContent": <Content>,
 *          "loggedinContent": <Content>,
 *          "privateContent": <Content>,
 *          "publicUser": {
 *              "user": <User>,
 *              "restContext": <RestContext>
 *          },
 *          "loggedinUser": { ... }
 *          "privateUser": { ... }
 *      },
 *      "publicTenant1": { ... },
 *      "privateTenant": { ... },
 *      "privateTenant1": { ... }
 *  }
 * ```
 *
 * @param  {Function}   Invoked when all the entities are set up
 * @throws {Error}      An assertion error is thrown if something does not get created properly
 */
var setupMultiTenantPrivacyEntities = module.exports.setupMultiTenantPrivacyEntities = function(callback) {
    // Base the collections privacy setup on content. We then create collections to go along with them
    ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
        // Create the collections
        _setupTenant(publicTenant, function() {
            _setupTenant(publicTenant1, function() {
                _setupTenant(privateTenant, function() {
                    _setupTenant(privateTenant1, function() {
                        return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                    });
                });
            });
        });
    });
};

/**
 * Add a set of content items to a collection, ensuring that all items have been added succesfully
 *
 * @param  {RestContext}    restContext     The REST context to use when adding the content items to the collection
 * @param  {String}         collectionId    The id of the collection to which to add the content items
 * @param  {String[]}       contentIds      The ids of the content items to add
 * @param  {Function}       callback        Invoked when the content items have been successfully added
 * @throws {AssertionError}                 Thrown if the content items are not successfully added
 */
var assertAddContentItemsToCollectionSucceeds = module.exports.assertAddContentItemsToCollectionSucceeds = function(restContext, collectionId, contentIds, callback) {
    RestAPI.Collections.addContentItemsToCollection(restContext, collectionId, contentIds, function(err) {
        assert.ok(!err);

        getAllCollectionContentItems(restContext, collectionId, null, function(contentItems, responses) {
            // Ensure that the items we just added to the collection are in fact there
            _.each(contentIds, function(contentId) {
                assert.ok(_.findWhere(contentItems, {'id': contentId}));
            });

            return callback();
        });
    });
};

/**
 * Try to add a set of content items to a collection, and ensure it fails in a specified way
 *
 * @param  {RestContext}    restContext     The REST context to use when adding the content items to the collection
 * @param  {String}         collectionId    The id of the collection to which to try and add the content items
 * @param  {String[]}       contentIds      The content ids to try and add to the collection
 * @param  {Number}         httpCode        The expected failure HTTP code of the request
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not fail in the expected manner
 */
var assertAddContentItemsToCollectionFails = module.exports.assertAddContentItemsToCollectionFails = function(restContext, collectionId, contentIds, httpCode, callback) {
    RestAPI.Collections.addContentItemsToCollection(restContext, collectionId, contentIds, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Try to create a collection, ensuring it fails in a specified way
 *
 * @param  {RestContext}    restContext     The REST context to use when creating the collection
 * @param  {String}         displayName     The display name of the collection
 * @param  {String}         description     The description of the collection
 * @param  {String}         visibility      The visibility of the collection
 * @param  {String[]}       managers        The manager principal ids for the collection
 * @param  {String[]}       viewers         The viewer principal ids for the collection
 * @param  {Number}         httpCode        The expected failure HTTP code of the request
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not fail in the expected manner
 */
var assertCreateCollectionFails = module.exports.assertCreateCollectionFails = function(restContext, displayName, description, visibility, managers, viewers, httpCode, callback) {
    RestAPI.Collections.createCollection(restContext, displayName, description, visibility, managers, viewers, function(err, createdCollection) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!createdCollection);
        return callback();
    });
};

/**
 * Create a collection, ensuring that it is successfully created with the provided properties
 *
 * @param  {RestContext}    restContext             The REST context to use when creating the collection
 * @param  {String}         displayName             The display name of the collection
 * @param  {String}         description             The description of the collection
 * @param  {String}         visibility              The visibility of the collection
 * @param  {String[]}       managers                The manager principal ids for the collection
 * @param  {String[]}       viewers                 The viewer principal ids for the collection
 * @param  {Function}       callback                Invoked when the request is complete
 * @param  {Collection}     callback.collection     The created collection
 * @throws {AssertionError}                         Thrown if the collection was not successfully created
 */
var assertCreateCollectionSucceeds = module.exports.assertCreateCollectionSucceeds = function(restContext, displayName, description, visibility, managers, viewers, callback) {
    RestAPI.Collections.createCollection(restContext, displayName, description, visibility, managers, viewers, function(err, createdCollection) {
        assert.ok(!err);
        assert.ok(createdCollection);
        assert.ok(createdCollection.id);
        assert.ok(createdCollection.groupId);
        assert.ok(createdCollection.createdBy);
        assert.equal(createdCollection.displayName, displayName);
        assert.equal(createdCollection.description, description);
        assert.equal(createdCollection.visibility, visibility);
        assert.ok(_.isNumber(createdCollection.created));
        assert.strictEqual(createdCollection.created, createdCollection.lastModified);
        assert.strictEqual(createdCollection.profilePath.indexOf('/collection/'), 0);
        assert.notEqual(createdCollection.profilePath.indexOf(createdCollection.id.split(':').pop()), -1);
        assert.equal(createdCollection.resourceType, 'collection');
        return callback(createdCollection);
    });
};

/**
 * Get a collection, ensuring that it fails in a specified way
 *
 * @param  {RestContext}    restContext     The REST context to use when getting the collection
 * @param  {String}         collectionId    The id of the collection to get
 * @param  {Number}         httpCode        The expected failure HTTP code of the request
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not fail in the expected manner
 */
var assertGetCollectionFails = module.exports.assertGetCollectionFails = function(restContext, collectionId, httpCode, callback) {
    RestAPI.Collections.getCollection(restContext, collectionId, function(err, collection) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!collection);
        return callback();
    });
};

/**
 * Get a collection, ensuring that the request is successful
 *
 * @param  {RestContext}    restContext     The REST context to use when getting the collection
 * @param  {String}         collectionId    The id of the collection to get
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not succeed
 */
var assertGetCollectionSucceeds = module.exports.assertGetCollectionSucceeds = function(restContext, collectionId, callback) {
    RestAPI.Collections.getCollection(restContext, collectionId, function(err, collection) {
        assert.ok(!err);
        assert.ok(collection);
        assert.strictEqual(collection.id, collectionId);
        return callback(collection);
    });
};

/**
 * Get the content library of a collection, ensuring that it fails in the specified manner
 *
 * @param  {RestContext}    restContext     The REST context to use when getting the content library
 * @param  {String}         collectionId    The id of the collection whose content library to get
 * @param  {String}         start           The starting point from where to list collections in the library
 * @param  {Number}         limit           The maximum number of content items to fetch
 * @param  {Number}         httpCode        The expected failure HTTP code of the request
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not fail in the expected manner
 */
var assertGetCollectionContentLibraryFails = module.exports.assertGetCollectionContentLibraryFails = function(restContext, collectionId, start, limit, httpCode, callback) {
    RestAPI.Collections.getCollectionContentLibrary(restContext, collectionId, start, limit, function(err, result) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!result);
        return callback();
    });
};

/**
 * Get the content library of a collection, ensuring that it succeeds
 *
 * @param  {RestContext}    restContext         The REST context to use when getting the content library
 * @param  {String}         collectionId        The id of the collection whose content library to get
 * @param  {String}         start               The starting point from where to list collections in the library
 * @param  {Number}         limit               The maximum number of content items to fetch
 * @param  {Function}       callback            Invoked when the request is complete
 * @param  {Object}         callback.result     The result object, as per `RestAPI.Collections.getCollectionContentLibrary`
 * @throws {AssertionError}                     Thrown if the request did not succeed
 */
var assertGetCollectionContentLibrarySucceeds = module.exports.assertGetCollectionContentLibrarySucceeds = function(restContext, collectionId, start, limit, callback) {
    RestAPI.Collections.getCollectionContentLibrary(restContext, collectionId, start, limit, function(err, result) {
        assert.ok(!err);
        assert.ok(_.isArray(result.results));
        assert.ok(_.isString(result.nextToken) || _.isNull(result.nextToken));

        // If a valid limit was specified (valid meaning above 0 and less than the maximum amount of
        // 25), ensure the `nextToken` is shown if there were less than the expected amount of
        // results
        if (_.isNumber(limit) && limit > 0 && result.results.length < limit && limit <= 25) {
            assert.strictEqual(result.nextToken, null);
        }

        // Ensure each result has an id
        _.each(result.results, function(result) {
            assert.ok(result.id);
        });

        return callback(result);
    });
};

/**
 * Try and get the members of a collection, ensuring that the request fails
 *
 * @param  {RestContext}    restContext     The REST context to use when getting the collection members
 * @param  {String}         collectionId    The id of the collection whose members to get
 * @param  {String}         start           The starting point from where to list members of the collection
 * @param  {Number}         limit           The maximum number of members to fetch
 * @param  {Number}         httpCode        The expected failure HTTP code of the request
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not fail in the expected manner
 */
var assertGetCollectionMembersFails = module.exports.assertGetCollectionMembersFails = function(restContext, collectionId, start, limit, httpCode, callback) {
    RestAPI.Collections.getCollectionMembers(restContext, collectionId, start, limit, function(err, result) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!result);
        return callback();
    });
};

/**
 * Get the members of a collection, ensuring that the request succeeds
 *
 * @param  {RestContext}    restContext         The REST context to use when getting the collection members
 * @param  {String}         collectionId        The id of the collection whose members to get
 * @param  {String}         start               The starting point from where to list members of the collection
 * @param  {Number}         limit               The maximum number of members to fetch
 * @param  {Function}       callback            Invoked when the request is complete
 * @param  {Object}         callback.result     The result object, as per `RestAPI.Collections.getCollectionMembers`
 * @throws {AssertionError}                     Thrown if the request did not succeed
 */
var assertGetCollectionMembersSucceeds = module.exports.assertGetCollectionMembersSucceeds = function(restContext, collectionId, start, limit, callback) {
    RestAPI.Collections.getCollectionMembers(restContext, collectionId, start, limit, function(err, result) {
        assert.ok(!err);
        assert.ok(result);
        assert.ok(_.isArray(result.results));
        assert.ok(_.isString(result.nextToken) || _.isNull(result.nextToken));

        // If we specified a valid limit and the result set was smaller, we must have no items left
        if (_.isNumber(limit) && limit > 0 && result.results.length < limit) {
            assert.strictEqual(result.nextToken, null);
        }

        // Ensure each result has a profile and a valid role
        _.each(result.results, function(result) {
            assert.ok(result);
            assert.ok(result.profile);
            assert.ok(result.profile.id);
            assert.ok(_.contains(['manager', 'viewer'], result.role));
        });

        return callback(result);
    });
};

/**
 * Get the collections library of a specified user or group, ensuring that the request succeeds
 *
 * @param  {RestContext}    restContext         The REST context to use when getting the collections library
 * @param  {String}         principalId         The id of the user or group whose collections library to get
 * @param  {String}         start               The starting point from where to list collections in the library
 * @param  {Number}         limit               The maximum number of collections to fetch
 * @param  {Function}       callback            Invoked when the request is complete
 * @param  {Object}         callback.result     The result object, as per `RestAPI.Collections.getCollectionsLibrary`
 * @throws {AssertionError}                     Thrown if the request did not succeed
 */
var assertGetCollectionsLibrarySucceeds = module.exports.assertGetCollectionsLibrarySucceeds = function(restContext, principalId, start, limit, callback) {
    RestAPI.Collections.getCollectionsLibrary(restContext, principalId, start, limit, function(err, result) {
        assert.ok(!err);
        assert.ok(result);
        assert.ok(_.isArray(result.results));
        assert.ok(_.isString(result.nextToken) || _.isNull(result.nextToken));

        // If a valid limit was specified (valid meaning above 0 and below the maximum amount of
        // 25), ensure the `nextToken` is shown if there were less than the expected amount of
        // results
        if (_.isNumber(limit) && limit > 0 && result.results.length < limit && limit <= 25) {
            assert.strictEqual(result.nextToken, null);
        }

        // Ensure each result has an id
        _.each(result.results, function(result) {
            assert.ok(result);
            assert.ok(result.id);
        });

        return callback(result);
    });
};

/**
 * Try to get the collections library of a specified user or group, ensuring that the request fails
 * in the specified manner
 *
 * @param  {RestContext}    restContext         The REST context to use when getting the collections library
 * @param  {String}         principalId         The id of the user or group whose collections library to get
 * @param  {String}         start               The starting point from where to list collections in the library
 * @param  {Number}         limit               The maximum number of collections to fetch
 * @param  {Number}         httpCode            The expected failure HTTP code of the request
 * @param  {Function}       callback            Invoked when the request is complete
 * @param  {Object}         callback.result     The result object, as per `RestAPI.Collections.getCollectionsLibrary`
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertGetCollectionsLibraryFails = module.exports.assertGetCollectionsLibraryFails = function(restContext, principalId, start, limit, httpCode, callback) {
    RestAPI.Collections.getCollectionsLibrary(restContext, principalId, start, limit, function(err, result) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!result);
        return callback();
    });
};

/**
 * Share a collection with a set of users and groups, ensuring that the request succeeds
 *
 * @param  {RestContext}    restContext     The REST context to use when sharing the collection
 * @param  {String}         collectionId    The id of the collection to share
 * @param  {String[]}       viewerIds       The ids of the users and groups with which to share
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not succeed
 */
var assertShareCollectionSucceeds = module.exports.assertShareCollectionSucceeds = function(restContext, collectionId, viewerIds, callback) {
    RestAPI.Collections.shareCollection(restContext, collectionId, viewerIds, function(err) {
        assert.ok(!err);

        // Iterate the collection members and ensure all the users have a membership. The role
        // doesn't matter because if we share with someone who is already manager their role will
        // not change
        getAllCollectionMembers(restContext, collectionId, null, function(members) {
            _.each(viewerIds, function(viewerId) {
                var hasMemberId = (!_.chain(members)
                    .filter(function(member) {
                        return (member.profile.id === viewerId);
                    })
                    .isEmpty()
                    .value());
                assert.ok(hasMemberId);
            });

            return callback();
        });
    });
};

/**
 * Try to share a collection with a set of users and groups, ensuring that the request fails in the
 * specified manner
 *
 * @param  {RestContext}    restContext     The REST context to use when sharing the collection
 * @param  {String}         collectionId    The id of the collection to share
 * @param  {String[]}       viewerIds       The ids of the users and groups with which to share
 * @param  {Number}         httpCode        The expected failure HTTP code of the request
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not fail in the expected manner
 */
var assertShareCollectionFails = module.exports.assertShareCollectionFails = function(restContext, collectionId, viewerIds, httpCode, callback) {
    RestAPI.Collections.shareCollection(restContext, collectionId, viewerIds, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Try to update the members of a collection, ensuring that the request fails in the specified
 * manner
 *
 * @param  {RestContext}    restContext     The REST context to use when updating the collection members
 * @param  {String}         collectionId    The id of the collection whose members to udpate
 * @param  {Object}         memberUpdates   The member update object, keyed by principal id whose value is a role to apply to a principal, or `false` if the principal should be removed
 * @param  {Number}         httpCode        The expected failure HTTP code of the request
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not fail in the expected manner
 */
var assertUpdateCollectionMembersFails = module.exports.assertUpdateCollectionMembersFails = function(restContext, collectionId, memberUpdates, httpCode, callback) {
    RestAPI.Collections.updateCollectionMembers(restContext, collectionId, memberUpdates, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Update the members of a collection, ensuring that the request succeeds
 *
 * @param  {RestContext}    restContext     The REST context to use when updating the collection members
 * @param  {String}         collectionId    The id of the collection whose members to udpate
 * @param  {Object}         memberUpdates   The member update object, keyed by principal id whose value is a role to apply to a principal, or `false` if the principal should be removed
 * @param  {Function}       callback        Invoked when the request is complete
 * @throws {AssertionError}                 Thrown if the request did not succeed
 */
var assertUpdateCollectionMembersSucceeds = module.exports.assertUpdateCollectionMembersSucceeds = function(restContext, collectionId, memberUpdates, callback) {
    RestAPI.Collections.updateCollectionMembers(restContext, collectionId, memberUpdates, function(err) {
        assert.ok(!err);

        // Iterate the collection members and ensure all the users have the specified role, or are
        // removed depending on the specified role
        getAllCollectionMembers(restContext, collectionId, null, function(currentMembers) {
            _.each(memberUpdates, function(change, userId) {
                var result = _.chain(currentMembers)
                    .filter(function(currentMember) {
                        return (currentMember.profile.id === userId);
                    })
                    .first()
                    .value();

                // Ensure either that the member does not exist if they were removed, or that their
                // role has become the specified role
                if (change === false) {
                    assert.ok(!result);
                } else {
                    assert.strictEqual(result.role, change);
                }
            });

            return callback();
        });
    });
};

/**
 * Ensure the collections library of the provided user or group strictly contains just the specified
 * collection ids, and optionally in the same order
 *
 * @param  {RestContext}    restContext             The REST context to use when getting the collections library
 * @param  {String}         principalId             The id of the user or group whose collections library to test
 * @param  {String[]}       expectedCollectionIds   The collection ids to ensure are present in the library
 * @param  {Boolean}        ensureOrder             When `true`, ensures that the order of items in the collection library matches the order of collection ids in `expectedCollectionIds`
 * @param  {Function}       callback                Invoked when the assertions are complete
 * @throws {AssertionError}                         Thrown if any assertions failed
 */
var assertFullCollectionsLibraryEquals = module.exports.assertFullCollectionsLibraryEquals = function(restContext, principalId, expectedCollectionIds, ensureOrder, callback) {
    getAllCollectionsInLibrary(restContext, principalId, null, function(collections) {
        var actualCollectionIds = _.pluck(collections, 'id');
        assert.strictEqual(actualCollectionIds.length, expectedCollectionIds.length);

        // If we are ensuring order, make sure they are the same order
        if (ensureOrder) {
            for (var i = 0; i < actualCollectionIds.length; i++) {
                assert.strictEqual(actualCollectionIds[i], expectedCollectionIds[i]);
            }

        // Otherwise, just ensure the arrays contain the same items
        } else {
            assert.ok(_.chain(actualCollectionIds).difference(expectedCollectionIds).isEmpty().value());
        }

        return callback();
    });
};

/**
 * Ensure the members of a specified collection is strictly equal to the provided set of expected
 * members and their roles
 *
 * @param  {RestContext}    restContext             The REST context to use when getting the collection members
 * @param  {String}         collectionId            The id of the collection whose members to test
 * @param  {Object}         expectedMemberRoles     An object keyed by principal id whose values are their expected role, indicating the expected members of the collection
 * @param  {Function}       callback                Invoked when the assertions are complete
 * @throws {AssertionError}                         Thrown if any assertions failed
 */
var assertFullCollectionMembersEquals = module.exports.assertFullCollectionMembersEquals = function(restContext, collectionId, expectedMemberRoles, callback) {
    // Remove any roles that contain a role of `false` as they would have been removed
    expectedMemberRoles = _.extend({}, expectedMemberRoles);
    _.each(expectedMemberRoles, function(role, userId) {
        if (role === false) {
            delete expectedMemberRoles[userId];
        }
    });

    // Get the full members set to compare against
    getAllCollectionMembers(restContext, collectionId, null, function(actualMemberRoles) {

        // Length of membership must be equal
        assert.strictEqual(actualMemberRoles.length, _.keys(expectedMemberRoles).length);

        // All roles must be equal. To ensure the actualMemberRoles list doesn't somehow have
        // duplicates, we remove them from the expectedMemberRoles set as we find them
        _.each(actualMemberRoles, function(actualMemberRole) {
            assert.strictEqual(actualMemberRole.role, expectedMemberRoles[actualMemberRole.profile.id]);
            delete expectedMemberRoles[actualMemberRole.profile.id];
        });

        return callback();
    });
};

/**
 * Page through all the collections in a user or group's collection library and return all
 * collections that were fetched
 *
 * @param  {RestContext}    restContext             The REST context to use when getting the collections library
 * @param  {String}         principalId             The id of the user or group whose collections library to get
 * @param  {Object}         [opts]                  Optional arguments for getting the collections library
 * @param  {Number}         [opts.batchSize]        The size of the batch to use to fetch the collections in the library. Default: 25
 * @param  {Function}       callback                Invoked when the full collections library has been fetched
 * @param  {Collection[]}   callback.collections    A list of all collections in the library
 * @param  {Object[]}       callback.responses      All the raw web responses that were received for each page request
 */
var getAllCollectionsInLibrary = module.exports.getAllCollectionsInLibrary = function(restContext, principalId, opts, callback, _nextToken, _collections, _responses) {
    opts = opts || {};
    opts.batchSize = opts.batchSize || 25;
    _collections = _collections || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_collections, _responses);
    }

    assertGetCollectionsLibrarySucceeds(restContext, principalId, _nextToken, opts.batchSize, function(result) {
        _responses.push(result);
        return getAllCollectionsInLibrary(restContext, principalId, opts, callback, result.nextToken, _.union(_collections, result.results), _responses);
    });
};

/**
 * Page through all the content items in a collection's content library and return all content items
 * that were fetched
 *
 * @param  {RestContext}    restContext             The REST context to use when getting the content library
 * @param  {String}         collectionId            The id of the collection whose content library to get
 * @param  {Object}         [opts]                  Optional arguments for getting the content library
 * @param  {Number}         [opts.batchSize]        The size of the batch to use to fetch the content in the library. Default: 25
 * @param  {Function}       callback                Invoked when the full content library has been fetched
 * @param  {Collection[]}   callback.contentItems   A list of all content items in the library
 * @param  {Object[]}       callback.responses      All the raw web responses that were received for each page request
 */
var getAllCollectionContentItems = module.exports.getAllCollectionContentItems = function(restContext, collectionId, opts, callback, _nextToken, _contentItems, _responses) {
    opts = opts || {};
    opts.batchSize = opts.batchSize || 25;
    _contentItems = _contentItems || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_contentItems, _responses);
    }

    assertGetCollectionContentLibrarySucceeds(restContext, collectionId, _nextToken, opts.batchSize, function(result) {
        _responses.push(result);
        return getAllCollectionContentItems(restContext, collectionId, opts, callback, result.nextToken, _.union(_contentItems, result.results), _responses);
    });
};

/**
 * Page through all the members of a collection and return all users and groups that were fetched
 *
 * @param  {RestContext}    restContext             The REST context to use when getting the collection members
 * @param  {String}         collectionId            The id of the collection whose members to get
 * @param  {Object}         [opts]                  Optional arguments for getting the collection members
 * @param  {Number}         [opts.batchSize]        The size of the batch to use to fetch the members of the collection. Default: 25
 * @param  {Function}       callback                Invoked when the full collection members list has been fetched
 * @param  {Collection[]}   callback.contentItems   A list of all users and groups who are members of the collection
 * @param  {Object[]}       callback.responses      All the raw web responses that were received for each page request
 */
var getAllCollectionMembers = module.exports.getAllCollectionMembers = function(restContext, collectionId, opts, callback, _nextToken, _members, _responses) {
    opts = opts || {};
    opts.batchSize = opts.batchSize || 25;
    _members = _members || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_members, _responses);
    }

    assertGetCollectionMembersSucceeds(restContext, collectionId, _nextToken, opts.batchSize, function(result) {
        _responses.push(result);
        return getAllCollectionMembers(restContext, collectionId, opts, callback, result.nextToken, _.union(_members, result.results), _responses);
    });
};

/**
 * Set up a provided tenant to have a public, loggedin and private collection
 *
 * @param  {Tenant}     tenant      The tenant to set up
 * @param  {Function}   callback    Invoked when the tenant is set up
 * @api private
 */
var _setupTenant = function(tenant, callback) {
    _createMultiPrivacyCollections(tenant.adminRestContext, function(publicCollection, loggedinCollection, privateCollection) {
        tenant.publicCollection = publicCollection;
        tenant.loggedinCollection = loggedinCollection;
        tenant.privateCollection = privateCollection;
        return callback();
    });
};

/**
 * Create a public, loggedin and private collection using the given REST context
 *
 * @param  {RestContext}    restContext     The REST context to use to create the collections
 * @param  {Function}       callback        Invoked when the collections are created
 * @api private
 */
var _createMultiPrivacyCollections = function(restContext, callback) {
    _createCollectionWithVisibility(restContext, 'public', function(publicCollection) {
        _createCollectionWithVisibility(restContext, 'loggedin', function(loggedinCollection) {
            _createCollectionWithVisibility(restContext, 'private', function(privateCollection) {
                return callback(publicCollection, loggedinCollection, privateCollection);
            });
        });
    });
};

/**
 * Create a collection with the provided visibility
 *
 * @param  {RestContext}    restContext     The REST context to use to create the collection
 * @param  {String}         visibility      The visibility that should be applied to the collection
 * @param  {Function}       callback        Invoked when the collection is created
 * @api private
 */
var _createCollectionWithVisibility = function(restContext, visibility, callback) {
    var randomId = util.format('%s-%s', visibility, ShortId.generate());
    var randomDisplayName = util.format('displayName-%s', randomId);
    var randomDescription = util.format('description-%s', randomId);
    RestAPI.Collections.createCollection(restContext, randomDisplayName, randomDescription, visibility, null, null, function(err, collection) {
        assert.ok(!err);
        return callback(collection);
    });
};
