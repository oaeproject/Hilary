/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityRegistry = require('./registry');

/**
 * Given an array of persistent activities from a stream, convert them into activities suitable to be delivered to the UI.
 *
 * @param   {Context}   ctx             The context of the current request
 * @param   {Object[]}  activities      The array of persistent activities to transform. These activities will be modified in-place. The specific model of each activity entity is proprietary to the custom producer and transformer that persist and convert the entities.
 * @param   {Function}  callback        Invoked when the process completes
 * @param   {Object}    callback.err    An error that occurred, if any
 */
var transformActivities = module.exports.transformActivities = function(ctx, activities, callback) {
    var activityEntitiesByObjectType = {};
    var transformedActivityEntitiesByObjectType = {};

    // Collect and index all the entities to be transformed by objectType -> activityId -> entityId
    activities.forEach(function(activity) {
        var activityId = activity[ActivityConstants.properties.OAE_ACTIVITY_ID];
        _getActivityEntitiesByObjectType(activityId, activity.actor, activityEntitiesByObjectType);
        _getActivityEntitiesByObjectType(activityId, activity.object, activityEntitiesByObjectType);
        _getActivityEntitiesByObjectType(activityId, activity.target, activityEntitiesByObjectType);
    });

    var objectTypes = _.keys(activityEntitiesByObjectType);
    var errOccurred = null;
    var numProcessed = 0;

    /*!
     * Handles the callback for when a set of entities for an object type have been transformed.
     */
    var _handleTransform = function(err, objectType, transformedActivityEntities) {
        if (errOccurred) {
            // Do nothing because we've already err'd
            return;
        } else if (err) {
            errOccurred = err;
            return callback(err);
        }

        // Record the transformed entities
        transformedActivityEntitiesByObjectType[objectType] = transformedActivityEntities;

        numProcessed++;
        if (numProcessed === objectTypes.length) {
            _transformActivities(transformedActivityEntitiesByObjectType, activities);
            return callback();
        }
    };

    // Transform all entities of each object type and activity
    if (objectTypes.length > 0) {
        objectTypes.forEach(function(objectType) {
            var activityEntityTransformers = ActivityRegistry.getRegisteredActivityEntityTransformers();
            var transformer = activityEntityTransformers[objectType] || _defaultActivityEntityTransformer;
            transformer(ctx, activityEntitiesByObjectType[objectType], function(err, transformedActivityEntities) {
                if (err) {
                    return callback(err);
                }

                // Ensure all transformed entities have at least the objectType and the oae:id
                _.keys(transformedActivityEntities).forEach(function(activityId) {
                    _.keys(transformedActivityEntities[activityId]).forEach(function(entityId) {
                        transformedActivityEntities[activityId][entityId].objectType = objectType;
                        transformedActivityEntities[activityId][entityId][ActivityConstants.properties.OAE_ID] = entityId;
                    });
                });

                return _handleTransform(err, objectType, transformedActivityEntities);
            });
        });
    } else {
        return callback();
    }
};

/**
 * Categorize the given entity into the appropriate {objectType -> activityId} location of the activityEntitiesByObjectType
 * object. If the given entity is actually a collection of entities, they will all be collected individually and stored on the
 * activityEntitiesByObjectType object as well.
 *
 * The returned `activityEntitiesByObjectType` parameter is a deep hash that looks like the following:
 *
 * ```javascript
 *  {
 *      '<objectType0>': {
 *          '<activityId0>': {
 *              '<entityId0>': { <Persistent Entity> },
 *              ...
 *          },
 *          ...
 *      },
 *      ..
 *  }
 * ```
 * Or, more concretely:
 *
 * ```javascript
 *  {
 *      'user': {
 *          '123456789:PTweoiru': {
 *             'u:oae:JKeojwd_': { <User Entity> },
 *             'u:oae:NFi_df-': { <User Entity> }
 *          },
 *          '123456787:Dfwiuvq': { <User Entity> }
 *      },
 *      'content': {
 *          '123456789:PTweoiru': {
 *              'c:oae:UyeODow7': { <Content Entity> },
 *          }
 *      },
 *      'group': {
 *          '123456787:Dfwiuvq': { <Group Entity> }
 *      }
 *  }
 * ```
 *
 * @param   {String}    activityId                      The ID of the activity to which the entity belongs
 * @param   {Object}    entity                          The persistent entity that should be categorized into the activityEntitiesByObjectType object
 * @param   {String}    entity.objectType               The objectType of the entity, as specified by the ActivityStrea.ms Object objectType definition
 * @param   {Object}    activityEntitiesByObjectType    An object of: objectType -> activityId -> entityId -> persistentEntity that holds the categorized entities of all the activities in a stream request
 * @api private
 */
var _getActivityEntitiesByObjectType = function(activityId, entity, activityEntitiesByObjectType) {
    if (entity && entity.objectType !== 'collection') {
        activityEntitiesByObjectType[entity.objectType] = activityEntitiesByObjectType[entity.objectType] || {};
        activityEntitiesByObjectType[entity.objectType][activityId] = activityEntitiesByObjectType[entity.objectType][activityId] || {};
        activityEntitiesByObjectType[entity.objectType][activityId][entity[ActivityConstants.properties.OAE_ID]] = entity;
    } else if (entity) {
        // This is actually a collection of more entities. Iterate and collect them.
        entity[ActivityConstants.properties.OAE_COLLECTION].forEach(function(entity) {
            activityEntitiesByObjectType[entity.objectType] = activityEntitiesByObjectType[entity.objectType] || {};
            activityEntitiesByObjectType[entity.objectType][activityId] = activityEntitiesByObjectType[entity.objectType][activityId] || {};
            activityEntitiesByObjectType[entity.objectType][activityId][entity[ActivityConstants.properties.OAE_ID]] = entity;
        });
    }
};

/**
 * Transform all the activities into activities that can be displayed in an activity stream. This involves replacing all top-level
 * entities (e.g., actor, object, target) in the activities with those that have been transformed by the transformers.
 *
 * @param   {Object}    transformedActivityEntitiesByObjectType     An object of: objectType -> activityId -> entityId -> transformedEntity that holds the categorized entities of all the activities in a stream request
 * @param   {Object[]}  activities                                  A list of raw activities to be delivered in a stream. These activities are to be transformed by this method such that they may be delivered to the UI
 * @api private
 */
var _transformActivities = function(transformedActivityEntitiesByObjectType, activities) {
    activities.forEach(function(activity) {
        var activityId = activity[ActivityConstants.properties.OAE_ACTIVITY_ID];
        activity.actor = _transformEntity(transformedActivityEntitiesByObjectType, activityId, activity.actor);
        activity.object = _transformEntity(transformedActivityEntitiesByObjectType, activityId, activity.object);
        activity.target = _transformEntity(transformedActivityEntitiesByObjectType, activityId, activity.target);
    });
};

/**
 * Transform the given entity with the data in transformedActivityEntitiesByObjectType.
 *
 * @param   {Object}    transformedActivityEntitiesByObjectType     An object of: objectType -> activityId -> entityId -> transformedEntity that holds the categorized entities of all the activities in a stream request
 * @param   {String}    activityId                                  The ID of the activity to which the entity belongs
 * @param   {Object}    entity                                      The persistent activity entity that should be transformed with the transformed entities object
 * @api private
 */
var _transformEntity = function(transformedActivityEntitiesByObjectType, activityId, entity) {
    if (!entity) {
        return entity;
    }

    var entityId = entity[ActivityConstants.properties.OAE_ID];
    if (entity.objectType !== 'collection') {
        return transformedActivityEntitiesByObjectType[entity.objectType][activityId][entityId];
    } else {
        var transformedCollection = [];
        entity[ActivityConstants.properties.OAE_COLLECTION].forEach(function(collectionEntity) {
            var transformedEntity = _transformEntity(transformedActivityEntitiesByObjectType, activityId, collectionEntity);
            if (transformedEntity) {
                transformedCollection.push(transformedEntity);
            }
        });
        entity[ActivityConstants.properties.OAE_COLLECTION] = transformedCollection;
        return entity;
    }
};


/**
 * By default, a transformation can just pick the oae:id and the objectType of an entity when delivering to an activity stream.
 *
 * For more information on these parameters, please @see #registerActivityEntityTransformer
 * @api private
 */
var _defaultActivityEntityTransformer = function(ctx, activityEntities, callback) {
    var transformedEntities = {};
    _.each(activityEntities, function(entities, activityId) {
        transformedEntities[activityId] = transformedEntities[activityId] || {};
        _.each(entities, function(entity, entityKey) {
            // Pick just the objectType and the oae:id of the entity for the transformed entity.
            transformedEntities[activityId][entityKey] = _.pick(entity, 'objectType', ActivityConstants.properties.OAE_ID);
        });
    });

    return callback(null, transformedEntities);
};

