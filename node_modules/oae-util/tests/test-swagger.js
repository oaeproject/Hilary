/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

before(function() {
    anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.localhost.host);
});

describe('Swagger', function() {

    describe('Resource List', function() {

        /**
         * Verifies that we get a Swagger resource list with the expected contents
         */
        it('verify get resource list', function(callback) {
            RestAPI.Doc.getSwaggerResources(anonymousRestContext, function(err, data) {
                assert.ok(!err);
                assert.ok(_.isString(data.apiVersion));
                assert.ok(_.isString(data.swaggerVersion));
                assert.ok(_.isArray(data.apis));
                _.each(data.apis, function(api) {
                    assert.ok(_.isString(api.path));
                    assert.ok(_.isString(api.description));
                });
                callback();
            });
        });
    });

    describe('API Declarations', function() {
        var primitives = [
            'integer',
            'long',
            'float',
            'double',
            'string',
            'byte',
            'boolean',
            'date',
            'dateTime',
            'int32',
            'int64',
            'number',
            'date-time'
        ];

        /**
         * Verifies that we can get API declarations for all defined routes
         */
        it('verify get api declarations', function(callback) {
            RestAPI.Doc.getSwaggerResources(anonymousRestContext, function(err, resources) {
                assert.ok(!err);
                assert.ok(resources.apis);
                var completed = 0;
                _.each(resources.apis, function(api) {
                    // Strip the leading '/'
                    var id = api.path.substr(1);
                    RestAPI.Doc.getSwaggerApi(anonymousRestContext, id, function(err, data) {
                        assert.ok(!err);
                        assert.ok(data.apiVersion);
                        assert.ok(data.swaggerVersion);
                        assert.equal(data.basePath, 'http://localhost:2001/api');
                        assert.equal(data.resourcePath, id + '/');
                        assert.ok(_.isArray(data.apis));
                        assert.ok(_.isObject(data.models));
                        // Verify models
                        _.each(data.models, function(model) {
                            assert.ok(_.isString(model.id), 'Model id must be a String');
                            assert.ok(_.isArray(model.required), 'Model required must be an Array');
                            assert.ok(_.isObject(model.properties), 'Model properties must be an Object');
                            _.each(model.required, function(id) {
                                assert.ok(_.isString(id), 'Required property ids must be Strings');
                                assert.ok(model.properties[id], 'Required property "' + id + '" is not defined');
                            });
                            _.each(model.properties, function(property) {
                                assert.ok(_.isString(property.type));
                                if (property.type === 'array') {
                                    assert.ok(_.isObject(property.items), 'Arrays must have an item type');
                                    // Arrays have a type xor $ref
                                    assert.ok(_.has(property.items, 'type') ^ _.has(property.items, '$ref'), 'Item must have a type or a $ref but not both');
                                    if (property.items.type) {
                                        assert.ok(primitives.indexOf(property.items.type) !== -1, 'Array item type "' + property.items.type + '" is not a primitive type, did you mean $ref');
                                    } else {
                                        // Complex type, make sure there's a model for it
                                        assert.ok(data.models[property.items['$ref']], 'Array item $ref "' + property.items['$ref'] + '" is not defined in models');
                                    }
                                } else if (primitives.indexOf(property.type) === -1) {
                                    // Complex type, make sure there's a model for it
                                    assert.ok(data.models[property.type], 'Property type "' + property.type + '" is not defined in models');
                                }
                            });
                        });

                        // Verify apis
                        _.each(data.apis, function(api) {
                            assert.ok(_.isObject(api), 'APIs must be Objects');
                            assert.ok(_.isString(api.path), 'API paths must be Strings');
                            assert.ok(_.isArray(api.operations), 'API operations must be an Array');
                            _.each(api.operations, function(operation) {
                                assert.ok(_.isObject(operation), 'Operations must be Objects');
                                assert.ok(_.isString(operation.path), 'Operation path must be a String');
                                var verbs = ['GET', 'POST', 'PUT', 'DELETE'];
                                assert.ok(verbs.indexOf(operation.method) !== -1, 'Operation method "' + operation.method + '" is not one of "GET", "POST", "PUT", or "DELETE"');
                                assert.ok(_.isString(operation.nickname), 'Operation nickname must be a String');
                                assert.ok(operation.nickname.indexOf(' ') === -1, 'Operation nickname "' + operation.nickname + '" cannot contain spaces');
                                assert.ok(_.isString(operation.summary), 'Operation summary must be a String');
                                assert.ok(_.isString(operation.responseClass), 'Operation responseClass must be a String');
                                var responseClass = operation.responseClass.replace(/^List\[/, '').replace(/\]/, '');
                                if (primitives.indexOf(responseClass) === -1) {
                                    assert.ok(data.models[responseClass], 'ResponseClass type "' + responseClass + '" is undefined in models');
                                }

                                assert.ok(_.isArray(operation.parameters), 'Operation parameters must be an Array');
                                _.each(operation.parameters, function(parameter) {
                                    assert.ok(_.isString(parameter.name), 'Parameter name must be a String');
                                    assert.ok(_.isString(parameter.description), 'Parameter description must be a String');
                                    var dataType = parameter.dataType.replace(/^List\[/, '').replace(/\]/, '');
                                    if (primitives.indexOf(dataType) === -1) {
                                        assert.ok(data.models[dataType], 'Parameter dataType "' + dataType + '" is undefined in models');
                                    }
                                    assert.ok(_.isBoolean(parameter.required), 'Parameter required must be a Boolean');
                                    assert.ok(_.isBoolean(parameter.allowMultiple), 'Parameter allowMultiple must be a Boolean');
                                    var paramTypes = ['body', 'path', 'query', 'form', 'header'];
                                    assert.ok(paramTypes.indexOf(parameter.paramType !== -1), 'Param type "' + parameter.paramType + '" is not one of "body", "path", "query", "form", or "header"');
                                    if (parameter.paramType === 'path') {
                                        assert.ok(api.path.indexOf('{' + parameter.name + '}') !== 0, 'Path parameter "' + parameter.name + '" does not appear in api path');
                                    }

                                    if (['path', 'query', 'header'].indexOf(parameter.paramType) !== -1) {
                                        assert.ok(primitives.indexOf(parameter.dataType) !== -1, parameter.paramType + ' parameter "' + parameter.name + '" must be of a primitive type');
                                    }
                                });
                            });
                        });

                        completed++;
                        if (completed === resources.apis.length) {
                            callback();
                        }
                    });
                });
            });
        });
    });
});
