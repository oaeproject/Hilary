/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var ConfigAPI = require('oae-config');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');

describe('Config Aggregator', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used for anonymous requests on the global tenant
    var anonymousGlobalRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the global admin, tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        // Fill up tenant admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        callback();
    });

    describe('Configuration', function() {

        /**
         * Test that verifies that the global configuration can be retrieved
         */
        it('verify get global config', function(callback) {
            RestAPI.Config.getConfig(globalAdminRestContext, null, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                assert.equal(config['oae-authentication'].title, 'OAE Authentication Module');
                callback();
            });
        });

        /**
         * Test that verifies that a global configuration value can be persisted
         */
        it('verify set global config value', function(callback) {
            RestAPI.Config.setConfig(globalAdminRestContext, null, 'oae-authentication/twitter/enabled', false, function(err) {
                assert.ok(!err);

                // Validate that the change has been made
                RestAPI.Config.getConfig(globalAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter'].elements['enabled'].defaultValue, false);
                    
                    // Validate that the tenant admin can see this as well
                    RestAPI.Config.getConfig(camAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter'].elements['enabled'].defaultValue, false);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant configuration value can be persisted
         */
        it('verify set tenant config value', function(callback) {
            RestAPI.Config.setConfig(camAdminRestContext, null, 'oae-authentication/twitter/enabled', true, function(err) {
                assert.ok(!err);

                // Validate that the change has been made and has overriden the global config
                RestAPI.Config.getConfig(camAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter'].elements['enabled'].defaultValue, true);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that the tenant configuration can be retrieved through the global server
         */
        it('verify get tenant config through global server', function(callback) {
            RestAPI.Config.getConfig(globalAdminRestContext, 'camtest', function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                assert.equal(config['oae-authentication'].title, 'OAE Authentication Module');
                callback();
            });
        });

        /**
         * Test that verifies that a tenant configuration value can be persisted through the global server
         */
        it('verify set tenant config value through global server', function(callback) {
            RestAPI.Config.setConfig(globalAdminRestContext, 'camtest', 'oae-authentication/twitter/enabled', false, function(err) {
                assert.ok(!err);

                // Validate that the change has been made and has overriden the global config
                RestAPI.Config.getConfig(globalAdminRestContext, 'camtest', function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter'].elements['enabled'].defaultValue, false);
                    callback();
                });
            });
        });

        it('verify validation', function(callback) {
            // Missing configField
            RestAPI.Config.setConfig(globalAdminRestContext, null, null, false, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Missing configValue
                RestAPI.Config.setConfig(globalAdminRestContext, null, 'oae-authentication/twitter/enabled', null, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Try changing the config with an invalid tenant id
                    RestAPI.Config.setConfig(globalAdminRestContext, ' ', 'oae-authentication/twitter/enabled', 'moops', function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Try changing the tenant config as a non-admin
                        RestAPI.Config.setConfig(anonymousCamRestContext, null, 'oae-authentication/twitter/enabled', 'moops', function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Try changing the global config as a non-admin
                            RestAPI.Config.setConfig(anonymousGlobalRestContext, null, 'oae-authentication/twitter/enabled', 'moops', function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // Verify getting tenant configuration through the global server needs a valid ID
                                RestAPI.Config.getConfig(globalAdminRestContext, ' ', function(err, config) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a single configuration value can be retrieved from the cached configuration
         */
        it('verify get single config value', function(callback) {
            assert.equal(AuthenticationConfig.getValue('camtest', 'twitter', 'enabled'), false);
            callback();
        });

        /**
         * Test that verifies that retrieving a single value from the cached configuration needs all required parameters to be passed through
         */
        it('verify get single config value requires parameters', function(callback) {
            var AuthenticationConfigTest = ConfigAPI.config();
            assert.equal(AuthenticationConfigTest.code, 400);
            assert.equal(AuthenticationConfigTest.msg, 'Missing the moduleId parameter');
            assert.equal(AuthenticationConfig.getValue().code, 400);
            assert.equal(AuthenticationConfig.getValue().msg, 'Missing the tenantid parameter');
            assert.equal(AuthenticationConfig.getValue('camtest').code, 400);
            assert.equal(AuthenticationConfig.getValue('camtest').msg, 'Missing the feature parameter');
            assert.equal(AuthenticationConfig.getValue('camtest', 'twitter').code, 400);
            assert.equal(AuthenticationConfig.getValue('camtest', 'twitter').msg, 'Missing the element parameter');
            callback();
        });

    });

});
