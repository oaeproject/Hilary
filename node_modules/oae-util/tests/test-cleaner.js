/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var mkdirp = require('mkdirp');
var shell = require('shelljs');

var Cleaner = require('oae-util/lib/cleaner');

describe('Content', function() {

    describe('Cleaner', function() {

        var dir = process.env.TMP || process.env.TMPDIR || process.env.TEMP || '/tmp' || process.cwd();
        dir += '/oae/tests';

        /**
         * Sets up a directory with some dummy files.
         */
        beforeEach(function(callback) {
            mkdirp(dir, function(err) {
                assert.ok(!err);

                // Dump some files in there.
                fs.writeFileSync(dir + '/a', 'a', 'utf8');
                fs.writeFileSync(dir + '/b', 'b', 'utf8');
                fs.writeFileSync(dir + '/c', 'c', 'utf8');
                setTimeout(callback, 1000);
            });
        });

        /**
         * In case one of the tests fails, we stop the cleaner here.
         */
        afterEach(function() {
            Cleaner.stop(dir);
        });

        /**
         * Remove our test directory if all tests are done.
         */
        after(function() {
            shell.rm('-rf', dir);
        });

        /**
         * Verify that the files get removed.
         */
        it('verify files get removed', function(callback) {
            Cleaner.start(dir, 1);
            Cleaner.once('cleaned', function(cleanedDir) {
                assert.equal(cleanedDir, dir);
                fs.readdir(dir, function(err, files) {
                    assert.ok(!err);
                    assert.equal(files.length, 0);
                    callback();
                });
            });
        });

        /**
         * Verify that only old files get removed.
         */
        it('verify only old files get removed', function(callback) {
            // Create a brand new file.
            fs.writeFileSync(dir + '/d', 'd', 'utf8');

            // Remove files that are older than a second (a, b and c)
            Cleaner.start(dir, 1);

            // Stop removing immediately (ie: run only once)
            Cleaner.stop(dir);

            Cleaner.once('cleaned', function(cleanedDir) {
                assert.equal(cleanedDir, dir);
                fs.readdir(dir, function(err, files) {
                    assert.ok(!err);
                    assert.equal(files.length, 1);
                    assert.equal(files[0], 'd');
                    callback();
                });
            });
        });
    });
});
