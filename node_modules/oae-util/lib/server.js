/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var express = require('express');
var RedisStore = require('connect-redis')(express);

var Telemetry = require('oae-telemetry').telemetry('server');
var log = require('oae-logger').logger('server');

/**
 * Starts an express server on the specified port. This will be done for the global admin server, as well
 * as for the tenant server.
 * 
 * @param  {Number}     port        The port on which the express server should be started
 * @param  {Object}     config      JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 * @return {Express}                The created express server
 */
module.exports.setupServer = function(port, config) {
    // Create the express server
    var server = express();
    // Make it listen for requests on the specified port
    server.listen(port);

    // Don't output pretty JSON,
    server.set('json spaces', 0);

    // We'll be using cookies to hash the principalId.
    // Signing of the cookie will be done by the session middleware.
    server.use(express.cookieParser());
    server.use(express.bodyParser());

    // This needs to come BEFORE passport and AFTER cookieParser.
    // The secret will be used to sign the cookie
    // We'll use Redis as a store for our sessions.
    var redisStore = new RedisStore({
        'host': config.redis.host,
        'port': config.redis.port,
        'pass': config.redis.pass,
        'db': config.redis.dbIndex
    });
    server.use(express.session({'secret': 'this secret is so secret that its totally secret', 'store': redisStore}));

    // Add telemetry before we do anything else.
    server.use(function(req, res, next) {
        req.telemetryUrl = req.url;
        Telemetry.request(req, res);
        next();
    });

    return server;
};

/**
 * This method is used to bind server functionality after all modules have had an opportunity to do so. This can be useful for things such
 * as:
 *
 *  * Response code logging / telemetry
 *  * Default "catch-all" error handling
 * 
 * @param  {Express}    server      The express server for which the initialized should be finalized
 */
module.exports.postInitializeServer = function(server) {
    // explicitly apply the routes to the end
    server.use(server.router);

    // catch-all error handler
    server.use(function(err, req, res, next) {
        Telemetry.incr('error');
        log(req.ctx).error({
            err: err,
            req: req,
            res: res
        }, 'Unhandled error in the request chain, caught at the default error handler.');
        res.send(500, 'An unexpected error occurred.');
    });
};
