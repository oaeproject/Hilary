/*!
 * Copyright 2016 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var log = require('oae-logger').logger('oae-zencoder');
var PreviewContext = require('oae-preview-processor/lib/model').PreviewContext;
var PreviewProcessorAPI = require('oae-preview-processor');
var PreviewUtil = require('oae-preview-processor/lib/util');

var ZencoderDAO = require('./internal/dao');

/**
 * Save data for the completed preview when encoding has been completed.
 *
 * @param  {Object}     notification    The notification data received from Zencoder
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */

var encodingCompleted = module.exports.encodingCompleted = function(notification, callback) {
    var job = notification.job;
    var output = notification.output;
    var zencoderId = output.id.toString();

    if (job.state !== 'finished') {
        return callback({'code': 500,'msg': 'Zencoder could not transcode video with zencoderId ' + zencoderId});
    } else if (!output.url || !job.pass_through || !output.thumbnails) {
        return callback({'code': 500, 'msg': 'Received malformed notification from Zencoder'});
    }

    ZencoderDAO.getContentRevisionId(zencoderId, function(err, contentRevision) {
        if (err) {
            return callback(err);
        }

        return _createAndSavePreviews(contentRevision, output, job['pass_through'], callback);
    });
};

/**
 * Create and save the previews
 *
 * @param  {Object}     contentRevision   An object containing content item and revision IDs
 * @param  {Object}     output            The output information from Zencoder
 * @param  {String}     key               The path to the video file on Amazon S3
 * @param  {Function}   callback          Standard callback function
 * @param  {Object}     callback.err      An error that occurred, if any
 * @api private
 */
var _createAndSavePreviews = function(contentRevision, output, key, callback) {
    var contentId = contentRevision.contentId;
    var ctx = new PreviewContext(PreviewProcessorAPI.getConfiguration(), contentId, contentRevision.revisionId);

    log().info('Received encoding completed notification from Zencoder for contentId %s', contentId);

    ctx.login(function(err) {
        if (err) {
            return callback(err);
        }

        ctx.getContentData(function(err) {
            if (err) {
                return callback(err);
            } else if (ctx.revision.previews.total > 0) {
                return callback({'code': 500, 'msg': 'Previews have already been created for this revision'});
            }

            ctx.addPreviewMetadata('videoKey', key);

            var thumbnail = _.findWhere(output.thumbnails, {'label': 'base'});

            if (thumbnail || _.isArray(thumbnail.images)) {
                return _createThumbnails(ctx, _.first(thumbnail.images), callback);
            } else {
                // If there are no thumbnail images, we just save the video url
                return ctx.savePreviews(callback);
            }
        });
    });
};


/**
 * Create and save thumbnails
 *
 * @param  {Object}     ctx               The preview context for this content item
 * @param  {Object}     thumbnailImage    The thumbnail image data from Zencoder
 * @param  {Function}   callback          Standard callback function
 * @param  {Object}     callback.err      An error that occurred, if any
 * @api private
 */
var _createThumbnails = function(ctx, thumbnailImage, callback) {
    if (!thumbnailImage.url) {
        return callback();
    }
    PreviewUtil.downloadRemoteFile(thumbnailImage.url, util.format('%s/base.png', ctx.baseDir), function(err, path) {
        if (err) {
            return callback(err);
        }
        PreviewUtil.generatePreviewsFromImage(ctx, path, {'removeInput': true}, function(err) {
            if (err) {
                return callback(err);
            }
            log().info('Saved preview and thumbnails for video content item %s', ctx.content.contentId);
            return ctx.savePreviews();
        });
    });
};