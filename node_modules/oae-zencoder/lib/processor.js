/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');
var request = require('request');
var util = require('util');

var ContentUtil = require('oae-content/lib/internal/util');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-zencoder');
var PreviewConstants = require('oae-preview-processor/lib/constants');

var ZencoderDAO = require('./internal/dao');
var ZencoderUtil = require('./util');

/**
 * @borrows Interface.test as Videos.test
 */
var test = module.exports.test = function(ctx, content, callback) {
    if (content.resourceSubType === 'file') {
        if (_isVideo(ctx.revision.mime) || _isAudio(ctx.revision.mime)) {
            return callback(null, 30);
        }
    }

    return callback(null, -1);
};

/**
 * @borrows Interface.generatePreviews as Videos.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, content, callback) {
    var revision = ctx.revision;

    if (revision.previews && revision.previews.video) {
        return callback();
    }

    log().info('Generating previews for video file: %s', content.id);
    var tenant = content.tenant;

    var downloadPath = ContentUtil.getSignedDownloadUrl(new Context(tenant), revision.uri, 6000, 6000);

    // Create a Zencoder job
    ZencoderUtil.job(tenant.alias, downloadPath, content.id, ctx.revisionId, _isVideo(revision.mime), function(err, res, body) {
        if (_checkError(err, 'Error POSTing the video to Zencoder for encoding', res, body, callback)) {
            return callback(err);
        }

        var output = body.outputs[0];

        // Save the mediaId to Cassandra so we can use it to refresh thumbnails later
        ZencoderDAO.saveContentRevisionId(output.id.toString(), content.id, ctx.revisionId, function(err) {
            if (err) {
                return callback(err);
            }

            ctx.setStatus(ContentConstants.previews.PENDING, function(err) {
                if (err) {
                    return callback(err);
                }

                return callback(null, false, true);
            });
        });
    });
};

/**
 * Determine whether or not the given mimeType is that of a video
 *
 * @param  {String}     mimeType        The mimetype to test
 * @return {Boolean}                    `true` or `false`, indicating whether or not the given mime type indicates a video file
 * @api private
 */
var _isVideo = function(mimeType) {
    return (PreviewConstants.TYPES.VIDEO.indexOf(mimeType) !== -1);
};

/**
 * Determine whether or not the given mimeType is that of an audio
 *
 * @param  {String}     mimeType        The mimetype to test
 * @return {Boolean}                    `true` or `false`, indicating whether or not the given mime type indicates an audio file
 * @api private
 */
var _isAudio = function(mimeType) {
    return (PreviewConstants.TYPES.AUDIO.indexOf(mimeType) !== -1);
};

/**
 * Check if the given response indicates an error that occurred. If so, this method will invoke the callback and
 * return `true`. Otherwise, `false` will be returned without invoking the callback.
 *
 * @param  {Object}     err             An error that occurred, if any
 * @param  {Response}   response        The ExpressJS response to check for errors
 * @param  {String}     body            The body of the response
 * @param  {String}     message         The log message for the log entry if this is an error
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 * @return {Boolean}                    `true` if the input represents an error, `false` otherwise
 * @api private
 */
var _checkError = function(err, message, res, body, callback) {
    if (err) {
        log().error({'err': err}, message);
        callback(err);
        return true;
    } else if (res.statusCode >= 400) {
        var responseErr = {'code': res.statusCode, 'msg': message, 'body': body};
        log().error({'err': responseErr}, message);
        callback(responseErr);
        return true;
    }

    return false;
};
