/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var reCaptcha = require('recaptcha-async').reCaptcha;

var AuthzAPI = require('oae-authz');

var PrincipalsAPI = require('./api');

module.exports = function(tenant) {

    // @todo, get these from the tenant config.
    var captchaKeys = {
        'public': '6LcFWdYSAAAAAFRwq3uKrt134ujkWsIpWJX-HdoS',
        'private': '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs'
    };

    ///////////
    // USERS //
    ///////////

    tenant.server.get('/api/me', function(req, res) {
        PrincipalsAPI.getMe(req.ctx, req.user, function(err, meData) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, meData);
        });
    });

    tenant.server.post('/api/user/create', function(req, res) {
        var createUser = function() {
            PrincipalsAPI.createUser(req.ctx, req.body.username, req.body.password, req.body.visibility, req.body.locale, req.body.timezone, req.body.firstName, req.body.lastName, req.body.displayName, function(err, user) {
                if (err) {
                    return res.send(err.code, err.msg);
                }

                res.send(201, user);
            });
        };

        if (req.ctx.user() === null) {
            // An anonymous user, do the recaptcha check.
            var recaptcha = new reCaptcha();
            recaptcha.on('data', function (reCaptchaResponse) {
                if (reCaptchaResponse.is_valid) {
                    createUser();
                } else {
                    return res.send(400, {'msg': 'Invalid reCaptcha token.'});
                }
            });

            recaptcha.checkAnswer(captchaKeys.private,
                                    req.connection.remoteAddress,
                                    req.body.recaptcha_challenge,
                                    req.body.recaptcha_response);
        } else if (req.ctx.user().isAdmin(tenant.alias)) {
            // If the current user is an admin,
            // don't bother with reCaptcha.
            createUser();
        } else {
            // Non-admin users cannot create accounts.
            return res.send(401);
        }
    });

    tenant.server.get('/api/user/:id', function(req, res) {
        PrincipalsAPI.getBasicProfile(req.ctx, req.params.id, function(err, profile) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            res.send(200, profile);
        });
    });

    tenant.server.post('/api/user/:id', function(req, res) {
        PrincipalsAPI.updateUser(req.ctx, req.params.id, req.body, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            res.send(200, '');
        });
    });

    tenant.server.get('/api/user/:id/memberships', function(req, res) {
        var limit = parseInt(req.query.limit || 10, 10);
        PrincipalsAPI.memberOf(req.ctx, req.params.id, req.query.start, limit, function(err, memberships) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            res.send(200, {'results': memberships});
        });
    });

    tenant.server.post('/api/user/:id/password', function(req, res) {
        PrincipalsAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            res.send(200);
        });
    });

    ///////////////
    //  GROUPS   //
    ///////////////

    tenant.server.post('/api/group/create', function(req, res) {
        var managers = req.body.managers || [];
        var members = req.body.members || [];
        if (managers && !Array.isArray(managers)) {
            managers = [managers];
        }
        if (members && !Array.isArray(members)) {
            members = [members];
        }

        var memberHash = {};
        for (var i = 0; i < managers.length; i++) {
            memberHash[managers[i]] = 'manager';
        }
        for (var i = 0; i < members.length; i++) {
            memberHash[members[i]] = 'member';
        }

        PrincipalsAPI.createGroup(req.ctx, req.body.alias, req.body.name, req.body.description, req.body.visibility, req.body.joinable, memberHash, {}, function(err, groupId) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            PrincipalsAPI.getGroup(req.ctx, groupId, function(err, group) {
                if (err){
                    return res.send(err.code, err.msg);
                }
                res.send(201, group);
            });
        });
    });

    tenant.server.get('/api/group/memberships/:id', function(req, res) {
        // Get the groups for the provided users.
        PrincipalsAPI.memberOf(req.ctx, req.params.id, req.query.start, req.query.limit, function(err, groups) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, groups);
        })
    });

    tenant.server.get('/api/group/exists/:alias', function(req, res) {
        PrincipalsAPI.getGroupByAlias(req.ctx, req.params.alias, function(err, group) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, group);
        });
    });

    tenant.server.get('/api/group/:id', function(req, res) {
        PrincipalsAPI.getFullGroupProfile(req.ctx, req.params.id, function(err, group) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, group);
        });
    });

    tenant.server.post('/api/group/:id', function(req, res) {
        // Get the fields we wish to update.
        PrincipalsAPI.updateGroup(req.ctx, req.params.id, req.body, function(err, group) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

    tenant.server.get('/api/group/:id/members', function(req, res) {
        var limit = req.query.limit || 10;
        PrincipalsAPI.getGroupMembers(req.ctx, req.params.id, req.query.start, limit, function(err, members) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, members);
        });
    });

    tenant.server.post('/api/group/:id/members', function(req, res) {
        // Convert the string 'false' to a proper boolean.
        var members = req.body;
        var principals = _.keys(members);
        for (var i = 0; i < principals.length; i++) {
            if (members[principals[i]] === 'false') {
                members[principals[i]] = false;
            }
        }
        PrincipalsAPI.setGroupMembers(req.ctx, req.params.id, members, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

};
