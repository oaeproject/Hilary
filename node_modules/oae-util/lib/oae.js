/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Modules = require('./modules');
var Server = require('./server');
var log = require('oae-logger').logger('oae');

/////////////////////////////
// Configuration variables //
/////////////////////////////

// Variables in which the global admin server and the tenant server will be cached
module.exports.globalAdminServer = null;
module.exports.tenantServer = null;

///////////////////////////
// Setting up the server //
///////////////////////////

/**
 * This function will initialize Sakai OAE. First of all, the global  and run the global admin server, as well as execute the application lifecycle of all the
 * OAE modules in the system. This will invoke auxilliary initialization procedures in the proper order specified in the package.json file.
 *
 * When initializing the container, each OAE module that has a lib/init.js file will be required and the export object will be executed
 * directly.
 * 
 * After this, the tenant server will be started, which will be used to serve all of the REST request for actual tenants. The current tenant will be
 * determined based on the HOST header in the request.
 * 
 * @param  {Object}     config          JSON object containing configuration values for Cassandra, Redis, logging and telemetry
 * @param  {Function}   callback        Standard callback function executed everything has started up appropriately
 * @param  {Object}     callback.err    An error that occurred, if any.
 */
module.exports.init = function(config, callback) {
    callback = callback || function() {};

    log().info('Starting Sakai OAE');

    // Set up application-level error handler
    process.on('uncaughtException', function(err) {
        log().error({ err: err }, 'An uncaught exception was raised to the application.');
    });

    // Fire up the global admin server
    module.exports.globalAdminServer = Server.setupServer(config.servers.globalAdminPort, config);
    // Fire up the tenant server
    module.exports.tenantServer = Server.setupServer(config.servers.tenantPort, config);

    // Initialize the modules and their CFs, as well as registering the Rest endpoints
    Modules.bootstrapModules(config, function(err) {
        log().info('All modules are bootstrapped, initializing servers.');
        if (err) {
            return callback(err);
        }

        Server.postInitializeServer(module.exports.globalAdminServer);
        Server.postInitializeServer(module.exports.tenantServer);
        callback();
    });
};

