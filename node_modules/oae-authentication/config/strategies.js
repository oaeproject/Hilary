/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Fields = require('oae-config/lib/fields');

module.exports = {
    'title': 'OAE Authentication Module',
    'local': {
        'name': 'Local Authentication',
        'description': 'Allow local authentication for tenant',
        'elements': {
            'allowAccountCreation': new Fields.Bool('Local Account Creation', 'Allow users to create their own account', true),
            'enabled': new Fields.Bool('Local Authentication Enabled', 'Allow local authentication for tenant', true)
        }
    },
    'google': {
        'name': 'Google Authentication',
        'description': 'Allow Google authentication for tenant',
        'elements': {
            'enabled': new Fields.Bool('Google Authentication Enabled', 'Allow Google authentication for tenant', false),
            'key': new Fields.Text('Google client ID', 'Google client ID', '822036948319.apps.googleusercontent.com', {'valueVisibility': 'private'}),
            'secret': new Fields.Text('Google client secret', 'Google client secret', 'b5ccr5noy0j_gzj4kj42uuwm', {'valueVisibility': 'private'}),
            'hostedDomain': new Fields.Text('Google hosted domain', 'Google hosted domain. e.g., Google apps domain (optional)', '')
        }
    },
    'twitter': {
        'name': 'Twitter Authentication',
        'description': 'Allow Twitter authentication for tenant',
        'elements': {
            'enabled': new Fields.Bool('Twitter Authentication Enabled', 'Allow Twitter authentication for tenant', true),
            'key': new Fields.Text('Twitter consumer key', 'Twitter consumer key', '8eET3GSaCVE5GVd5kZsw', {'valueVisibility': 'private'}),
            'secret': new Fields.Text('Twitter consumer secret', 'Twitter consumer secret', 'OIqx7h36fMWqc0Cb3tUI1jzp7bzCbE2F3zJ0Gladc', {'valueVisibility': 'private'})
        }
    },
    'facebook': {
        'name': 'Facebook Authentication',
        'description': 'Allow Facebook authentication for tenant',
        'elements': {
            'enabled': new Fields.Bool('Facebook Authentication Enabled', 'Allow Facebook authentication for tenant', false),
            'appid': new Fields.Text('Facebook App ID', 'Facebook App ID', '194758077323671', {'valueVisibility': 'private'}),
            'secret': new Fields.Text('Secret', 'Secret', '663d14e7f9ad0baeb4e43390825a659f', {'valueVisibility': 'private'})
        }
    },
    'shibboleth': {
        'name': 'Shibboleth Authentication',
        'description': 'Allow Shibboleth authentication for tenant',
        'tenantOverride': true,
        'elements': {
            'enabled': new Fields.Bool('Shibboleth Authentication Enabled', 'Allow Shibboleth authentication for tenant', false),
            'name': new Fields.Text('Name', 'A name that users will recognize as their identity provider', ''),
            'idpUrl': new Fields.Text('Identity Provider URL', 'The URL where users should be redirected to. Usually ends in /Redirect/SSO', '', {'valueVisibility': 'private'}),
            'idpPublicKey': new Fields.Text('Identity Provider public key', 'The public key that the IdP uses to sign SingleSignOnService (HTTP-POST) messages ', '', {'valueVisibility': 'private'}),
            'spEntityID': new Fields.Text('Issuer', 'The entity ID under which this application can access the Identity Provider.', '', {'valueVisibility': 'private'}),
            'spCertificate': new Fields.Text('Certificate', 'Your X509 certificate', '', {'valueVisibility': 'private'}),
            'spCertificateSubjectName': new Fields.Text('Certificate subject name', 'Your X509 certificate subject name', '', {'valueVisibility': 'private'}),
            'spPrivateKey': new Fields.Text('Private Key', 'A private key that can be used to sign messages', '', {'valueVisibility': 'private'})
        }
    },
    'cas': {
        'name': 'CAS Authentication',
        'description': 'Allow CAS authentication for tenant',
        'tenantOverride': true,
        'elements': {
            'enabled': new Fields.Bool('CAS Authentication Enabled', 'Allow CAS authentication for tenant', false),
            'name': new Fields.Text('Name', 'A name that users will recognize as their identity provider', ''),
            'url': new Fields.Text('Host', 'The URL at which the CAS server can be reached. This should include http(s)://, any non-standard port and have no trailing slash', '', {'valueVisibility': 'private'}),
            'basepath': new Fields.Text('Base path', 'The base path on the CAS authentication server', '/cas', {'valueVisibility': 'private'}),
            'loginpath': new Fields.Text('Login path', 'The path where the user should be redirected to when logging in', '/login', {'valueVisibility': 'private'}),
            'validatepath': new Fields.Text('Validate path', 'The path that can be used to validate a ticket', '/serviceValidate', {'valueVisibility': 'private'}),
            'logoutUrl': new Fields.Text('Logout URL', 'The URL where the user should be redirected to when logging out of OAE. This should be a full url including a valid protocol (e.g., https://my.cas.server/cas/logout)', '', {'valueVisibility': 'private'}),
            'mapDisplayName': new Fields.Text('Display name', 'The attibute(s) that should be used to construct the displayname. e.g., <%= first_name %> <%= last_name %>', '', {'valueVisibility': 'private'}),
            'mapEmail': new Fields.Text('Email', 'The attibute(s) that should be used to construct the email. e.g., <%= mail %>', '', {'valueVisibility': 'private'}),
            'mapLocale': new Fields.Text('Locale', 'The attibute(s) that should be used to construct the locale. e.g., <%= locale %>', '', {'valueVisibility': 'private'}),
        }
    },
    'ldap': {
        'name': 'LDAP Authentication',
        'description': 'Allow LDAP authentication for tenant',
        'tenantOverride': true,
        'elements': {
            'enabled': new Fields.Bool('LDAP Authentication Enabled', 'Allow LDAP authentication for tenant', false),
            'url': new Fields.Text('Host', 'The URL at which the LDAP server can be reached . This should include both the protocol and the port. E.g. `ldaps://lookup.example.com:636` (required)', '', {'valueVisibility': 'private'}),
            'adminDn': new Fields.Text('Admin Distinguished Name', 'The DN that identifies an admin user that can search for user information. E.g. uid=admin,ou=users,dc=example,dc=com (required)', '', {'valueVisibility': 'private'}),
            'adminPassword': new Fields.Text('Admin password', 'The password for the admin DN that can be used to bind to LDAP. (required)', '', {'valueVisibility': 'private'}),
            'searchBase': new Fields.Text('Base', 'The base DN under which to search for users. E.g. ou=users,dc=example,dc=com (required)', '', {'valueVisibility': 'private'}),
            'searchFilter': new Fields.Text('Filter', 'The LDAP search filter with which to find a user by username, e.g. (uid={{username}}). Use the literal `{{username}}` to have the given username be interpolated in for the LDAP search. (required)', '', {'valueVisibility': 'private'}),
            'mapExternalId': new Fields.Text('LDAP External ID field', 'The name of the LDAP field that contains an identifier that uniquely identifies the user in LDAP (required)', 'uid', {'valueVisibility': 'private'}),
            'mapDisplayName': new Fields.Text('LDAP DisplayName field', 'The name of the LDAP field that contains the user\'s displayName (required)', 'cn', {'valueVisibility': 'private'}),
            'mapEmail': new Fields.Text('LDAP Email field', 'The name of the LDAP field that contains the user\'s email address (optional)', '', {'valueVisibility': 'private'}),
            'mapLocale': new Fields.Text('LDAP Locale field', 'The name of the LDAP field that contains the user\'s locale (optional)', '', {'valueVisibility': 'private'})
        }
    }
};
