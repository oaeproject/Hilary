/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');

var OAE = require('oae-util/lib/oae');


// All of the strategies run at some URL under /api/auth/*
// When a login fails, the user is redirected to / where he
// will than be shown a login page with all the installed strategies.


//////////////////
// DIRECT LOGIN //
//////////////////

OAE.globalAdminServer.post('/api/auth/login', passport.authenticate('local'), function(req, res) {
    // This callback only gets called when we log in succesfully.
    return res.send(200, req.user);
});

OAE.globalAdminServer.post('/api/auth/logout', function(req, res) {
    req.logOut();
    res.send(200);
});

OAE.tenantServer.post('/api/auth/login', passport.authenticate('local'), function(req, res) {
    // This callback only gets called when we log in succesfully.
    return res.send(200, req.user);
});

OAE.tenantServer.post('/api/auth/logout', function(req, res) {
    req.logOut();
    res.send(200);
});


//////////////
//  GOOGLE  //
//////////////

// Redirect the user to Google for authentication.  When complete, Google
// will redirect the user back to the application at
// /api/auth/google/return
OAE.tenantServer.get('/api/auth/google', function(req, res, next) {
    var stratName = 'google-' + req.tenant.alias;
    passport.authenticate(stratName)(req, res, next);
});

// Google will redirect the user to this URL after authentication.  Finish
// the process by verifying the assertion.  If valid, the user will be
// logged in.  Otherwise, authentication has failed.
OAE.tenantServer.get('/api/auth/google/callback', function(req, res, next) {
    var stratName = 'google-' + req.tenant.alias;
    passport.authenticate(stratName, { 'successRedirect': '/',
                                       'failureRedirect': '/' })(req, res, next);
});


///////////////
//  TWITTER  //
///////////////

// Redirect the user to Twitter for authentication.  When complete, Twitter
// will redirect the user back to the application at
// /api/auth/twitter/callback
OAE.tenantServer.get('/api/auth/twitter', function(req, res, next) {
    var stratName = 'twitter-' + req.tenant.alias;
    passport.authenticate(stratName)(req, res, next);
});

// Twitter will redirect the user to this URL after approval.  Finish the
// authentication process by attempting to obtain an access token.  If
// access was granted, the user will be logged in.  Otherwise,
// authentication has failed.
OAE.tenantServer.get('/api/auth/twitter/callback', function(req, res, next) {
    var stratName = 'twitter-' + req.tenant.alias;
    passport.authenticate(stratName, { 'successRedirect': '/',
                                       'failureRedirect': '/' })(req, res, next);
});


////////////////
//  FACEBOOK  //
////////////////

// Redirect the user to Facebook for authentication.  When complete,
// Facebook will redirect the user back to the application at
// /api/auth/facebook/callback
OAE.tenantServer.get('/api/auth/facebook', function(req, res, next) {
    var stratName = 'facebook-' + req.tenant.alias;
    passport.authenticate(stratName)(req, res, next);
});

// Facebook will redirect the user to this URL after approval.  Finish the
// authentication process by attempting to obtain an access token.  If
// access was granted, the user will be logged in.  Otherwise,
// authentication has failed.
OAE.tenantServer.get('/api/auth/facebook/callback', function(req, res, next) {
    var stratName = 'facebook-' + req.tenant.alias;
    passport.authenticate(stratName, { 'successRedirect': '/',
                                       'failureRedirect': '/' })(req, res, next);
});
