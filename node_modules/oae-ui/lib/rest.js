/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var UIAPI = require('./api');


/**
 * @REST getUiWidgets
 *
 * Get the aggregated list of widget manifests
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /ui/widgets
 * @Return      {WidgetConfigs}                 Object containing the list aggregated widget manifests
 */
var _getWidgetManifests = function(req, res) {
    var widgetConfigs = UIAPI.getWidgetManifests();
    res.send(200, widgetConfigs);
};

OAE.globalAdminRouter.on('get', '/api/ui/widgets', _getWidgetManifests);
OAE.tenantRouter.on('get', '/api/ui/widgets', _getWidgetManifests);

/**
 * @REST getUiStaticbatch
 *
 * Get the content of a set of static files
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /ui/staticbatch
 * @QueryParam  {string[]}      files           Path of the file to retrieve
 * @Return      {StaticBatch}                   Object representing the retrieved files
 */
var _getStaticBatch = function(req, res) {
    var files = OaeUtil.toArray(req.query.files);

    UIAPI.getStaticBatch(files, function(err, results) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, results);
    });
};

OAE.globalAdminRouter.on('get', '/api/ui/staticbatch', _getStaticBatch);
OAE.tenantRouter.on('get', '/api/ui/staticbatch', _getStaticBatch);

/**
 * @REST getUiSkin
 *
 * Get the skin for the current tenant
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /ui/skin
 * @Return      {string}                        Skin CSS file for the current tenant
 * @Produces    [text/css]
 */
var _getSkin = function(req, res) {
    UIAPI.getSkin(req.ctx, function(err, css) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.set('Content-Type', 'text/css');
        return res.send(200, css);
    });
};

OAE.globalAdminRouter.on('get', '/api/ui/skin', _getSkin);
OAE.tenantRouter.on('get', '/api/ui/skin', _getSkin);

/**
 * @REST getUiSkinVariables
 *
 * Get the LESS variables that are present in the tenant skin
 *
 * @Server      admin
 * @Method      GET
 * @Path        /ui/skin/variables
 * @QueryParam  {string}        tenant          The alias of the tenant for which the variables should be retrieved
 * @Return      {SkinVariables}                 The LESS skin variables for the tenant skin
 */
OAE.globalAdminRouter.on('get', '/api/ui/skin/variables', function(req, res) {
    UIAPI.getSkinVariables(req.ctx, req.query.tenant, function(err, variables) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': variables});
    });
});

/**
 * @REST getUiSkinVariables
 *
 * Get the LESS variables that are present in the tenant skin
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /ui/skin/variables
 * @Return      {SkinVariables}                 The LESS skin variables for the tenant skin
 */
OAE.tenantRouter.on('get', '/api/ui/skin/variables', function(req, res) {
    UIAPI.getSkinVariables(req.ctx, null, function(err, variables) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': variables});
    });
});
