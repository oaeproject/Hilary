/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ActivityTestUtil = require('oae-activity/lib/test/util');
var AuthenticationTestUtil = require('oae-authentication/lib/test/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var ContentTestUtil = require('oae-content/lib/test/util');
var EmailAPI = require('oae-email');
var EmailTestUtil = require('oae-email/lib/test/util');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');
var RestAPI = require('oae-rest');
var TenantTestUtil = require('oae-tenants/lib/test/util');
var TestsUtil = require('oae-tests');

describe('Inviting guests', function() {

    // Rest contexts that can be used to make requests as different types of users
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the rest contexts, flush the email queue and reconfigure the mail collector
     */
    beforeEach(function(callback) {
        // Fill up the request contexts
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Make sure there are no pending emails in the email buckets
        EmailTestUtil.clearEmailCollections(function() {

            // Send out daily emails
            ActivityTestUtil.refreshMailConfiguration(null, true, false, {}, function(config) {
                return callback();
            });
        });
    });

    /**
     * Function that will disable the daily email collector
     */
    after(function(callback) {
        // Disable daily emails
        ActivityTestUtil.refreshMailConfiguration(null, false, false, {}, function(config) {
            return callback();
        });
    });

    /**
     * Test that verifies that guests can be invited to collaborate on a resource
     */
    it('verify that guests can be invited to collaborate on a single resource', function(callback) {
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link1, email, token) {
            return callback();
        });
    });

    /**
     * Test that verifies that guests can be invited to collaborate on multiple resources
     */
    it('verify that guests can be invited to collaborate on multiple resources', function(callback) {
        // Create some content and invite a guest
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link1, email, token) {

            // Create another content item and invite the guest again
            RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link2) {
                assert.ok(!err);
                RestAPI.Content.shareContent(simong.restContext, link2.id, [email], function(err) {
                    assert.ok(!err);

                    // Create a guest account with the token that was emailed to the guest
                    PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                        // Verify both the content items are in the guest's content library
                        RestAPI.Content.getLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, data) {
                            assert.ok(!err);
                            assert.strictEqual(data.results.length, 2);
                            assert.strictEqual(data.results[0].id, link2.id);
                            assert.strictEqual(data.results[1].id, link1.id);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests can log onto the system after verifying a token
     */
    it('verify guests can log onto the system after verifying a token', function(callback) {
        // Create some content and invite a guest
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link, email, token) {

            // Verify our token
            var guestRestContext = TestsUtil.createTenantRestContext('guests.oae.com');
            var username = TestsUtil.generateTestUserId();
            RestAPI.User.verifyGuestToken(guestRestContext, token, username, 'password', function(err, body, response) {
                assert.ok(!err);

                // Verify we can log in with the provided credentials
                guestRestContext = TestsUtil.createTenantRestContext('guests.oae.com');
                RestAPI.Authentication.login(guestRestContext, username, 'password', function(err) {
                    assert.ok(!err);

                    // Assert we were logged in
                    RestAPI.User.getMe(guestRestContext, function(err, me) {
                        assert.ok(!err);
                        assert.ok(!me.anon);
                        assert.strictEqual(me.guest, true);
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests are created on the guests tenant if no tenant email domain matches
     */
    it('verify that guests are created on the guests tenant if no tenant email domain matches', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link) {
                assert.ok(!err);

                // Share the link with a guest user
                var email = TestsUtil.generateTestEmailAddress();
                RestAPI.Content.shareContent(simong.restContext, link.id, [email], function(err) {
                    assert.ok(!err);

                    // Verify that the user account was provisioned on the correct tenant
                    RestAPI.Content.getMembers(simong.restContext, link.id, null, null, function(err, members) {
                        assert.ok(!err);
                        var viewer = _.findWhere(members.results, {'role': 'viewer'});
                        assert.ok(viewer);
                        assert.strictEqual(viewer.profile.tenant.alias, 'guests');
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests are created on the correct tenant if a tenant email domain matches
     */
    it('verify that guests are created on the correct tenant if a tenant email domain matches', function(callback) {
        TenantTestUtil.generateTestTenants(globalAdminRestContext, 1, function(tenant) {
            var domain = util.format('%s.%s', TestsUtil.generateRandomText(1), TestsUtil.generateRandomText(1));
            var domainRegex = util.format('^%s$', domain);
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenant.alias, {'oae-tenants/domains/email': domainRegex}, function(err) {
                assert.ok(!err);

                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                    assert.ok(!err);

                    RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link) {
                        assert.ok(!err);

                        // Share the link with a guest user
                        var email = TestsUtil.generateTestEmailAddress('foo', domain);
                        RestAPI.Content.shareContent(simong.restContext, link.id, [email], function(err) {
                            assert.ok(!err);

                            // Verify that the user account was provisioned on the correct tenant
                            RestAPI.Content.getMembers(simong.restContext, link.id, null, null, function(err, members) {
                                assert.ok(!err);
                                var viewer = _.findWhere(members.results, {'role': 'viewer'});
                                assert.ok(viewer);
                                assert.strictEqual(viewer.profile.tenant.alias, tenant.alias);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests can log in on the guests tenant with a local authentication strategy
     */
    it('verify guests on the guests tenant can associate a local authentication strategy', function(callback) {
        // Create some content and invite a guest
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link, email, token) {

            // Create a guest account with the token that was emailed to the guest
            PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                // Verify the content item is in the guest's content library
                RestAPI.Content.getLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, data) {
                    assert.ok(!err);
                    assert.strictEqual(data.results.length, 1);
                    assert.strictEqual(data.results[0].id, link.id);
                    return callback();
                });
            });
        });
    });

    /**
     * Test that verifies that guests can log in on the guests tenant with a local authentication strategy
     */
    it('verify guests on regular tenants are associated with existing users', function(callback) {
        TenantTestUtil.generateTestTenants(globalAdminRestContext, 1, function(tenant) {
            var domain = util.format('%s.%s', TestsUtil.generateRandomText(1), TestsUtil.generateRandomText(1));
            var domainRegex = util.format('^%s$', domain);
            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenant.alias, {'oae-tenants/domains/email': domainRegex}, function(err) {
                assert.ok(!err);

                // Set up a CAS server
                var externalId = TestsUtil.generateTestUserId();
                var email = TestsUtil.generateTestEmailAddress('foo', domain);
                AuthenticationTestUtil.setupCASServer(tenant.alias, true, externalId, 'Test User', email, function(validTicket, closeCallback) {

                    TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                        assert.ok(!err);

                        RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], [], function(err, link) {
                            assert.ok(!err);

                            // Share the link with a guest
                            RestAPI.Content.shareContent(simong.restContext, link.id, [email], function(err) {
                                assert.ok(!err);

                                // The user signs in with CAS, which is a trusted source for released email values
                                var restContext = TestsUtil.createTenantRestContext(tenant.host);
                                restContext.followRedirect = false;
                                RestAPI.Authentication.casCallback(restContext, {'ticket': validTicket}, function(err, body, response) {
                                    assert.ok(!err);
                                    assert.equal(response.statusCode, 302);
                                    assert.equal(response.headers.location, '/me');

                                    // Verify we were associated with the correct user account
                                    RestAPI.User.getMe(restContext, function(err, me) {
                                        assert.ok(!err);
                                        assert.strictEqual(me.email, email);

                                        // Verify the content item is in the guest's content library
                                        RestAPI.Content.getLibrary(restContext, me.id, null, null, function(err, data) {
                                            assert.ok(!err);
                                            assert.strictEqual(data.results.length, 1);
                                            assert.strictEqual(data.results[0].id, link.id);
                                            return closeCallback(callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests can interact with private resources
     */
    it('verify that guests can interact with private resources they are invited to collaborate on', function(callback) {
        // Create some content and invite a guest
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link, email, token) {

            // Create a guest account with the token that was emailed to the guest
            PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                // Even though the guest is technically on a different tenant, he should
                // still be able to interact with the content
                RestAPI.Content.getContent(loggedinGuest.restContext, link.id, function(err, content) {
                    assert.ok(!err);

                    // Sanity-check the invited guest can't access any
                    // private content he's not been invited for
                    RestAPI.Content.createLink(simong.restContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [], [], function(err, privateLink) {
                        assert.ok(!err);

                        RestAPI.Content.getContent(loggedinGuest.restContext, privateLink.id, function(err, content) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 401);

                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies guest tokens are validated
     */
    it('verify guest tokens are validated', function(callback) {
        // Create some content and invite a guest
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link, email, token) {

            var anonymousGuestRestContext = TestsUtil.createTenantRestContext('guests.oae.com');

            // Missing token
            RestAPI.User.verifyGuestToken(anonymousGuestRestContext, null, 'username', 'password', function(err) {
                assert.ok(err);
                assert.strictEqual(err.code, 400);

                // Missing username
                RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, null, 'password', function(err) {
                    assert.ok(err);
                    assert.strictEqual(err.code, 400);

                    // Missing password
                    RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, 'username', null, function(err) {
                        assert.ok(err);
                        assert.strictEqual(err.code, 400);

                        // Bad token
                        RestAPI.User.verifyGuestToken(anonymousGuestRestContext, 'somuchnope', 'username', 'password', function(err) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 400);

                            // Invalid token
                            RestAPI.User.verifyGuestToken(anonymousGuestRestContext, 'guest-somuchnope', 'username', 'password', function(err) {
                                assert.ok(err);
                                assert.strictEqual(err.code, 404);

                                // Invalid password (less than 6 characters)
                                RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, 'username', 'p', function(err) {
                                    assert.ok(err);
                                    assert.strictEqual(err.code, 400);

                                    // Can't use the same username twice
                                    var username = TestsUtil.generateTestUserId();
                                    RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, username, 'password', function(err) {
                                        assert.ok(!err);

                                        // Generate another token
                                        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(nico, link, email, token) {
                                            RestAPI.User.verifyGuestToken(anonymousGuestRestContext, token, username, 'password', function(err) {
                                                assert.ok(err);
                                                assert.strictEqual(err.code, 401);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that private tenants can only invite users from their own tenant
     */
    it('verify private tenants can never invite users', function(callback) {
        TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2, privateTenant1) {

            // Assert we can't invite new guests into a private tenant
            RestAPI.Content.createLink(privateTenant1.adminRestContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [TestsUtil.generateTestEmailAddress()], [], function(err, link) {
                assert.ok(err);
                assert.strictEqual(err.code, 401);

                // Assert we can't invite existing users from other tenancies into a private tenant
                RestAPI.Content.createLink(privateTenant1.adminRestContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [publicTenant1.publicUser.user.email], [], function(err, link) {
                    assert.ok(err);
                    assert.strictEqual(err.code, 401);

                    // Assert we can't invite existing guests into a private tenant. Create a piece
                    // of content on the public tenant and invite a guest. When we try to re-use this
                    // email on the private tenant it should fail.
                    var guestEmail = TestsUtil.generateTestEmailAddress();
                    RestAPI.Content.createLink(publicTenant1.adminRestContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [guestEmail], [], function(err, link) {
                        assert.ok(!err);
                        RestAPI.Content.createLink(privateTenant1.adminRestContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [guestEmail], [], function(err, link) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 401);

                            TestsUtil.generateTestUsers(privateTenant1.adminRestContext, 1, function(err, users, user) {
                                assert.ok(!err);

                                // Assert we can invite existing public users from the same private tenancy
                                RestAPI.Content.createLink(user.restContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [privateTenant1.publicUser.user.email], [], function(err, link) {
                                    assert.ok(!err);

                                    // Assert we can invite existing loggedin users from the same private tenancy
                                    RestAPI.Content.createLink(user.restContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [privateTenant1.loggedinUser.user.email], [], function(err, link) {
                                        assert.ok(!err);

                                        // Assert we cannot invite existing private users from the same private tenancy
                                        RestAPI.Content.createLink(user.restContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [privateTenant1.privateUser.user.email], [], function(err, link) {
                                            assert.ok(err);
                                            assert.strictEqual(err.code, 400);

                                            // Assert a public user from a private tenant cannot be invited into another tenant
                                            RestAPI.Content.createLink(camAdminRestContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [privateTenant1.publicUser.user.email], [], function(err, link) {
                                                assert.ok(err);
                                                assert.strictEqual(err.code, 400);

                                                // Assert a loggedin user from a private tenant cannot be invited into another tenant
                                                RestAPI.Content.createLink(camAdminRestContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [privateTenant1.loggedinUser.user.email], [], function(err, link) {
                                                    assert.ok(err);
                                                    assert.strictEqual(err.code, 400);

                                                    // Assert a private user from a private tenant cannot be invited into another tenant
                                                    RestAPI.Content.createLink(camAdminRestContext, 'Apereo', 'Apereo', 'private', 'http://www.apereo.org', [], [privateTenant1.privateUser.user.email], [], function(err, link) {
                                                        assert.ok(err);
                                                        assert.strictEqual(err.code, 400);

                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that guests are automatically logged on when they verify their token
     */
    it('verify guests are automatically logged on when they verify their token', function(callback) {
        // Create some content and invite a guest
        ContentTestUtil.createContentAndInviteGuest(camAdminRestContext, function(simong, link, email, token) {

            // Verify our token
            var guestRestContext = TestsUtil.createTenantRestContext('guests.oae.com');
            var username = TestsUtil.generateTestUserId();
            RestAPI.User.verifyGuestToken(guestRestContext, token, username, 'password', function(err, body, response) {
                assert.ok(!err);
                assert.strictEqual(response.statusCode, 302);

                // Assert guests are redirected to the /me page
                assert.strictEqual(response.headers.location, '/me');

                // Assert we were logged in automatically
                RestAPI.User.getMe(guestRestContext, function(err, me) {
                    assert.ok(!err);
                    assert.ok(!me.anon);
                    assert.strictEqual(me.guest, true);
                    return callback();
                });
            });
        });
    });

    describe('Group guests', function() {

        /**
         * Test that verifies that a piece of content can be shared guests when creating it
         */
        it('verify an invitation can be sent when creating a group', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, inviter) {
                assert.ok(!err);

                var group = null;
                var email = TestsUtil.generateTestEmailAddress();
                RestAPI.Group.createGroup(inviter.restContext, 'Group title', 'Group description', 'private', 'no', [], [email], function(err, _group) {
                    assert.ok(!err);
                    group = _group;
                });

                // An email should've been sent to the guest
                PrincipalsTestUtil.whenGuestEmailSent(email, function(token) {

                    // Sign in as the guest
                    PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                        // Verify that the group is in the guest's library
                        RestAPI.Group.getMembershipsLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, groupMemberships) {
                            assert.ok(!err);
                            assert.strictEqual(groupMemberships.results.length, 1);
                            assert.strictEqual(groupMemberships.results[0].id, group.id);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a guest can be made a member of a piece of content
         */
        it('verify a guest can be made a member of a group', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                // Create a content item
                RestAPI.Group.createGroup(simong.restContext, 'Group title', 'Group description', 'private', 'no', [], [], function(err, group) {
                    assert.ok(!err);

                    // Make a guest a viewer of the content item through the content permissions API
                    var email = TestsUtil.generateTestEmailAddress();
                    var roleChanges = {};
                    roleChanges[email] = 'member';
                    RestAPI.Group.setGroupMembers(simong.restContext, group.id, roleChanges, function(err) {
                        assert.ok(!err);
                    });

                    // An email should've been sent to the guest
                    PrincipalsTestUtil.whenGuestEmailSent(email, function(token) {

                        // Sign in as the guest
                        PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                            // The guest should have access to the piece of content
                            RestAPI.Group.getGroup(loggedinGuest.restContext, group.id, function(err, group) {
                                assert.ok(!err);

                                // Verify the guest is in the members list
                                RestAPI.Group.getGroupMembers(simong.restContext, group.id, null, null, function(err, members) {
                                    assert.ok(!err);
                                    assert.strictEqual(members.results.length, 2);
                                    var guest = _.findWhere(members.results, {'role': 'member'});
                                    assert.ok(guest);

                                    // Make the guest a manager
                                    var roleChanges = {};
                                    roleChanges[email] = 'manager';
                                    RestAPI.Group.setGroupMembers(simong.restContext, group.id, roleChanges, function(err) {
                                        assert.ok(!err);

                                        // Verify the guest is a manager
                                        RestAPI.Group.getGroup(loggedinGuest.restContext, group.id, function(err, group) {
                                            assert.ok(!err);
                                            assert.ok(group.isManager);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
