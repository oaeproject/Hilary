/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var util = require('util');

var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var Signature = require('oae-util/lib/signature');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentUtil = require('oae-content/lib/internal/util');

// Bind the library search
SearchAPI.registerSearch('library', require('./searches/library'));

////////////////////
// INDEXING TASKS //
////////////////////

// Binds the local events to the MQ task queue to assign indexing jobs

ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, members) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': content.contentId,
            'content': content,
            'members': members,
            'opts': {
                'indexResource': true,
                'indexMembers': true
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': newContent.contentId,
            'content': newContent,
            'opts': {
                'indexResource': true,
                'indexMembers': false
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': content.contentId,
            'opts': {
                'indexResource': false,
                'indexMembers': true
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_PREVIEW, function(ctx, contentId, content) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': contentId,
            'opts': {
                'indexResource': true,
                'indexMembers': false
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.DELETED_CONTENT, function(ctx, contentId) {
    MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'resourceType': 'content', 'id': contentId});
});



////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for 'content' resources.
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceContentSearchDocuments = function(resources, callback) {
    if (!resources || resources.length === 0) {
        return callback(null, []);
    }

    var docs = [];
    var productionErr = null;
    var numCompleted = 0;

    /*!
     * Invoked when production of one of the resources in the `resources` array is completed and pushed into `docs`.
     */
    var _completedProduction = function(err) {
        if (productionErr) {
            // Do nothing, we've already err'd and exited
            return;
        } else if (err) {
            productionErr = err;
            return callback(err);
        }

        numCompleted++;
        if (numCompleted === resources.length) {
            return callback(null, docs);
        }
    };

    resources.forEach(function(resource) {
        var contentId = resource.id;
        var content = resource.content;

        if (content) {
            docs.push(_produceContentSearchDocument(content));
            return _completedProduction();
        }

        ContentAPI._getContent(contentId, function(err, content) {
            if (err) {
                return _completedProduction(err);
            }

            docs.push(_produceContentSearchDocument(content));
            return _completedProduction();
        });
    });
};

/**
 * Convert a content item into a resource search document.
 *
 * @param   {Content}   content     The content item to convert
 * @return  {Object}                A search document
 * @api private
 */
var _produceContentSearchDocument = function(content) {
    // Allow full-text search on name and description, but only if they are specified. We also sort on this text
    var fullText = _.compact([content.displayName, content.description]).join(' ');

    // Add all properties for the resource document metadata
    var doc = {
        'resourceType': 'content',
        'resourceSubType': content.contentType,
        'id': content.contentId,
        'tenantAlias': content.tenant,
        'displayName': content.displayName,
        'visibility': content.visibility,
        'q_high': content.displayName,
        'q_low': fullText,
        'sort': fullText,
        'lastModified': content.lastModified
    };

    if (content.previews.thumbnailUri) {
        doc.thumbnailUrl = content.previews.thumbnailUri;
    }
    
    return doc;
};

SearchAPI.registerSearchDocumentProducer('content', _produceContentSearchDocuments);



/**
 * Given an array of content search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param   {Context}   ctx             The current context
 * @param   {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param   {Function}  callback        Invoked when the process completes
 * @param   {Object}    callback.err    An error that occurred, if any
 * @param   {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformContentDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    _.each(docs, function(doc, docId) {
        var result = _.extend({}, doc.fields, {'id': doc['_id']});
        if (doc.fields.thumbnailUrl) {
            result.thumbnailUrl = ContentUtil.getThumbnailUrl(ctx, result.id, doc.fields.lastModified);
        }

        transformedDocs[docId] = result;
    });

    return callback(null, transformedDocs);
};


// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('content', _transformContentDocuments);
