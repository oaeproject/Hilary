/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

describe('Search Util', function() {

    describe('#getSearchParams', function() {

        /**
         * Test that verifies all parameters are extracted from the hash.
         */
        it('verify all values', function(callback) {
            var params = SearchUtil.getSearchParams({
                query: {
                    'q': 'qVal',
                    'start': 'startVal',
                    'limit': 'limitVal',
                    'sort': 'sortVal',
                    'rogue': 'rogueVal'
                }
            });

            assert.equal(params.q, 'qVal');
            assert.equal(params.start, 'startVal');
            assert.equal(params.limit, 'limitVal');
            assert.equal(params.sort, 'sortVal');
            assert.equal(params.rogue, undefined);
            callback();
        });

        /**
         * Test that verifies a hash with no values can be specified without an error.
         */
        it('verify no values', function(callback) {
            var params = SearchUtil.getSearchParams({query:{}});

            assert.equal(params.q, undefined);
            assert.equal(params.start, undefined);
            assert.equal(params.limit, undefined);
            assert.equal(params.sort, undefined);
            assert.equal(params.rogue, undefined);
            callback();
        });
    });

    describe('Others', function() {

        it('verify createQuery', function(callback) {
            // Sanity check creating with an object
            SearchUtil.createQuery({});

            assert.throws(function() { SearchUtil.createQuery(); });
            assert.throws(function() { SearchUtil.createQuery(null); });
            callback();
        });

        /**
         * Test that verifies valid values, invalid values, emptyvalues, null and undefined for SearchUtil.getQueryParam
         */
        it('verify getQueryParam', function(callback) {
            assert.equal(SearchUtil.getQueryParam('cats', 'dogs'), 'cats');
            assert.equal(SearchUtil.getQueryParam('cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam('', 'cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam('', ''), SearchConstants.query.ALL);
            assert.equal(SearchUtil.getQueryParam(null, 'cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam(null, null), SearchConstants.query.ALL);
            assert.equal(SearchUtil.getQueryParam(undefined, 'cats'), 'cats');
            assert.equal(SearchUtil.getQueryParam(), SearchConstants.query.ALL);
            callback();
        });

        /**
         * Test that verifies valid values, invalid values, emptyvalues, null and undefined for SearchUtil.getSortParam
         */
        it('verify getSortParam', function(callback) {
            var validType = SearchConstants.sort.ASC;
            var validType2 = SearchConstants.sort.DESC;

            assert.equal(SearchUtil.getSortParam(validType, validType2), validType);
            assert.equal(SearchUtil.getSortParam(validType), validType);
            assert.equal(SearchUtil.getSortParam('not-valid', validType), validType);
            assert.equal(SearchUtil.getSortParam('not-valid', 'not-valid'), SearchConstants.sort.ASC);
            assert.equal(SearchUtil.getSortParam(validType), validType);
            assert.equal(SearchUtil.getSortParam(null, validType), validType);
            assert.equal(SearchUtil.getSortParam(null, null), SearchConstants.sort.ASC);
            assert.equal(SearchUtil.getSortParam(validType), validType);
            assert.equal(SearchUtil.getSortParam(undefined, validType), validType);
            assert.equal(SearchUtil.getSortParam(), SearchConstants.sort.ASC);
            callback();
        });
    });
});
