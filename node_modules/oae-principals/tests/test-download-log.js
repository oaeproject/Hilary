/*
 * Copyright 2018 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var TestsUtil = require('oae-tests');

var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');

describe('Download Logs', function() {

    // Rest contexts that will be used for requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    const regexp = /random-user-/gi;

    var reset = function(callback) {
        TestsUtil.clearAllData(function(err) {
            anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
            camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
            gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
            return callback();
        });
    };

    /**
     * Function that will fill up the anonymous and tenant admin REST context
     */
    before(function(callback) {
    	reset(function() {
            return callback();
        });
    });

    var parseUser = function(hash) {
        var user = {
            'principalId': hash.id,
            'tenantAlias': hash.tenant.alias,
            'email': hash.email,
            'publicAlias': hash.displayName,
            'created': hash.created,
            'lastLogin': hash.lastLogin
        };
        return user;
    };

    describe('Download the log of the user creation date', function() {

        /**
         * Test that verifies that we get the right users when we try to download the user creation dates log
         */
        it('verify if we get the right users on download user creation dates log', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                camAdminRestContext.user = function () { return mrvisser.user; };
                camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };

                var principalsList = [parseUser(mrvisser.user), parseUser(simong.user)];

                // Call the download logs method
                PrincipalsTestUtil.assertGetUsersDateLogSucceeds(camAdminRestContext, camAdminRestContext.tenant().alias, null, PrincipalsConstants.downloadLogType.CREATED, function(err, principals) {
                    assert.ok(!err);
                    assert.ok(principals);

                    // Get a new list of principals excluding tenant admins
                    var newPrincipalsListExcludingAdmins = _.filter(principals, function(principal) { return principal.publicAlias.match(regexp); });

                    // We should get the same number of elements in both list
                    assert.equal(newPrincipalsListExcludingAdmins.length, principalsList.length);

                    // Sort the lists
                    newPrincipalsListExcludingAdmins = _.sortBy(newPrincipalsListExcludingAdmins, PrincipalsConstants.downloadLogType.CREATED);
                    principalsList = _.sortBy(principalsList, PrincipalsConstants.downloadLogType.CREATED);

                    _.each(principalsList, function(principal, i) {
                        assert.equal(newPrincipalsListExcludingAdmins[i].principalId, principal.principalId);
                        assert.equal(newPrincipalsListExcludingAdmins[i].tenantAlias, principal.tenantAlias);
                        assert.equal(newPrincipalsListExcludingAdmins[i].email, principal.email);
                        assert.equal(newPrincipalsListExcludingAdmins[i].publicAlias, principal.publicAlias);
                        assert.equal(newPrincipalsListExcludingAdmins[i].created , principal.created);
                    });

                    return callback();
                });
            });
        });

        /**
         * Test that verifies if we get a 404 error if the tenant does not exist
         */
        it('verify if we get an error if the tenant does not exist', function(callback) {
            // Call the download logs method
            PrincipalsTestUtil.assertGetUsersDateLogFails(camAdminRestContext, 'fakeTenant', 404, null, PrincipalsConstants.downloadLogType.CREATED, function(err, principals) {
                assert.ok(!err);
                assert.ok(!principals);
                return callback();
            });
        });

        /**
         * Test that verifies if we get a 400 error if the number of months isn't a number
         */
        it('verify if we get a 400 error if the number of months is not a number', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                camAdminRestContext.user = function () { return mrvisser.user; };
                camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };

                // Call the download logs method
                PrincipalsTestUtil.assertGetUsersDateLogFails(camAdminRestContext, camAdminRestContext.tenant().alias, 400, 'notANumber', PrincipalsConstants.downloadLogType.AUTH, function(err, principals) {
                    assert.ok(!err);
                    assert.ok(!principals);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies if we fail getting creation logs when someone who's not an admin make the request
         */
        it('verify fetching the creation logs fails if non-admin makes the request', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                mrvisser.restContext.user = function () { return mrvisser.user; };

                // Call the download logs method
                PrincipalsTestUtil.assertGetUsersDateLogFails(mrvisser.restContext, mrvisser.user.tenant.alias, 401, null, PrincipalsConstants.downloadLogType.CREATED, function(err, principals) {
                    assert.ok(!err);

                    return callback();
                });
            });
        });

        /**
         * Test that verifies that we get the users of the right tenant when we try to download the user creation dates log
         */
        it('verify if we get only the users of the right tenant', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);
                // Create user
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, odoran, stuartf) {
                    assert.ok(!err);

                    var principalList = [parseUser(odoran.user), parseUser(stuartf.user)];

                    // Call the Download logs method
                    PrincipalsTestUtil.assertGetUsersDateLogSucceeds(camAdminRestContext, camAdminRestContext.tenant().alias, null, PrincipalsConstants.downloadLogType.CREATED, function(err, principals) {
                        assert.ok(!err);
                        assert.ok(principals);

                        _.each(principalList, function(user) {
                            assert.ok(!_.findWhere(principals, {principalId: user.principalId}));
                        });

                        return callback();
                    });
                });
            });
        });

    });

    

    describe('Download log of user last connection date', function() {

        /**
         * Test that verifies that we get the right users when we try to download the user connection dates log
         */
        it('verify that we get the right users without setting a date', function(callback) {

            // Reset all data
            reset(function() {

                // Create user
                TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                    assert.ok(!err);

                    camAdminRestContext.user = function () { return mrvisser.user; };
                    camAdminRestContext.tenant = function () { return mrvisser.user.tenant; };
                    camAdminRestContext.user().isAdmin = function () { return true; };

                    var today = new Date();

                    PrincipalsDAO.updateLastLogin(mrvisser.user, today, function(err) {
                        assert.ok(!err);
                        PrincipalsDAO.updateLastLogin(simong.user, today, function(err) {
                            assert.ok(!err);

                            PrincipalsDAO.getPrincipals([mrvisser.user.id, simong.user.id], null, function(err, principals) {
                                assert.ok(!err);

                                var principalList = [parseUser(principals[mrvisser.user.id]), parseUser(principals[simong.user.id])];

                                // Call the Download logs method
                                PrincipalsTestUtil.assertGetUsersDateLogSucceeds(camAdminRestContext, camAdminRestContext.tenant().alias, 0, PrincipalsConstants.downloadLogType.AUTH, function(err, principals) {
                                    assert.ok(!err);
                                    assert.ok(principals);

                                    // Get a new list of principals excluding tenant admins
                                    var newPrincipalsListExcludingAdmins = _.filter(principals, function(principal) { return principal.publicAlias.match(regexp); });

                                    // We should get the same number of elements in both list
                                    assert.equal(newPrincipalsListExcludingAdmins.length, principalList.length);

                                    // Sort the lists
                                    newPrincipalsListExcludingAdmins = _.sortBy(newPrincipalsListExcludingAdmins, 'lastLogin');
                                    principalList = _.sortBy(principalList, 'lastLogin');

                                    _.each(principalList, function(principal, i) {
                                        assert.equal(newPrincipalsListExcludingAdmins[i].principalId, principal.principalId);
                                        assert.equal(newPrincipalsListExcludingAdmins[i].tenantAlias, principal.tenantAlias);
                                        assert.equal(newPrincipalsListExcludingAdmins[i].email, principal.email);
                                        assert.equal(newPrincipalsListExcludingAdmins[i].publicAlias, principal.publicAlias);
                                        assert.equal(newPrincipalsListExcludingAdmins[i].lastLogin, principal.lastLogin);
                                    });

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies if we don't get errors if there is no principal in the tenant
         */
        it('verify if we don\'t get errors if there is no principal in the tenant', function(callback) {

            // Call the download logs method
            PrincipalsTestUtil.assertGetUsersDateLogFails(camAdminRestContext, 'fakeTenant', 404, 0, PrincipalsConstants.downloadLogType.AUTH, function(err, principals) {
                return callback();
            });
        });

        /**
         * Test that verifies if we fail getting connection logs when someone who's not an admin make the request
         */
        it('verify if we fail getting connection logs when someone who\'s not an admin make the request', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                mrvisser.restContext.user = function () { return mrvisser.user; };

                // Call the download logs method
                PrincipalsTestUtil.assertGetUsersDateLogFails(mrvisser.restContext, mrvisser.user.tenant.alias, 401, 2, PrincipalsConstants.downloadLogType.AUTH, function(err, principals) {
                    assert.ok(!err);

                    return callback();
                });
            });
        });

        /**
         * Test that verifies that we get the right dates when we try to download the user connetion dates log
         */
        it('verify if we get the right users setting date', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);

                var lastConnectionDate = new Date();
                lastConnectionDate.setMonth(lastConnectionDate.getMonth() - 3);

                // Set a date last login
                PrincipalsDAO.updateLastLogin(mrvisser.user, lastConnectionDate, function(err) {
                    assert.ok(!err);

                    // Call the Download logs method
                    PrincipalsTestUtil.assertGetUsersDateLogSucceeds(camAdminRestContext, camAdminRestContext.tenant().alias, 2, PrincipalsConstants.downloadLogType.AUTH, function(err, principals) {
                        assert.ok(!err);
                        assert.ok(principals);

                        // Get a new list of principals excluding tenant admins
                        var newPrincipalsListExcludingAdmins = _.filter(principals, function(principal) { return principal.publicAlias.match(regexp); });

                        assert.ok(_.findWhere(newPrincipalsListExcludingAdmins, {principalId: mrvisser.user.id}));
                        assert.ok(!_.findWhere(newPrincipalsListExcludingAdmins, {principalId: simong.user.id}));

                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that we get the users of the right tenant when we try to download the user connetion dates log
         */
        it('verify if we get only the users of the right tenant', function(callback) {
            // Create user
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, simong) {
                assert.ok(!err);
                // Create user
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, odoran, stuartf) {
                    assert.ok(!err);

                    var principalList = [parseUser(odoran.user), parseUser(stuartf.user)];
                    var today = new Date();

                    // Set a date last login
                    PrincipalsDAO.updateLastLogin(mrvisser.user, today, function(err) {
                        assert.ok(!err);
                        PrincipalsDAO.updateLastLogin(simong.user, today, function(err) {
                            assert.ok(!err);

                            // Call the Download logs method
                            PrincipalsTestUtil.assertGetUsersDateLogSucceeds(camAdminRestContext, camAdminRestContext.tenant().alias, 0, PrincipalsConstants.downloadLogType.AUTH, function(err, principals) {
                                assert.ok(!err);
                                assert.ok(principals);

                                // Get a new list of principals excluding tenant admins
                                var newPrincipalsListExcludingAdmins = _.filter(principals, function(principal) { return principal.publicAlias.match(regexp); });

                                _.each(principalList, function(principal) {
                                    assert.ok(!_.findWhere(newPrincipalsListExcludingAdmins, {principalId: principal.principalId}));
                                });

                                return callback();
                            });
                        });
                    });
                });
            });
        });

    });
});
