/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Tenant = require('oae-tenants/lib/model').Tenant;
var api = require('oae-principals');
var Context = require('oae-context').Context;


var tenant = new Tenant('cam', 'Cambridge', 'Cambridge University', 3000);
var anonymousContext = new Context(tenant, null);

var createUser = function(test, callback) {
    var r = Math.floor(Math.random()*10000000);

    var username = 'simong-' + r;
    var firstName = 'Simon';
    var lastName = 'Gaeremynck';
    var displayName = 'simong';
    var password = 'password';
    var visibility = "public";

    api.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, id) {
        if (err) {
            test.fail("Creating a new user should be possible.");
            return test.done();
        }

        api.getUser(anonymousContext, id, function(err, user) {
            test.equal(username, user.username);
            test.equal(firstName, user.firstName);
            test.equal(lastName, user.lastName);
            test.equal(displayName, user.displayName);
            test.equal(visibility, user.visibility);

            // Try to create one again.
            api.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, foo) {
                if (!err) {
                    test.fail("Creating a user with the same username should fail.");
                }

                // This way the exports.testCreateUser can be used in other tests.
                callback(user);
            });
        });
    });
};

exports.testCreateUser = function(test) {
    createUser(test, function() {
        test.done();
    });
};

exports.testUpdateUser = function(test) {
    test.expect(11);

    createUser(test, function(user) {
        // Try to update it.
        var ctx = new Context(tenant, user);
        api.updateUser(ctx, user.id, 'private', 'en_GB', 'Europe/London', 'first', 'last', 'displayname', function(err){
            if (err) {
                test.fail("Should be able to update a user.");
                test.done();
            }

            // Get it.
            api.getUser(ctx, user.id, function(err, user) {
                if (err) {
                    test.fail("Should be able to get a user.");
                    test.done();
                }

                test.equal('private', user.visibility);
                test.equal('first', user.firstName);
                test.equal('last', user.lastName);
                test.equal('displayname', user.displayName);
                test.equal('en_GB', user.locale);
                test.equal('Europe/London', user.timezone);
                test.done();
            });

        });
    });
};

exports.testEmptyUpdate = function(test) {
    createUser(test, function(user) {
        var ctx = new Context(tenant, user);
        api.updateUser(ctx, user.id, undefined, undefined, undefined, undefined, undefined, undefined, function(err){
            if (!err) {
                test.fail('Updating a user with no values should fail.');
            }
            test.done();
        });
    });
};

exports.testCheckPassword = function(test) {
    test.expect(9);
    createUser(test, function(created_user) {
        api.checkPassword(tenant, created_user.username, 'password', function(err, pw_user) {
            test.ok(!err);
            test.equal(created_user.id, pw_user.id);
            api.checkPassword(tenant, 'none_existing_user', 'password', function(err, pw_user) {
                test.ok(!err);
                test.equal(false, pw_user);
                test.done();
            });
        });
    });
};