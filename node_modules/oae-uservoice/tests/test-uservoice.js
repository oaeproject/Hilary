/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var UservoiceProfile = require('oae-uservoice/lib/internal/profile');
var UservoiceTestUtil = require('oae-uservoice/lib/test/util');

describe('UserVoice', function() {

    // REST contexts that are used to execute requests as a variety of different users in different tenants
    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var anonymousRestContext = null;

    /*!
     * Before the tests start, prepare all the REST contexts
     */
    before(function(callback) {
        // Initialize the REST contexts
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);

        // Do not follow redirects for any of the rest contexts
        globalAdminRestContext.followRedirect = false;
        camAdminRestContext.followRedirect = false;
        anonymousRestContext.followRedirect = false;

        return callback();
    });

    /*!
     * Before each test, ensure that the configuration has all the UserVoice SSO features enabled
     */
    beforeEach(function(callback) {
        // Enable UserVoice while configuring the base URL, subdomain and ssoKey
        return UservoiceTestUtil.setConfig(globalAdminRestContext, true, 'https://testuservoice.uservoice.com', 'testuservoice', 'abc123', callback);
    });

    /*!
     * After each test, ensure the default language for the Cambridge tenant is reset to the system default
     */
    afterEach(function(callback) {
        // Ensure the cambridge tenant default language is cleared back to the default
        ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, ['oae-principals/user/defaultLanguage'], function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    describe('Redirect', function() {

        /**
         * Test that verifies the anonymous user redirects to UserVoice anonymously
         */
        it('verify it redirects the anonymous user to UserVoice anonymously', function(callback) {
            return UservoiceTestUtil.assertRedirect(anonymousRestContext, 'https://testuservoice.uservoice.com', false, callback);
        });

        /**
         * Test that verifies a tenant admin redirects to UserVoice with an auth token
         */
        it('verify it redirects a tenant admin to UserVoice with an auth token', function(callback) {
            return UservoiceTestUtil.assertRedirect(camAdminRestContext, 'https://testuservoice.uservoice.com', true, callback);
        });

        /**
         * Test that verifies an authenticated user redirects to UserVoice with an auth token
         */
        it('verify it redirects an authenticated user to UserVoice with an auth token', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                mrvisser.restContext.followRedirect = false;
                return UservoiceTestUtil.assertRedirect(camAdminRestContext, 'https://testuservoice.uservoice.com', true, callback);
            });
        });

        /**
         * Test that verifies redirecting to UserVoice gives an error when a subdomain is not configured in the tenant
         */
        it('verify it gives an error when subdomain is not properly configured for the tenant', function(callback) {
            // Clear UserVoice subdomain configuration
            UservoiceTestUtil.setConfig(globalAdminRestContext, null, null, '', null, function() {

                // Ensure redirect gives a 400 error
                UservoiceTestUtil.assertRedirectHasError(camAdminRestContext, 400, function() {

                    // Make the UserVoice subdomain configuration nothing but whitespace
                    UservoiceTestUtil.setConfig(globalAdminRestContext, null, null, '  ', null, function() {

                        // Ensure redirect gives a 400 error
                        return UservoiceTestUtil.assertRedirectHasError(camAdminRestContext, 400, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies the user is redirected without an auth token when there is no SSO key configured for the tenant
         */
        it('verify it redirects anonymously when there is no SSO key configured for the tenant', function(callback) {
            // Clear the UserVoice SSO key configuration
            UservoiceTestUtil.setConfig(globalAdminRestContext, null, null, null, '', function() {
                return UservoiceTestUtil.assertRedirect(camAdminRestContext, 'https://testuservoice.uservoice.com', false, callback);
            });
        });

        /**
         * Test that verifies the user is redirected to a custom base URL when configured
         */
        it('verify it redirects to a custom base URL that is configured for a tenant', function(callback) {
            // Change to a custom insecure base URL
            UservoiceTestUtil.setConfig(globalAdminRestContext, null, 'http://custom.baseurl.com', null, null, function() {
                return UservoiceTestUtil.assertRedirect(anonymousRestContext, 'http://custom.baseurl.com', false, callback);
            });
        });
    });

    describe('Profiles', function() {

        /**
         * Test that verifies no private information is sent to the UserVoice site for a user profile
         */
        it('verify it does not transfer private or loggedin user information', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, nico, bert) {
                assert.ok(!err);

                // Apply privacy and public alias' to a couple of the users
                mrvisser.visibility = 'public';
                nico.visibility = 'loggedin';
                bert.visibility = 'private';

                mrvisser.publicAlias = 'mrvisser';
                nico.publicAlias = 'nico';
                bert.publicAlias = 'bert';

                var publicUser = mrvisser.user;
                var loggedinUser = nico.user;
                var privateUser = bert.user;

                // Ensure public user data ends up on UserVoice profile
                var publicProfile = UservoiceProfile.createUservoiceProfile(publicUser);
                assert.equal(publicProfile.guid, publicUser.id);
                assert.equal(publicProfile.display_name, publicUser.displayName);
                assert.equal(publicProfile.locale, 'en');

                var loggedinProfile = UservoiceProfile.createUservoiceProfile(loggedinUser);
                assert.equal(loggedinProfile.guid, loggedinUser.id);
                assert.equal(loggedinProfile.display_name, loggedinUser.publicAlias);
                assert.equal(loggedinProfile.locale, 'en');

                var privateProfile = UservoiceProfile.createUservoiceProfile(privateUser);
                assert.equal(privateProfile.guid, privateUser.id);
                assert.equal(privateProfile.display_name, privateUser.publicAlias);
                assert.equal(privateProfile.locale, 'en');

                return callback();
            });
        });

        /**
         * Test that verifies the proper UserVoice-suported locale is sent to UserVoice for the user's profile
         */
        it('verify it properly maps the user locale to either a UserVoice-supported locale or nothing', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, mrvisser) {
                assert.ok(!err);
                mrvisser = mrvisser.user;

                // Ensure the local is correctly converted into UserVoice supported locale
                mrvisser.locale = 'nl-NL';
                assert.equal(UservoiceProfile.createUservoiceProfile(mrvisser).locale, 'nl');
                mrvisser.locale = 'nl_NL';
                assert.equal(UservoiceProfile.createUservoiceProfile(mrvisser).locale, 'nl');

                // Ensure an alternative locale mapping is used for the inconsistent representations in UserVoice
                mrvisser.locale = 'fr-CA';
                assert.equal(UservoiceProfile.createUservoiceProfile(mrvisser).locale, 'fr-CA');
                mrvisser.locale = 'fr_CA';
                assert.equal(UservoiceProfile.createUservoiceProfile(mrvisser).locale, 'fr-CA');

                // Ensure a completely unsupported locale or no locale results in the tenant default being used
                delete mrvisser.locale;
                assert.equal(UservoiceProfile.createUservoiceProfile(mrvisser).locale, 'en');
                mrvisser.locale = 'af_ZA';
                assert.equal(UservoiceProfile.createUservoiceProfile(mrvisser).locale, 'en');

                // Set the tenant default to an unsupported language
                ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/user/defaultLanguage': 'af_ZA'}, function(err) {
                    assert.ok(!err);

                    // Ensure when mrvisser has the af_ZA locale, no locale is provided for the profile
                    mrvisser.locale = 'af_ZA';
                    assert.ok(!_.chain(UservoiceProfile.createUservoiceProfile(mrvisser)).keys().contains('locale').value());

                    // Ensure when mrvisser clears their locale, there is still no default
                    delete mrvisser.locale;
                    assert.ok(!_.chain(UservoiceProfile.createUservoiceProfile(mrvisser)).keys().contains('locale').value());

                    return callback();
                });
            });
        });
    });
});

