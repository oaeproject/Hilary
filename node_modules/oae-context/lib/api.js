/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var principalAPI = require('oae-principals');
var principalModel = require('oae-principals/lib/model');

/**
 * A generic context object that represents a user execution context.
 *
 * @param {Tenant}  tenant  The tenant of the current execution context
 * @param {User}    user    The user associated to the current execution context
 */
var Context = module.exports.Context = function(tenant, user) {

    var _isTenantAdmin = null;
    var _isGlobalAdmin = null;
    var that = {};

    /**
     * @return {Tenant} The tenant associated to the current context
     */
    that.tenant = function() {
        return tenant;
    };

    /**
     * @return {User} The user associated to the current context
     */
    that.user = function() {
        return user;
    };

    /**
     * Checks whether the current user is a tenant admin.
     *
     * @param  {Function(err, isAdmin)}  callback           Callback method,
     * @param  {Object}                  callback.err       Error object
     * @param  {Boolean}                 callback.isAdmin   Boolean that defined if this user is a tenant admin.
     */
    that.isTenantAdmin = function(callback) {
        // Anonymous users are not admins.
        if (user === null) {
            return callback(null, false);
        }

        // Maybe we already performed the look-up and it's cached.
        if (_isTenantAdmin !== null) {
            return callback(null, _isTenantAdmin);
        }

        // Nope, get it from the API.
        principalAPI.isTenantAdmin(tenant.alias, user, function(err, isAdmin) {
            if (!err) {
                _isTenantAdmin = isAdmin;
            }
            callback(err, isAdmin);
        });
    };

    /**
     * Checks whether the current user is a global admin.
     *
     * @param  {Function(err, isAdmin)}  callback           Callback method,
     * @param  {Object}                  callback.err       Error object
     * @param  {Boolean}                 callback.isAdmin   Boolean that defined if this user is a global admin.
     */
    that.isGlobalAdmin = function(callback) {
        // Anonymous users are not admins.
        if (user === null) {
            return callback(null, false);
        }

        // Maybe we already performed the look-up and it's cached.
        if (_isGlobalAdmin !== null) {
            return callback(null, _isGlobalAdmin);
        }

        // Nope, get it from the API.
        principalAPI.isGlobalAdmin(user, function(err, isAdmin) {
            if (!err) {
                _isGlobalAdmin = isAdmin;
            }
            callback(err, isAdmin);
        });
    };

    /**
     * Checks whether the current user is a tenant or global admin.
     *
     * @param  {Function(err, isAdmin)}  callback           Callback method,
     * @param  {Object}                  callback.err       Error object
     * @param  {Boolean}                 callback.isAdmin   Boolean that defined if this user is a tenant or global admin.
     */
    that.isAdmin = function(callback) {
        // Anonymous users are not admins.
        if (user === null) {
            return callback(null, false);
        }

        // Maybe we already performed the look-up and it's cached.
        if (_isGlobalAdmin === true || _isTenantAdmin === true) {
            return callback(null, true);
        }

        // Nope, do the lookup.
        that.isGlobalAdmin(function(err, isAdmin) {
            if (!err && isAdmin) {
                return callback(null, true);
            }

            that.isTenantAdmin(callback);
        });
    };

    return that;
};