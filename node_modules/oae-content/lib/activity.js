/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzUtil = require('oae-authz/lib/util');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-content');
var MessageBoxAPI = require('oae-messagebox');
var MessageBoxUtil = require('oae-messagebox/lib/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('./internal/dao');
var ContentInternalUtil = require('oae-content/lib/internal/util');
var ContentUtil = require('./internal/util');


////////////////////
// CONTENT-CREATE //
////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_CREATE, {
    'groupBy': [{'actor': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-content',
        'emailTemplateId': 'notify-content-share'   // Use content share template, as it is the same as create
    },
    'routers': {
        'activity': {
            'actor': ['self', 'followers'],
            'object': ['members']
        },
        'notification': {
            'object': ['members']
        }
    }
});

/*!
 * Post a content-create activity when a user creates a content item.
 */
ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, revision, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////////////////////////////////
// CONTENT-UPDATE and CONTENT-UPDATE-VISIBILITY //
//////////////////////////////////////////////////

var _updateContentRouters = {
    'activity': {
        'actor': ['self'],
        'object': ['members']
    },
    'notification': {
        'object': ['managers']
    }
};

var _updateContentConfig = {
    // "Content Item was updated by 5 users"
    'groupBy': [{'object': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-content',
        'emailTemplateId': 'notify-content-update'
    },
    'routers': _updateContentRouters
};

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE, _updateContentConfig);
ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_VISIBILITY, {'routers': _updateContentRouters});

/*!
 * Post either a content-update or content-update-visibility activity when a user updates a content item's metadata.
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent, revision) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContent.id, {'content': newContent});

    // We discriminate between general updates and visibility changes. If the visibility has changed, we fire a visibility changed activity *instead* of an update activity
    var activityType = null;
    if (newContent.visibility === oldContent.visibility) {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE;
    } else {
        activityType = ContentConstants.activity.ACTIVITY_CONTENT_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////
// CONTENT-REVISION //
//////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, _updateContentConfig);

/*!
 * Post a content-revision activity when a user uploads a new file body
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, newContentObj, oldContentObj, revision) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContentObj.id, {'content': newContentObj});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_REVISION, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


///////////////////////////////
// CONTENT-RESTORED-REVISION //
///////////////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_RESTORED_REVISION, _updateContentConfig);

/*!
 * Post a content-restored-revision activity when a user restores an old revision.
 */
ContentAPI.on(ContentConstants.events.RESTORED_REVISION, function(ctx, newContentObj, oldContentObj, restoredRevision) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', newContentObj.id, {'content': newContentObj});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_RESTORED_REVISION, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


/////////////////////
// CONTENT-COMMENT //
/////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_COMMENT, {
    'groupBy': [{'target': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-content',
        'emailTemplateId': 'notify-content-comment'
    },
    'routers': {
        'activity': {
            'actor': ['self'],
            'target': ['message-contributors', 'members']
        },
        'notification': {
            'target': ['message-contributors', 'managers']
        }
    }
});

/*!
 * Post a content-comment activity when a user comments on a content item
 */
ContentAPI.on(ContentConstants.events.CREATED_COMMENT, function(ctx, message, content) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content-comment', message.id, {'contentId': content.id, 'message': message});
    var targetResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_COMMENT, millis, ActivityConstants.verbs.POST, actorResource, objectResource, targetResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});


//////////////////////////////////////////////
// CONTENT-SHARE and CONTENT-ADD-TO-LIBRARY //
//////////////////////////////////////////////

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY, {
    // "Branden Visser added 5 items to his library"
    'groupBy': [{'actor': true}],
    'routers': {
        'activity': {
            'actor': ['self', 'followers'],
            'object': ['managers']
        }
    }
});

ActivityAPI.registerActivityType(ContentConstants.activity.ACTIVITY_CONTENT_SHARE, {
    'groupBy': [
        // "Branden Visser shared Content Item with 5 users and groups"
        {'actor': true, 'object': true},

        // "Branden Visser shared 8 files with OAE Team"
        {'actor': true, 'target': true}
    ],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-content',
        'emailTemplateId': 'notify-content-share'
    },
    'routers': {
        'activity': {
            'actor': ['self'],
            'object': ['managers'],
            'target': ['self', 'members', 'followers']
        },
        'notification': {
            'target': ['self']
        }
    }
});

/*!
 * Post a content-share or content-add-to-library activity based on content sharing
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content, permissionChanges) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.id, {'content': content});
    var activitySeeds = [];

    // Post an activity for each user / group the content item was shared with. Each is a content-share activity where
    // the object is the content item and the target is the user or group with which it was shared.
    var principalIds = _.keys(permissionChanges);
    for (var i = 0; i < principalIds.length; i++) {
        var principalId = principalIds[i];
        if (permissionChanges[principalId]) {
            var targetResourceType = (PrincipalsUtil.isGroup(principalId)) ? 'group' : 'user';
            var targetResource = new ActivityModel.ActivitySeedResource(targetResourceType, principalId);
            if (targetResource.resourceId === actorResource.resourceId) {
                // Users can't "share" with themselves, they actually "add it to their library"
                ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_ADD_TO_LIBRARY, millis, ActivityConstants.verbs.ADD, actorResource, objectResource));
            } else {
                // A user shared content with some other user, fire the content share activity
                ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_SHARE, millis, ActivityConstants.verbs.SHARE, actorResource, objectResource, targetResource));
            }
        }
    }
});


///////////////////////////
// ACTIVITY ENTITY TYPES //
///////////////////////////

/*!
 * Produces a persistent 'content' activity entity
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentProducer = function(resource, callback) {
    var content = (resource.resourceData && resource.resourceData.content) ? resource.resourceData.content : null;

    // If the content item was fired with the resource, use it instead of fetching
    if (content) {
        return callback(null, ContentUtil.createPersistentContentActivityEntity(content));
    }

    ContentDAO.Content.getContent(resource.resourceId, function(err, content) {
        if (err) {
            return callback(err);
        }

        return callback(null, ContentUtil.createPersistentContentActivityEntity(content));
    });
};

/*!
 * Produces an persistent activity entity that represents a comment that was posted
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentCommentProducer = function(resource, callback) {
    var contentId = resource.resourceData.contentId;
    var message = resource.resourceData.message;
    ContentDAO.Content.getContent(contentId, function(err, content) {
        if (err) {
            return callback(err);
        }

        MessageBoxUtil.createPersistentMessageActivityEntity(message, function(err, entity) {
            if (err) {
                return callback(err);
            }

            // Store the content id and visibility on the entity as these are required for routing the activities.
            entity.contentId = content.id;
            entity.contentVisibility = content.visibility;
            return callback(null, entity);
        });
    });
};

/*!
 * Transform the content persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};

    // Collect all the revision ids so we can fetch their preview data
    var allRevisionIds = [];
    _.each(activityEntities, function(entities, activityId) {
        _.each(entities, function(entity, entityId) {
            allRevisionIds.push(entity.content.latestRevisionId);
        });
    });

    // Fetch the previews and attach them to the transformed entities
    ContentDAO.Previews.getPreviewUris(allRevisionIds, function(err, previews) {
        if (err) {
            return callback(err);
        }

        _.each(activityEntities, function(entities, activityId) {
            transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
            _.each(entities, function(entity, entityId) {
                // Transform the persistent entity with its up-to-date preview status
                transformedActivityEntities[activityId][entityId] = ContentUtil.transformPersistentContentActivityEntity(ctx, entity, previews[entity.content.latestRevisionId]);
            });
        });

        return callback(null, transformedActivityEntities);
    });
};

/*!
 * Transform the comment persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _contentCommentTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            var contentId = entity.message.messageBoxId;
            var contentResource = AuthzUtil.getResourceFromId(contentId);
            var profilePath = '/content/' + contentResource.tenantAlias + '/' + contentResource.resourceId;
            var urlFormat = '/api/content/' + contentId + '/messages/%s';
            transformedActivityEntities[activityId][entityId] = MessageBoxUtil.transformPersistentMessageActivityEntity(ctx, entity.message, entity.messageContext, profilePath, urlFormat);
        });
    });

    return callback(null, transformedActivityEntities);
};

ActivityAPI.registerActivityEntityType('content', {
    'producer': _contentProducer,
    'transformer': _contentTransformer,
    'propagation': function(associationsCtx, entity, callback) {
        ActivityUtil.getStandardResourcePropagation(entity.content.visibility, AuthzConstants.joinable.NO, callback);
    }
});

ActivityAPI.registerActivityEntityType('content-comment', {
    'producer': _contentCommentProducer,
    'transformer': _contentCommentTransformer,
    'propagation': function(associationsCtx, entity, callback) {
        ActivityUtil.getStandardResourcePropagation(entity.contentVisibility, AuthzConstants.joinable.NO, callback);
    }
});


//////////////////////////////////
// ACTIVITY ENTITY ASSOCIATIONS //
//////////////////////////////////

/*!
 * Register an association that presents the members of a content item categorized by role
 */
ActivityAPI.registerActivityEntityAssociation('content', 'members-by-role', function(associationsCtx, entity, callback) {
    ActivityUtil.getAllAuthzMembersByRole(entity.content.id, callback);
});

/*!
 * Register an association that presents all the indirect members of a content item
 */
ActivityAPI.registerActivityEntityAssociation('content', 'members', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, _.flatten(_.values(membersByRole)));
    });
});

/*!
 * Register an association that presents all the managers of a content item
 */
ActivityAPI.registerActivityEntityAssociation('content', 'managers', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, membersByRole[ContentConstants.roles.MANAGER]);
    });
});

/*!
 * Register an assocation that presents all the commenting contributors of a content item
 */
ActivityAPI.registerActivityEntityAssociation('content', 'message-contributors', function(associationsCtx, entity, callback) {
    MessageBoxAPI.getRecentContributions(entity.content.id, null, 100, callback);
});

/*!
 * Register an association that presents all the indirect members of the content item to which the comment belongs
 */
ActivityAPI.registerActivityEntityAssociation('content-comment', 'members', function(associationsCtx, entity, callback) {
    // It is possible that the parent content item is not actually associated to the activity (e.g., an activity where a comment is edited),
    // therefore we only use the content's members if they exist in the associations
    associationsCtx.getSession().getByEntityId('content', entity.contentId, 'members', function(err, members) {
        if (err) {
            return callback(err);
        } else if (members) {
            // We have a match on the parent content item's associations, use them
            return callback(null, members);
        }

        // The parent content item is not associated to the activity, we'll manually fetch its members
        ActivityUtil.getAllAuthzMembersByRole(entity.contentId, function(err, membersByRole) {
            if (err) {
                return callback(err);
            }

            return callback(null, _.flatten(_.values(membersByRole)));
        });
    });
});

