/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var RestUtil = require('./util');

/**
 * Get a publication by its ID
 *
 * @param  {RestContext}    restCtx                 Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}         publicationId           The ID of the publication to retrieve
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Standard error object, if any
 * @param  {Publication}    callback.publication    The retrieved publication
 */
var getPublication = module.exports.getPublication = function(restCtx, publicationId, callback) {
    RestUtil.RestRequest(restCtx, '/api/publications/' + RestUtil.encodeURIComponent(publicationId), 'GET', null, callback);
};

/**
 * Get the publications that are linked to a user
 *
 * @param  {RestContext}    restCtx                 Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}         userId                  The ID of the user for which to retrieve the publications
 * @param  {String}         [start]                 The data of the publication from which to start returning this page of results
 * @param  {Number}         [limit]                 The number of publications that should be returned in this page
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Standard error object, if any
 * @param  {Publication}    callback.publication    The publications for the given user
 */
var getPublications = module.exports.getPublications = function(restCtx, userId, start, limit, callback) {
    var params = {
        'start': start,
        'limit': limit
    };
    RestUtil.RestRequest(restCtx, '/api/publications/library/' + RestUtil.encodeURIComponent(userId), 'GET', params, callback);
};

/**
 * Create a publication
 *
 * @param  {RestContext}    restCtx                     Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String[]}       sourceIds                   A set of source identifiers that identifies this publication in third-party data sets
 * @param  {String}         displayName                 The title of this publication
 * @param  {String}         publicationType             The type of this publication
 * @param  {Number}         date                        The date it was published
 * @param  {String[]}       authors                     The names of the people who co-authored this publication
 * @param  {Object}         extra                       A set of extra options
 * @param  {String}         extra.issueNumber           The issue number of the journal this publication was published in, or the revision of a book, ..
 * @param  {String}         extra.pageBegin             At which page this publication can be found in case it's published in a book or journal
 * @param  {String}         extra.pageEnd               At which page the publication ends in case it's published in a book or journal
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                Standard error object, if any
 * @param  {Publication}    callback.data.result        Indicates if this publication was newly created, updated an existing one or was ignored
 * @param  {Publication}    callback.data.publication   The created publication
 */
var createPublication = module.exports.createPublication = function(restCtx, sourceIds, displayName, publicationType, date, authors, extra, callback) {
    extra = extra || {};
    var params = {
        'displayName': displayName,
        'publicationType': publicationType,
        'date': date,
        'authors': authors,
        'thumbnailUri': extra.thumbnailUri,
        'publisher': extra.publisher,
        'issueNumber': extra.issueNumber,
        'pageBegin': extra.pageBegin,
        'pageEnd': extra.pageEnd,
        'sourceIds': sourceIds,
    };

    RestUtil.RestRequest(restCtx, '/api/publications/create', 'POST', params, callback);
};

/**
 * Links a user with a publication
 *
 * @param  {RestContext}    restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}         publicationId       The ID of the publication to link
 * @param  {String}         authorName          The name of the author on the publication to replace with the user ID
 * @param  {String}         userId              The ID of the user that should be linked with this publication
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        Standard error object, if any
 */
var linkPublicationToUser = module.exports.linkPublicationToUser = function(restCtx, publicationId, authorName, userId, callback) {
    var params = {
        'authorName': authorName,
        'userId': userId
    };
    RestUtil.RestRequest(restCtx, '/api/publications/' + RestUtil.encodeURIComponent(publicationId) + '/link', 'POST', params, callback);
};
