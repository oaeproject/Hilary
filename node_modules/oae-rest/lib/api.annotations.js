/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var RestUtil = require('./util');


/**
 * A function thtat makes a get request to get all annotations from a specific page.
 * 
 * @param  {RestContext}        restCtx         Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}             revisionID      The revision id of the document the notations are to be placed upon.
 * @param  {String}             page            The page number on wich the annotation wich is to be updated is located.
 * @param  {Function}           callback        Standard callback function takes arguments 'err' and 'body'.
 * @param  {Object}             callback.err    Standard error object.
 * @param  {Object}             callback.body   A Json object containing all the annotations.
 */
var getAnnotations = module.exports.getSection = function(restCtx, revisionId, page, callback){
    RestUtil.RestRequest(restCtx, '/api/annotations/' + RestUtil.encodeURIComponent(revisionId) + '/' + RestUtil.encodeURIComponent(page), 'GET', null, callback);
};

/**
 * A function that makes get request to get a specific annotation.
 * 
 * @param  {RestContext}        restCtx         Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}             revisionID      The revision id of the document the notations are to be placed upon.
 * @param  {String}             annotationID    The id of the annotation that is to be returned.
 * @param  {Function}           callback        Standard callback function takes arguments 'err' and 'body'.
 * @param  {Object}             callback.err    Standard error object.
 * @param  {Object}             callback.body   A Json object containing the annotation.
 */
var getAnnotation = module.exports.getAnnotation = function(restCtx, revisionId, annotationId, callback){
    RestUtil.RestRequest(restCtx, '/api/annotations/' + RestUtil.encodeURIComponent(revisionId) + '/' + RestUtil.encodeURIComponent(annotationId), 'GET', null, callback);
};

/**
 * A function that makes a post request to make a annotation.
 * 
 * @param  {RestContext}        restCtx         Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}             revisionID      The revision id of the document the notations are to be placed upon.
 * @param  {String}             page            The page number on wich the annotation wich is to be created is located.
 * @param  {Object}             body            The body wich is to be used to create the annotation.
 * @param  {Function}           callback        Standard callback function takes arguments 'err' and 'body'.
 * @param  {Object}             callback.err    Standard error object.
 * @param  {Sting}              callback.body   A string that represents the location of the annotation
 */
var createAnnotation = module.exports.createAnnotation = function(restCtx, revisionId, page, body, callback){
    RestUtil.RestRequest(restCtx, '/api/annotations/' + RestUtil.encodeURIComponent(revisionId) + '/' + RestUtil.encodeURIComponent(page), body, 'POST', null, callback);
};

/**
 * A function makes a put request to update a annotation
 * 
 * @param  {RestContext}        restCtx         Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}             revisionID      The revision id of the document the notations are to be placed upon.
 * @param  {String}             page            The page number on wich the annotation wich is to be updated is located.
 * @param  {String}             annotationID    The id of the annotation that is to be deleted.
 * @param  {Object}             body            The body wich is to be used to replace the annotation.
 * @param  {Function}           callback        Standard callback function takes arguments 'err' and 'body'.
 * @param  {Object}             callback.err    Standard error object.
 * @param  {Sting}              callback.body   A string that represents the location of the annotation
 */
var updateAnnotation = module.exports.updateAnnotation = function(restCtx, revisionId, page, annotationId, body, callback){
    RestUtil.RestRequest(restCtx, '/api/annotations/' + RestUtil.encodeURIComponent(revisionId) + '/' + RestUtil.encodeURIComponent(page) + '/' + RestUtil.encodeURIComponent(annotationId), body, 'PUT', null, callback);
};

/**
 * A function that makes a delete request do delete a annotation.
 * 
 * @param  {RestContext}        restCtx         Standard REST Context object that contains the current tenant URL and the current user credentials
 * @param  {String}             revisionID      The revision id of the document the notations are to be placed upon.
 * @param  {String}             annotationID    The id of the annotation that is to be deleted.
 * @param  {Function}           callback        Standard callback function takes arguments 'err'
 * @param  {Object}             callback.err    Standard error object.
 */
var deleteAnnotation = module.exports.deleteAnnotation = function(restCtx, revisionId, annotationId, callback){
    RestUtil.RestRequest(restCtx, '/api/annotations/' + RestUtil.encodeURIComponent(revisionId) + '/' + RestUtil.encodeURIComponent(annotationId), 'PUT', null, callback);
};