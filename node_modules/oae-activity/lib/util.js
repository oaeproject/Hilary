/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');

/**
 * Get all the direct and indirect members of the given resource, keyed by their role. This is useful for activity routing
 * where you need to get direct and indirect members for routes and entity propagation.
 *
 * @param  {String}    resourceId              The ID of the resource whose members to fetch
 * @param  {Function}  callback                Invoked when the process completes
 * @param  {Object}    callback.err            An error that occurred, if any
 * @param  {Object}    callback.membersByRole  An object holding all the direct and indirect members of the given resource item. The key of the hash is the role, and the values are a list of strings that represent the principal ids of those members
 */
var getAllAuthzMembersByRole = module.exports.getAllAuthzMembersByRole = function(resourceId, callback) {
    AuthzAPI.getAuthzMembers(resourceId, null, 10000, function(err, members) {
        if (err) {
            return callback(err);
        }

        var membersByRole = {};
        var groupMembersByRole = {};

        // Gather the direct membersByRole and aggregate the groupMembersByRole so we can get their descendants
        for (var i = 0; i < members.length; i++) {
            var member = members[i];
            var id = member.id;
            var role = member.role;
            membersByRole[role] = membersByRole[role] || [];
            membersByRole[role].push(id);
            if (AuthzUtil.isGroupId(id)) {
                groupMembersByRole[role] = groupMembersByRole[role] || [];
                groupMembersByRole[role].push(id);
            }
        }

        // Merge the descendants by role of all the group members descendants
        _getAllAuthzGroupMembersByRole(groupMembersByRole, function(err, indirectMembersByRole) {
            if (err) {
                return callback(err);
            }

            var roles = _.keys(indirectMembersByRole);
            for (var i = 0; i < roles.length; i++) {
                var role = roles[i];
                membersByRole[role] = _.uniq(_.union(membersByRole[role], indirectMembersByRole[role]));
            }

            // At this point membersByRole holds a hash of all direct and indirect members of the content, keyed by their role
            return callback(null, membersByRole);
        });
    });
};

/**
 * Internal function to recursively aggregate all members by their role. This is similar to `getAllAuthzMembersByRole`, except it
 * starts with a hash of lists of direct members, keyed by their roles.
 *
 * @param  {Object}    groupRoles              An object keyed by a role whose values are a list of group ids that have that role directly on the resource
 * @param  {Function}  callback                Invoked when the process completes
 * @param  {Object}    callback.err            An error that occurred, if any
 * @param  {Object}    callback.membersByRole  An object containing all members categorized by their role. The key is the role, and the value is a list of principal ids that represent the members
 * @api private
 */
var _getAllAuthzGroupMembersByRole = function(groupRoles, callback) {
    var roles = _.keys(groupRoles);
    if (roles.length === 0) {
        return callback(null, {});
    }

    // These variables hold the state of the looped _getAllAuthzMembers executions below
    var membersByRole = {};
    var done = 0;
    var todo = roles.length;
    var finished = false;

    // For each role, collect their group descendants into the membersByRole object
    _.each(groupRoles, function(groupIds, role) {
        _getAllAuthzMembers(groupIds, function(err, members) {
            if (finished) {
                // Nothing to do, we probably already failed and called the callback
                return;
            } else if (err) {
                // We just received an error, mark that we're done and call the callback
                finished = true;
                return callback(err);
            } else {
                // Add the role members, decrement the number todo and exit if there are no more to do
                membersByRole[role] = members;
                done++;
                if (done === todo) {
                    finished = true;
                    return callback(null, membersByRole);
                }
            }
        });
    });
};

/**
 * Internal function to recursively aggregate all the direct and indirect members of a list of groups.
 *
 * @param  {String[]}  groupIds            The groups whose direct and indirect members to aggregate
 * @param  {Function}  callback            Invoked when the process completes
 * @param  {Object}    callback.err        An error that occurred, if any
 * @param  {Object}    callback.members    An object keyed by the member's principal id, whose value is simply `true`
 * @param  {Object}    [aggregatedMembers] Internal parameter used for recursion to collect all visited members. Holds the same format as `callback.members`.
 * @api private
 */
var _getAllAuthzMembers = function(groupIds, callback, aggregatedMembers) {
    aggregatedMembers = aggregatedMembers || {};
    if (groupIds.length === 0) {
        return callback(null, _.keys(aggregatedMembers));
    }

    var groupId = groupIds.shift();
    AuthzAPI.getAuthzMembers(groupId, null, 10000, function(err, members) {
        if (err) {
            return callback(err);
        }

        // Aggregate the memberIds
        for (var i = 0; i < members.length; i++) {
            var memberId = members[i].id;
            if (!aggregatedMembers[memberId] && AuthzUtil.isGroupId(memberId) && !_.contains(groupIds, memberId)) {
                // If this is a group and we have not aggregated it yet, add it to the groupIds
                groupIds.push(memberId);
            }

            // Aggregate the member's id
            aggregatedMembers[memberId] = true;
        }

        return _getAllAuthzMembers(groupIds, callback, aggregatedMembers);
    });
};
