/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var RolesUtil = require('oae-roles/lib/util');
var PermissionsAPI = require('oae-permissions/lib/api');
var Context = require('oae-context').Context;
var User = require('oae-principals/lib/model').User;

var PrincipalsAPI = require('oae-principals');


describe('Principals', function() {

    describe('Groups', function() {

        var tenant = null;
        var anonymousContext = null;

        beforeEach(function(callback) {
            var r = Math.floor(Math.random()*100000);
            tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            anonymousContext = new Context(tenant, null);
            callback();
         });

        /**
         * Utility function that will create a number of groups and users that will be used inside of the test.
         * @param  {Context}        ctx             Standard context object, representing the currently logged user and its tenant
         * @param  {Function(r)}    callback        Standard callback function executed when all checks have finished
         * @param  {Integer}        callback.r      Random number that is appended to user and groupids to ensure unique users and 
         *                                          groups for the test
         */
        var createPrincipals = function(ctx, callback) {
            var r = Math.floor(Math.random()*100000);
            var principals = 0;
            var createPrincipalDone = function(err) {
                if (err) {
                    assert.fail("ERROR: " + err.code + ", msg: " + err.msg);
                    return callback();
                }

                principals++;
                if (principals === 12) {
                    callback(r);
                }
            };

            PrincipalsAPI.createGroup(ctx, 'oae-team-' + r, 'oae-team-' + r, 'public', createPrincipalDone);
            PrincipalsAPI.createGroup(ctx, 'backend-team-' + r, 'backend-team-' + r, 'public', createPrincipalDone);
            PrincipalsAPI.createGroup(ctx, 'ui-team-' + r, 'ui-team-' + r, 'public', createPrincipalDone);
            PrincipalsAPI.createGroup(ctx, 'canadian-' + r, 'canadian-' + r, 'public', createPrincipalDone);
            PrincipalsAPI.createGroup(ctx, 'not-canadian-' + r, 'not-canadian-' + r, 'public', createPrincipalDone);
            PrincipalsAPI.createGroup(ctx, 'belgian-' + r, 'belgian-' + r, 'public', createPrincipalDone);
            PrincipalsAPI.createGroup(ctx, 'west-flemish-' + r, 'west-flemish' + r, 'public', createPrincipalDone);
            PrincipalsAPI.createGroup(ctx, 'east-flemish-' + r, 'east-flemish' + r, 'public', createPrincipalDone);

            PrincipalsAPI.createUser(ctx, 'bert-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Bert', 'Pareyn', 'bp323', createPrincipalDone);
            PrincipalsAPI.createUser(ctx, 'branden-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Branden', 'Visser', 'mrvisser', createPrincipalDone);
            PrincipalsAPI.createUser(ctx, 'nicolaas-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Nicolaas', 'Matthijs', 'nicolaas', createPrincipalDone);
            PrincipalsAPI.createUser(ctx, 'simon-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Simon', 'Gaeremynck', 'simong', createPrincipalDone);
        };

        /**
         * Get a full group uuid.
         * @param  {Context}    ctx         The execution context that holds a tenant.
         * @param  {String}     groupId     The id of the group
         * @return {String}                 The full group uuid. ex: g:cam:oae-team
         */
        var getGroupUuid = function(ctx, groupId) {
            return 'g:' + ctx.tenant().alias + ':' + groupId;
        };

        /**
         * Get a full user uuid.
         * @param  {Context}    ctx         The execution context that holds a tenant.
         * @param  {String}     userId      The id of the user
         * @return {String}                 The full user uuid. ex: u:cam:mrvisser
         */
        var getUserUuid = function(ctx, groupId) {
            return 'u:' + ctx.tenant().alias + ':' + groupId;
        };

        /**
         * Utility function that will be used to create a 4-level deep group structure that will be used
         * inside of the tests
         * @param  {Context}        ctx             Standard context object, representing the currently logged user and its tenant
         * @param  {Function(id)}   callback        Standard callback function executed when all checks have finished
         * @param  {Integer}        callback.id     Random number that is appended to user and groupids to ensure unique users and 
         *                                          groups for the test
         */
        var createOAEStructure = function(ctx, callback) {
            createPrincipals(ctx, function(id){
                var checks = 0;
                var principalsAdded = function(err) {
                    if (err) {
                        assert.fail("ERROR: " + err.code + ", msg: " + err.msg);
                        return callback();
                    }
                    checks++;
                    if (checks === 8) {
                        callback(id);
                    }
                };
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'canadian-' + id), [getUserUuid(ctx, 'branden-' + id)], 'member', principalsAdded);
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'not-canadian-' + id), [getUserUuid(ctx, 'simon-' + id)], 'member', principalsAdded);
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'belgian-' + id), [getGroupUuid(ctx, 'west-flemish-' + id), getGroupUuid(ctx, 'east-flemish-' + id)], 'member', principalsAdded);
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'west-flemish-' + id), [getUserUuid(ctx, 'bert-' + id)], 'member', principalsAdded);
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'east-flemish-' + id), [getUserUuid(ctx, 'nicolaas-' + id)], 'member', principalsAdded);
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'oae-team-' + id), [getGroupUuid(ctx, 'backend-team-' + id), getGroupUuid(ctx, 'ui-team-' + id)], 'member', principalsAdded);
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'backend-team-' + id), [getGroupUuid(ctx, 'canadian-' + id), getGroupUuid(ctx, 'not-canadian-' + id)], 'member', principalsAdded);
                PrincipalsAPI.addGroupMembers(ctx, getGroupUuid(ctx, 'ui-team-' + id), [getGroupUuid(ctx, 'belgian-' + id)], 'member', principalsAdded);
            });
        };

        /**
         * Utility function that will create a new user and will fetch it straight away to check successful creation
         * @param  {Context}               ctx             Standard context object, representing the currently logged user and its tenant
         * @param  {String}                username        The created user's username
         * @param  {String}                password        The created user's password
         * @param  {String}                visibility      The created user's account visibility. This can be public, loggedin or private
         * @param  {String}                firstName       The created user's first name
         * @param  {String}                lastName        The created user's last name
         * @param  {String}                displayName     The created user's last display name
         * @param  {Function(err, user)}   callback        Standard callback function executed when all checks have finished
         * @param  {Object}                callback.err    Error object containing error message
         * @param  {User}                  callback.user   User object representing the created user
         */
        var createAndGetUser = function(ctx, username, password, visibility, firstName, lastName, displayName, callback) {
            PrincipalsAPI.createUser(ctx, username, password, visibility, 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, id) {
                if (err) {
                    console.log(err);
                }
                assert.ok(!err);
                PrincipalsAPI.getUser(ctx, id, callback);
            });
        };

        /**
         * Utility function that will make sure that a particular group has the expected
         * set of group members
         *  @param  {String}           group_id         Group id for the group we want to check the members for
         *  @param  {Array<String>}    expected_members Array of user and group ids representing the expected members
         *  @param  {Function}         callback         Standard callback function
         */
        assertGroupMembers = function(ctx, group_id, expected_members, callback) {
            PrincipalsAPI.getGroupMembers(ctx, group_id, null, 1000, function(err, members) {
                assert.equal(members.length, expected_members.length, "Expected group '" + group_id + "' to have '" + expected_members.length + "' members.");
                for (var i = 0; i < expected_members.length; i++) {
                    var has_principal = false;
                    for (var c = 0; c < members.length; c++) {
                        if (members[c].id === expected_members[i]) {
                            has_principal = true;
                            break;
                        }
                    }
                    assert.ok(has_principal, "Group '" + group_id + "' does not contain: " + expected_members[i]);
                }
                callback();
            });
        };

        /**
         * Utility function that will make sure that a principal is a member of the expected
         * set of groups
         *  @param  {String}           principal_id     Principal id for which we want to check the memberships
         *  @param  {Array<String>}    expected_groups  Array of group ids representing the expected memberships
         *  @param  {Function}         callback         Standard callback function
         */
        assertMemberOf = function(ctx, expected_groups, callback) {
            PrincipalsAPI.memberOf(ctx, 0, 1000, function(err, groups) {
                assert.ok(!err);
                assert.equal(_.keys(groups).length, expected_groups.length, "Expected principal '" + ctx.user().id + "' to have '" + expected_groups.length + "' memberships.");
                for (var i = 0; i < expected_groups.length; i++) {
                    assert.ok(groups[expected_groups[i]], "Principal '" + ctx.user().id + "' does not contain: " + expected_groups[i]);
                }
                callback();
            });
        };

        /**
         * Utility function that will validate that the exploded membership list of a group is
         * as expected
         *  @param  {String}           group_id         Group id for the group we want to check the exploded members for
         *  @param  {Array<String>}    expected_users   Array of user ids representing the expected members
         *  @param  {Function}         callback         Standard callback function
         */
        assertExplodedGroupUsers = function(ctx, group_id, expected_users, callback) {
            PrincipalsAPI.getGroupUsers(ctx, group_id, function(err, users) {
                if (err) {
                    assert.fail("ERROR: " + err.code + ", msg: " + err.msg);
                    return callback();
                }

                assert.equal(users.length, expected_users.length, "Expected principal '" + group_id + "' to have '" + expected_users.length + "' users.");
                for (var i = 0; i < expected_users.length; i++) {
                    assert.ok(_.indexOf(users, expected_users[i]) !== -1, "Group '" + group_id + "' does not contain: " + expected_users[i]);
                }
                callback();
            });
        };

        /**
         * Test that will create a simple group structure and will validate
         * memberships
         */
        it('Test simple group structure', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            createAndGetUser(anonymousContext, 'test-runner' + r, 'password', 'public', 'Test', 'Runner', 'tr123', function(err, user) {
                var ctx = new Context(tenant, user);
                createOAEStructure(ctx, function(id) {
                    var asUser = ctx.user().id;

                    // Create the oae-team tree in a way that is NOT topdown or bottomup.
                    var memberships = 0;
                    var checks = 0;
                    var done = function() {
                        checks++;
                        if (checks === 11) {
                            callback();
                        }
                    };

                    var bertCtx = new Context(tenant, new User('cam', getUserUuid(ctx, 'bert-' + id)));
                    var nicoCtx = new Context(tenant, new User('cam', getUserUuid(ctx, 'nicolaas-' + id)));
                    var brandenCtx = new Context(tenant, new User('cam', getUserUuid(ctx, 'branden-' + id)));
                    var simonCtx = new Context(tenant, new User('cam', getUserUuid(ctx, 'simon-' + id)));

                    // The group members should only return the direct children.
                    assertGroupMembers(ctx, getGroupUuid(ctx, 'oae-team-' + id), [asUser, getGroupUuid(ctx, 'backend-team-' + id), getGroupUuid(ctx, 'ui-team-' + id)], done);
                    assertGroupMembers(ctx, getGroupUuid(ctx, 'backend-team-' + id), [asUser, getGroupUuid(ctx, 'canadian-' + id), getGroupUuid(ctx, 'not-canadian-' + id)], done);
                    assertGroupMembers(ctx, getGroupUuid(ctx, 'canadian-' + id), [asUser, getUserUuid(ctx, 'branden-' + id)], done);
                    assertGroupMembers(ctx, getGroupUuid(ctx, 'not-canadian-' + id), [asUser, getUserUuid(ctx, 'simon-' + id)], done);
                    assertGroupMembers(ctx, getGroupUuid(ctx, 'belgian-' + id), [asUser, getGroupUuid(ctx, 'west-flemish-' + id), getGroupUuid(ctx, 'east-flemish-' + id)], done);
                    assertGroupMembers(ctx, getGroupUuid(ctx, 'west-flemish-' + id), [asUser, getUserUuid(ctx, 'bert-' + id)], done);
                    assertGroupMembers(ctx, getGroupUuid(ctx, 'east-flemish-' + id), [asUser, getUserUuid(ctx, 'nicolaas-' + id)], done);

                    // ALL groups should be listed against a principal.
                    assertMemberOf(bertCtx, [getGroupUuid(ctx, 'oae-team-' + id), getGroupUuid(ctx, 'ui-team-' + id), getGroupUuid(ctx, 'belgian-' + id), getGroupUuid(ctx, 'west-flemish-' + id)], done);
                    assertMemberOf(nicoCtx, [getGroupUuid(ctx, 'oae-team-' + id), getGroupUuid(ctx, 'ui-team-' + id), getGroupUuid(ctx, 'belgian-' + id), getGroupUuid(ctx, 'east-flemish-' + id)], done);
                    assertMemberOf(brandenCtx, [getGroupUuid(ctx, 'oae-team-' + id), getGroupUuid(ctx, 'backend-team-' + id), getGroupUuid(ctx, 'canadian-' + id)], done);
                    assertMemberOf(simonCtx, [getGroupUuid(ctx, 'oae-team-' + id), getGroupUuid(ctx, 'backend-team-' + id), getGroupUuid(ctx, 'not-canadian-' + id)], done);
                    assertMemberOf(ctx, [getGroupUuid(ctx, 'oae-team-' + id), getGroupUuid(ctx, 'ui-team-' + id), getGroupUuid(ctx, 'backend-team-' + id), getGroupUuid(ctx, 'belgian-' + id),
                        getGroupUuid(ctx, 'west-flemish-' + id), getGroupUuid(ctx, 'east-flemish-' + id), getGroupUuid(ctx, 'not-canadian-' + id), getGroupUuid(ctx, 'not-canadian-' + id)], done);
                });

            });
        });

        /**
         * Test that verifies that group memberships are exploded as expected
         */
        it('Test group exploding', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            createAndGetUser(anonymousContext, 'test-runner' + r, 'password', 'public', 'Test', 'Runner', 'tr123', function(err, user) {
                var ctx = new Context(tenant, user);
                createOAEStructure(ctx, function(id) {
                    var asUser = ctx.user().id;

                    var checks = 0;
                    var done = function(err) {
                        checks++;
                        if (checks === 7) {
                            callback();
                        }
                    };
                    assertExplodedGroupUsers(ctx, getGroupUuid(ctx, 'oae-team-' + id), [asUser, getUserUuid(ctx, 'bert-' + id), getUserUuid(ctx, 'branden-' + id), getUserUuid(ctx, 'nicolaas-' + id), getUserUuid(ctx, 'simon-' + id)], done);
                    assertExplodedGroupUsers(ctx, getGroupUuid(ctx, 'backend-team-' + id), [asUser, getUserUuid(ctx, 'simon-' + id), getUserUuid(ctx, 'branden-' + id)], done);
                    assertExplodedGroupUsers(ctx, getGroupUuid(ctx, 'canadian-' + id), [asUser, getUserUuid(ctx, 'branden-' + id)], done);
                    assertExplodedGroupUsers(ctx, getGroupUuid(ctx, 'not-canadian-' + id), [asUser, getUserUuid(ctx, 'simon-' + id)], done);
                    assertExplodedGroupUsers(ctx, getGroupUuid(ctx, 'belgian-' + id), [asUser, getUserUuid(ctx, 'bert-' + id), getUserUuid(ctx, 'nicolaas-' + id)], done);
                    assertExplodedGroupUsers(ctx, getGroupUuid(ctx, 'west-flemish-' + id), [asUser, getUserUuid(ctx, 'bert-' + id)], done);
                    assertExplodedGroupUsers(ctx, getGroupUuid(ctx, 'east-flemish-' + id), [asUser, getUserUuid(ctx, 'nicolaas-' + id)], done);
                });
            });
        });

        /**
         * Test that a non-existing group identifier returns a 400
         */
        it('Test non-existing group', function(callback) {
            var ctx = new Context(tenant, null);
            PrincipalsAPI.getGroup(ctx, "non-existing-group", function(err, group) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that a group can be created
         */
        it('Test create group', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            createAndGetUser(anonymousContext, 'test-runner', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, user) {
                var ctx = new Context(tenant, user);
                PrincipalsAPI.createGroup(ctx, "test-group-" + r, "This is a test group", 'public', function(err, group) {
                    if (err) {
                        assert.fail("Should be able to create a simple group.");
                    }

                    // Should be created.
                    assert.equal(group, getGroupUuid(ctx, 'test-group-' + r));

                    // Create the same one again, should fail.
                    PrincipalsAPI.createGroup(ctx, "test-group-" + r, "This is a test group", 'public', function(err, group) {
                        assert.equal(err.code, 400, "Creating a group with the same name as an existing group should fail!");
                        callback();
                    });
                });
            });
        });

        /**
         * Test to verify that members can be added in a secure way
         */
        it('Test add members', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        PrincipalsAPI.createGroup(mrvisserCtx, 'managed-by-canadians', "Group", 'public', function(err, groupUuid) {
                            assert.ok(!err);
                
                            // 2. try and add simong to it with an unprivileged user
                            PrincipalsAPI.addGroupMember(simongCtx, groupUuid, simong.id, 'member', function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                
                                // verify simong was not added
                                PrincipalsAPI.memberOf(nicoCtx, null, null, function(err, groups) {
                                    assert.ok(!err);
                                    assert.equal(_.keys(groups).length, 0);
                
                                    // 3. add nico as member, then ensure he still cannot add
                                    PrincipalsAPI.addGroupMember(mrvisserCtx, groupUuid, nico.id, 'member', function(err) {
                                        assert.ok(!err);
                
                                        PrincipalsAPI.addGroupMember(nicoCtx, groupUuid, simong.id, 'member', function(err) {
                                            assert.ok(err);
                                            assert.ok(err.code, 401);
                
                                            PrincipalsAPI.memberOf(simongCtx, null, null, function(err, groups) {
                                                assert.ok(!err);
                                                assert.equal(_.keys(groups).length, 0);
                
                                                // 4. add Nico as manager, ensure he can now add
                                                PrincipalsAPI.addGroupMember(mrvisserCtx, groupUuid, nico.id, 'manager', function(err) {
                                                    assert.ok(!err);
                
                                                    PrincipalsAPI.addGroupMember(nicoCtx, groupUuid, simong.id, 'member', function(err) {
                                                        assert.ok(!err);
                
                                                        PrincipalsAPI.memberOf(simongCtx, null, null, function(err, groups) {
                                                            assert.ok(!err);
                                                            assert.equal(_.keys(groups).length, 1);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });

            });
        });

        /**
         * Test to verify that it should not be possible to add members as an unprivileged user
         */
        it('Test add members no access', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        PrincipalsAPI.createGroup(mrvisserCtx, 'managed-by-canadians', "Group", 'public', function(err, groupUuid) {
                            assert.ok(!err);

                            // 2. try and add simong to it with an unprivileged user
                            PrincipalsAPI.addGroupMembers(nicoCtx, groupUuid, [simong.id], 'member', function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // verify simong was not added
                                PrincipalsAPI.memberOf(simongCtx, null, null, function(err, groups) {
                                    assert.ok(!err);
                                    assert.equal(_.keys(groups).length, 0);

                                    // 3. add nico as member, then ensure he still cannot add
                                    PrincipalsAPI.addGroupMembers(mrvisserCtx, groupUuid, [nico.id], 'member', function(err) {
                                        assert.ok(!err);

                                        PrincipalsAPI.addGroupMembers(nicoCtx, groupUuid, [simong.id], 'member', function(err) {
                                            assert.ok(err);
                                            assert.ok(err.code, 401);

                                            PrincipalsAPI.memberOf(simongCtx, null, null, function(err, groups) {
                                                assert.ok(!err);
                                                assert.equal(_.keys(groups).length, 0);

                                                // 4. add Nico as manager, ensure he can now add
                                                PrincipalsAPI.addGroupMembers(mrvisserCtx, groupUuid, [nico.id], 'manager', function(err) {
                                                    assert.ok(!err);

                                                    PrincipalsAPI.addGroupMembers(nicoCtx, groupUuid, [simong.id], 'member', function(err) {
                                                        assert.ok(!err);

                                                        PrincipalsAPI.memberOf(simongCtx, null, null, function(err, groups) {
                                                            assert.ok(!err);
                                                            assert.equal(_.keys(groups).length, 1);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test to verify that it should be possible to add members by an indirect user
         */
        it('Test add members indirect access', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        PrincipalsAPI.createGroup(mrvisserCtx, 'managed-by-canadians', "Group", 'public', function(err, managedByCanadiansGroupUuid) {
                            assert.ok(!err);

                            // 2. Create and assign a group that will manage the managed-by-canadians group
                            PrincipalsAPI.createGroup(mrvisserCtx, 'canadians', "Group", 'public', function(err, canadiansGroupUuid) {
                                assert.ok(!err);

                                PrincipalsAPI.addGroupMember(mrvisserCtx, managedByCanadiansGroupUuid, canadiansGroupUuid, 'manager', function(err) {
                                    assert.ok(!err);

                                    // 3. make nico a member of the 'canadians' group, then verify he can manage managed-by-canadians
                                    PrincipalsAPI.addGroupMember(mrvisserCtx, canadiansGroupUuid, nico.id, 'member', function(err) {
                                        assert.ok(!err);

                                        // quick sanity check on the permission itself
                                        
                                        PermissionsAPI.isAllowed(nico.id, 'manager', managedByCanadiansGroupUuid, function(err, isAllowed) {
                                            assert.ok(!err);
                                            assert.ok(isAllowed === true);

                                            // verify he can add someone
                                            PrincipalsAPI.addGroupMember(nicoCtx, managedByCanadiansGroupUuid, simong.id, 'member', function(err) {
                                                assert.ok(!err);

                                                // verify it worked
                                                PrincipalsAPI.memberOf(simongCtx, null, null, function(err, groups) {
                                                    assert.ok(!err);
                                                    assert.ok(_.keys(groups).length, 1);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * mrvisser will create a group and change the group's visibility.
         * simong will try to get the group each time and should only succeed if the group is not private.
         */
        it('Test group visibility', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);
                var mrvisserCtx = new Context(tenant, mrvisser);

                createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                    assert.ok(!err);
                    var simongCtx = new Context(tenant, simong);

                    // 2. Create a group and make it private.
                    PrincipalsAPI.createGroup(mrvisserCtx, 'canadians', "Group", 'public', function(err, canadiansGroupUuid) {
                        assert.ok(!err);

                        // simong and anonymous should still be able to retrieve it at this point.
                        PrincipalsAPI.getGroup(simongCtx, canadiansGroupUuid, function(err, group) {
                            assert.ok(!err);

                            PrincipalsAPI.getGroup(anonymousContext, canadiansGroupUuid, function(err, group) {
                                assert.ok(!err);

                                PrincipalsAPI.setGroupVisibility(mrvisserCtx, canadiansGroupUuid, 'private', function(err) {
                                    assert.ok(!err);

                                    // simong and anonymous should NOT be able to retrieve it.
                                    PrincipalsAPI.getGroup(simongCtx, canadiansGroupUuid, function(err, group) {
                                        assert.ok(!group);
                                        assert.equal(err.code, 403);

                                        PrincipalsAPI.getGroup(anonymousContext, canadiansGroupUuid, function(err, group) {
                                            assert.ok(!group);
                                            assert.equal(err.code, 403);

                                            // make the group loggedin
                                            PrincipalsAPI.setGroupVisibility(mrvisserCtx, canadiansGroupUuid, 'loggedin', function(err) {
                                                assert.ok(!err);

                                                // simong should be able to retrieve the group, anonymous should not.
                                                PrincipalsAPI.getGroup(simongCtx, canadiansGroupUuid, function(err, group) {
                                                    assert.ok(!err)
                                                    assert.ok(group);

                                                    PrincipalsAPI.getGroup(anonymousContext, canadiansGroupUuid, function(err, group) {
                                                        assert.ok(!group);
                                                        assert.equal(err.code, 403);

                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('Test memberOf only returns user context groups', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);
                var mrvisserCtx = new Context(tenant, mrvisser);

                createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                    assert.ok(!err);
                    var simongCtx = new Context(tenant, simong);

                    // 2. Create a group
                    PrincipalsAPI.createGroup(mrvisserCtx, 'canadians', "Group", 'private', function(err, canadiansGroupUuid) {
                        assert.ok(!err);

                        // mrvisser should have 1 group in his memberof list.
                        PrincipalsAPI.memberOf(mrvisserCtx, null, null, function(err, groups) {
                            assert.ok(!err);
                            assert.equal(_.keys(groups).length, 1);
                            assert.equal(_.values(groups)[0].name, 'canadians');

                            // simong should have 0 group in his memberof list.
                            PrincipalsAPI.memberOf(simongCtx, null, null, function(err, groups) {
                                assert.ok(!err);
                                assert.equal(_.keys(groups).length, 0);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('Test if getGroupMembers respects visibility', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);
                var mrvisserCtx = new Context(tenant, mrvisser);

                createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                    assert.ok(!err);
                    var simongCtx = new Context(tenant, simong);

                    // 2. Create a group
                    PrincipalsAPI.createGroup(mrvisserCtx, 'canadians', "Group", 'private', function(err, canadiansGroupUuid) {
                        assert.ok(!err);

                        // if simong tries to get the members it should fail.
                        PrincipalsAPI.getGroupMembers(simongCtx, canadiansGroupUuid, null, null, function(err, members) {
                            assert.equal(403, err.code);
                            assert.ok(!members);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Tests if getGroupMembers hides all the relevant info/groups from it's member list.
         * A group 'top-group' will be created and have 6 members.
         * 3 users: 1 public, 1 loggedin and 1 private
         * 3 groups: 1 public, 1 loggedin and 1 private
         *
         * Depending on who does the getGroupMembers, the result should be different.
         */
        it('Test if getGroupMembers respects visibility of members', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);

            // 1. create the users and 3 groups who will b
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Branden', 'Visser', 'tr123', function(err, mrvisser) {
                assert.ok(!err);
                var mrvisserCtx = new Context(tenant, mrvisser);

                createAndGetUser(anonymousContext, 'simong', 'password', 'loggedin', 'Simong', 'Gaeremynck', 'simong', function(err, simong) {
                    assert.ok(!err);
                    var simongCtx = new Context(tenant, simong);

                    createAndGetUser(anonymousContext, 'nico', 'password', 'private', 'Nicolaas', 'Matthijs', 'nico', function(err, nico) {
                        assert.ok(!err);
                        var nicoCtx = new Context(tenant, nico);

                        PrincipalsAPI.createGroup(mrvisserCtx, "public-group", "This is a test group", 'public', function(err, publicGroup) {
                            assert.ok(!err);
                            PrincipalsAPI.createGroup(mrvisserCtx, "loggeding-group", "This is a test group", 'loggedin', function(err, loggedinGroup) {
                                assert.ok(!err);
                                    PrincipalsAPI.createGroup(mrvisserCtx, "private-group", "This is a test group", 'private', function(err, privateGroup) {
                                    assert.ok(!err);

                                    // 2. Create a group and add all those members.
                                    PrincipalsAPI.createGroup(mrvisserCtx, "top-group", "This is a test group", 'public', function(err, topGroup) {
                                        assert.ok(!err);
                                        PrincipalsAPI.addGroupMembers(mrvisserCtx, topGroup, [simong.id, nico.id, publicGroup, loggedinGroup, privateGroup], 'member', function(err) {
                                            assert.ok(!err);

                                            // 3. Verify that mrvisser can see everybody and nico's user info is hidden.
                                            PrincipalsAPI.getGroupMembers(mrvisserCtx, topGroup, null, null, function(err, members) {
                                                assert.ok(!err);
                                                var ids = _.keys(members);
                                                assert.equal(6, ids.length);
                                                ids.forEach(function(id) {
                                                    var member = members[id];
                                                    if (member.id === nico.id) {
                                                        assert.equal(undefined, member.firstName);
                                                        assert.equal(undefined, member.lastName);
                                                    }
                                                });

                                                // 4. Verify that simong cannot see the private group.
                                                PrincipalsAPI.getGroupMembers(simongCtx, topGroup, null, null, function(err, members) {
                                                    assert.ok(!err);
                                                    var ids = _.keys(members);
                                                    assert.equal(5, ids.length);
                                                    ids.forEach(function(id) {
                                                        var member = members[id];
                                                        if (member.id === nico.id) {
                                                            assert.equal(undefined, member.firstName);
                                                            assert.equal(undefined, member.lastName);
                                                        }
                                                    });

                                                    // 5. Verify that an anonymous user can only see the public members.
                                                    PrincipalsAPI.getGroupMembers(anonymousContext, topGroup, null, null, function(err, members) {
                                                        assert.ok(!err);
                                                        var ids = _.keys(members);
                                                        assert.equal(4, ids.length);
                                                        ids.forEach(function(id) {
                                                            var member = members[id];
                                                            if (member.id === nico.id) {
                                                                assert.equal(undefined, member.firstName);
                                                                assert.equal(undefined, member.lastName);
                                                            } else if (member.id === simong.id) {
                                                                assert.equal(undefined, member.firstName);
                                                                assert.equal(undefined, member.lastName);
                                                            }
                                                        });
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('Test that a group cannot be made a member of itself', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            createAndGetUser(anonymousContext, 'nico', 'password', 'private', 'Nicolaas', 'Matthijs', 'nico', function(err, nico) {
                assert.ok(!err);
                var nicoCtx = new Context(tenant, nico);

                PrincipalsAPI.createGroup(nicoCtx, "public-group", "This is a test group", 'public', function(err, publicGroup) {
                    assert.ok(!err);

                    PrincipalsAPI.addGroupMembers(nicoCtx, publicGroup, [publicGroup], 'member', function(err) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        it('Test that non-existing principals cannot be added to a group', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            createAndGetUser(anonymousContext, 'nico', 'password', 'private', 'Nicolaas', 'Matthijs', 'nico', function(err, nico) {
                assert.ok(!err);
                var nicoCtx = new Context(tenant, nico);

                PrincipalsAPI.createGroup(nicoCtx, "public-group", "This is a test group", 'public', function(err, publicGroup) {
                    assert.ok(!err);

                    PrincipalsAPI.addGroupMembers(nicoCtx, publicGroup, ['non-existing'], 'member', function(err) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        it('Test that anonymous users cannot change the visibility of a group', function(callback) {
            var r = Math.floor(Math.random()*100000);
            var tenant = new Tenant('cam' + r, 'Cambridge', 'Cambridge University', 3000);
            var anonymousContext = new Context(tenant, null);
            createAndGetUser(anonymousContext, 'nico', 'password', 'private', 'Nicolaas', 'Matthijs', 'nico', function(err, nico) {
                assert.ok(!err);
                var nicoCtx = new Context(tenant, nico);

                PrincipalsAPI.createGroup(nicoCtx, "public-group", "This is a test group", 'public', function(err, publicGroup) {
                    assert.ok(!err);

                    PrincipalsAPI.setGroupVisibility(anonymousContext, publicGroup, 'private', function(err) {
                        assert.equal(401, err.code);
                        callback();
                    });
                });
            });
        });
        
        /*
        // Not implemented yet.
        it('should test paging', function(callback) {
            var r = Math.floor(Math.random()*100000);
            createAndGetUser(anonymousContext, 'test-runner' + r, 'password', 'public', 'Test', 'Runner', 'tr123', function(err, user) {
                var ctx = new Context(tenant, user);
                createOAEStructure(ctx, function(id) {
                    var ctx = new Context(null, new User('cam', 'u:' + ctx.tenant().alias + ':bert-'+id));
                    PrincipalsAPI.memberOf(ctx, false, null, 2, function(err, groups) {
                        assert.equal(groups.length, 2);
                        assert.equal(groups[0], getGroupUuid(ctx, 'belgian-' + id));
                        assert.equal(groups[1], getGroupUuid(ctx, 'oae-team-' + id));
                        callback();
                    });
                });
            });
        });
        */
    });
});