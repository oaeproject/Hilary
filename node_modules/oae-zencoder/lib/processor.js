/*!
 * Copyright 2016 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');
var request = require('request');
var util = require('util');

var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentUtil = require('oae-content/lib/internal/util');
var Context = require('oae-context').Context;
var PreviewUtil = require('oae-preview-processor/lib/util');
var log = require('oae-logger').logger('oae-zencoder');

var ZencoderDAO = require('./internal/dao');
var ZencoderUtil = require('./util');

/**
 * @borrows Interface.test as Zencoder.test
 */
var test = module.exports.test = function(ctx, content, callback) {
    if (content.resourceSubType === 'file') {
        if (PreviewUtil.isVideo(ctx.revision.mime) || PreviewUtil.isAudio(ctx.revision.mime)) {
            var config = ZencoderUtil.getConfig(content.tenant.alias);
            if (config.apiKey) {
                return callback(null, 30);
            }
        }
    }
    return callback(null, -1);
};

/**
 * @borrows Interface.generatePreviews as Zencoder.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, content, callback) {
    var revision = ctx.revision;

    if (revision.previews && revision.previews.videoKey) {
        return callback();
    }

    log().info('Generating previews for video file: %s', content.id);
    var tenant = content.tenant;

    var downloadPath = ContentUtil.getSignedDownloadUrl(new Context(tenant), revision.uri, 3600, 3600);

    // Create a Zencoder job
    ZencoderUtil.createJob(tenant.alias, downloadPath, content.id, ctx.revisionId, revision.mime, function(err, res, body) {
        if (err) {
            log().error({'err': err, 'msg': 'Error occurred when posting video to Zencoder'});
            return callback(err);
        } else if (res.statusCode >= 400) {
            var responseErr = {'code': res.statusCode, 'body': body};
            log().error({'err': responseErr, 'msg': util.format('Received status code %s when posting video to Zencoder', res.statusCode)});
            return callback(responseErr);
        } else if (!body.outputs) {
            var bodyError = {'err': body, 'msg': 'Zencoder notification is missing outputs field'};
            log().error(bodyError);
            return callback(bodyError);
        }

        var output = _.first(body.outputs);

        ZencoderDAO.saveContentRevisionId(output.id.toString(), content.id, ctx.revisionId, function(err) {
            if (err) {
                return callback(err);
            }

            return callback(null, ContentConstants.previews.PENDING);
        });
    });
};
