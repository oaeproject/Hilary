/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var events = require('events');
var MQ = require('oae-util/lib/mq');

// Track when counts for a particular type of task return to 0
var emitter = new events.EventEmitter();
var submitCount = {};

MQ.on('preSubmit', function(name) {
    _incrementSubmitCount(name);
});

MQ.on('postHandle', function(err, name) {
    _decrementSubmitCount(name);
});

/**
 * Invoke the given handler only if the local counter of tasks of the given name indicates that the task queue is completely
 * empty. If it is not empty now, then the handler will be invoked when it becomes empty.
 *
 * This is ONLY useful in a local development environment where one application node is firing and handling all tasks.
 *
 * @param  {String}     name        The name of the task to listen for empty events
 * @param  {Function}   handler     The handler to invoke when the task queue is empty
 */
var whenTasksEmpty = module.exports.whenTasksEmpty = function(name, handler) {
    if (!submitCount[name] || !_hasQueue(name)) {
        handler();
    } else {
        emitter.once('tasksEmpty-' + name, handler);
    }
};

/**
 * Increment the submitCount for a task of the given name.
 *
 * @param  {String}     name    The name of the task whose submitCount to increment
 * @api private
 */
var _incrementSubmitCount = function(name) {
    if (_hasQueue(name)) {
        submitCount[name] = submitCount[name] || 0;
        submitCount[name]++;
    }
};

/**
 * Determines if MQ has a handler bound for a task by the given name.
 *
 * @return {Boolean}    Whether or not there is a task bound
 */
var _hasQueue = function(name) {
    return (_.indexOf(MQ.getTaskHandlerNames(), name) !== -1);
};

/**
 * Decrement the submitCount for a task of the given name, and fire the `tasksEmpty` event for it if appropriate.
 *
 * @param  {String}     name    The name of the task whose submit count to decrement
 * @api private
 */
var _decrementSubmitCount = function(name) {
    submitCount[name] = submitCount[name] || 0;
    submitCount[name]--;

    if (submitCount[name] === 0) {
        emitter.emit('tasksEmpty-' + name);
    } else if (submitCount[name] < 0) {
        // This could happen if you have pending items in your task queue when the server starts for tests
        submitCount[name] = 0;
    }
};