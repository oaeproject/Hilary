/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('UI', function() {

    var anonymousRestContext = null;
    before(function() {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
    });

    describe('Widget Configurations', function() {

        /**
         * Test that will retrieve the widget configurations as simple json.
         */
        it('verify widget configs as object', function(callback) {
            RestAPI.UI.getWidgetConfigs(anonymousRestContext, null, function(err, data) {
                assert.ok(!err);
                assert.equal(typeof data, 'object');
                callback();
            });
        });

        /**
         * Test that will retrieve the widget configurations as jsonp.
         */
        it('verify widget configs as jsonp', function(callback) {
            var jsonpCallback = 'define';
            RestAPI.UI.getWidgetConfigs(anonymousRestContext, jsonpCallback, function(err, data) {
                assert.ok(!err);
                assert.equal(typeof data, 'string');
                assert.equal(data.substr(0, jsonpCallback.length), jsonpCallback);
                callback();
            });
        });
    });

    describe('Static Files', function() {

        /**
         * Test that will check if parameter validation occurs.
         */
        it('verify parameter validation', function(callback) {
            RestAPI.UI.getStaticFiles(anonymousRestContext, null, function(err, data) {
                assert.equal(err.code, 400);
                RestAPI.UI.getStaticFiles(anonymousRestContext, [], function(err, data) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that will retrieve multiple static files.
         */
        it('verify multiple files', function(callback) {
            var files = ['/dev/index.html', '/devwidgets/entity/config.json', '/nonexisting'];
            RestAPI.UI.getStaticFiles(anonymousRestContext, files, function(err, data) {
                assert.ok(!err);
                assert.equal(data.results.length, 3);
                for (var i = 0; i < data.results.length; i++) {
                    if (data.results[i].url === '/nonexisting') {
                        assert.ok(!data.results[i].success);
                    } else {
                        assert.ok(data.results[i].success);
                        assert.equal(typeof data.results[i].body, 'string');
                    }
                }
                callback();
            });
        });

        /**
         * Test that will retrieve a single static file.
         */
        it('verify single file', function(callback) {
            RestAPI.UI.getStaticFiles(anonymousRestContext, '/dev/index.html', function(err, data) {
                assert.ok(!err);
                assert.ok(data.results[0].success);
                assert.equal(typeof data.results[0].body, 'string');
                callback();
            });
        });
    });
});