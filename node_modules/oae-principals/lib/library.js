/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var LibraryAPI = require('oae-library');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');

/*!
 * Register a library indexer that can provide resources to reindex the memberships library
 */
LibraryAPI.Index.registerLibraryIndex(PrincipalsConstants.library.MEMBERSHIPS_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the group ids to which the library owner is directly associated in this batch of paged resources
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, AuthzConstants.resourceTypes.GROUP, start, limit, function(err, groupRoles, nextToken) {
            if (err) {
                return callback(err);
            }

            // Get the properties of the groups in the library that are relevant to building the library
            PrincipalsDAO.getPrincipals(_.pluck(groupRoles, 'id'), ['principalId', 'tenantAlias', 'visibility', 'lastModified'], function(err, groups) {
                if (err) {
                    return callback(err);
                }

                // Map the groups to library entry items with just the properties needed to populate the library index
                var resources = _.map(groups, function(group) {
                    return {
                        'id': group.id,
                        'rank': group.lastModified,
                        'tenant': group.tenant,
                        'visibility': group.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});

/*!
 * Register a library search that will search a principal's group memberships
 */
LibraryAPI.Search.registerLibrarySearch('memberships-library', ['group'], {
    'searches': {
        'private': function(ctx, libraryOwner, opts, callback) {
            AuthzAPI.getPrincipalMemberships(libraryOwner.id, null, 10000, function(err, groupIds) {
                // Target the full set of groups that are in this user's memberships to search through
                return callback(null, SearchUtil.filterAnd(
                    SearchUtil.filterTerm('_type', SearchConstants.resourceMappingName),
                    SearchUtil.filterTerms('resourceType', ['group']),
                    SearchUtil.filterIds(groupIds)
                ));
            });
        }
    }
});
