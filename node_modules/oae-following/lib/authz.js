/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var AuthzAPI = require('oae-authz');

/**
 * Determine if the current user in context is allowed to see the followers list of the provided user.
 *
 * @param  {Context}    ctx                 The context of the current request
 * @param  {User}       user                The user whose followers are being requested
 * @param  {Function}   callback            Invoked when the access has been checked
 * @param  {Object}     callback.err        An error that occurred while determining permissions, if any
 * @param  {Boolean}    callback.canView    `true` if the user in context can view the followers. `false` otherwise.
 */
var canViewFollowers = module.exports.canViewFollowers = function(ctx, user, callback) {
    _hasAccess(ctx, user, callback);
};

/**
 * Determine if the current user in context is allowed to see the followering list of the provided user.
 *
 * @param  {Context}    ctx                 The context of the current request
 * @param  {User}       user                The user whose followees are being requested
 * @param  {Function}   callback            Invoked when the access has been checked
 * @param  {Object}     callback.err        An error that occurred while determining permissions, if any
 * @param  {Boolean}    callback.canView    `true` if the user in context can view the followers. `false` otherwise.
 */
var canViewFollowing = module.exports.canViewFollowing = function(ctx, user, callback) {
    _hasAccess(ctx, user, callback);
};

/**
 * Determine whether or not the current user in context is allowed to follow the provided user
 *
 * @param  {Context}    ctx                 The context fo the current request
 * @param  {User}       followerUser        The user whose follower list is being updated
 * @param  {User}       followedUser        The user who is to be followed
 * @param  {Function}   callback            Invoked when the access has been checked
 * @param  {Object}     callback.err        An error that occurred while determining permissions, if any
 * @param  {Boolean}    callback.canFollow  `true` if the user in context can follow the specified user. `false` otherwise
 */
var canFollow = module.exports.canFollow = function(ctx, user, callback) {
    // To follow a user, we must be able to have access and interact with them
    _hasAccess(ctx, user, function(err, hasAccess, canInteract) {
        if (err) {
            return callback(err);
        } else if (!hasAccess || !canInteract) {
            return callback(null, false);
        } else if (ctx.user().id === user.id) {
            return callback(null, false);
        }

        return callback(null, true);
    });
};

/**
 * Determine if the current user in context has access to the specified user
 *
 * @param  {Context}    ctx                     The context of the current request
 * @param  {User}       user                    The user against which to check for access
 * @param  {Function}   callback                Invoked when the access has been checked
 * @param  {Object}     callback.err            An error that occurred while determining permissions, if any
 * @param  {Boolean}    callback.hasAccess      `true` if the user in context has access. `false` otherwise
 * @param  {Boolean}    callback.canInteract    `true` if the user in context is able to interact with the specified user
 * @api private
 */
var _hasAccess = function(ctx, user, callback) {
    // We only care about a viewer role for this access lookup
    var potentialRoles = ['viewer'];
    AuthzAPI.resolveEffectiveRole(ctx, user.id, user.tenant.alias, user.visibility, potentialRoles, function(err, effectiveRole, canInteract) {
        if (err) {
            return callback(err);
        } else if (effectiveRole !== 'viewer') {
            return callback(null, false, false);
        }

        return callback(null, true, canInteract);
    });
};
