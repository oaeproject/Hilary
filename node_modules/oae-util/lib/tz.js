/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');
var tz = require('timezone-js');
var railsTimezone = require('rails-timezone');

var RailsMappings = require('oae-util/timezones-rails');

tz.timezone.loadingScheme = tz.timezone.loadingSchemes.MANUAL_LOAD;
tz.timezone.transport = function(opts) {
    return fs.readFileSync(opts.url, 'utf8');
};
tz.timezone.loadZoneJSONData(__dirname + '/../timezones.json', true);

module.exports = tz;

/**
 * Given a ruby-on-rails supported timezone name, map it to a TZInfo identifier supported by OAE.
 *
 * @param  {String}    zone   The rails timezone to map
 * @return {String}           The TZInfo identifier that represents the associated rails timezone
 */
var getTimezoneFromRails = module.exports.getTimezoneFromRails = function(zone) {
    return railsTimezone.from(zone);
};

/**
 * Given a TZInfo timezone name, get the closest TZInfo zone that is in the rails supported list
 *
 * @param  {String}    zone   The TZInfo timezone to map
 * @return {String}           The associated rails timezone
 */
var getClosestSupportedTimezone = module.exports.getClosestSupportedTimezone = function(zone) {
    // If no zone was passed in just return Etc/UTC
    if (!zone) {
        return 'Etc/UTC';
    }
    // If there's a direct mapping just return it
    if (railsTimezone.to(zone)) {
        return zone;
    }
    // Otherwise we'll guess a zone based on the offset

    // Get the current offsets for all rails zones
    try {
        var railsOffsets = {};
        _.each(RailsMappings, function(value, key) {
            var mappingDate = new tz.Date(value);
            railsOffsets[mappingDate.getTimezoneOffset()] = value;
        });
        var userOffset = new tz.Date(zone).getTimezoneOffset();
        // If there's a zone with a matching offset return it
        if (railsOffsets[userOffset]) {
            return railsOffsets[userOffset];
        }
        // No matching offset, return the zone with the closest offset
        var availableOffsets = _.keys(railsOffsets);
        // Offsets are in minutes, 1440 is 24 hours
        var closest = {'delta': 1440, 'zone': null};
        _.each(railsOffsets, function(zone, offset) {
            var delta = Math.abs(offset - userOffset);
            if (delta < closest.delta) {
                closest = {
                    'delta': delta,
                    'zone': zone
                };
            }
        });
        return closest.zone;
    } catch(err) {
        // If someone passes in a bad zone name we end up here
        return;
    }
};

/**
 * Gets a list of available timezones with their current offset from UTC
 *
 * @return {Object}        A map of all the available rails timezones and their offsets from UTC
 */
var getZones = module.exports.getZones = function() {
    var railsZones = {};
    _.each(RailsMappings, function(value, key) {
        var mappingDate = new tz.Date(value);
        railsZones[value] = {
            'displayName': key,
            // Send the offset in hours
            'offset': mappingDate.getTimezoneOffset() / 60
        };
    });
    return railsZones;
};
