/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var EmailAPI = require('oae-email');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Discussion guests', function() {

    // Rest contexts that can be used to make requests as different types of users
    var camAdminRestContext = null;

    /**
     * Function that will fill up the rest contexts
     */
    before(function(callback) {
        // Fill up the request contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });

    /**
     * Test that verifies that a discussion can be shared with a guest
     */
    it('verify a discussion can be shared with a guest', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            // Create a discussion
            RestAPI.Discussions.createDiscussion(simong.restContext, 'Test Discussion', 'Test Description', 'private', null, null, function(err, discussion) {
                assert.ok(!err);

                // Share the discussion with a guest user
                var email = TestsUtil.generateTestEmailAddress();
                RestAPI.Discussions.shareDiscussion(simong.restContext, discussion.id, [email], function(err) {
                    assert.ok(!err);
                });

                EmailAPI.once('debugSent', function(message) {
                    // Verify we sent an email to the invited user
                    assert.strictEqual(message.to[0].address, email);

                    // Verify a token is passed in the email
                    var token = message.text.match(/\?token=([a-zA-Z0-9]{32})/)[1];
                    assert.ok(token);

                    // Sign in as the guest
                    PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                        // Verifiy the discussion is in the guest's library
                        RestAPI.Discussions.getDiscussionsLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, data) {                            
                            assert.strictEqual(data.results.length, 1);
                            assert.strictEqual(data.results[0].id, discussion.id);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that a discussion can be shared guests when creating it
     */
    it('verify a discussion can be shared with guests when creating it', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            var discussion = null;
            var email = TestsUtil.generateTestEmailAddress();
            RestAPI.Discussions.createDiscussion(simong.restContext, 'Test Discussion', 'Test Description', 'private', null, [email], function(err, _discussion) {
                assert.ok(!err);
                discussion = _discussion;
            });

            // An email should've been sent to the guest
            EmailAPI.once('debugSent', function(message) {
                // Verify we sent an email to the invited user
                assert.strictEqual(message.to[0].address, email);

                // Verify a token is passed in the email
                var token = message.text.match(/\?token=([a-zA-Z0-9]{32})/)[1];
                assert.ok(token);

                // Sign in as the guest
                PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                    // Verify that the discussion is in the guest's library
                    RestAPI.Discussions.getDiscussionsLibrary(loggedinGuest.restContext, loggedinGuest.user.id, null, null, function(err, data) {
                        assert.ok(!err);
                        assert.strictEqual(data.results.length, 1);
                        assert.strictEqual(data.results[0].id, discussion.id);
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies a guest can be made a member of a discussion
     */
    it('verify a guest can be made a member of a discussion', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            // Create a discussion
            RestAPI.Discussions.createDiscussion(simong.restContext, 'Test Discussion', 'Test Description', 'private', null, null, function(err, discussion) {
                assert.ok(!err);

                // Make a guest a viewer of the discussion through the discussion permissions API
                var email = TestsUtil.generateTestEmailAddress();
                var roleChanges = {};
                roleChanges[email] = 'member';
                RestAPI.Discussions.updateDiscussionMembers(simong.restContext, discussion.id, roleChanges, function(err) {
                    assert.ok(!err);
                });
                
                // An email should've been sent to the guest
                EmailAPI.once('debugSent', function(message) {
                    // Verify we sent an email to the invited user
                    assert.strictEqual(message.to[0].address, email);

                    // Verify a token is passed in the email
                    var token = message.text.match(/\?token=([a-zA-Z0-9]{32})/)[1];
                    assert.ok(token);

                    // Sign in as the guest
                    PrincipalsTestUtil.signIntoGuestAccountWithToken(token, function(loggedinGuest) {

                        // The guest should have access to the discussion
                        RestAPI.Discussions.getDiscussion(loggedinGuest.restContext, discussion.id, function(err, discussion) {
                            assert.ok(!err);

                            // Verify the guest is in the members list
                            RestAPI.Discussions.getDiscussionMembers(simong.restContext, discussion.id, null, null, function(err, members) {
                                assert.ok(!err);
                                assert.strictEqual(members.results.length, 2);
                                var guest = _.findWhere(members.results, {'role': 'member'});
                                assert.ok(guest);

                                // Make the guest a manager
                                var roleChanges = {};
                                roleChanges[email] = 'manager';
                                RestAPI.Discussions.updateDiscussionMembers(simong.restContext, discussion.id, roleChanges, function(err) {
                                    assert.ok(!err);

                                    // Verify the guest is a manager
                                    RestAPI.Discussions.getDiscussion(loggedinGuest.restContext, discussion.id, function(err, discussion) {
                                        assert.ok(!err);
                                        assert.ok(discussion.isManager);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
