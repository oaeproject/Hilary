/*
 * Copyright 2016 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var nock = require('nock');
var util = require('util');

var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var PreviewConstants = require('oae-preview-processor/lib/constants');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var ZencoderProcessor = require('oae-zencoder/lib/processor');
var ZencoderTestUtil = require('oae-zencoder/lib/test/util');
var ZencoderUtil = require('oae-zencoder/lib/util');

describe('Zencoder Processor', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;

    /*!
     * Set up rest contexts before each test
     */
    beforeEach(function(callback) {
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Enable the Zencoder preview processor
        ZencoderTestUtil.enableZencoder(globalAdminRestContext, 'globalKey', callback);
    });

    /*!
     * Clear Zencoder configuration after each test
     */
    afterEach(function(callback) {
        ZencoderTestUtil.clearZencoderConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, callback);
    });

    /*!
     * @return a stream to a video file
     */
    var _getVideoStream = function() {
        return fs.createReadStream(__dirname + '/data/video.mp4');
    };

    /*!
     * @return a stream to an audio file
     */
    var _getAudioStream = function() {
        return fs.createReadStream(__dirname + '/data/music.mp3');
    };

    describe('#test', function() {

        /**
         * Test that verifies the Zencoder processor will claim an mp4 file
         */
        it('verify the Zencoder processor will pick up an mp4 file', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);

                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.id,
                            'revision': revision
                        };

                        ZencoderProcessor.test(mockPreviewContext, content, function(err, rank) {
                            assert.strictEqual(rank, 20);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the Zencoder processor will claim an mp3 file
         */
        it('verify the Zencoder processor will pick up an mp3 file', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Content.createFile(user.restContext, 'test song', null, 'public', _getAudioStream, null, null, null, function(err, content) {
                    assert.ok(!err);

                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);

                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.id,
                            'revision': revision
                        };

                        ZencoderProcessor.test(mockPreviewContext, content, function(err, rank) {
                            assert.strictEqual(rank, 20);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('#generatePreviews', function() {
        /*!
         * Test that verifies that the Zencoder processor sends the necessary web requests to Zencoder for a video file
         */
        it('verify a request to encode a video file is sent to Zencoder', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var user = _.values(users)[0];
                var tenant = global.oaeTests.tenants.cam;

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);
                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.revisionId,
                            'revision': revision
                        };

                        var contentId = content.id;
                        var revisionIdWithDashes = revision.revisionId.replace(/:/g, '-');
                        var config = ZencoderUtil.getConfig(tenant.alias);
                        var baseUrl = util.format('s3://s3-%s.amazonaws.com/%s/%s', config['amazons3-region'], config['amazons3-bucket'], contentId);

                        var nock = require('nock');
                        nock.enableNetConnect();

                        nock('https://app.zencoder.com/api/v2', {
                              reqheaders: {
                                'Zencoder-Api-Key': 'globalKey'
                              }
                            })
                        .post('/jobs', function(body) {
                            var output = body.output;
                            var thumbnail = _.first(output.thumbnails);
                            var watermark = _.first(output.watermarks);

                            return _.matcher(body, {
                                    'pass_through': util.format('%s/%s.mp4',contentId, revisionIdWithDashes),
                                    'private': true,
                                    'height': 600
                                }) && _.matcher(output, {
                                    'notifications': util.format('https://%s/api/zencoder/encodingNotification', tenant.host),
                                    'base_url': baseUrl,
                                    'filename': revisionIdWithDashes,
                                    'format': 'mp4'
                                }) && _.isMatch(thumbnail, {
                                    'label': 'base',
                                    'number': 1,
                                    'base_url': baseUrl,
                                    'height': PreviewConstants.SIZES.IMAGE.LARGE,
                                    'width': PreviewConstants.SIZES.IMAGE.LARGE,
                                    'filename': 'base',
                                    'public': true
                                }) && _.isMatch(watermark, {
                                    'url': config['watermark'],
                                    'opacity': 0.3,
                                    'width': '30%',
                                    'y': 10
                                });
                            })
                        .reply(200, {
                            'id': 100,
                            'outputs': [
                                    {
                                        'id': 101,
                                        'label': null,
                                        'url': util.format('http://%s.s3.amazonaws.com/%s/%s.mp4', config['amazons3-bucket'], content.id, revisionIdWithDashes)
                                    }
                                ]
                            });

                        ZencoderProcessor.generatePreviews(mockPreviewContext, content, function(err, status) {
                            assert.ok(!err);
                            assert.strictEqual(status, ContentConstants.previews.PENDING);
                            return callback();
                        });
                    });
                });
            });
        });

        /*!
         * Test that verifies that the Zencoder processor sends the necessary web requests to Zencoder for an audio file
         */
        it('verify a request to encode an audio file is sent to Zencoder', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var user = _.values(users)[0];
                var tenant = global.oaeTests.tenants.cam;

                RestAPI.Content.createFile(user.restContext, 'test music', null, 'public', _getAudioStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);
                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.revisionId,
                            'revision': revision
                        };

                        var contentId = content.id;
                        var revisionIdWithDashes = revision.revisionId.replace(/:/g, '-');
                        var config = ZencoderUtil.getConfig(tenant.alias);
                        var baseUrl = util.format('s3://s3-%s.amazonaws.com/%s/%s', config['amazons3-region'], config['amazons3-bucket'], contentId);

                        var nock = require('nock');
                        nock.enableNetConnect();

                        nock('https://app.zencoder.com/api/v2', {
                              reqheaders: {
                                'Zencoder-Api-Key': 'globalKey'
                              }
                            })
                        .post('/jobs', function(body) {
                            var output = body.output;

                            return _.matcher(body, {
                                    'pass_through': util.format('%s/%s.mp3',contentId, revisionIdWithDashes),
                                    'private': true,
                                    'skip_video': true
                                }) && _.matcher(output, {
                                    'notifications': util.format('https://%s/api/zencoder/encodingNotification', tenant.host),
                                    'base_url': baseUrl,
                                    'filename': revisionIdWithDashes,
                                    'format': 'mp3'
                                });
                            })
                        .reply(200, {
                            'id': 100,
                            'outputs': [
                                    {
                                        'id': 101,
                                        'label': null,
                                        'url': util.format('http://%s.s3.amazonaws.com/%s/%s.mp4', config['amazons3-bucket'], content.id, revisionIdWithDashes)
                                    }
                                ]
                            });

                        ZencoderProcessor.generatePreviews(mockPreviewContext, content, function(err, status) {
                            assert.ok(!err);
                            assert.strictEqual(status, ContentConstants.previews.PENDING);
                            return callback();
                        });
                    });
                });
            });
        });

        /*!
         * Test that verifies that the Zencoder video processor only uploads to Zencoder once
         */
        it('verify video file is not uploaded to Zencoder if it already has a videoKey', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var user = _.values(users)[0];

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);
                        revision.previews = {
                            'videoKey': 'exists'
                        };
                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.revisionId,
                            'revision': revision
                        };
                        ZencoderProcessor.generatePreviews(mockPreviewContext, content, function(err, status) {
                            assert.ok(!err);
                            assert.ok(!status);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies tenant-specific Zencoder configuration is honoured
         */
        it('verify video uploads from different tenants honour tenant-specific configuration', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var user = _.values(users)[0];

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);
                        ZencoderTestUtil.updateApiKey(camAdminRestContext, 'camKey', function(err) {
                            var mockPreviewContext = {
                                'content': content,
                                'revisionId': revision.revisionId,
                                'revision': revision
                            };

                            var nock = require('nock');
                            nock.enableNetConnect();

                            nock('https://app.zencoder.com/api/v2', {
                              reqheaders: {
                                'Zencoder-Api-Key': function(headerValue) {
                                    if (headerValue === 'camKey') {
                                        return true;
                                    }
                                    return false;
                                }
                              }
                            })
                            .post('/jobs')
                            .reply(200, {
                                'id': 100,
                                'outputs': [
                                        {
                                            'id': 101,
                                            'label': null,
                                            'url': util.format('http://zencoder-bucket.s3.amazonaws.com/%s/%s.mp4', content.id, revision.revisionId)
                                        }
                                    ]
                                });

                            ZencoderProcessor.generatePreviews(mockPreviewContext, content, function(err, status) {
                                assert.ok(!err);
                                assert.strictEqual(status, ContentConstants.previews.PENDING);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies global Zencoder configuration overrides are honoured
         */
        it('verify video uploads honour global configuration overrides', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var user = _.values(users)[0];

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);
                        var overrides = {
                            'enabled': true,
                            'apiKey': 'newKey',
                            'amazons3-bucket': 'new-bucket',
                            'amazons3-region': 'us-test-1',
                            'amazons3-access-key': 'totallynewkey',
                            'amazons3-secret-key': 'totallynewsecret'
                        };
                        ZencoderTestUtil.setGlobalOverrides(globalAdminRestContext, overrides, function(err) {
                            var baseUrl = util.format('s3://s3-%s.amazonaws.com/%s/%s', overrides['amazons3-region'], overrides['amazons3-bucket'], content.id);
                            var config = ZencoderUtil.getConfig();
                            assert.ok(_.matcher(config, overrides));

                            var mockPreviewContext = {
                                'content': content,
                                'revisionId': revision.revisionId,
                                'revision': revision
                            };

                            var nock = require('nock');
                            nock.enableNetConnect();

                            nock('https://app.zencoder.com/api/v2', {
                              reqheaders: {
                                'Zencoder-Api-Key': function(headerValue) {
                                    if (headerValue === 'newKey') {
                                        return true;
                                    }
                                    return false;
                                }
                              }
                            })
                            .post('/jobs', function(body) {
                                var output = body.output;
                                var thumbnail = _.first(output.thumbnails);

                                return _.matcher(output, {
                                        'notifications': util.format('https://%s/api/zencoder/encodingNotification', global.oaeTests.tenants.cam.host),
                                        'base_url': baseUrl,
                                        'filename': revision.revisionId.replace(/:/g, '-'),
                                        'format': 'mp4'
                                    }) && _.isMatch(thumbnail, {
                                        'label': 'base',
                                        'number': 1,
                                        'base_url': baseUrl,
                                        'height': PreviewConstants.SIZES.IMAGE.LARGE,
                                        'width': PreviewConstants.SIZES.IMAGE.LARGE,
                                        'filename': 'base',
                                        'public': true
                                    });
                            })
                            .reply(200, {
                                'id': 100,
                                'outputs': [
                                        {
                                            'id': 101,
                                            'label': null,
                                            'url': util.format('http://%s.s3.amazonaws.com/%s/%s.mp4', overrides.amazons3_bucket, content.id, revision.revisionId)
                                        }
                                    ]
                                });


                            ZencoderProcessor.generatePreviews(mockPreviewContext, content, function(err, status) {
                                assert.ok(!err);
                                assert.strictEqual(status, ContentConstants.previews.PENDING);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies errors received from Zencoder are handled
         */
        it('verify Zencoder errors are managed appropriately', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var user = _.values(users)[0];

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, null, function(err, content) {
                    assert.ok(!err);
                    RestAPI.Content.getRevision(user.restContext, content.id, content.latestRevisionId, function(err, revision) {
                        assert.ok(!err);
                        var mockPreviewContext = {
                            'content': content,
                            'revisionId': revision.revisionId,
                            'revision': revision
                        };

                        var nock = require('nock');
                        nock.enableNetConnect();

                        nock('https://app.zencoder.com/api/v2')
                            .post('/jobs')
                            .reply(400, {
                                'id': 100,
                                'outputs': [
                                        {
                                            'id': 101,
                                            'label': null,
                                            'url': util.format('http://zencoder-bucket.s3.amazonaws.com/%s/%s.mp4', content.id, revision.revisionId)
                                        }
                                    ]
                                });
                        // Test with Zencoder returning status indicating error
                        ZencoderProcessor.generatePreviews(mockPreviewContext, content, function(err, status) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            assert.ok(!status);

                            nock('https://app.zencoder.com/api/v2')
                                .post('/jobs')
                                .reply(400, {
                                    'id': 100
                                    });
                            // Test with Zencoder returning no output
                            ZencoderProcessor.generatePreviews(mockPreviewContext, content, function(err, status) {
                                assert.ok(err);
                                assert.ok(!status);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
});
