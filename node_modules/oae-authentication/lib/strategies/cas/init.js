/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var TenantsUtil = require('oae-tenants/lib/util');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

var CasStrategy = require('passport-cas').Strategy;

module.exports = function() {
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias) {
        return AuthenticationConfig.getValue(tenantAlias, AuthenticationConstants.providers.CAS, 'enabled');
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant) {
        // We fetch the config values *in* the getPassportStrategy so it can be re-configured at run-time.
        var casHost = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'url');
        var loginPath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'loginPath');
        var validatePath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'validatePath');
        var mapDisplayName = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'mapDisplayName').toLowerCase();
        var mapEmail = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'mapEmail').toLowerCase();
        var mapLocale = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'mapLocale').toLowerCase();
        var useSaml = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'useSaml');

        var serverBase = TenantsUtil.getBaseUrl(tenant);

        var passportStrategy = new CasStrategy({
            'allow': '',
            'appLogoutPath': '/api/auth/logout',
            'ssoBaseURL': casHost,
            'serverBaseURL': serverBase,
            'version': 'CAS3.0',
            'loginURL': loginPath,
            'serviceURL': '/api/auth/cas/callback',
            'validateURL': validatePath,
            'useSaml': useSaml
        }, function(casResponse, done) {
            log().trace({
                'tenant': tenant,
                'casResponse': casResponse
            }, 'Received CAS authentication callback.');

            var username = casResponse.user;
            var displayName = casResponse.user;
            var opts = {};

            // If the CAS server returned attributes we try to map them to OAE profile parameters
            if (casResponse.attributes) {
                // Try to use a mapped displayname rather than the default CAS id
                var mappedDisplayName = AuthenticationUtil.renderTemplate(mapDisplayName, casResponse.attributes);
                if (mappedDisplayName) {
                    displayName = mappedDisplayName;
                }

                // Set the optional profile parameters
                AuthenticationUtil.setProfileParameter(opts, 'email', mapEmail, casResponse.attributes);
                AuthenticationUtil.setProfileParameter(opts, 'locale', mapLocale, casResponse.attributes);

                // If the CAS server provided an email address we consider it verified
                if (opts.email) {
                    opts.emailVerified = true;
                }
            }

            var context = new Context(tenant, null);

            // This `done` callback sends into the `self.verify` call inside `strategy.js` of the CAS strategy directory
            AuthenticationAPI.getOrCreateUser(context, AuthenticationConstants.providers.CAS, username, null, displayName, opts, done);
        });
        return passportStrategy;
    };

    /**
     * Sends the user to the configured CAS logout redirect URL
     *
     * @param  {Request}    req     The expressJS request object
     * @param  {Response}   res     The expressJS response object
     */
    strategy.logout = function(req, res) {
        var tenant = req.ctx.tenant();
        var logoutUrl = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'logoutUrl');

        // If no logout URL is specified, we simply redirect to the index page
        if (!logoutUrl) {
            return res.redirect('/');
        }

        // Otherwise we send the user off to the specified URL
        return res.redirect(logoutUrl);
    };

    // Register our strategy
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.CAS, strategy);
};
