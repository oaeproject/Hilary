/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var MQ = require('oae-util/lib/mq');
var RestAPI = require('oae-rest');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var TestsUtil = require('oae-tests/lib/util');

describe('Search API', function() {

    // REST Contexts we will use to execute requests
    var anonymousRestContext = null;
    var globalAdminRestContext = null;
    var camAdminRestContext = null;

    before(function(callback) {

        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Unbind the current handler, if any
        MQ.unbind(SearchConstants.mq.TASK_REINDEX_ALL, function(err) {
            assert.ok(!err);

            /*!
             * Task handler that will just drain the queue.
             *
             * @see MQ#bind
             */
            var _handleTaskDrain = function(data, mqCallback) {
                // Simply callback, which acknowledges messages without doing anything.
                mqCallback();
            };

            // Drain the queue
            MQ.bind(SearchConstants.mq.TASK_REINDEX_ALL, _handleTaskDrain, null, function(err) {
                assert.ok(!err);
                callback();
            });
        });
    });

    /**
     * Test that verifies an error is thrown when registering a document transformer that already exists.
     */
    it('verify cannot register non-unique search document transformers', function(callback) {
        SearchAPI.registerSearchDocumentTransformer('test-registerSearchDocumentTransformer', function() { });

        // Try and register a second of the same time, log the error and verify it happened.
        var err = null;
        try {
            SearchAPI.registerSearchDocumentTransformer('test-registerSearchDocumentTransformer', function() { });
        } catch (ex) {
            err = ex;
        }

        assert.ok(err);
        callback();
    });

    /**
     * Test that verifies an error is thrown when registering a reindex all handler that already exists
     */
    it('verify cannot register non-unique search reindex all handler', function(callback) {
        SearchAPI.registerSearchDocumentTransformer('test-registerReindexAllHandler', function() { });

        // Try and register a second of the same time, log the error and verify it happened.
        var err = null;
        try {
            SearchAPI.registerSearchDocumentTransformer('test-registerReindexAllHandler', function() { });
        } catch (ex) {
            err = ex;
        }

        assert.ok(err);
        callback();
    });

    /**
     * Test that verifies an error occurrs when trying to invoke an invalid search type.
     */
    it('verify cannot search invalid type', function(callback) {
        SearchAPI.search({}, 'not-a-search-type', {}, function(err, docs) {
            assert.ok(err);
            assert.equal(err.code, 400);
            callback();
        });
    });


    /**
     * Test that verifies when reindex all is triggered through the REST endpoint, a task is triggered.
     */
    it('verify reindex all triggers an mq task', function(callback) {
        // Unbind the current handler, if any
        MQ.unbind(SearchConstants.mq.TASK_REINDEX_ALL, function(err) {
            assert.ok(!err);

            /*!
             * Simply call the test callback to continue tests. If this is not invoked, the test will timeout
             * and fail.
             *
             * @see MQ#bind
             */
            var _handleTask = function(data, mqCallback) {
                mqCallback();
                callback();
            };

            // Bind the handler to invoke the callback when the test passes
            MQ.bind(SearchConstants.mq.TASK_REINDEX_ALL, _handleTask, null, function(err) {
                assert.ok(!err);

                // Reprocess previews
                RestAPI.Search.reindexAll(globalAdminRestContext, function(err) {
                    assert.ok(!err);
                });
            });
        });
    });

    /**
     * Test that verifies when previews are reprocessed through the REST endpoint, a task is triggered.
     */
    it('verify non-global admin users cannot trigger reindex all', function(callback) {
        // Unbind the current handler, if any
        MQ.unbind(SearchConstants.mq.TASK_REINDEX_ALL, function(err) {
            assert.ok(!err);

            /*!
             * Task handler that will fail the test if invoked.
             *
             * @see MQ#bind
             */
            var _handleTaskFail = function(data, mqCallback) {
                mqCallback();
                assert.fail('Did not expect the task to be invoked.');
            };

            // Bind a handler to handle the task that invokes an assertion failure, as no task should be triggered from this test
            MQ.bind(SearchConstants.mq.TASK_REINDEX_ALL, _handleTaskFail, null, function(err) {
                assert.ok(!err);

                // Generate a normal user with which to try and reprocess previews
                TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                    assert.ok(!err);

                    var userRestCtx = users[_.keys(users)[0]].restContext;

                    // Verify that an anonymous user-tenant user cannot reprocess previews
                    RestAPI.Search.reindexAll(anonymousRestContext, function(err) {
                        assert.ok(err);

                        // Verify that an anonymous global-tenant user cannot reprocess previews
                        RestAPI.Search.reindexAll(TestsUtil.createGlobalRestContext(), function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Verify that a regular user cannot generate a task
                            RestAPI.Search.reindexAll(userRestCtx, function(err) {
                                assert.ok(err);

                                // Verify that a tenant admin cannot generate a task
                                RestAPI.Search.reindexAll(camAdminRestContext, function(err) {
                                    assert.ok(err);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
