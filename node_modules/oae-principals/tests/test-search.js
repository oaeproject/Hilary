/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var assert = require('assert');

var ElasticSearch = require('oae-search/lib/internal/elasticsearch');
var MQ = require('oae-util/lib/mq');
var RestAPI = require('oae-rest');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

describe('Search', function() {

    // REST contexts we can use to do REST requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    before(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    /*!
     * Get the document with the specified id from the search results.
     *
     * @param  {SearchResult}  results     The search results object
     * @param  {String}        docId       The id of the document to search
     * @return {Object}                    The search document. `null` if it didn't exist
     */
    var _getDocById = function(results, docId) {
        for (var i = 0; i < results.results.length; i++) {
            var doc = results.results[i];
            if (doc.id === docId) {
                return doc;
            }
        }
        return null;
    };

    describe('Indexing', function() {

        /**
         * Test that verifies when a content item is indexed with just the content id, it still indexes the content
         * item.
         */
        it('verify indexing without full user item', function(callback) {
            var username = TestsUtil.generateTestUserId('user');

            var doerUsername = TestsUtil.generateTestUserId('doer');
            RestAPI.User.createUser(camAdminRestContext, doerUsername, 'password', 'Doer', null, function(err, doer) {
                var doerRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, doerUsername, 'password');

                // Create the user we will test with
                RestAPI.User.createUser(camAdminRestContext, username, username, username, null, function(err, user) {
                    assert.ok(!err);

                    // Verify the content item exists
                    SearchTestsUtil.searchAll(doerRestContext, 'general', null, {'resourceTypes': 'user', 'q': username}, function(err, results) {
                        assert.ok(!err);
                        var userDoc = _getDocById(results, user.id);
                        assert.ok(userDoc);

                        // Delete the content item from the index under the hood, this is to avoid the automatic index events invalidating the test
                        ElasticSearch.del('resource', user.id, function(err) {
                            assert.ok(!err);

                            // Verify the content item no longer exists
                            SearchTestsUtil.searchAll(doerRestContext, 'general', null, {'resourceTypes': 'user', 'q': username}, function(err, results) {
                                assert.ok(!err);
                                var userDoc = _getDocById(results, user.id);
                                assert.ok(!userDoc);

                                // This is the indexing job data that only provides the id, and not the full content item
                                var indexJob = {
                                    'resourceType': 'user',
                                    'resources': [{
                                        'id': user.id,
                                        'opts': {
                                            'indexResource': true,
                                            'indexMembers': false
                                        }
                                    }]
                                };

                                // Fire off an indexing task using just the content id
                                MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, indexJob, function() {

                                    // Ensure that the full content item is now back in the search index
                                    SearchTestsUtil.searchAll(doerRestContext, 'general', null, {'resourceTypes': 'user', 'q': username}, function(err, results) {
                                        assert.ok(!err);
                                        var userDoc = _getDocById(results, user.id);
                                        assert.ok(userDoc);
                                        assert.ok(_.isObject(userDoc.tenant));
                                        assert.equal(_.keys(userDoc.tenant).length, 2);
                                        assert.equal(userDoc.tenant.displayName, global.oaeTests.tenants.cam.displayName);
                                        assert.equal(userDoc.tenant.alias, global.oaeTests.tenants.cam.alias);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * Test that verifies when a content item is indexed with just the content id, it still indexes the content
         * item.
         */
        it('verify indexing without full group item', function(callback) {
            var doerUsername = TestsUtil.generateTestUserId('doer');
            RestAPI.User.createUser(camAdminRestContext, doerUsername, 'password', 'Doer', null, function(err, doer) {
                var doerRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, doerUsername, 'password');

                // Create the group we will test with
                var groupText = TestsUtil.generateTestUserId('group');
                RestAPI.Group.createGroup(doerRestContext, groupText, groupText, 'public', 'no', [], [], function(err, group) {
                    assert.ok(!err);

                    // Verify the content item exists
                    SearchTestsUtil.searchAll(doerRestContext, 'general', null, {'resourceTypes': 'group', 'q': groupText}, function(err, results) {
                        assert.ok(!err);
                        var groupDoc = _getDocById(results, group.id);
                        assert.ok(groupDoc);

                        // Delete the content item from the index under the hood, this is to avoid the automatic index events invalidating the test
                        ElasticSearch.del('resource', group.id, function(err) {
                            assert.ok(!err);

                            // Verify the content item no longer exists
                            SearchTestsUtil.searchAll(doerRestContext, 'general', null, {'resourceTypes': 'group', 'q': groupText}, function(err, results) {
                                assert.ok(!err);
                                var groupDoc = _getDocById(results, group.id);
                                assert.ok(!groupDoc);

                                // This is the indexing job data that only provides the id, and not the full content item
                                var indexJob = {
                                    'resourceType': 'group',
                                    'resources': [{
                                        'id': group.id,
                                        'opts': {
                                            'indexResource': true,
                                            'indexMembers': false
                                        }
                                    }]
                                };

                                // Fire off an indexing task using just the content id
                                MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, indexJob, function() {

                                    // Ensure that the full content item is now back in the search index
                                    SearchTestsUtil.searchAll(doerRestContext, 'general', null, {'resourceTypes': 'group', 'q': groupText}, function(err, results) {
                                        assert.ok(!err);
                                        var groupDoc = _getDocById(results, group.id);
                                        assert.ok(groupDoc);
                                        assert.ok(_.isObject(groupDoc.tenant));
                                        assert.equal(_.keys(groupDoc.tenant).length, 2);
                                        assert.equal(groupDoc.tenant.displayName, global.oaeTests.tenants.cam.displayName);
                                        assert.equal(groupDoc.tenant.alias, global.oaeTests.tenants.cam.alias);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
