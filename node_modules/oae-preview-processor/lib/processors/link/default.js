/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var request = require('request');

var log = require('oae-logger').logger('oae-preview-processor');
var OaeUtil = require('oae-util/lib/util');

var LinkProcessorUtil = require('oae-preview-processor/lib/processors/link/util');
var webshot = require('oae-preview-processor/lib/internal/webshot');

// The default timeouts. These will be overwritten on initialization with the values from ./config.js
var timeouts = {
    'renderDelay': 7500,
    'timeout': 30000,
    'embeddableCheckTimeout': 15000
};

/**
 * Initializes the Default Link Preview Processor
 *
 * @param  {Object}     [_config]                           The config object containing the timeouts for generating an image from a webpage
 * @param  {String}     [_config.renderDelay]               Defines the timeout (in ms) that should be waited between loading the page and taking a screencapture. Defaults to 7500ms
 * @param  {Number}     [_config.renderTimeout]             Defines the timeout (in ms) when the screencapturing should be stopped. This should include the renderDelay. Defaults to 30000ms
 * @param  {Number}     [_config.embeddableCheckTimeout]    Defines the timeout (in ms) when the embeddable link check should be stopped. Defaults to 15000ms
 * @param  {Function}   callback                            Standard callback function
 * @param  {Object}     callback.err                        Standard error object (if any)
 */
var init = module.exports.init = function(_config, callback) {
    _config = _config || {};
    timeouts.renderDelay = OaeUtil.getNumberParam(_config.renderDelay, timeouts.renderDelay);
    timeouts.timeout = OaeUtil.getNumberParam(_config.renderTimeout, timeouts.timeout);
    timeouts.embeddableCheckTimeout = OaeUtil.getNumberParam(_config.embeddableCheckTimeout, timeouts.embeddableCheckTimeout);
    callback();
};

/**
 * @borrows Interface.test as DefaultLinkProcessor.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    // Don't bother with non-link content items.
    if (contentObj.resourceSubType !== 'link') {
        return callback(null, -1);
    }

    // Only allow HTTP(S) URLs and default to the lowest possible score.
    if (/^http(s)?:\/\//.test(contentObj.link)) {
        return callback(null, 1);
    } else {
        return callback(null, -1);
    }
};

/**
 * @borrows Interface.test as DefaultLinkProcessor.test
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {
    // Do a head request to check if this site allows for embedding.
    var options = {
        'url': contentObj.link,
        'method': 'HEAD',
        'timeout': timeouts.embeddableCheckTimeout
    };
    request(options, function(err, response) {
        if (err) {
            log().error({'err': err, 'contentId': ctx.contentId}, 'Could not check whether this URL allows for iframe embedding.');
            return callback(err);
        }

        /*
         * See https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
         * There are 3 options:
         *      - DENY
         *      - SAMEORIGIN
         *      - ALLOW-FROM uri
         *
         * All 3 of these would block embedding so as soon as the header is defined,
         * we add some metadata that tells the UI this link cannot be embedded.
         */
        if (response.headers['x-frame-options']) {
            ctx.addPreviewMetadata('embeddable', false);
        } else {
            ctx.addPreviewMetadata('embeddable', true);
        }

        // In all cases, we need to take a screenshot and generate thumbnails.
        var path = ctx.baseDir + '/webshot.png';
        webshot.getImage(contentObj.link, path, timeouts, function (err) {
            if (err) {
                log().error({'err': err, 'contentId': ctx.contentId}, 'Could not generate an image.');
                return callback(err);
            }

            LinkProcessorUtil.generatePreviewsFromImage(ctx, path, null, callback);
        });
    });
};
