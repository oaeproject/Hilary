/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');
var util = require('util');

var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var Signature = require('oae-util/lib/signature');
var Validator = require('oae-util/lib/validator').Validator;
var AuthnUtil = require('oae-authentication/lib/util');

var Strategy = function() {
    passport.Strategy.call(this);
    this.name = 'signed';
};

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);


/**
 * Authenticate request based on the contents of request parameters.
 *
 * @param  {Request}   req
 * @api protected
 */
Strategy.prototype.authenticate = function(req) {
    var expires = parseInt(req.body.expires, 10);
    var signature = req.body.signature;
    var userId = req.body.userId;
    var tenant = req.ctx.tenant().alias;
    var self = this;
    var validator = new Validator();
    validator.check(expires, {'code': 400, 'msg': 'Missing expires parameter'}).notEmpty();
    validator.check(signature, {'code': 400, 'msg': 'Missing signature parameter'}).notEmpty();
    validator.check(userId, {'code': 400, 'msg': 'Missing userId parameter'}).notEmpty();
    validator.check(signature, {'code': 401, 'msg': 'Invalid credentials'}).verifyExpiringSignature(tenant, expires, userId);
    if (validator.hasErrors()) {
        var err = validator.getFirstError();
        return self.fail(err.msg, err.code);
    }

    // This is a valid request, get the user and pass it on.
    var context = new Context(tenant, null);
    PrincipalsAPI.getUser(context, userId, function(err, user) {
        if (err && err.code !== 404) {
            return self.error(new Error(err.msg));
        } else if (err && err.code === 404) {
            return self.fail(err.msg, 404);
        }
        AuthnUtil.logAuthnSuccess(req, user, self.name);
        self.success(user);
    });
};

/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
