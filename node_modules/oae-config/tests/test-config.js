/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');
var Context = require('oae-context').Context;

var ConfigAPI = require('oae-config');


describe('Configuration', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used for anonymous requests on the global tenant
    var anonymousGlobalRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context for a user that will be used inside of the tests
    var johnRestContext = null;
    // Context for a user that will be used inside of the tests
    var johnContext = null;

    /**
     * Function that will fill up the global admin, tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        // Fill up tenant admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the rest context for our test user
        var userId = TestsUtil.generateTestUserId('john');
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'John Doe', null, function(err, createdUser) {
            johnRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');
            johnContext = new Context(global.oaeTests.tenants.cam, createdUser);
            callback();
        });
    });


    describe('Schema', function() {
        
        /**
         * Test that verifies that the configuration schema can be retrieved on the global admin server
         */
        it('verify get schema global', function(callback) {
            RestAPI.Config.getSchema(globalAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.ok(schema);
                assert.ok(schema['oae-authentication'].title);
                assert.ok(schema['oae-authentication']['twitter'].elements['enabled'], true);
                
                // Verify that the anonymous users can't retrieve the schema
                RestAPI.Config.getSchema(anonymousGlobalRestContext, function(err, schema) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.ok(!schema);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that the configuration schema can be retrieved on the tenant server
         */
        it('verify get schema tenant', function(callback) {
            RestAPI.Config.getSchema(camAdminRestContext, function(err, schema) {
                assert.ok(!err);
                assert.ok(schema);
                assert.ok(schema['oae-authentication'].title);
                assert.ok(schema['oae-authentication']['twitter'].elements['enabled'], true);
                
                // Verify that regular tenant users can't retrieve the schema
                RestAPI.Config.getSchema(johnRestContext, function(err, schema) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.ok(!schema);
                    
                    // Verify that only anonymous users can't retrieve the schema
                    RestAPI.Config.getSchema(anonymousCamRestContext, function(err, schema) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        assert.ok(!schema);
                        callback();
                    });
                });
            });
        });
        
    });


    describe('Internal Configuration API', function() {
        
        /**
         * Test that verifies that a single configuration value can be retrieved from the cached configuration
         */
        it('verify get single config value', function(callback) {
            var AuthenticationConfig = ConfigAPI.config('oae-authentication');
            var PrincipalsConfig = ConfigAPI.config('oae-principals');
            // Retrieve a non-existing value
            assert.equal(AuthenticationConfig.getValue(johnContext.tenant().alias, 'sso', 'enabled'), null);
            // Retrieve a boolean value
            assert.equal(AuthenticationConfig.getValue(johnContext.tenant().alias, 'twitter', 'enabled'), true);
            // Retrieve a string value
            assert.equal(PrincipalsConfig.getValue(johnContext.tenant().alias, 'user', 'defaultLanguage'), 'en_GB');
            // Retrieve a suppressed value
            assert.equal(PrincipalsConfig.getValue(johnContext.tenant().alias, 'recaptcha', 'privateKey'), '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');
            callback();
        });

        /**
         * Test that verifies the validation for retrieving a config value from the cached configuration
         */
        it('verify validation', function(callback) {
            // Verify that initializing a config factory needs a module name. This should throw an error
            assert.throws(function() {
                ConfigAPI.config()
            });
            // Verify that a feature needs to be provided when getting a config value
            var AuthenticationConfig = ConfigAPI.config('oae-authentication');
            assert.equal(AuthenticationConfig.getValue(johnContext.tenant().alias), null);
            // Verify that an element needs to be provided when getting a config value
            assert.equal(AuthenticationConfig.getValue(johnContext.tenant().alias, 'twitter'), null);
            callback();
        });
    });


    describe('REST Configuration API', function() {

        /**
         * Test that verifies that the configuration can be retrieved on the global server
         */
        it('verify get config global', function(callback) {
            // Get the config as an admin user
            RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                // Verify that a public value is present
                assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                // Verify that a suppressed value is present
                assert.equal(config['oae-principals']['recaptcha']['privateKey'], '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');

                // Get the config as an anonymous user
                RestAPI.Config.getTenantConfig(anonymousGlobalRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    // Verify that a public value is present
                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                    // Verify that a suppressed value is not present
                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that the configuration can be retrieved on the tenant server
         */
        it('verify get config tenant', function(callback) {
            // Get the config as an admin user
            RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                // Verify that a public value is present
                assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                // Verify that a suppressed value is present
                assert.equal(config['oae-principals']['recaptcha']['privateKey'], '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');

                // Get the config as a logged in user
                RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    // Verify that a public value is present
                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                    // Verify that a suppressed value is not present
                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                    
                    // Get the config as an anonymous user
                    RestAPI.Config.getTenantConfig(anonymousCamRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        // Verify that a public value is present
                        assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                        // Verify that a suppressed value is not present
                        assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that the configuration can be retrieved for the tenant server through the global admin
         */
        it('verify get config tenant through global', function(callback) {
            // Get the config as an admin user
            RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                // Verify that a public value is present
                assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                // Verify that a suppressed value is present
                assert.equal(config['oae-principals']['recaptcha']['privateKey'], '6LcFWdYSAAAAANrHjt2Y5VJXoICHa95PFDarVcGs');

                // Get the config as an anonymous user
                RestAPI.Config.getTenantConfig(anonymousGlobalRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    // Verify that a public value is present
                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                    // Verify that a suppressed value is not present
                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a global configuration value can be persisted
         */
        it('verify set config value global', function(callback) {
            RestAPI.Config.updateConfig(globalAdminRestContext, null, 'oae-authentication/twitter/enabled', false, function(err) {
                assert.ok(!err);

                // Validate that the change has been made
                RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], false);
                    
                    // Validate that the tenant admin can see this as well
                    RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);
                        
                        // Set a new value for a suppressed config value
                        RestAPI.Config.updateConfig(globalAdminRestContext, null, 'oae-principals/recaptcha/privateKey', 'newKey', function(err) {
                            assert.ok(!err);
            
                            // Validate that the change has been made
                            RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                                assert.ok(!err);
                                assert.ok(config);
                                assert.equal(config['oae-principals']['recaptcha']['privateKey'], 'newKey');
                                
                                // Validate that the tenant admin can see this as well
                                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                    assert.ok(!err);
                                    assert.ok(config);
                                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], 'newKey');
                                    
                                    // Validate that a non-admin user can still not see this
                                    RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                                        assert.ok(!err);
                                        assert.ok(config);
                                        assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant configuration value can be persisted
         */
        it('verify set config value tenant', function(callback) {
            RestAPI.Config.updateConfig(camAdminRestContext, null, 'oae-authentication/twitter/enabled', true, function(err) {
                assert.ok(!err);

                // Validate that the change has been made and has overriden the global config
                RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                    
                    // Validate that the new value can be retrieved through the global admin
                    RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], true);
                        
                        // Set a new value for a suppressed config value
                        RestAPI.Config.updateConfig(camAdminRestContext, null, 'oae-principals/recaptcha/privateKey', 'newTenantKey', function(err) {
                            assert.ok(!err);
            
                            // Validate that the tenant admin can see this as well
                            RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                                assert.ok(!err);
                                assert.ok(config);
                                assert.equal(config['oae-principals']['recaptcha']['privateKey'], 'newTenantKey');
                                    
                                // Validate that a non-admin user can still not see this
                                RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                                    assert.ok(!err);
                                    assert.ok(config);
                                    assert.equal(config['oae-principals']['recaptcha']['privateKey'], null);
                                        
                                    // Validate that the global admin still has the old values
                                    RestAPI.Config.getTenantConfig(globalAdminRestContext, null, function(err, config) {
                                        assert.ok(!err);
                                        assert.ok(config);
                                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);
                                        assert.equal(config['oae-principals']['recaptcha']['privateKey'], 'newKey');
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a tenant configuration value can be persisted through the global server
         */
        it('verify set tenant config value global', function(callback) {
            RestAPI.Config.updateConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, 'oae-authentication/twitter/enabled', false, function(err) {
                assert.ok(!err);

                // Validate that the change has been made from the global admin
                RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-authentication']['twitter']['enabled'], false);
                    
                    // Validate that the change has been made from the tenant admin
                    RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(config);
                        assert.equal(config['oae-authentication']['twitter']['enabled'], false);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation on setting and retrieving config
         */
        it('verify validation', function(callback) {
            // Missing configField
            RestAPI.Config.updateConfig(globalAdminRestContext, null, null, false, function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Missing configValue
                RestAPI.Config.updateConfig(globalAdminRestContext, null, 'oae-authentication/twitter/enabled', null, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Try changing the config with an invalid tenant id
                    RestAPI.Config.updateConfig(globalAdminRestContext, ' ', 'oae-authentication/twitter/enabled', 'moops', function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Try changing the tenant config as a logged in non-admin
                        RestAPI.Config.updateConfig(johnRestContext, null, 'oae-authentication/twitter/enabled', 'moops', function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                            
                            // Try changing the tenant config as an anonymous user
                            RestAPI.Config.updateConfig(anonymousCamRestContext, null, 'oae-authentication/twitter/enabled', 'moops', function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
    
                                // Try changing the global config as a non-admin
                                RestAPI.Config.updateConfig(anonymousGlobalRestContext, null, 'oae-authentication/twitter/enabled', 'moops', function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
    
                                    // Verify getting tenant configuration through the global server needs a valid ID
                                    RestAPI.Config.getTenantConfig(globalAdminRestContext, ' ', function(err, config) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
