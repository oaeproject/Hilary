/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var rolesAPI = require('oae-roles');
var cassandra = require('oae-util/lib/cassandra');
var roleUtil = require('oae-roles/lib/util');
var permissionsAPI = require('oae-permissions/lib/api');
var utils = require('./utils');

var Constants = {

    // role and permission management constants
    PRINCIPAL_TYPE_GROUP: 'g',
    roles: {
        MEMBER: 'member',
        MANAGER: 'manager'
    }
}

/**
 * Get the basic profile for a group.
 * @param  {String}   group_id  An identifier for a group. ex: g:cam:oae-team
 * @param  {Function} callback  Standard callback method where the first argument is an error object
 *                              that contains a code suitable as http statuscode and a corresponding message.
 *                              The second argument holds the group information.
 */
module.exports.getGroup = function(group_id, callback) {
    if (!utils.isGroup(group_id)) {
        return callback({'code': 400, 'msg': 'The provided group_id is not a group identifier.'});
    }

    utils.getPrincipal(group_id, callback);
};

/**
 * Get all the members of a group.
 *
 * @param  {String}                 group_id                An identifier for a group. ex: g:cam-oae-team
 * @param  {Boolean}                retrieve_basicprofile   Wether or not the basic profile should be included for the principals
 * @param  {String}                 start                   The principal_id that comes just before the first principal you wish to have in your results.
 * @param  {Number}                 limit                   The number of members you wish to retrieve.
 * @param  {Function(err, members)} callback                Standard callback method that has an array of the direct members of a group.
 */
module.exports.getGroupMembers = function(group_id, retrieve_basicprofile, start, limit, callback) {
    // Defaults.
    limit = limit || 100;
    callback = callback || function(err, members) {};

    if (isNaN(limit)) {
        return callback({'code': 400, 'msg': 'The limit parameter needs to be a number'});
    }

    // Ensure that this group exists.
    module.exports.getGroup(group_id, function(err, group) {
        if (err) {
            return callback(err);
        }

        // Page the query.
        var startColumnIndex = 0;
        if (start) {
            limit++;
            startColumnIndex = 1;
        } else {
            start = '';
        }

        cassandra.runQuery("SELECT first " + limit + " ?..\'\' FROM GroupMembers WHERE group_id = ?", [start, group_id], function (err, rows) {
            if (err) {
                return callback({'code': 500, 'msg': err});
            }

            var members = [];
            for (var i = startColumnIndex, j = rows[0].cols.length;i<j;i++) {
                if (rows[0].cols[i].name !== "group_id") {
                    members.push(rows[0].cols[i].name);
                }
            }
            if (members.length === 0) {
                return callback(false, members);
            }

            if (!retrieve_basicprofile) {
                return callback(false, members);
            }

            utils.getBasicProfile(members, callback);
        });
    });
};

/**
 * Gets all the groups a principal (both user or groups) is a member of. This includes all group ancestors to which the user is indicrectly
 * a member.
 *
 * @param {String}                  principal_id            The principal to retrieve all the groups for.
 * @param {Boolean}                 retrieve_basicprofile   Whether or not the profile should be retrieved. If false, only the principal_ids for each group will be returned.
 * @param {String}                  start (NOT IMPLEMENTED) The principal_id that comes just before the first principal you wish to have in your results.
 * @param {Number}                  limit (NOT IMPLEMENTED) The number of parent principals you wish to retrieve (default: 10)
 * @param {Function(err, groups)}   callback                Standard callback method invoked when the process completes
 * @param {Object}                  callback.err            An error that occured, if any
 * @Param {Array<String>}           callback.groups         An (inconsistently ordered) array of groups to which the user belongs, either directly or indirectly
 */
module.exports.memberOf = function(principal_id, retrieve_basicprofile, start, limit, callback) {
    // first ensure that the principal exists
    utils.getPrincipal(principal_id, function(err) {
        if (!err) {
            getGroupMembershipAncestry(principal_id, function(err, groups) {
                if (!err) {
                    if (retrieve_basicprofile) {
                        utils.getBasicProfile(_.keys(groups), callback);
                    } else {
                        callback(null, _.keys(groups));
                    }
                } else {
                    callback(err);
                }
            });
        } else {
            callback(err);
        }
    });
};

/**
 * Adds a principal to a group.
 * 
 * @param {Context}         ctx             The current execution context
 * @param {String}          groupUuid       The groupUuid of the group
 * @param {String}          memberUuid      The principalUuid of the principal to add
 * @param {String}          role            The role to assign to the member in the group
 * @param {Function(err)}   callback        A function that is executed when the member has been added
 * @param {Object}          callback.err    An error that occured, if any
 */
module.exports.addGroupMember = function(ctx, groupUuid, memberUuid, role, callback) {
    callback = callback || function() {};
    role = role || Constants.roles.MEMBER;

    // ensure that the user is allowed to perform the action
    canAddMember(ctx, groupUuid, function(err) {
        if (!err) {
            // ensure we don't add a member to itself
            if (groupUuid !== memberUuid) {
                //ensure the aspiring member exists
                utils.getPrincipal(memberUuid, function(err) {
                    if (!err) {
                        addMembers(groupUuid, [memberUuid], role, callback);
                    } else {
                        // the principal did not exist, probably
                        callback(err);
                    }
                });
            } else {
                callback({code: 400, msg: 'Cannot add a group to itself'});
            }
        } else {
            callback(err);
        }
    });
}

/**
 * Adds multiple principals to a group.
 *
 * @param {Context}                 ctx             The current execution context
 * @param {String}                  groupUuid       The identifier of a group. ex: g:cam:oae-team
 * @param {Array<String>}           principalsToAdd An array of principal identifiers you wish to add. ex: [g:cam:ui-team, g:cam:backend-team]
 * @param {String}                  role            The role to assign to the members in the group
 * @param {Function(err, added)}    callback        A function executed when the process has completed
 * @param {Object}                  callback.err    The error that occured, if any
 * @param {Array<String>}           callback.added  An array of principal UUIDs that were successfully added. If there was an error, this will be a partial array.
 */
module.exports.addGroupMembers = function(ctx, groupUuid, principalsToAdd, role, callback) {
    callback = callback || function() {};
    role = role || Constants.roles.MEMBER;

    // Check if group and whether or not we have access to edit.
    canAddMember(ctx, groupUuid, function(err) {
        if (!err) {
            // Check the prefixes of each member we wish to add.
            var proceed = true;
            for (var i = 0; i < principalsToAdd.length;i++) {
                if ( (principalsToAdd[i].slice(0, 2) !== "g:" && principalsToAdd[i].slice(0, 2) !== "u:") || (principalsToAdd[i] === groupUuid)) {
                    proceed = false;
                    break;
                }
            }

            if (!proceed) {
                return callback({'code': 400, 'msg': "You can only add users and/or groups and not the group itself."});
            }

            // Verify that the provided principals actually exist in the database.
            cassandra.runQuery('SELECT * FROM Principals WHERE principal_id IN (?)', [principalsToAdd], function (err, rows) {
                if (err) {
                    return callback({'code': 500, 'msg': err});
                }

                // validate that all returned rows are real users
                for (var i = 0; i < rows.rowCount();i++) {
                    if (rows[i]._colCount === 1) {
                        return callback({'code': 400, 'msg': 'Not all the provided principals exist!'});
                    }
                }

                // finally add each member to the group
                addMembers(groupUuid, principalsToAdd, role, callback);
            });
        } else {
            callback(err);
        }
    });
};

/**
 * Create a new group within this tenant.
 *
 * @param {Context}             ctx             The current execution context
 * @param {String}              title           The title for this group. This will be stemmed down to something that we can use in
 *                                              Cassandra and prefixed with g:tenant.alias:
 * @param {String}              description     A description for this group.
 * @param {Function(err, uuid)} callback        A function invoked when the process is complete
 * @param {Object}              callback.err    An error that occured, if any. It contains a code suitable as http statuscode and a
 *                                              corresponding message.
 * @param {String}              callback.uuid   The UUID of the group created.
 */
module.exports.createGroup = function(ctx, title, description, callback) {
    callback = callback || function() {};
    var tenant = ctx.tenant();
    var groupId = title.replace(/[:;<>#%{}|~`@%&!$,.="'\^\+\/\?\(\)\*\s\\\\\[\]]/gi, '-');
    var id = roleUtil.toUuid(Constants.PRINCIPAL_TYPE_GROUP, tenant.alias, groupId);

    canCreateGroup(ctx, id, function(err) {
        if (!err) {
            // Create the group.
            cassandra.runQuery('INSERT INTO Principals (principal_id, tenant, group_title, group_description) VALUES (?, ?, ?, ?)',
                [id, tenant.alias, title, description], function (err) {

                if (err) {
                    return callback({'code': 500, 'msg': err});
                } else {
                    var currentUserUuid = userUuid(ctx);
                    // immediately add the current user as a manager
                    addMembers(id, [currentUserUuid], Constants.roles.MANAGER, function(err) {
                        if (!err) {
                            callback(null, id);
                        } else {
                            callback(err);
                        }
                    });
                }
            });
        } else {
            return callback(err);
        }
    });
};

/**
 * Explodes a group down to all its user principals.
 * @param  {String}   group_id   The ID of a group.
 * @param  {Function} callback  Standard callback method where the first argument is an error object
 *                              that contains a code suitable as http statuscode and a corresponding message.
 *                              The second argument holds all the users principals in this group.
 */
module.exports.getGroupUsers = function(group_id, callback) {
    utils.explodePrincipals([group_id], true, function(err, users) {
        var members = _.keys(users);
        callback(false, members);
    });
};

/**
 * Determine whether or not the user in the context is allowed to create the given group.
 * 
 * @param {Context}         ctx          The current execution context
 * @param {String}          groupUuid    The group to check
 * @param {Function(err)}   callback     The function to invoke when the process completes
 * @param {Object}          callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var canCreateGroup = function(ctx, groupUuid, callback) {
    if (userUuid(ctx) !== null) {
        module.exports.getGroup(groupUuid, function(err, group) {
            if (err && err.code === 404) {
                // we're expecting an error, indicating that the group does not exist  
                return callback();
            } else {
                return callback({'code': 400, 'msg': 'This name is not available.'});
            }
        });
    } else {
        return callback({code: 401, msg: 'Cannot create a group anonymously.'});
    }
}


/**
 * Determine whether or not the user in the context is allowed to add a member to the given group.
 * 
 * @param {Context}         ctx          The current execution context
 * @param {String}          groupUuid    The group to check
 * @param {Function(err)}   callback     The function to invoke when the process completes
 * @param {Object}          callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var canAddMember = function(ctx, groupUuid, callback) {
    var currentUserUuid = userUuid(ctx);
    var err401 = {code: 401, msg: 'Permission denied'};

    if (currentUserUuid !== null) {
        module.exports.getGroup(groupUuid, function(err, group) {
            if (err) {
                return callback(err);
            }

            permissionsAPI.isAllowed(currentUserUuid, Constants.roles.MANAGER, groupUuid, function(err, isAllowed) {
                if (!err) {
                    if (isAllowed) {
                        return callback();
                    } else {
                        return callback(err401);
                    }
                } else {
                    return callback({code: 500, msg: err});
                }
            });
        });
    } else {
        return callback(err401);
    }
}

/**
 * Given some principal, get their entire group membership ancestry. In other words, get all the groups to which they belong,
 * and the groups to all those groups belong, and so on.
 *
 * @param {String}                  principalUuid       The UUID of the principal
 * @param {Function(err, ancestry)} callback            A callback function specifying the entire group ancestry of the given principal
 * @param {Object}                  callback.err        The err that occured, if any
 * @param {Object}                  callback.ancestry   A hash keyed by the group UUID of each group of which the user is indirectly a member. The value of each entry is 'true'.
 */
var getGroupMembershipAncestry = function(principalUuid, callback) {
    var results = {};

    var multiGetGroupMembershipAncestry = function(principalUuids, results) {
        rolesAPI.getAssociationsForPrincipalsAndResourceType(principalUuids, Constants.PRINCIPAL_TYPE_GROUP, 10000, function(err, entries) {
            var nextPrincipalBatch = [];
            if (!err) {
                var ancestors = Object.keys(entries);
                // for each group parent, determine if we've already recorded their membership. if not, we record it, and search it's parents
                for (var i = 0; i < ancestors.length; i++) {
                    var ancestorUuid = ancestors[i];
                    if (!results[ancestorUuid]) {
                        results[ancestorUuid] = true;
                        nextPrincipalBatch.push(ancestorUuid);
                    }
                }

                // if we found new ancestors, we need to recurse to find their ancestors. Otherwise we're done.
                if (nextPrincipalBatch.length > 0) {
                    return multiGetGroupMembershipAncestry(nextPrincipalBatch, results);
                } else {
                    return callback(false, results);
                }
            } else {
                return callback(err);
            }
        });
    }

    multiGetGroupMembershipAncestry([principalUuid], results, callback);
};

/**
 * Add a list of members to a group. Note this internal function does no validation on the data. Please do
 * validation prior to send batches of additions to this method.
 * 
 * @param {String}                  groupUuid       The UUID of the group to which the members should be added
 * @param {Array<String>}           memberUuids     The UUIDs of all the members to add to the group
 * @param {String}                  role            The role to assign to all the members
 * @param {Function(err, added)}    callback        The Function called when the process is finished
 * @param {Object}                  callback.err    An error that occurred, if any
 * @param {Object}                  callback.added  A list of the memberUuids that were successfully added
 */
var addMembers = function(groupUuid, memberUuids, role, callback) {
    var additionsErr = false;
    var addedMemberUuids = [];

    memberUuids.forEach(function(memberUuid) {
        // setting each user with role 'member' on each group.
        cassandra.runQuery('UPDATE GroupMembers SET ? = ? WHERE group_id = ?', [memberUuid, role, groupUuid], function(err) {
            if (!err) {
                // when adding a member to a group, the groupUuid itself is also the resource UUID.
                rolesAPI.setRole(memberUuid, groupUuid, role, function(err) {

                    // If there is an error here, we're purposefully not trying to undo the "UPDATE GroupMembers" statement that was
                    // successful above. Reason being is that it is more robust to do a consistency check on read, as storage may be
                    // inaccessible in this case, leaving any chance for reconcile here futile any way.

                    trackAdditions(err, memberUuid);
                });
            } else {
                trackAdditions(err, memberUuid);
            }
        });
    });

    var trackAdditions = function(err, memberUuid) {
        if (additionsErr) {
            // an error occurred when adding one of the group memberships, do nothing.
            // Note the callback was already executed if this is the case.
        } else if (err) {
            // we've experienced an error for the first time in this members batch. record it and just jump straight to the callback
            additionsErr = err;
            return callback(additionsErr, addedMemberUuids);
        } else {
            // everything is still dandy, aggregate successful members, and return if we're done.
            addedMemberUuids.push(memberUuid);
            if (addedMemberUuids.length === memberUuids.length) {
                return callback(null, addedMemberUuids);
            }
        }
    }
}

/**
 * Get the current user UUID from the context, if any
 * 
 * @param {Context} The user context
 * @return {String} The UUID of the user in the context. Returns null if there is no active user (i.e., anonymous)
 */
var userUuid = function(ctx) {
    var user = ctx.user();
    return user ? user.id : null;
}

