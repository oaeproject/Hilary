/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

var assert = require('assert');
var utils = require('oae-principals/lib/utils');
var roleUtils = require('oae-roles/lib/util');
var Context = require('oae-context').Context;
var Tenant = require('oae-tenants/lib/model').Tenant;

var User = require('oae-principals/lib/model.user').User;
var PrincipalsAPI = require('oae-principals');
var PrincipalUtil = require('oae-principals/lib/utils');


/**
 * Create a number of users that will be used inside of the tests
 * @param  {Test}                test               Standard nodeunit test object
 * @param  {Function(userids)}   callback           Standard callback function
 * @param  {Array<String>}       callback.userids   Array of user ids for the created users
 */
var createUsers = function(callback) {
    var r = Math.round(Math.random() * 1000000);
    var userids = [];
    var tenant = new Tenant('cam');
    var ctx = new Context(tenant, null);
    PrincipalsAPI.createUser(ctx, 'nm417-' + r, 'password' + r, 'public', null, null, 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs', function(err, id) {
        assert.ok(!err);
        userids.push(id);
        PrincipalsAPI.createUser(ctx, 'simong-' + r, 'password' + r, 'loggedin', null, null, 'Simon', 'Gaeremynck', 'Simon Gaeremynck', function(err, id) {
            assert.ok(!err);
            userids.push(id);
            PrincipalsAPI.createUser(ctx, 'branden-' + r, 'password' + r, 'private', null, null, 'Branden', 'Visser', 'Branden Visser', function(err, id) {
                assert.ok(!err);
                userids.push(id);
                PrincipalsAPI.createUser(ctx, 'physx-' + r, 'password' + r, 'public', null, null, 'Bert', 'Pareyn', 'Bert Pareyn', function(err, id) {
                    assert.ok(!err);
                    userids.push(id);
                    callback(userids);
                });
            });
        });
    });
};

/**
 * Create a number of groups that will be used inside of the tests
 * @param  {Test}                test               Standard nodeunit test object
 * @param  {Array<String>}       userids            Array of userids for the available users in the test
 * @param  {Function(groupids)}  callback           Standard callback function
 * @param  {Array<String>}       callback.groupids  Array of group ids for the created groupids
 */
var createGroups = function(userids, callback) {
    var r = Math.round(Math.random() * 1000000);
    var groupids = [];
    var ctx = new Context(new Tenant('cam'), new User('cam', userids[1]));
    PrincipalsAPI.createGroup(ctx, 'oae-team-' + r, 'OAE Team', function(err, groupId) {
        assert.ok(!err);
        groupids.push(groupId);
        PrincipalsAPI.createGroup(ctx, 'backend-team-' + r, 'Back-end Team', function(err, groupId) {
            assert.ok(!err);
            groupids.push(groupId);
            PrincipalsAPI.createGroup(ctx, 'ui-team-' + r, 'UI Team', function(err, groupId) {
                assert.ok(!err);
                groupids.push(groupId);
                callback(groupids);
            });
        });
    });
};


describe('Principals', function() {
    describe('Utilities', function() {

        it('Test the getPrincipal utility function', function(callback) {
            createUsers(function(userids) {
                createGroups(userids, function(groupids) {
                    // Get an existing user
                    PrincipalUtil.getPrincipal(userids[0], function(err, user) {
                        assert.ok(!err);
                        assert.ok(user);
                        assert.equal(user.id, userids[0]);
                        assert.equal(user.firstName, 'Nicolaas');
                        // Get a non-existing user
                        PrincipalUtil.getPrincipal('non-existing-user', function(err, user) {
                            assert.ok(err);
                            assert.ok(!user);
                            // Get an existing group
                            PrincipalUtil.getPrincipal(groupids[0], function(err, group) {
                                assert.ok(!err);
                                assert.ok(group);
                                assert.equal(group.principal_id, groupids[0]);
                                // Get a non-existing group
                                PrincipalUtil.getPrincipal('non-existing-group', function(err, group) {
                                    assert.ok(err);
                                    assert.ok(!group);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('Test the getPrincipals utility function', function(callback) {
            createUsers(function(userids) {
                createGroups(userids, function(groupids) {
                    // Get existing users
                    PrincipalUtil.getPrincipals([userids[0], userids[1], userids[2]], function(err, users) {
                        assert.ok(!err);
                        assert.ok(users);
                        assert.equal(_.keys(users).length, 3);
                        // Get existing groups
                        PrincipalUtil.getPrincipals([groupids[0], groupids[1]], function(err, groups) {
                            assert.ok(!err);
                            assert.ok(groups);
                            assert.equal(_.keys(groups).length, 2);
                            // Get existing users/groups
                            PrincipalUtil.getPrincipals([groupids[0], userids[0], userids[1], groupids[1], userids[3]], function(err, principals) {
                                assert.ok(!err);
                                assert.ok(principals);
                                assert.equal(_.keys(principals).length, 5);
                                // Get existing users, of which some don't exist
                                PrincipalUtil.getPrincipals([userids[0], 'non-existing-user', userids[2]], function(err, users) {
                                    assert.ok(err);
                                    assert.ok(!users);
                                    // Get existing groups, of which some don't exist
                                    PrincipalUtil.getPrincipals([groupids[0], 'non-existing-group'], function(err, groups) {
                                        assert.ok(err);
                                        assert.ok(!users);
                                        // Get existing users/groups, of which some don't exist
                                        PrincipalUtil.getPrincipals([groupids[0], userids[0], 'non-existing-user', userids[1], 'non-existing-group'], function(err, principals) {
                                            assert.ok(err);
                                            assert.ok(!principals);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('should be able to determine bad identifiers', function() {
            var id = roleUtils.toUuid("g", "cam", "oae-team");
            assert.ok(utils.isGroup(id));

            id = roleUtils.toUuid("u", "cam", "simong");
            assert.ok(utils.isUser(id));


            id = roleUtils.toUuid("c", "cam", "foo.doc");
            assert.ok(!utils.isUser(id));
            assert.ok(!utils.isUser(id));
        });
    });
});