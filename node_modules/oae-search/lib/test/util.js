/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var RestAPI = require('oae-rest');

var ElasticSearch = require('oae-search/lib/internal/elasticsearch');
var MqTestsUtil = require('oae-util/lib/test/mq-util');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

/**
 * Search for all the documents that match the query. This bypasses paging, meaning all the results will be
 * returned, regardless of the limit set in the `opts`. This is useful for tests where the data-set grows
 * indeterministically with more tests. This test always includes an index refresh, as described by
 * @see #searchRefreshed
 *
 * @see RestAPI.Search#search for the meaning of the method parameters.
 */
var searchAll = module.exports.searchAll = function(restCtx, searchType, params, opts, callback) {
    opts = opts || {};

    MqTestsUtil.whenTasksEmpty(SearchConstants.mq.TASK_INDEX_DOCUMENT, function() {
        MqTestsUtil.whenTasksEmpty(SearchConstants.mq.TASK_DELETE_DOCUMENT, function() {

            // Search first with a limit of 1. This is to get the total number of documents available to search.
            opts.limit = 1;
            searchRefreshed(restCtx, searchType, params, opts, function(err, result) {
                if (err) {
                    return callback(err);
                } else if (result.total === 0) {
                    // We got 0 documents, just return the result as-is
                    return callback(null, result);
                }

                // An object that will resemble all the results.
                var allData = {'total': result.total, 'results': []};

                // There are more results, search for everything. Don't refresh this time since we already did for the previous query (if specified)
                var getMoreResults = function() {
                    opts.start = allData.results.length;
                    opts.limit = 25;
                    RestAPI.Search.search(restCtx, searchType, params, opts, function(err, data) {
                        if (err) {
                            return callback(err);
                        } else if (data.results.length === 0) {
                            // There are no more new results coming back which means we've got them all.
                            return callback(null, allData);
                        }

                        // Add the new results.
                        allData.results = allData.results.concat(data.results);

                        // Search for more results.
                        getMoreResults();
                    });
                };

                // Start retrieving them all.
                getMoreResults();
            });
        });
    });
};

/**
 * Perform a search with the given parameters, but first perform a delay and then a `SearchAPI.Search.refresh`. This is
 * useful for tests, where we need to allow time for an indexing event to take place before performing a validation.
 *
 * @see RestAPI.Search#search for the meaning of the method parameters.
 */
var searchRefreshed = module.exports.searchRefreshed = function(restCtx, searchType, params, opts, callback) {
    MqTestsUtil.whenTasksEmpty(SearchConstants.mq.TASK_INDEX_DOCUMENT, function() {
        MqTestsUtil.whenTasksEmpty(SearchConstants.mq.TASK_DELETE_DOCUMENT, function() {
            ElasticSearch.refresh(function(err) {
                if (err) {
                    return callback(err);
                }

                RestAPI.Search.search(restCtx, searchType, params, opts, callback);
            });
        });
    });
};
