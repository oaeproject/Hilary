/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Cassandra = require('oae-util/lib/cassandra');

var RolesAPI = require('oae-roles');
var RolesModel = require('oae-roles/lib/model');
var RolesUtil = require('oae-roles/lib/util');


describe('Roles', function() {

    var PrincipalTypes = { USER: 'u', GROUP: 'g' };
    var ResourceTypes = { CONTENT: 'c', GROUP: 'g' };

    /**
     * Utility function that gets the full ancestry of a group
     * @param {Array<String>}           principalUuids       Array of principal ids for which we want to get the group ancestry     
     * @param {Object}                  results              Aggregated results so far
     * @param {Function(err, results)}  callback             Standard callback function
     * @param {Object}                  callback.err         Error object containing error message
     * @param {Object}                  callback.results     {resource uuid} -> {roles} mappings aggregated
     *                                                       for all the provided principals queried
     */
    var explodeGroupAncestry = function(principalUuids, results, callback) {
        var nextPrincipalBatch = [];
        RolesAPI.getAssociationsForPrincipalsAndResourceType(principalUuids, ResourceTypes.GROUP, 1000, function(err, entries) {
            if (err) {
                throw err;
            }
            var ancestors = Object.keys(entries);
            for (var i = 0; i < ancestors.length; i++) {
                var ancestorUuid = ancestors[i];
                if (!results[ancestorUuid]) {
                    results[ancestorUuid] = true;
                    nextPrincipalBatch.push(ancestorUuid);
                }
            }

            if (nextPrincipalBatch.length > 0) {
                explodeGroupAncestry(nextPrincipalBatch, results, callback);
            } else {
                callback(results);
            }
        });
    };

    var joinGroups = function(tenantId, memberId, memberPrincipalType, groupPrefix, numGroups, callback) {
        if (numGroups === 0) {
            callback();
            return;
        }

        var memberUuid = RolesUtil.toUuid(memberPrincipalType, tenantId, memberId);
        var resourceUuid = RolesUtil.toUuid(ResourceTypes.GROUP, tenantId, groupPrefix + '-' + numGroups);
        RolesAPI.setRole(memberUuid, resourceUuid, 'member', function(err) {
            if (err) {
                throw err;
            }
            joinGroups(tenantId, memberId, memberPrincipalType, groupPrefix, numGroups-1, callback);
        });
    };

    var addMembers = function(tenantId, groupId, memberPrefix, numMembers, callback) {
        if (numMembers === 0) {
            callback();
            return;
        }

        var groupUuid = RolesUtil.toUuid(PrincipalTypes.GROUP, tenantId, memberPrefix+'-'+numMembers);
        var resourceUuid = RolesUtil.toUuid(ResourceTypes.GROUP, tenantId, groupId);

        RolesAPI.setRole(groupUuid, resourceUuid, 'member', function(err) {
            if (err) {
                throw err;
            }
            addMembers(tenantId, groupId, memberPrefix, numMembers-1, callback);
        });
    };

    var loadContentRoles = function(principalUuid, baseContentId, resourceType, numContentItems, role, callback) {
        if (numContentItems === 0) {
            callback();
            return;
        }

        var tenantId = RolesUtil.getPrincipalFromUuid(principalUuid).tenantId;
        var resourceUuid = RolesUtil.toUuid(resourceType, tenantId, baseContentId+'-'+numContentItems);
        RolesAPI.setRole(principalUuid, resourceUuid, role, function(err) {
            if (err) {
                throw err;
            }
            loadContentRoles(principalUuid, baseContentId, resourceType, numContentItems-1, role, callback);
        });
    };


    /**
     * Test that verifies that users with the same userid from different tenants maintain distinct role associations
     */
    it('Test tenant separation', function(callback) {
        var principalUuidA = RolesUtil.toUuid(PrincipalTypes.USER, 'testTenantSeparationA', 'mrvisser');
        var principalUuidB = RolesUtil.toUuid(PrincipalTypes.USER, 'testTenantSeparationB', 'mrvisser');
        var resourceUuid = RolesUtil.toUuid(ResourceTypes.CONTENT, 'cam', 'testTenantSeparationContent');

        RolesAPI.setRole(principalUuidA, resourceUuid, 'manager', function(err) {
            assert.ok(!err);

            // verify tenant B user does not have a role on that content
            RolesAPI.getRole(principalUuidB, resourceUuid, function(err, role) {
                assert.ok(!err);
                assert.ok(!role);

                // add 'viewer' for security context B
                RolesAPI.setRole(principalUuidB, resourceUuid, 'viewer', function(err) {
                    assert.ok(!err);

                    // ensure user from tenant A is still manager, not viewer
                    RolesAPI.hasRole(principalUuidA, resourceUuid, 'manager', function(err, hasRole) {
                        assert.ok(!err);
                        assert.ok(hasRole);

                        // ensure user from context B is a viewer, not manager
                        RolesAPI.hasRole(principalUuidB, resourceUuid, 'viewer', function(err, hasRole) {
                            assert.ok(!err);
                            assert.ok(hasRole);
                            callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the functionality of the RolesAPI.hasRole function
     */
    it('Test has role', function(callback) {
        var principalUuid = RolesUtil.toUuid(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
        var resourceUuid = RolesUtil.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent');
        // add the 'manager' role
        RolesAPI.setRole(principalUuid, resourceUuid, 'manager', function(err) {
            assert.ok(!err);

            // verify that hasRole reports that the user has the manager role
            RolesAPI.hasRole(principalUuid, resourceUuid, 'manager', function(err, hasRole) {
                assert.ok(!err);
                assert.ok(hasRole);

                // remove the role from the user
                RolesAPI.removeRole(principalUuid, resourceUuid, function(err) {
                    assert.ok(!err);

                    // verify that the user no longer has the role
                    RolesAPI.hasRole(principalUuid, resourceUuid, 'manager', function(err, hasRole) {
                        assert.ok(!err);
                        assert.ok(!hasRole);
                        callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the functionality of the RolesAPI.setRoles function
     */
    it('Test set roles', function(callback) {
        var principalUuid1 = RolesUtil.toUuid(PrincipalTypes.USER, 'testHasRole', 'mrvisser');
        var principalUuid2 = RolesUtil.toUuid(PrincipalTypes.USER, 'testHasRole', 'nm417');
        var principalUuid3 = RolesUtil.toUuid(PrincipalTypes.USER, 'testHasRole', 'simong');
        var principalUuid4 = RolesUtil.toUuid(PrincipalTypes.USER, 'testHasRole', 'PhysX');
        var resourceUuid1 = RolesUtil.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent1');
        var resourceUuid2 = RolesUtil.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent2');
        var resourceUuid3 = RolesUtil.toUuid(ResourceTypes.CONTENT, 'testHasRole', 'testHasRoleContent3');

        // Make 1 user a manager
        var roles = {};
        roles[principalUuid1] = 'manager';
        RolesAPI.setRoles(resourceUuid1, roles, function(err) {
            assert.ok(!err);
            RolesAPI.hasRole(principalUuid1, resourceUuid1, 'manager', function(err, hasRole) {
                assert.ok(!err);
                assert.ok(hasRole);
                RolesAPI.hasRole(principalUuid2, resourceUuid1, 'manager', function(err, hasRole) {
                    assert.ok(!err);
                    assert.ok(!hasRole);

                    // Make 2 users a manager
                    roles = {};
                    roles[principalUuid1] = 'manager';
                    roles[principalUuid2] = 'manager';
                    RolesAPI.setRoles(resourceUuid2, roles, function(err) {
                        assert.ok(!err);
                        RolesAPI.hasRole(principalUuid1, resourceUuid2, 'manager', function(err, hasRole) {
                            assert.ok(!err);
                            assert.ok(hasRole);
                            RolesAPI.hasRole(principalUuid2, resourceUuid2, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.ok(hasRole);

                                // Make 2 users a manager, 1 a member
                                roles = {};
                                roles[principalUuid1] = 'manager';
                                roles[principalUuid2] = 'manager';
                                roles[principalUuid3] = 'member';
                                RolesAPI.setRoles(resourceUuid3, roles, function(err) {
                                    assert.ok(!err);
                                    RolesAPI.hasRole(principalUuid1, resourceUuid3, 'manager', function(err, hasRole) {
                                        assert.ok(!err);
                                        assert.ok(hasRole);
                                        RolesAPI.hasRole(principalUuid2, resourceUuid3, 'manager', function(err, hasRole) {
                                            assert.ok(!err);
                                            assert.ok(hasRole);
                                            RolesAPI.hasRole(principalUuid3, resourceUuid3, 'member', function(err, hasRole) {
                                                assert.ok(!err);
                                                assert.ok(hasRole);
                                                RolesAPI.hasRole(principalUuid4, resourceUuid3, 'member', function(err, hasRole) {
                                                    assert.ok(!err);
                                                    assert.ok(!hasRole);

                                                    // Try to remove 1 role
                                                    roles = {};
                                                    roles[principalUuid3] = false;
                                                    RolesAPI.setRoles(resourceUuid3, roles, function(err) {
                                                        assert.ok(!err);
                                                        RolesAPI.hasRole(principalUuid1, resourceUuid3, 'manager', function(err, hasRole) {
                                                            assert.ok(!err);
                                                            assert.ok(hasRole);
                                                            RolesAPI.hasRole(principalUuid3, resourceUuid3, 'member', function(err, hasRole) {
                                                                assert.ok(!err);
                                                                assert.ok(!hasRole);

                                                                // Try to remove 2 roles and add 1 at the same time
                                                                roles = {};
                                                                roles[principalUuid1] = false;
                                                                roles[principalUuid2] = false;
                                                                roles[principalUuid3] = 'manager';
                                                                RolesAPI.setRoles(resourceUuid3, roles, function(err) {
                                                                    assert.ok(!err);
                                                                    RolesAPI.hasRole(principalUuid1, resourceUuid3, 'manager', function(err, hasRole) {
                                                                        assert.ok(!err);
                                                                        assert.ok(!hasRole);
                                                                        RolesAPI.hasRole(principalUuid2, resourceUuid3, 'member', function(err, hasRole) {
                                                                            assert.ok(!err);
                                                                            assert.ok(!hasRole);
                                                                            RolesAPI.hasRole(principalUuid3, resourceUuid3, 'manager', function(err, hasRole) {
                                                                                assert.ok(!err);
                                                                                assert.ok(hasRole);
                                                                                callback();
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the functionality of the RolesAPI.getRolesForResourceType function
     */
    it('Test get roles for resource type', function(callback) {
        var baseViewerContentId = 'contentIView';
        var baseManagerContentId = 'contentIManage';

        var principalUuid = RolesUtil.toUuid(PrincipalTypes.USER, 'testGetRolesForResourceType', 'mrvisser');

        loadContentRoles(principalUuid, baseViewerContentId, ResourceTypes.CONTENT, 300, 'viewer', function() {
            loadContentRoles(principalUuid, baseManagerContentId, ResourceTypes.CONTENT, 300, 'manager', function() {

                // an aggregate to hold a unique set of all keys. Used to ensure we get all the elements back
                var aggregate = {};

                // grab the first 250
                RolesAPI.getRolesForResourceType(principalUuid, ResourceTypes.CONTENT, null, 250, function(err, entries250_1) {
                    assert.ok(!err);
                    assert.equal(entries250_1.length, 250);

                    // get the next 250
                    RolesAPI.getRolesForResourceType(principalUuid, ResourceTypes.CONTENT, entries250_1[249].uuid, 250, function(err, entries250_2) {
                        assert.ok(!err);
                        assert.equal(entries250_2.length, 250);
                        assert.notEqual(entries250_1[249].uuid, entries250_2[0].uuid, 'The paging should be exclusive, but this test shows it was inclusive');

                        // get the rest, with overflow
                        RolesAPI.getRolesForResourceType(principalUuid, ResourceTypes.CONTENT, entries250_2[249].uuid, 250, function(err, entries100) {
                            assert.ok(!err);
                            assert.equal(entries100.length, 100);
                            assert.notEqual(entries250_2[249].uuid, entries100[0].uuid, 'The paging should be exclusive, but this test shows it was inclusive');

                            // now make sure we read 600 unique entries from cassandra
                            for (var i = 0; i < 250; i++) {
                                aggregate[entries250_1[i].uuid] = true;
                                aggregate[entries250_2[i].uuid] = true;

                                if (i < 100) {
                                    aggregate[entries100[i].uuid] = true;
                                }
                            }

                            assert.equal(Object.keys(aggregate).length, 600);
                            callback();
                        });
                    });

                });
            });
        });
    });

    /**
     * Test that verifies the functionality of the RolesAPI.getAssociationsForPrincipalsAndResourceType function
     */
    it('Test get associations for principals and resource type', function(callback) {
        var baseViewerContentId = 'contentIView';
        var baseManagerContentId = 'contentIManage';
        var principalUuid1 = RolesUtil.toUuid(PrincipalTypes.USER, 'testGetRolesForResourceType', 'mrvisser');
        var principalUuid2 = RolesUtil.toUuid(PrincipalTypes.GROUP, 'testGetRolesForResourceType', 'simong');

        // mrvisser has 'viewer' role on a bunch of groups
        loadContentRoles(principalUuid1, baseViewerContentId, ResourceTypes.GROUP, 300, 'viewer', function() {

            // simong has 'manager' role on some of the groups that mrvisser has 'viewer' on. this is to test aggregation of roles
            loadContentRoles(principalUuid2, baseViewerContentId, ResourceTypes.GROUP, 50, 'manager', function() {

                // simong has 'manager' role on a bunch of groups
                loadContentRoles(principalUuid2, baseManagerContentId, ResourceTypes.GROUP, 300, 'manager', function() {

                    // make sure they work together
                    RolesAPI.getAssociationsForPrincipalsAndResourceType([principalUuid1, principalUuid2], ResourceTypes.GROUP, 1000, function(err, entries) {
                        assert.ok(!err);

                        // simong is a member of 350, mrvisser is a member of 300, but 50 of those overlap, so should be 600 unique entries
                        assert.equal(Object.keys(entries).length, 600);

                        // verify that for the 50 overlapping content items, both 'manager' and 'viewer' are present
                        for (var i = 1; i <= 50; i++) {
                            var resourceUuid = 'g:testGetRolesForResourceType:'+baseViewerContentId+'-'+i;
                            assert.ok(entries[resourceUuid]['manager'], 'Expected the "manager" role to be available on each overlapping content item.');
                            assert.ok(entries[resourceUuid]['viewer'], 'Expected the "viewer" role to be available on each overlapping content item.');
                        }


                        // make sure they work individually
                        RolesAPI.getAssociationsForPrincipalsAndResourceType([principalUuid1], ResourceTypes.GROUP, 1000, function(err, entries) {
                            assert.ok(!err);
                            assert.equal(Object.keys(entries).length, 300);

                            RolesAPI.getAssociationsForPrincipalsAndResourceType([principalUuid2], ResourceTypes.GROUP, 1000, function(err, entries) {
                                assert.ok(!err);
                                assert.equal(Object.keys(entries).length, 350);

                                // test per-principal limitations
                                RolesAPI.getAssociationsForPrincipalsAndResourceType([principalUuid1, principalUuid2], ResourceTypes.GROUP, 100, function(err, entries) {
                                    assert.ok(!err);
                                    assert.equal(Object.keys(entries).length, 200);
                                    callback();
                                });
                            });
                        });
                    });

                });
            });
        });
    });

    /**
     * Test that verifies the functionality of the RolesAPI.testExplodeGroupHierarchy function
     */
    it('Test explode group hierarchy', function(callback) {
        var tenantId = 'testExplodeGroupHierarchy';

        // user 'mrvisser' is part of 30 groups
        joinGroups(tenantId, 'mrvisser', PrincipalTypes.USER, 'member-direct', 30, function() {

            // groups 1-5 are members of other groups
            joinGroups(tenantId, 'member-direct-1', PrincipalTypes.GROUP, 'member-indirect-1', 5, function() {
                joinGroups(tenantId, 'member-direct-2', PrincipalTypes.GROUP, 'member-indirect-2', 5, function() {
                    joinGroups(tenantId, 'member-direct-3', PrincipalTypes.GROUP, 'member-indirect-3', 5, function() {
                        joinGroups(tenantId, 'member-direct-4', PrincipalTypes.GROUP, 'member-indirect-4', 5, function() {
                            joinGroups(tenantId, 'member-direct-5', PrincipalTypes.GROUP, 'member-indirect-5', 5, function() {

                                // groups 5-10 have other groups as children
                                addMembers(tenantId, 'member-direct-5', 'notmember-5', 5, function() {
                                    addMembers(tenantId, 'member-direct-6', 'notmember-6', 5, function() {
                                        addMembers(tenantId, 'member-direct-7', 'notmember-7', 5, function() {
                                            addMembers(tenantId, 'member-direct-8', 'notmember-8', 5, function() {
                                                addMembers(tenantId, 'member-direct-9', 'notmember-9', 5, function() {
                                                    addMembers(tenantId, 'member-direct-10', 'notmember-10', 5, function() {
                                                        var mrvisserUuid = RolesUtil.toUuid(PrincipalTypes.USER, tenantId, 'mrvisser');

                                                        explodeGroupAncestry([mrvisserUuid], {}, function(results) {

                                                            // groups prefixed with 'member' are groups that mrvisser is indirectly a member of
                                                            // groups prefixed with 'notmember' are groups that mrvisser is NOT indirectly a member of
                                                            // mrvisser should be a member of 30+(5*5) = 55 groups
                                                            // there should be 5*6 = 30 groups that mrvisser is not a member of

                                                            assert.equal(Object.keys(results).length, 55);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

});
