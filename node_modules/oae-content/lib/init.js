/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var mkdirp = require('mkdirp');

var Cassandra = require('oae-util/lib/cassandra');
var Cleaner = require('oae-util/lib/cleaner');
var log = require('oae-logger').logger('oae-content');


var LocalStorage = require('oae-content/lib/backends/local');


module.exports = function(config, callback) {
    // Initialize activity capabilities
    require('./activity');

    // Initialize search capabilities
    require('./search');

    // Ensure that the preview listeners get registered.
    require('./previews');

    // Create the directory where files will be stored.
    mkdirp(config.files.uploadDir, function(err) {
        if (err && err.code !== 'EEXIST') {
            log().error({'err': err}, 'Could not create the directory where uploaded files can be stored.');
            return callback(err);
        }

        if (config.files.cleaner.enabled) {
            // Start a timed process that checks the uploaded dir and remove files
            // which should not be there.
            Cleaner.start(config.files.uploadDir, config.files.cleaner.interval);
        }

        LocalStorage.init(config.files.localStorageDirectory, function(err) {
            if (err) {
                return callback(err);
            }

            ensureSchema(callback);
        });
    });
};

/**
 * Ensure that the all of the content-related schemas are created. If they already exist, this method will not do anything
 *
 * @param  {Function}         callback       Standard callback function
 * @param  {Object}           callback.err   Error object, containing the error message
 * @api private
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'Content': 'CREATE COLUMNFAMILY Content (contentId text PRIMARY KEY, tenant text, visibility text, name text, description text, resourceSubType text, createdBy text, created text, lastModified text);',
        'ContentPreviews': 'CREATE COLUMNFAMILY ContentPreviews (contentId text PRIMARY KEY);',
        'LibraryByPrincipal': 'CREATE COLUMNFAMILY LibraryByPrincipal (principalId text PRIMARY KEY);',
        'Revisions': 'CREATE COLUMNFAMILY Revisions (revisionId text PRIMARY KEY);',
        'RevisionByContent': 'CREATE COLUMNFAMILY RevisionByContent (contentId text PRIMARY KEY);',
        'Comments': 'CREATE COLUMNFAMILY Comments (commentId text PRIMARY KEY, contentId text, created text, createdBy text, body text, level int, replyTo text, deleted boolean);',
        'CommentsByContent': 'CREATE COLUMNFAMILY CommentsByContent (contentId text PRIMARY KEY);',
        'CommentsRecentCommenters': 'CREATE COLUMNFAMILY CommentsRecentCommenters (contentId text PRIMARY KEY)'
    }, callback);
};
