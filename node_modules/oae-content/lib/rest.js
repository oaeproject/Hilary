/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var ContentAPI = require('./api');

module.exports = function(tenant) {
    
    /**
     * Create a new piece of content
     */
    tenant.server.post('/api/content/create', function(req, res) {
        // Pick the managers and viewers off the request
        var additionalMembers = {};
        if (req.body.managers) {
            if (!Array.isArray(req.body.managers)) {
                req.body.managers = [req.body.managers];
            }
            for (var i = 0; i < req.body.managers.length; i++) {
                additionalMembers[req.body.managers[i]] = 'manager';
            }
        }
        if (req.body.viewers) {
            if (!Array.isArray(req.body.viewers)) {
                req.body.viewers = [req.body.viewers];
            }
            for (var j = 0; j < req.body.viewers.length; j++) {
                additionalMembers[req.body.viewers[j]] = 'viewer';
            }
        }

        // Link creation
        if (req.body.contentType === 'link') {
            ContentAPI.createLink(req.ctx, req.body.name, req.body.description, req.body.visibility, req.body.link, additionalMembers, function(err, contentObj) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(201, contentObj);
            });
        // File creation
        } else if (req.body.contentType === 'file') {
            ContentAPI.createFile(req.ctx, req.body.name, req.body.description, req.body.visibility, additionalMembers, function(err, contentObj) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(201, contentObj);
            });
        // Sakai doc creation
        } else if (req.body.contentType === 'sakaidoc') {
            ContentAPI.createSakaiDoc(req.ctx, req.body.name, req.body.description, req.body.visibility, additionalMembers, function(err, contentObj) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(201, contentObj);
            });
        // Not a recognized file type
        } else {
            res.send(400, 'Unrecognized contentType. Accepted values are "link", "file" and "sakaidoc"');
        }
    });

    /**
     * Delete a piece of content
     */
    tenant.server.del('/api/content/:contentId', function(req, res) {
        req.telemetryUrl = '/api/content/id';
        ContentAPI.deleteContent(req.ctx, req.params.contentId, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

    /**
     * Get a full content profile for a piece of content
     */
    tenant.server.get('/api/content/:contentId', function(req, res) {
        req.telemetryUrl = '/api/content/id';
        ContentAPI.getFullContentProfile(req.ctx, req.params.contentId, function(err, contentProfile) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, contentProfile);
        });
    });

    /**
     * Edit content metadata
     */
    tenant.server.post('/api/content/:contentId', function(req, res) {
        req.telemetryUrl = '/api/content/id';
        ContentAPI.updateContentMetadata(req.ctx, req.params.contentId, req.body, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

    /**
     * Content membership list
     */
    tenant.server.get('/api/content/:contentId/members', function(req, res) {
        req.telemetryUrl = '/api/content/id/members';
        ContentAPI.getContentMembers(req.ctx, req.params.contentId, req.query.start, req.query.limit, function(err, members){
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, {'results': members});
        });
    });

    /**
     * Set content permission
     */
    tenant.server.post('/api/content/:contentId/members', function(req, res) {
        req.telemetryUrl = '/api/content/id/members';
        ContentAPI.setContentPermissions(req.ctx, req.params.contentId, req.body, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });
    
    /**
     * Share content
     */
    tenant.server.post('/api/content/:contentId/share', function(req, res) {
        req.telemetryUrl = '/api/content/id/share';
        // Make sure viewer is an array
        if (!Array.isArray(req.body.viewer)) {
            req.body.viewer = [req.body.viewer];
        }
        ContentAPI.shareContent(req.ctx, req.params.contentId, req.body.viewer, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

    /**
     * Library
     */
    tenant.server.get('/api/content/library/:principalId', function(req, res) {
        req.telemetryUrl = '/api/content/library/id';
        ContentAPI.getLibraryItems(req.ctx, req.params.principalId, req.query.start, req.query.limit, function(err, items) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, {'results': items});
        });
    });

};
