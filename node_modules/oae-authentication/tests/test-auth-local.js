/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var LoginId = require('oae-authentication/lib/model').LoginId;

describe('Authentication', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used for anonymous requests on the georgia tech tenant
    var anonymousGtRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the anonymous gt rest context
        anonymousGtRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    /**
     * Ensure that all tests will start with local authentication enabled, even if tests that disable it fail
     */
    afterEach(function(callback) {
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-authentication/local/enabled', true, function(err) {
            assert.ok(!err);
        });

        // When the strategies have refreshed, then continue
        AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {
            callback();
        });
    });


    describe('Local authentication', function() {

        /**
         * Test that verifies that users can log into the system using a local authorization strategy
         */
        it('verify local authentication', function(callback) {
            // Create a test user
            var userId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', null, function(err, createdUser) {
                assert.ok(!err);
                assert.ok(createdUser);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');

                // Log the user out first, to make sure that the cookie jar for the user is empty
                RestAPI.Authentication.logout(userRestContext, function(err) {
                    assert.ok(!err);

                    // Login without a user id
                    RestAPI.Authentication.login(userRestContext, null, 'password', function(err) {
                        assert.ok(err);

                        // Log in with the wrong password
                        RestAPI.Authentication.login(userRestContext, userId, 'wrong-password', function(err) {
                            assert.ok(err);
    
                            // Log in with the correct password
                            RestAPI.Authentication.login(userRestContext, userId, 'password', function(err) {
                                assert.ok(!err);
                            
                                // Verify that we are actually logged in
                                RestAPI.User.getMe(userRestContext, function(err, meObj) {
                                    assert.ok(!err);
                                    assert.ok(meObj);
                                    assert.equal(meObj.id, createdUser.id);
                                    
                                    // Logout
                                    RestAPI.Authentication.logout(userRestContext, function(err) {
                                        assert.ok(!err);
                                        
                                        // Verify that we are now logged out
                                        RestAPI.User.getMe(userRestContext, function(err, meObj) {
                                            assert.ok(!err);
                                            assert.ok(meObj);
                                            assert.equal(meObj.anon, true);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that logging in with a non-existing user doesn't work
         */
        it('verify failed authentication', function(callback) {
            // Try to log in as an invalid user
            RestAPI.Authentication.login(anonymousCamRestContext, 'invalid-user', 'password', function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                
                // Try to log in as a non-existing user
                RestAPI.Authentication.login(anonymousCamRestContext, 'u:cam:non-existing-user', 'password', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    callback();
                });
            });
        });
    
        /**
         * Test that verifies that logging in is properly separated by tenant
         */
        it('verify tenant login separation', function(callback) {
            // Create a test user
            var userId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', null, function(err, createdUser) {
                assert.ok(!err);
                assert.ok(createdUser);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');

                // Verify that we cannot login on tenant B
                RestAPI.Authentication.login(anonymousGtRestContext, userId, 'password', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    
                    // Verify that we can login on tenant A
                    RestAPI.Authentication.login(anonymousCamRestContext, userId, 'password', function(err) {
                        assert.ok(!err);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that when local authentication is disabled for a tenant, it is not possible to
         * login with local authentication
         */
        it('verify disable local authentication', function(callback) {
            // Create a user and associated anonymous context they we'll use to verify local login
            var jackUsername = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack', null, function(err, jack) {
                assert.ok(!err);
                var jackRestCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Sanity check login with the rest context
                RestAPI.User.getMe(jackRestCtx, function(err, me) {
                    assert.ok(!err);
                    assert.equal(me.id, jack.id);

                    // Log it out and sanity check we're anonymous again
                    RestAPI.Authentication.logout(jackRestCtx, function(err) {
                        assert.ok(!err);

                        RestAPI.User.getMe(jackRestCtx, function(err, me) {
                            assert.ok(!err);
                            assert.strictEqual(me.anon, true);

                            // Disable local authentication for the 'camtest' tenant
                            ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-authentication/local/enabled', false, function(err) {
                                assert.ok(!err);
                            });

                            // Wait for the strategies to be refreshed then continue
                            AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {

                                // Verify local authentication fails
                                RestAPI.Authentication.login(jackRestCtx, jackUsername, 'password', function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);

                                    // Ensure the user is still anonymous
                                    RestAPI.User.getMe(jackRestCtx, function(err, me) {
                                        assert.ok(!err);
                                        assert.strictEqual(me.anon, true);

                                        // Re-enable local authentication
                                        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, 'oae-authentication/local/enabled', true, function(err) {
                                            assert.ok(!err);
                                        });

                                        // Wait for the strategies to be refreshed then continue
                                        AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {

                                            // Verify authentication succeeds now
                                            RestAPI.Authentication.login(jackRestCtx, jackUsername, 'password', function(err) {
                                                assert.ok(!err);

                                                RestAPI.User.getMe(jackRestCtx, function(err, me) {
                                                    assert.ok(!err);
                                                    assert.equal(me.id, jack.id);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
    
    
    describe('Admin login', function() {
        
        /**
         * Test that verifies that a global administrator can successfully login on the global admin tenant
         */
        it('verify global administrator authentication', function(callback) {
            var globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
            
            // Get the me feed, this should log in the global admin as well
            RestAPI.User.getMe(globalAdminRestContext, function(err, meObj) {
                assert.ok(!err);
                assert.ok(meObj);
                assert.equal(meObj.isGlobalAdmin, true);

                // Logout
                RestAPI.Authentication.logout(globalAdminRestContext, function(err) {
                    assert.ok(!err);
                    
                    // Verify that the global admin has been logged out
                    RestAPI.User.getMe(globalAdminRestContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.ok(meObj);
                        assert.equal(meObj.anon, true);

                        // Log the global admin back in so the cookie jar can be restored
                        RestAPI.Authentication.login(globalAdminRestContext, globalAdminRestContext.userId, globalAdminRestContext.userPassword, function(err) {
                            assert.ok(!err);
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('User password', function() {
        
        /**
         * Test that verifies that it should be possible to change a user's password
         */
        it('verify change password', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId() + ':withcolon';
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'Test User', null, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                var testUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, testUserId, 'password');

                // Try changing the password with a wrong old password
                RestAPI.Authentication.changePassword(testUserRestContext, userObj.id, 'wrong-password', 'totally-new-password', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // Try changing the password with the correct old password
                    RestAPI.Authentication.changePassword(testUserRestContext, userObj.id, 'password', 'totally-new-password', function(err) {
                        assert.ok(!err);
                        testUserRestContext.userPassword = 'totally-new-password';
                        
                        // Try logging in with the wrong password
                        RestAPI.Authentication.login(anonymousCamRestContext, testUserId, 'password', function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Try logging in with the new password
                            RestAPI.Authentication.login(anonymousCamRestContext, testUserId, 'totally-new-password', function(err) {
                                assert.ok(!err);
                                
                                // Log out again
                                RestAPI.Authentication.logout(testUserRestContext, function(err) {
                                    assert.ok(!err);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an admin user can change a user's password
         */
        it('verify admin change password', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'Test User', null, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                
                // Try to change the password as the anonymous user
                RestAPI.Authentication.changePassword(anonymousCamRestContext, userObj.id, 'password', 'totally-new-password', function(err) {
                    assert.ok(err);
                
                    // Try to change the password as the tenant admin
                    RestAPI.Authentication.changePassword(camAdminRestContext, userObj.id, 'password', 'totally-new-password', function(err) {
                        assert.ok(!err);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a global administrator can change his password
         */
        it('verify change global administrator password', function(callback) {
            var globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

            var prevPassword = globalAdminRestContext.userPassword;
            var newPassword = prevPassword + '1';

            // Get the admin user id
            RestAPI.User.getMe(globalAdminRestContext, function(err, me) {
                assert.ok(!err);
                var userId = me.id;

                // Set their password to something different
                RestAPI.Authentication.changePassword(globalAdminRestContext, userId, prevPassword, newPassword, function(err) {
                    assert.ok(!err);

                    // Logout and verify they can log in with the new password
                    RestAPI.Authentication.logout(globalAdminRestContext, function(err) {
                        assert.ok(!err);

                        RestAPI.User.getMe(globalAdminRestContext, function(err, me) {
                            assert.ok(!err);
                            assert.equal(me.anon, true);
                            globalAdminRestContext.userPassword = newPassword;

                            RestAPI.Authentication.login(globalAdminRestContext, globalAdminRestContext.userId, globalAdminRestContext.userPassword, function(err) {
                                assert.ok(!err);

                                // Verify they indeed logged in successfully
                                RestAPI.User.getMe(globalAdminRestContext, function(err, me) {
                                    assert.ok(!err);
                                    assert.equal(me.id, userId);

                                    // Change the password back to avoid messing up following tests
                                    RestAPI.Authentication.changePassword(globalAdminRestContext, userId, newPassword, prevPassword, function(err) {
                                        assert.ok(!err);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Login id exists', function() {
        
        /**
         * Test that verifies that we can check whether or not a login id is already being used on a tenant
         */
        it('verify login id exists', function(callback) {
            var userId = TestsUtil.generateTestUserId();

            // Verify that the username doesn't exist yet
            RestAPI.Authentication.exists(anonymousCamRestContext, userId, function(err) {
                assert.ok(err);
                
                // Create a user with this login id
                RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', null, function(err, createdUser) {
                    assert.ok(!err);
                    assert.ok(createdUser);
                    
                    // Verify that the username exists
                    RestAPI.Authentication.exists(anonymousCamRestContext, userId, function(err) {
                        assert.ok(!err);
                    
                        // Verify that the username is still available on different tenants
                        RestAPI.Authentication.exists(anonymousGtRestContext, userId, function(err) {
                            assert.ok(err);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a username needs to be provided when checking for existence
         */
        it('verify login id exists validation', function(callback) {
            // Verify that the existence cannot be checked when a null username is provided
            RestAPI.Authentication.exists(anonymousCamRestContext, null, function(err) {
                assert.ok(err);

                // Verify that the existence cannot be checked when an empty string username is provided
                RestAPI.Authentication.exists(anonymousCamRestContext, '', function(err) {
                    assert.ok(err);
                    callback();
                });
            });
        });
    });

    describe('#getOrCreateUser', function() {
       
        /**
         * Test that verifies the working of the getOrCreateUser function. This will use the internal
         * API as this would normally be called by Facebook, Twitter, etc. authentication
         */
        it('verify getOrCreateUser', function(callback) {
            var userId = TestsUtil.generateTestUserId();
            var ctx = new Context(global.oaeTests.tenants.cam);

            AuthenticationAPI.getOrCreateUser(ctx, AuthenticationConstants.providers.TWITTER, userId, 'Nicolaas Matthijs', undefined, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                
                // Get the user again through the same function
                AuthenticationAPI.getOrCreateUser(ctx, AuthenticationConstants.providers.TWITTER, userId, 'Branden Visser', undefined, function(err, userObj) {
                    assert.ok(!err);
                    assert.ok(userObj);
                    assert.equal(userObj.displayName, 'Nicolaas Matthijs');
                    callback();
                });
            });
        });
    });

    describe('#createUser', function() {

        /**
         * Test that verifies that a user cannot be created without a login id
         */
        it('verify create without login id', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            AuthenticationAPI.createUser(ctx, undefined, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a user cannot be created without a tenant
         */
        it('verify create without tenant id', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var userId = TestsUtil.generateTestUserId();
            var loginId = new LoginId(undefined, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' });
            AuthenticationAPI.createUser(ctx, loginId, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a user cannot be created without a login provider
         */
        it('verify create without provider', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var userId = TestsUtil.generateTestUserId();
            var loginId = new LoginId(ctx.tenant().alias, undefined, userId, { password: 'password' });
            AuthenticationAPI.createUser(ctx, loginId, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a user cannot be created without a username
         */
        it('verify create without external id', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, undefined, { password: 'password' });
            AuthenticationAPI.createUser(ctx, loginId, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a user cannot be created with an empty display name
         */
        it('verify create with empty display name', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var userId = TestsUtil.generateTestUserId();
            var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: '12345' });

            // Test with undefined display name
            AuthenticationAPI.createUser(ctx, loginId, undefined, undefined, function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Test with null display name
                AuthenticationAPI.createUser(ctx, loginId, undefined, undefined, function(err, userObj) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Test with empty string display name
                    AuthenticationAPI.createUser(ctx, loginId, '', undefined, function(err, userObj) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a user cannot be created without a password
         */
        it('verify create local without password', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var userId = TestsUtil.generateTestUserId();
            var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId);
            AuthenticationAPI.createUser(ctx, loginId, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a user cannot be created with a short password
         */
        it('verify create local with short password', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var userId = TestsUtil.generateTestUserId();
            var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: '12345' });
            AuthenticationAPI.createUser(ctx, loginId, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a user can be created with a local login strategy
         */
        it('verify create user with local loginId', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var userId = TestsUtil.generateTestUserId();
            var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');
            var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' });
            AuthenticationAPI.createUser(ctx, loginId, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);

                // Verify we can log in as this user
                RestAPI.Authentication.login(anonymousCamRestContext, userId, 'password', function(err) {
                    assert.ok(!err);
                    // Verify that we are actually logged in
                    RestAPI.User.getMe(userRestContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.ok(meObj);
                        assert.equal(meObj.id, userObj.id);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a user can be created with a non-local login strategy (twitter, facebook, etc.)
         */
        it('verify create user with non-local loginId', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            var userId = TestsUtil.generateTestUserId();
            var userRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password');
            var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.TWITTER, userId);
            AuthenticationAPI.createUser(ctx, loginId, 'Branden Visser', undefined, function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);

                // Verify the mapping exists
                AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.TWITTER, userId, function(err, userId) {
                    assert.ok(!err);
                    assert.equal(userId, userObj.id);
                    callback();
                });
            });
        });
    });

    describe('#associateLoginId', function() {

        /**
         * Test that verifies that a login id mapping cannot be done without a login id
         */
        it('verify associate without loginId', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);

                // Associate a login id to the user, with no login id
                AuthenticationAPI.associateLoginId(ctx, undefined, user.id, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a login id mapping cannot be done without a tenant
         */
        it('verify associate without tenant', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);
                var loginId = new LoginId(undefined, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' });

                // Associate a login id to the user, with no tenant
                AuthenticationAPI.associateLoginId(ctx, loginId, user.id, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a login id mapping cannot be done without a login provider
         */
        it('verify associate without provider', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);
                var loginId = new LoginId(ctx.tenant().alias, undefined, userId, { password: 'password' });

                // Associate a login id to the user, with no login provider
                AuthenticationAPI.associateLoginId(ctx, loginId, user.id, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a login id mapping cannot be done without an external id
         */
        it('verify associate without external id', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);
                var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, undefined, { password: 'password' });

                // Associate a login id to the user, with no external id
                AuthenticationAPI.associateLoginId(ctx, loginId, user.id, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a login id mapping cannot be done without a user id
         */
        it('verify associate without user id', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);
                var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' });

                // associate a login id to the user, with no user id
                AuthenticationAPI.associateLoginId(ctx, loginId, undefined, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a login id mapping cannot be done when providing no password
         */
        it('verify associate local without password', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);
                var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId);

                // Associate a login id to the user, with no password
                AuthenticationAPI.associateLoginId(ctx, loginId, user.id, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a login id mapping cannot be done when providing a short password
         */
        it('verify associate local with short password', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);
                var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: '12345' });

                 // Associate a login id to the user, with short password
                AuthenticationAPI.associateLoginId(ctx, loginId, user.id, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a user can map a login id to his user id
         */
        it('verify associate login id to self', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId();
                ctx = new Context(global.oaeTests.tenants.cam, user);
                var loginId = new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' });

                // Associate a login id to the user
                AuthenticationAPI.associateLoginId(ctx, loginId, user.id, function(err) {
                    assert.ok(!err);

                    // Verify the login id is mapped
                    AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, function(err, userId) {
                        assert.ok(!err);
                        assert.equal(user.id, userId);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a user can map multiple login ids to his user id
         */
        it('verify associate multiple login ids to self', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId() + ':withcolon';
                var twitterId = TestsUtil.generateTestUserId() + ':withcolon';
                ctx = new Context(global.oaeTests.tenants.cam, user);

                // Associate a login id to the user
                AuthenticationAPI.associateLoginId(ctx, new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' }), user.id, function(err) {
                    assert.ok(!err);

                    // Associate a second twitter id to the user
                    AuthenticationAPI.associateLoginId(ctx, new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.TWITTER, twitterId), user.id, function(err) {
                        assert.ok(!err);

                        // Verify the local login id is mapped
                        AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, function(err, userId) {
                            assert.ok(!err);
                            assert.equal(user.id, userId);

                            // Verify the twitter login id is mapped
                            AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.TWITTER, twitterId, function(err, userId) {
                                assert.ok(!err);
                                assert.equal(user.id, userId);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an admin user can associate a login id to a user id
         */
        it('verify admin associate login id', function(callback) {
            var ctx = TestsUtil.createTenantAdminContext(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId() + ':withcolon';

                // Associate a login id to the user
                AuthenticationAPI.associateLoginId(ctx, new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' }), user.id, function(err) {
                    assert.ok(!err);

                    // Verify the local login id is mapped
                    AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, function(err, userId) {
                        assert.ok(!err);
                        assert.equal(user.id, userId);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a user cannot associate a login id to someone else's user id
         */
        it('verify another user cannot associate login id', function(callback) {
            var ctx = TestsUtil.createTenantAdminContext(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, mrvisser) {
                assert.ok(!err);
                var mrvisserUsername = TestsUtil.generateTestUserId() + ':withcolon';

                PrincipalsAPI.createUser(ctx, 'Bert Pareyn', undefined, function(err, bert) {
                    assert.ok(!err);
                    var bertCtx = new Context(global.oaeTests.tenants.cam, bert);

                    // Associate a login id to the user
                    AuthenticationAPI.associateLoginId(bertCtx, new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, mrvisserUsername, { password: 'password' }), mrvisser.id, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        // Verify the local login id is mapped
                        AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, mrvisserUsername, function(err, mrvisserId) {
                            assert.ok(!err);
                            assert.ok(!mrvisserId);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user can only be mapped to 1 login id per login provider
         */
        it('verify cannot associate multiple login ids of same type', function(callback) {
            var ctx = new Context(global.oaeTests.tenants.cam);
            PrincipalsAPI.createUser(ctx, 'Branden Visser', undefined, function(err, user) {
                assert.ok(!err);
                var userId = TestsUtil.generateTestUserId() + ':withcolon';
                var userId2 = TestsUtil.generateTestUserId() + ':withcolon';
                ctx = new Context(global.oaeTests.tenants.cam, user);

                // Associate a login id to the user
                AuthenticationAPI.associateLoginId(ctx, new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, { password: 'password' }), user.id, function(err) {
                    assert.ok(!err);

                    // Associate a second twitter id to the user
                    AuthenticationAPI.associateLoginId(ctx, new LoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId2, { password: 'password' }), user.id, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Verify the first local login id is mapped
                        AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId, function(err, userId) {
                            assert.ok(!err);
                            assert.equal(user.id, userId);

                            // Verify the second local login id is not mapped
                            AuthenticationAPI.getUserIdFromLoginId(ctx.tenant().alias, AuthenticationConstants.providers.LOCAL, userId2, function(err, userId) {
                                assert.ok(!err);
                                assert.ok(!userId);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an admin can associate an existing login id with a different user
         */
        it('verify admin re-associate login id', function(callback) {
            var adminCtx = TestsUtil.createTenantAdminContext(global.oaeTests.tenants.cam);
            var mrvisserUsername = TestsUtil.generateTestUserId() + ':withcolon';
            var mrvisserLoginId = new LoginId(global.oaeTests.tenants.cam.alias, AuthenticationConstants.providers.TWITTER, mrvisserUsername);
            var bertUsername = TestsUtil.generateTestUserId() + ':withcolon';
            var bertLoginId = new LoginId(global.oaeTests.tenants.cam.alias, AuthenticationConstants.providers.LOCAL, bertUsername, { password: 'password' });
            AuthenticationAPI.createUser(adminCtx, mrvisserLoginId, 'Branden Visser', undefined, function(err, mrvisser) {
                assert.ok(!err);

                AuthenticationAPI.createUser(adminCtx, bertLoginId, 'Bert Pareyn', undefined, function(err, bert) {
                    assert.ok(!err);

                    AuthenticationAPI.associateLoginId(adminCtx, new LoginId(adminCtx.tenant().alias, AuthenticationConstants.providers.TWITTER, mrvisserUsername), bert.id, function(err) {
                        assert.ok(!err);

                        AuthenticationAPI.getUserIdFromLoginId(adminCtx.tenant().alias, AuthenticationConstants.providers.TWITTER, mrvisserUsername, function(err, userId) {
                            assert.ok(!err);
                            assert.equal(userId, bert.id);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a non-admin cannot associate an existing login id with a different user
         */
        it('verify non-admin cannot re-associate login id', function(callback) {
            var tenant = global.oaeTests.tenants.cam;
            var adminCtx = TestsUtil.createTenantAdminContext(tenant);
            var mrvisserUsername = TestsUtil.generateTestUserId();
            var mrvisserLoginId = new LoginId(tenant.alias, AuthenticationConstants.providers.TWITTER, mrvisserUsername);
            var bertUsername = TestsUtil.generateTestUserId();
            var bertLoginId = new LoginId(tenant.alias, AuthenticationConstants.providers.LOCAL, bertUsername, { password: 'password' });
            AuthenticationAPI.createUser(adminCtx, mrvisserLoginId, 'Branden Visser', undefined, function(err, mrvisser) {
                assert.ok(!err);

                AuthenticationAPI.createUser(adminCtx, bertLoginId, 'Bert Pareyn', undefined, function(err, bert) {
                    assert.ok(!err);
                    var bertCtx = new Context(tenant, bert);

                    AuthenticationAPI.associateLoginId(bertCtx, new LoginId(tenant.alias, AuthenticationConstants.providers.TWITTER, mrvisserUsername), bert.id, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        AuthenticationAPI.getUserIdFromLoginId(tenant.alias, AuthenticationConstants.providers.TWITTER, mrvisserUsername, function(err, userId) {
                            assert.ok(!err);
                            assert.equal(userId, mrvisser.id);
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('Events', function() {

        /**
         * Test that verifies that the authentication refreshedStrategies event gets invoked with a tenant object when the strategies
         * are refreshed.
         */
        it('verifies the refresh strategy event is fired with a tenant when strategies are refreshed', function(callback) {
            AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {
                assert.ok(tenant);
                assert.ok(tenant.alias);
                assert.equal(tenant.alias, global.oaeTests.tenants.cam.alias);
                callback();
            });

            // Refresh and propagate to the event binding above
            AuthenticationAPI.refreshStrategies(global.oaeTests.tenants.cam);
        });
    });
});
