/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');

var ActivityAPI = require('oae-activity');

// Bind the notification event listeners
require('./internal/notifications');

module.exports = function(config, callback) {
    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        ActivityAPI.refreshConfiguration(config.activity, callback);
    });
};

/**
 * Ensure that the all of the activity-related schemas are created. If they already exist, this method will not do anything.
 *
 * @param  {Function}    callback       Invoked when the process completes
 * @param  {Object}      callback.err   Error object, containing the error message if any
 * @api private
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'ActivityStreams': 'CREATE COLUMNFAMILY ActivityStreams (activityStreamId text PRIMARY KEY);',
        'ActivityProcessingBuckets': 'CREATE COLUMNFAMILY ActivityProcessingBuckets (bucketId text PRIMARY KEY);',
        'ActivityAggregateStatus': 'CREATE COLUMNFAMILY ActivityAggregateStatus (aggregateKey text PRIMARY KEY, lastUpdated text, lastCollected text, lastActivity text);',
        'ActivityAggregateEntities': 'CREATE COLUMNFAMILY ActivityAggregateEntities (aggregateKey text PRIMARY KEY);'
    }, callback);
};
