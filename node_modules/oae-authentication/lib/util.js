/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var crypto = require('crypto');
var passport = require('passport');
var util = require('util');

var Context = require('oae-context').Context;

/**
 * Setup the necessary authentication middleware.
 *
 * @param  {express} server     An express server
 */
var setupAuthMiddleware  = module.exports.setupAuthMiddleware = function(server) {
    // Configure passport.
    server.use(passport.initialize());
    server.use(passport.session());

    // This middleware adds the context to each request.
    server.use(function(req, res, next) {
        try {
            req.ctx = new Context(req.tenant, req.user);
            return next();
        } catch (err) {
            return next(err);
        }
    });
};

/**
 * Checks whether a provided plain-text password matches a stored hashed password
 * @param  {String}     plainTextPassword   The plain-text password provided by the user
 * @param  {String}     hashedPassword      The hashed password stored for the user
 * @return {Boolean}                        True if the provided password matches the stored hashed password, false if they are different
 */
var hashAndComparePassword = module.exports.hashAndComparePassword = function(plainTextPassword, hashedPassword) {
    // Get the salt of the hashed password
    var salt = hashedPassword.split('$')[0];
    // Check if the provided password with the extracted salt is the same as the stored password
    return hashPassword(plainTextPassword, salt) === hashedPassword;
};

/**
 * Hashes a string using SHA512.
 * @param  {String}     password        The passwords that needs to be hashed.
 * @param  {String}     salt            A random salt that will be prepended to the password for hashing (optional)
 * @return {String}                     The hashed password.
 */
var hashPassword = module.exports.hashPassword = function(password, salt) {
    // Prepend a random number to prevent rainbow table attacks
    salt = salt || crypto.randomBytes(16).toString('hex');
    password = salt + password;
    return salt + '$' + crypto.createHash('sha512').update(password).digest('hex');
};

/**
 * Get the ID of the authentication strategy for the given tenant.
 *
 * @param  {Tenant}     tenant          The tenant for which to create the strategy id
 * @param  {String}     strategyName    The name of the strategy
 * @return {String}                     The unique ID of the strategy for the tenant
 */
var getStrategyId = module.exports.getStrategyId = function(tenant, strategyName) {
    return util.format('%s-%s', tenant.alias, strategyName);
};

