/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');

//////////////////////////
// Reading file content //
//////////////////////////

/**
 * Asynchronous read of a file on the path provided, passes file content or error in the callback
 * 
 * @param  {String}     path            The path to the file
 * @param  {Function}   callback        Function executed when the file has been read, or failed to be read
 * @param  {Object}     callback.err    Error, if any, returned when done reading the file
 * @param  {String}     callback.data   Data returned after reading the file completed
 */
var readFile = module.exports.readFile = function(path, callback) {
    fs.readFile(path, 'utf-8', callback);
};

////////////////////////////
// Reading folder content //
////////////////////////////

/**
 * Get a list of all of the files and folders inside of a folder. Hidden files and folder (starting with 
 * '.', like .DS_STORE) will be excluded from the returned list.
 * 
 * @param  {String}      foldername         Path of the folder for which we should get the containing files and folders
 * @param  {Function}    callback           Standard callback function
 * @param  {String[]}    callback.files     Array containing all of the file and foldernames that exist inside of the given folder
 */
var getFileListForFolder = module.exports.getFileListForFolder = function(foldername, callback) {
    fs.exists(foldername, function(exists) {
        if (exists) {
            fs.readdir(foldername, function(err, files) {
                var finalFiles = [];
                for (var f = 0; f < files.length; f++) {
                    if (files[f].substring(0, 1) !== '.') {
                        finalFiles.push(files[f]);
                    }
                }
                callback(finalFiles);
            });
        } else {
            callback([]);
        }
    });
};

/**
 * Copy a file
 *
 * @param  {String}   source        path to the source file
 * @param  {String}   dest          path to the destination
 * @param  {Function} callback      function to call on completion
 * @param  {Object}   callback.err  an error if there is one
 */
var copyFile = module.exports.copyFile = function(source, dest, callback){
    var ins = fs.createReadStream(source);
    var outs = fs.createWriteStream(dest);
    ins.once('error', function(err){
        outs.removeAllListeners('error');
        outs.removeAllListeners('close');
        outs.destroy();
        log().error({'err': err}, "Wasn't able to copy the file %s to %s.", source, dest);
        callback(err);
    });
    outs.once('error', function(err){
        ins.removeAllListeners('error');
        outs.removeAllListeners('close');
        ins.destroy();
        log().error({'err': err}, "Wasn't able to copy the file %s to %s.", source, dest);
        callback(err);
    });
    outs.once('close', function(){
        callback(null);
    });
    ins.pipe(outs);
};

/**
 * Move a file, tries rename first and falls back to copy and delete if it has to go across partitions
 *
 * @param  {String}   source        path to the source file
 * @param  {String}   dest          path to the destination
 * @param  {Function} callback      function to call on completion
 * @param  {Object}   callback.err  an error if there is one
 */
var moveFile = module.exports.moveFile = function(source, dest, callback){
    fs.rename(source, dest, function(err) {
        if (err) {
            if (err.code !== 'EXDEV') {
                log().error({'err': err}, "Wasn't able to rename the file  %s to %s.", source, dest);
                return callback(err);
            } else {
                copyFile(source, dest, function(err) {
                    if (err) {
                        return callback(err);
                    } else {
                        fs.unlink(source, callback);
                    }
                });
            }
        } else {
            callback(null);
        }
    });
};
