/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var OaeUtil = require('oae-util/lib/util');
var TenantsUtil = require('oae-tenants/lib/util');

var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

/**
 * A search that searches for users and groups that the current user can share resources with
 *
 * In addition to the specific `opts` parameters documented here, there are more generic options available that impact all
 * searches. @see SearchAPI#search for more information.
 *
 * @param  {Context}       ctx                     The context of the current request
 * @param  {Object}        [opts]                  General search options
 * @param  {Function}      callback                Invoked when the process completes
 * @param  {Object}        callback.err            An error that occurred, if any
 * @param  {SearchResult}  callback.results        An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // Sanitize custom search options
    opts = opts || {};
    opts.limit = OaeUtil.getNumberParam(opts.limit, 10, 1, 25);

    // opts.q is required to determine _needsFilterByAccess
    opts.q = SearchUtil.getQueryParam(opts.q);

    if (!ctx.user()) {
        return callback({'code': 401, 'msg': 'Anonymous users can\'t share resources'});
    }

    AuthzAPI.getPrincipalMemberships(ctx.user().id, null, 10000, function(err, groups) {
        if (err) {
            return callback(err);
        }

        // A user can always share with the groups they are a member of
        opts.access = groups || [];

        // A user can always share with himself
        opts.access.push(ctx.user().id);

        // Create the search object
        _search(ctx, opts, callback);
    });
};

/**
 * Perform the search that searches a 'q' analyzed field on documents, scoping it by user access. This is delegated from the
 * `module.exports` function for convenience, as it will access the members array only if necessary.
 *
 * @param  {Context}       ctx                 The context of the current request
 * @param  {Object}        opts                General search options
 * @param  {Function}      callback            Invoked when the process completes
 * @param  {Object}        callback.err        An error that occurred, if any
 * @param  {SearchResult}  callback.results    An object that represents the results of the query
 */
var _search = function(ctx, opts, callback) {
    var data = {};

    // The query object for the Query DSL
    var query = SearchUtil.createQueryStringQuery(opts.q);

    // Only search for top level resources
    var typeFilter = SearchUtil.filterTerm('_type', SearchConstants.resourceMappingName);

    // Only search for users and groups
    var resourceTypeFilter = SearchUtil.filterTerms('resourceType', [SearchConstants.general.RESOURCE_TYPE_GROUP, SearchConstants.general.RESOURCE_TYPE_USER]);

    // This base filter gets applied to the query unconditionally.
    var baseFilter = SearchUtil.filterAnd(typeFilter, resourceTypeFilter);

    // The access filter will filter by the user's group membership, or the whole tenant if it is tenant admin
    var accessFilter = (ctx.user() && ctx.user().isTenantAdmin(ctx.tenant().alias)) ?
            SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias) : SearchUtil.filterMembers(opts.access);

    // We need to know the tenants with which the current tenant can interact, 
    // so we can properly filter out resources from non-permeable tenants
    // and private and loggedin resources from permeable tenants
    var interactingTenantAliases = TenantsUtil.getAllTenantsForInteraction(ctx.tenant().alias);

    // The filter object for the Query DSL
    var filter = SearchUtil.filterAnd(
        baseFilter,
        SearchUtil.filterOr(

            // I can always see principals that I have explicit access to
            accessFilter,

            // This or statement applies visibility restrictions
            SearchUtil.filterOr(

                // Public resources from the current tenant and from tenants with which we can interact should always be included
                SearchUtil.filterAnd(
                    SearchUtil.filterTerm('visibility', 'public'),
                    SearchUtil.filterOr(
                        SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                        (interactingTenantAliases.length > 0) ? SearchUtil.filterTerms('tenantAlias', interactingTenantAliases) : null
                    )
                ),

                // Logged in resources from the current tenant should also be included
                SearchUtil.filterAnd(
                    SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                    SearchUtil.filterTerm('visibility', 'loggedin')
                )
            )
        )
    );

    // wrap the query and filter into the top-level Query DSL "query" object
    return callback(null, SearchUtil.createQuery(query, filter, opts));
};
