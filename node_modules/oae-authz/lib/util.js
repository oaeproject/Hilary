/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzModel = require('oae-authz/lib/model');

/**
 * Construct a resource based on the given id.
 *
 * @param  {String}      id     A resouce id
 * @return {Resource}           A AuthzModel.Resource object derived from this id
 */
var getResourceFromId = module.exports.getResourceFromId = function(id) {
    return unpackId(AuthzModel.Resource, id);
};

/**
 * Construct a Principal based on the given id.
 *
 * @param  {String}     id      A principal id
 * @return {Principal}          A AuthzModel.Principal object derived from this id
 */
var getPrincipalFromId = module.exports.getPrincipalFromId = function(id) {
    return unpackId(AuthzModel.Principal, id);
};

/**
 * Construct an id based on the given type, tenantAlias and instanceId of a resource or principal.
 *
 * @param  {String}     type        The type of object, as defined by either AuthzConstants.principalTypes or AuthzConstants.resourceTypes
 * @param  {String}     tenantAlias The alias of the tenant
 * @param  {String}     instanceId  The ID of the principal or resource instance
 * @return {String}                 The ID constructed from the given parameters, i.e., "type:tenantAlias:instanceId"
 */
var toId = module.exports.toId = function(type, tenantAlias, instanceId) {
    return type + ':' + tenantAlias + ':' + instanceId;
};

/**
 * Determine whether or not the given id represents a group
 *
 * @param  {String}     groupId         The group id to check
 * @return {Boolean}                    Whether or not the id is a group id
 */
var isGroupId = module.exports.isGroupId = function(groupId) {
    return groupId.indexOf(AuthzConstants.resourceTypes.GROUP + ':') === 0;
};

/**
 * Determine whether or not the given id represents a user principal.
 *
 * @param  {String}     principalId     The id of the principal
 * @return {Boolean}                    Whether or not the id is a user id
 */
var isUserId = module.exports.isUserId = function(principalId) {
    return principalId.indexOf(AuthzConstants.principalTypes.USER + ':') === 0;
};

/**
 * Convenience method to combine the similar operation of splitting an id
 *
 * @api private
 */
var unpackId = function(type, id) {
    var split = id.split(':');
    return new type(split[0], split[1], split.slice(2).join(':'));
};
