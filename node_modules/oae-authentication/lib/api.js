/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var crypto = require('crypto');
var GoogleStrategy = require('passport-google').Strategy;
var OpenIDStrategy = require('passport-openid').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var util = require('util');
var Validator = require('validator').Validator

var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model').User;

/**
 * Utility methods that gets a user by the tenant+username combo. If no user was found it will be created.
 *
 * @param  {Context}      context         The current tenant
 * @param  {String}       username        The desired username for this user.
 * @param  {String}       firstName       The first name of this user.
 * @param  {String}       locale          The locale of this user.
 * @param  {String}       timezone        The timezone of this user.
 * @param  {String}       lastName        The last name of this user.
 * @param  {String}       displayName     The prefered display name of this user.
 * @param  {Function}     callback        A function returning the user.
 * @param  {Object}       callback.err    An error that occured, if any
 * @param  {Boolean}      callback.user   The user object
 */
var getOrCreateUser = module.exports.getOrCreateUser = function(context, username, locale, timezone, firstName, lastName, displayName, callback) {
    // Check if this user already exists in our DB.
    PrincipalsAPI.getTenantUser(context, username, function(err, user) {
        if (err && err.code === 404) {
            // new user, create an account.
            // Sometimes we can get a timezone from an external auth that we don't support
            // Rather than borking up the create user call, we set it to null so it automaticall
            // gets stored with the server's timezone (UTC).
            // The user can then change it in the UI if he wishes to do so.
            if (timezone) {
                var validator = new Validator();
                validator.check(timezone).isValidTimeZone();
                if (validator.hasErrors()) {
                    timezone = null;
                }
            }
            var password = crypto.randomBytes(128).toString('hex');
            PrincipalsAPI.createUser(context, username, password, "public", locale, timezone, firstName, lastName, displayName, function(err, createdUser) {
                if (err) {
                    return callback(err);
                } else {
                    // Return the user object for the created user
                    callback(null, createdUser);
                }
            });
        } else if (err) {
            return callback(err);
        } else {
            // User already exists, move on.
            return callback(null, user);
        }
    });
};



/////////////
//  LOCAL  //
/////////////

module.exports.LocalStrategyWrapper = function(tenant) {
    var options = {
        'passReqToCallback': true,
        'failureRedirect': false
    };

    var strat = new LocalStrategy(options, function(req, username, password, done) {
        PrincipalsAPI.checkPassword(tenant, username, password, function(err, basicUser) {
            if (err && err.code !== 401) {
                return done(err);
            } else if (err && err.code === 401) {
                return done(null, false);
            }

            // By this point we know that we were succesfully logged in.
            // Retrieve the user account and stick it in the context.
            req.ctx = new Context(tenant, new User(tenant.alias, basicUser.id));
            PrincipalsAPI.getUser(req.ctx, basicUser.id, function(err, user) {
                if (err) {
                    return done(err);
                }
                req.ctx = new Context(tenant, user);
                return done(null, user);
            });
        });
    });
    strat.name = 'local-' + tenant.alias;
    return strat;
};


//////////////
//  GOOGLE  //
//////////////



module.exports.GoogleCallbackWrapper = function(tenant) {
    var that = {};
    that.context = new Context(tenant, null);
    that.callback = function(identifier, profile, done) {
        var username = profile.emails[0].value;
        var displayName = profile.name.givenName + " " + profile.name.familyName;

        // TODO: Get locale/timezone.
        getOrCreateUser(that.context, username, 'en_GB', 'Europe/London', profile.name.givenName, profile.name.familyName, displayName, done);
    };
    return that;
};


module.exports.GoogleStrategyWrapper = function(tenant, validate) {
    var options = {
        'providerURL': 'https://www.google.com/accounts/o8/id',
        'profile': true,
        'returnURL' : 'http://' + tenant.baseUrl + '/api/auth/google/return',
        'realm': 'http://' + tenant.baseUrl + '/'
    };

    OpenIDStrategy.call(this, options, validate);
    this.name = 'google-' + tenant.alias;
};
util.inherits(module.exports.GoogleStrategyWrapper, GoogleStrategy);





///////////////
//  TWITTER  //
///////////////


module.exports.TwitterCallbackWrapper = function(tenant) {
    var that = {};
    that.context = new Context(tenant, null);
    that.callback = function(token, tokenSecret, profile, done) {
        // Use the Twitter handle to register this user.
        var username = "twitter-" + profile.username;
        // Twitter has no concept of first or lastname, so just fill in blanks for now.
        var firstName = '';
        var lastName = '';
        var displayName = profile.displayName;
        // TODO: Get proper locale
        var locale = 'en_GB';
        var timezone = profile._json.time_zone;

        getOrCreateUser(that.context, username, locale, timezone, firstName, lastName, displayName, done);
    };
    return that;
};




////////////////
//  FACEBOOK  //
////////////////

module.exports.FacebookCallbackWrapper = function(tenant) {
    var that = {};
    that.context = new Context(tenant, null);
    that.callback = function(accessToken, refreshToken, profile, done) {
        // Use the Twitter handle to register this user.
        var username = "facebook-" + profile.username;
        var firstName = profile.name.givenName;
        var lastName = profile.name.familyName;
        var displayName = profile.displayName;
        var locale = profile._json.locale;
        // TODO: get proper timezone.
        var timezone = 'Europe/London';

        getOrCreateUser(that.context, username, locale, timezone, firstName, lastName, displayName, done);
    };
    return that;
};
