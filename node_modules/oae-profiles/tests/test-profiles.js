/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * visibilitys and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;
var User = require('oae-principals/lib/model.user').User;
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('Profiles', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Context object that can be used every time we need to use the internal API as a global admin
    var globalAdminContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        // Fill up the global admin context
        var globalTenant = new Tenant('admin', 'Global tenant', 'localhost:2000');
        globalAdminContext = new Context(globalTenant, new User(globalTenant.alias, 'u:global:administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', true, false));
        callback();
    });


    describe('Set profile section', function() {
        
        /**
         * Test that verifies that profiles sections can be set and retrieved
         */
        it('verify basic profile section', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Set a profile section
                RestAPI.Profile.setSection(users[userId].restContext, userId, 'section1', 'loggedin', {'field1': 'Test1', 'field2': 'Test2'}, null, function(err) {
                    assert.ok(!err);
                    
                    // Try and get the profile section
                    RestAPI.Profile.getSection(users[userId].restContext, userId, 'section1', function(err, section) {
                        assert.ok(!err);
                        assert.ok(section);
                        assert.ok(section.field1, 'Test1');
                        assert.ok(section.field2, 'Test2');

                        // Check if it is part of all sections as well
                        RestAPI.Profile.getAllSections(users[userId].restContext, userId, function(err, sections) {
                            assert.ok(!err);
                            assert.ok(sections);
                            assert.ok(sections['section1']);
                            assert.ok(sections['section1'].field1, 'Test1');
                            assert.ok(sections['section1'].field2, 'Test2');
                            callback();
                        });
                    });
                });
            });
        });
        
        /**
         * Test that validates partial profile updates
         */
        it('verify partial updates', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Create private profile item for User 0
                var aboutme = {'aboutme': 'so interesting!', 'hobbies': 'tennis'};
                RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'private', aboutme, null, function(err) {
                    assert.ok(!err);
    
                    // Update the aboutme section partially.
                    RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'private', {'hobbies': 'football'}, false, function(err) {
                        assert.ok(!err);
    
                        RestAPI.Profile.getSection(users[userId].restContext, userId, 'aboutme', function(err, data) {
                            assert.ok(!err);
                            assert.ok(data);
                            assert.equal(data.aboutme, 'so interesting!');
                            assert.equal(data.hobbies, 'football');
                            callback();
                        });
                    });
                });
            });
        });
       
        /**
         * Test that verifies that profile section validation is done appropriately
         */
        it('verify set profile section validation', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];
            
                // Try setting a section as an anonymous user
                RestAPI.Profile.setSection(anonymousCamRestContext, userId, 'aboutme', 'private', {'foo' : 'bar'}, null, function(err) {
                    assert.ok(err);
                    assert.ok(err.code, 401);
                    
                    // Try saving a non JSON object
                    RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'private', 'wrong data entry', null, function(err) {
                        assert.ok(err);
                        assert.ok(err.code, 400);
                        
                        // Try to specify an invalid section id
                        RestAPI.Profile.setSection(users[userId].restContext, userId, null, 'private', {'foo' : 'bar'}, null, function(err) {
                            assert.ok(err);
                            assert.ok(err.code, 400);
                            
                            // Try to save an invalid visibility option
                            RestAPI.Profile.setSection(users[userId].restContext, userId, 'aboutme', 'non-existing', {'foo' : 'bar'}, null, function(err) {
                                assert.ok(err);
                                assert.ok(err.code, 400);
                                callback();
                            });
                        });
                    });
                });
            });
        });
        
    });

    
    describe('Get profile section', function() {
        
        /**
         * Test that verifies that retrieving profile sections respects their visibility setting
         */
        it('verify retrieving multiple profile sections', function(callback) {
            // Create 2 users
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var userIds = _.keys(users);    

                // Create private profile section
                var aboutme = {'aboutme': 'so interesting!'};
                RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'aboutme', 'private', aboutme, null, function(err) {
                    assert.ok(!err);
    
                    // Create a logged in profile section
                    var contactInfo = {'email': 'me@test.com'};
                    RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'contactInfo', 'loggedin', contactInfo, null, function(err) {
                        assert.ok(!err);
    
                        // Create public profile section
                        var publications = {'2011': ['Background subtraction with ViBe and shadow detection']};
                        RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'publications', 'public', publications, null, function(err) {
                            assert.ok(!err);
    
                            // Retrieve all profiles as user 0. He should be able to see everything
                            RestAPI.Profile.getAllSections(users[userIds[0]].restContext, userIds[0], function(err, sections) {
                                assert.ok(!err);
                                assert.deepEqual(sections.aboutme, aboutme);
                                assert.deepEqual(sections.contactInfo, contactInfo);
                                assert.deepEqual(sections.publications, publications);
        
                                // Retrieving as user 1 should only display the publications and contact info
                                RestAPI.Profile.getAllSections(users[userIds[1]].restContext, userIds[0], function(err, sections) {
                                    assert.ok(!err);
                                    assert.ok(!sections.aboutme);
                                    assert.deepEqual(sections.contactInfo, contactInfo);
                                    assert.deepEqual(sections.publications, publications);
                                    
                                    // Retrieving as an anonymous user should only display the publications
                                    RestAPI.Profile.getAllSections(anonymousCamRestContext, userIds[0], function(err, sections) {
                                        assert.ok(!err);
                                        assert.ok(!sections.aboutme);
                                        assert.ok(!sections.contactInfo);
                                        assert.deepEqual(sections.publications, publications);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that admins should have access to all profile sections and should be able
         * to set profile sections
         */
        it('verify admin access', function(callback) {
            // Create 2 users
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var userIds = _.keys(users);    

                // Create private profile item.
                var aboutme = {'foo': 'bar'};
                RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'aboutme', 'private', aboutme, null, function(err) {
                    assert.ok(!err);
    
                    // Check that we cannot get the saved profile section as a different user
                    RestAPI.Profile.getSection(users[userIds[1]].restContext, userIds[0], 'aboutme', function(err, section) {
                        assert.ok(err);
                        assert.ok(!section);
                        
                        // Try to overwirte this as a different user
                        var newAboutme = {'totally': 'changed'};
                        RestAPI.Profile.setSection(users[userIds[1]].restContext, userIds[0], 'aboutme', 'private', newAboutme, true, function(err) {
                            assert.equal(err.code, 403);
        
                            // Make User 1 a tenant admin
                            PrincipalsAPI.setTenantAdmin(globalAdminContext, userIds[1], true, function(err) {
                                assert.ok(!err);
        
                                // Verify that we can now get the profile section data
                                RestAPI.Profile.getSection(users[userIds[1]].restContext, userIds[0], 'aboutme', function(err, section) {
                                    assert.ok(!err);
                                    assert.ok(section);
                                    assert.deepEqual(section, aboutme);
        
                                    // Change the profile as the tenant admin
                                    RestAPI.Profile.setSection(users[userIds[1]].restContext, userIds[0], 'aboutme', 'private', newAboutme, true, function(err) {
                                        assert.ok(!err);
        
                                        // Get it back as the regular user as verification.
                                        RestAPI.Profile.getSection(users[userIds[0]].restContext, userIds[0], 'aboutme', function(err, section) {
                                            assert.ok(!err);
                                            assert.ok(section);
                                            assert.deepEqual(section, newAboutme);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a non-existing profile section cannot be retrieved
         */
        it('verify non-existing section', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];

                // Get an empty profile section
                RestAPI.Profile.getSection(users[userId].restContext, userId, null, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 404);

                    // Get a non-existing profile section
                    RestAPI.Profile.getSection(users[userId].restContext, userId, 'non-existing-section', function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        callback();
                    });
                });
            });
        });
        
        /**
         * Test that verifies that profile section validation is done appropriately
         */
        it('verify get profile section validation', function(callback) {
            // Create a user
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);
                var userId = _.keys(users)[0];
                
                // Get an empty section id
                RestAPI.Profile.getSection(users[userId].restContext, userId, null, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 404);
                    callback();
                });
            });
        });
        
    });


    describe('Profile section visibility', function() {
        
        /**
         * Test that verifies that updating a profile section's visibility and retrieving the profile section
         * visibility overview works
         */
        it('verify profile section visibility', function(callback) {
            // Create 2 users
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var userIds = _.keys(users); 

                // Create a private profile section.
                var aboutme = {'aboutme': 'so interesting!'};
                RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'aboutme', 'private', aboutme, null, function(err) {
                    assert.ok(!err);
                    
                    // Create a logged in profile section
                    var publications = {'2011': ['Background subtraction with ViBe and shadow detection']};
                    RestAPI.Profile.setSection(users[userIds[0]].restContext, userIds[0], 'publications', 'loggedin', publications, null, function(err) {
                        assert.ok(!err);
    
                        // Get the visibility overview
                        RestAPI.Profile.getAllSectionsVisibility(users[userIds[0]].restContext, userIds[0], function(err, sectionVisibilities) {
                            assert.ok(!err);
                            assert.ok(sectionVisibilities);
                            assert.equal(sectionVisibilities.accountVisibility, 'public');
                            assert.equal(sectionVisibilities.profile.aboutme, 'private');
                            assert.equal(sectionVisibilities.profile.publications, 'loggedin');
                            
                            // Get the visibility overview as a different user. This should not include the private sections
                            RestAPI.Profile.getAllSectionsVisibility(users[userIds[1]].restContext, userIds[0], function(err, sectionVisibilities) {
                                assert.ok(!err);
                                assert.ok(sectionVisibilities);
                                assert.equal(sectionVisibilities.accountVisibility, 'public');
                                assert.equal(sectionVisibilities.profile.aboutme, undefined);
                                assert.equal(sectionVisibilities.profile.publications, 'loggedin');

                                // Try to get the private profile section
                                RestAPI.Profile.getSection(users[userIds[1]].restContext, userIds[0], 'aboutme', function(err, section) {
                                    assert.ok(err);
                                    assert.ok(err.code, 403);

                                    // Update a profile section's visibility with an invalid option
                                    RestAPI.Profile.updateVisibility(users[userIds[0]].restContext, userIds[0], 'publications', 'foo', function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);
                                        
                                        // Update a profile section's visibility with an valid option
                                        RestAPI.Profile.updateVisibility(users[userIds[0]].restContext, userIds[0], 'publications', 'private', function(err) {
                                            assert.ok(!err);
                                            
                                            // Check the visibility overview
                                            RestAPI.Profile.getAllSectionsVisibility(users[userIds[0]].restContext, userIds[0], function(err, sectionVisibilities) {
                                                assert.ok(!err);
                                                assert.ok(sectionVisibilities);
                                                assert.equal(sectionVisibilities.accountVisibility, 'public');
                                                assert.equal(sectionVisibilities.profile.aboutme, 'private');
                                                assert.equal(sectionVisibilities.profile.publications, 'private');
                                                
                                                // Check the visibility overview as a different user. This should not include the private sections
                                                RestAPI.Profile.getAllSectionsVisibility(users[userIds[1]].restContext, userIds[0], function(err, sectionVisibilities) {
                                                    assert.ok(!err);
                                                    assert.ok(sectionVisibilities);
                                                    assert.equal(sectionVisibilities.accountVisibility, 'public');
                                                    assert.equal(sectionVisibilities.profile.aboutme, undefined);
                                                    assert.equal(sectionVisibilities.profile.publications, undefined);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

});