/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var LibraryAPI = require('oae-library');
var OaeUtil = require('oae-util/lib/util');

var ContentConstants = require('../constants').ContentConstants;

/**
 * Get items from the content member's library
 *
 * @param  {Content}    contentItem             The content item whose members to list
 * @param  {String}     visibility              The visibility of the library to list
 * @param  {Object}     [opts]                  Optional arguments for listing the members
 * @param  {String}     [opts.start]            The token to use that indicates from where to start listing items
 * @param  {Number}     [opts.limit]            The maximum number of items to return
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Object[]}   callback.principalIds   The principal ids that were listed from the library
 * @param  {String}     callback.nextToken      The token to use as the `start` parameter for the next invokation that lists the next page of results
 */
var list = module.exports.list = function(contentItem, visibility, opts, callback) {
    LibraryAPI.Index.list(ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME, contentItem.id, visibility, _.pick(opts, 'start', 'limit'), callback);
};

/**
 * Insert principals into the content member's library
 *
 * @param  {Content}    contentItem     The content item whose library to insert the principals into
 * @param  {Object[]}   principals      The users and groups to insert into the content member's library
 * @param  {Function}   [callback]      Standard callback function
 * @param  {Object}     [callback.err]  An error that occurred, if any
 */
var insert = module.exports.insert = function(contentItem, principals, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'contentId': contentItem.id,
                'principalIds': _.pluck(principals, 'id')
            }, 'Error inserting principals into content members library');
        }
    };

    _insert(contentItem, principals.slice(), callback);
};

/**
 * Remove the principals identified by the given principal ids from the content member's library
 *
 * @param  {Content}    contentItem     The content item whose library the principals will be removed from
 * @param  {String[]}   principalIds    The ids of the principals to remove from the content member's library
 * @param  {Function}   [callback]      Standard callback function
 * @param  {Object}     [callback.err]  An error that occurred, if any
 */
var remove = module.exports.remove = function(contentItem, principalIds, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'contentId': contentItem.id,
                'principalIds': principalIds
            }, 'Error removing principals from content members library');
        }
    };

    _remove(contentItem, principalIds, callback);
};

/**
 * Insert principals into the content member's library. This is identical to the `insert` function
 * but is destructive to the provided array of principals to insert
 *
 * @param  {Content}    contentItem     The content item whose library to insert the principals into
 * @param  {Object[]}   principals      The users and groups to insert into the content member's library
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var _insert = function(contentItem, principals, callback) {
    if (_.isEmpty(principals)) {
        // When there are no more items to insert, return to the caller
        return callback();
    }

    var principal = principals.pop();
    var effectiveLibraryVisibilities = LibraryAPI.Authz.resolveEffectiveLibraryVisibilities([contentItem.id], principal);
    LibraryAPI.Index.insert(ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME, effectiveLibraryVisibilities, principal.id, null, function(err) {
        if (err) {
            log().warn({
                'err': err,
                'indexName': ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME,
                'contentId': contentItem.id,
                'principalId': principal.id,
                'visibilities': effectiveLibraryVisibilities
            }, 'An error occurred while inserting a principal into a content members library');
        }

        // Recursively insert the next item
        return _insert(contentItem, principals, callback);
    });
};

/**
 * Remove the principals identified by the given principal ids from the content member's library.
 * This is identical to the `remove` function but is destructive to the provided array of principal
 * ids to remove
 *
 * @param  {Content}    contentItem     The content item whose library the principals will be removed from
 * @param  {String[]}   principalIds    The ids of the principals to remove from the content member's library
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var _remove = function(contentItem, principalIds, callback) {
    if (_.isEmpty(principalIds)) {
        // When there are no more items to remove, return to the caller
        return callback();
    }

    // Remove the item from the library index
    var principalId = principalIds.pop();
    LibraryAPI.Index.remove(ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME, [contentItem.id], principalId, null, function(err) {
        if (err) {
            log().warn({
                'err': err,
                'indexName': ContentConstants.library.MEMBERS_LIBRARY_INDEX_NAME,
                'contentId': contentItem.id,
                'principalId': principalId
            }, 'An error occurred while removing a principal from a content members library');
        }

        // Recursively remove the next item
        return _remove(contentItem, principalIds, callback);
    });
};
