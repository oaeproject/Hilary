/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');
var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');

module.exports = function(app, callback) {
    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        // We'll create/get 1 global admin account in the internal global tenant that can be used
        // to create tenants/other global accounts.
        var globalTenant = new Tenant('global', 'Global tenant', 'A fake tenant that can be used for global administration', 2000, 'localhost');
        var globalContext = new Context(globalTenant, null);

        // Create a global admin if it doesn't exist.
        PrincipalsAPI.createUser(globalContext, 'administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', function(err, user_id) {
            // An error occurred.
            if (!err) {
                console.log("Admin account with user_id '%s' created.", user_id);
            } else if (err && err.msg && !err.msg.indexOf('already exists') > 0) {
                return callback(err);
            }

            callback();
        });
    });
}

/**
 * Ensure that the all of the principal-related schemas are created. If they already exist, this method will not
 * do anything
 * @param {Function(err)}    callback       A function(err), specifying whether or not there was an error creating the schema.
 * @param {Object}           callback.err   Error object, containing the error message
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'Principals': "CREATE COLUMNFAMILY Principals (principal_id text PRIMARY KEY, tenant text, visibility text, alias text, user_institution_user_id text, user_first_name text, user_last_name text, user_email text, user_picture text, group_title text, group_description text, group_membership_type ascii) WITH comment='Principal information';"
    }, callback);
};
