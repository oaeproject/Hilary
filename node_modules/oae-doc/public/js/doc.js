(function(){

    /**
     * @todo When the 3akai-ux UI is brought in we should use the templating functions in the 3akai-ux API.
     *
     * Trimpath Template Renderer: Renders the template with the given JSON object, inserts it into a certain HTML
     * element if required, and returns the rendered HTML string
     * @param {String|Object} templateElement The name of the template HTML ID or a jQuery selection object.
     * @param {Object} templateData JSON object containing the template data
     * @param {Object} outputElement (Optional) jQuery element in which the template needs to be rendered
     */
    var renderTemplate = function(templateElement, templateData, outputElement) {
        var templateName;

        if (templateElement instanceof jQuery && templateElement[0]) {
            templateName = templateElement[0].id;
        } else {
            templateName = templateElement.replace('#', '');
            templateElement = $('#' + templateName);
        }

        var renderedTemplate = "";
        var templateNode = templateElement.get(0);
        if (templateNode) {
            var firstNode = templateNode.firstChild;
            var template = null;
            // Check whether the template is wrapped in <!-- -->
            if (firstNode && (firstNode.nodeType === 8 || firstNode.nodeType === 4)) {
                template = firstNode.data.toString();
            } else {
                template = templateNode.innerHTML.toString();
            }
            // Parse the template through TrimPath and add the parsed template to the template cache
            try {
                renderedTemplate = TrimPath.parseTemplate(template, templateName);
            } catch (e) {
                console.log('TemplateRenderer: parsing failed: ' + e);
            }
        } else {
            console.log('TemplateRenderer: The template "' + templateName + '" could not be found');
        }

        // Run the template and feed it the given JSON object
        var render = '';
        try {
            render = renderedTemplate.process(templateData, {'throwExceptions': true});
        } catch (err) {
            console.log('TemplateRenderer: rendering of Template \'' + templateName + '\' failed: ' + err);
        }

        // Check it there was an output element defined
        // If so, put the rendered template in there
        if (outputElement) {
            outputElement.html(render);
        }

        return render;
    };

    /**
     * Renders the documentation for a specific module
     * @param {Object} docs    The documentation object as returned from the server
     * @param {String} module  The module name to render the documentation for
     */
    var renderDocs = function(docs, module) {
        renderTemplate('doc_docs_template', {
            'docs': docs,
            'module': module
        }, $('#doc_docs_container'));
    };

    /**
     * Renders the navigation for the available modules
     * @param {Array<String>}  modules       An Array of module names
     * @param {String}         moduleToLoad  The name of the module that is currently shown in the UI
     */
    var renderDocModules = function(modules, moduleToLoad) {
        renderTemplate('doc_contents_template', {
            'modules': modules,
            'moduleToLoad': moduleToLoad
        }, $('#doc_contents_container'));
    };

    /**
     * Gets the documentation for a specific module and passes it in a callback
     * @param {String}    module    The name of the module to get the documentation of
     * @param {Function}  callback  Function executed after the documentation for the module has been retrieved
     */
    var getDocsForModule = function(module, callback) {
        $.ajax({
            url: '/api/doc/module/' + module,
            success: function(docs) {
                callback(docs);
            }
        });
    };

    /**
     * Gets the available oae modules and passes them in a callback
     * @param {Function} callback Function executed after the list of modules has been retrieved
     */
    var getDocModules = function(callback) {
        $.ajax({
            url: '/api/doc/modules',
            success: function(modules) {
                callback(modules);
            }
        });
    };

    /**
     * Gets and returns the hash from the URL
     * @return {String} Returns the hash from the URL
     */
    var getHash = function() {
        return window.location.hash.replace('#', '');
    };

    /**
     * Sets the title of the document to `title API Reference - Sakai OAE`
     * @param {String} title The title to be prefixed to the base document title
     */
    var setDocumentTitle = function(title) {
        document.title = title + ' API Reference - Sakai OAE';
    };

    /**
     * Adds binding to various elements and events in the UI
     */
    var addBinding = function() {
        $(window).hashchange(function() {
            var moduleToLoad = getHash();
            setDocumentTitle(moduleToLoad);
            getDocsForModule(moduleToLoad, function(docs) {
                $('.bs-docs-sidenav li').removeClass('active');
                $('#' + moduleToLoad).addClass('active');

                renderDocs(docs, moduleToLoad);
            });
        });
    };

    /**
     * Initializes the API Docs UI
     */
    var doInit = function() {

        addBinding();

        var moduleToLoad = getHash();

        getDocModules(function(modules) {
            if (!moduleToLoad) {
                moduleToLoad = modules[0];
            }

            setDocumentTitle(moduleToLoad);

            renderDocModules(modules, moduleToLoad);

            getDocsForModule(moduleToLoad, function(docs) {
                renderDocs(docs, moduleToLoad);
            });
        });
    };

    $(document).ready(doInit);

})();
