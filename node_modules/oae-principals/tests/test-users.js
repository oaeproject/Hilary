/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantAPI = require('oae-tenants');
var TestAPI = require('oae-tests');


describe('Principals', function() {

    describe('Users', function() {

        var tenantA = null;
        var tenantB = null;
        var anonymousContext = null;
        before(function(callback) {
            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                if (err) {
                    return callback(err);
                }
                tenantA = tenant;
                anonymousContext = new Context(tenantA, null);
                TenantAPI.getTenantByPort(2002, function(err, tenant) {
                    if (err) {
                        return callback(err);
                    }
                    tenantB = tenant;
                    callback();
                });
            });
        });

        /**
         * Utility function to create a new user that will be used inside of the tests
         * @param {Function(user)}      callback        Standaard callback function
         * @param {User}                callback.user   Created user
         */
        var createUser = function(callback) {
            var r = Math.floor(Math.random()*10000000);

            var username = 'simong-' + r;
            var firstName = 'Simon';
            var lastName = 'Gaeremynck';
            var displayName = 'simong';
            var password = 'password';
            var visibility = "public";

            PrincipalsAPI.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, id) {
                if (err) {
                    assert.fail("Creating a new user should be possible.");
                    return assert.done();
                }

                PrincipalsAPI.getUser(anonymousContext, id, function(err, user) {
                    assert.equal(username, user.username);
                    assert.equal(firstName, user.firstName);
                    assert.equal(lastName, user.lastName);
                    assert.equal(displayName, user.displayName);
                    assert.equal(visibility, user.visibility);

                    // Try to create one again.
                    PrincipalsAPI.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, foo) {
                        if (!err) {
                            assert.fail("Creating a user with the same username should fail.");
                        }

                        // This way the exports.testCreateUser can be used in other tests.
                        callback(user);
                    });
                });
            });
        };


        /**
         * Test that is possible to create a user
         */
        it('Test create user', function(callback) {
            createUser(function() {
                callback();
            });
        });

        /**
         * Test that it is possible to update a user
         */
        it('Test update user', function(callback) {
            createUser(function(user) {
                // Try to update it.
                var ctx = new Context(tenantA, user);
                PrincipalsAPI.updateUser(ctx, user.id, {
                    'visibility': 'private',
                    'locale': 'en_GB',
                    'timezone': 'Europe/London',
                    'user_first_name': 'first',
                    'user_last_name': 'last',
                    'user_display_name': 'displayname'
                }, function(err){
                    if (err) {
                        assert.fail("Should be able to update a user.");
                        assert.done();
                    }

                    // Get it.
                    PrincipalsAPI.getUser(ctx, user.id, function(err, user) {
                        if (err) {
                            assert.fail("Should be able to get a user.");
                            assert.done();
                        }

                        assert.equal('private', user.visibility);
                        assert.equal('first', user.firstName);
                        assert.equal('last', user.lastName);
                        assert.equal('displayname', user.displayName);
                        assert.equal('en_GB', user.locale);
                        assert.equal('Europe/London', user.timezone);
                        callback();
                    });

                });
            });
        });

        /**
         * Test that updating a user fails if no parameters are provided
         */
        it('Test failed update', function(callback) {
            createUser(function(user) {
                var ctx = new Context(tenantA, user);
                PrincipalsAPI.updateUser(ctx, user.id, {}, function(err){
                    if (!err) {
                        assert.fail('Updating a user with no values should fail.');
                    }
                    callback();
                });
            });
        });

        /**
         * Test that a user can check a user his or her password
         */
        it('Test check password', function(callback) {
            createUser(function(created_user) {
                PrincipalsAPI.checkPassword(tenantA, created_user.username, 'password', function(err, pw_user) {
                    assert.ok(!err);
                    assert.equal(created_user.id, pw_user.id);
                    PrincipalsAPI.checkPassword(tenantA, 'none_existing_user', 'password', function(err, pw_user) {
                        assert.equal(err.code, 401);
                        callback();
                    });
                });
            });
        });

        it('Test updating the user visibility', function(callback) {
            createUser(function(created_user) {
                var context = new Context(tenantA, created_user);
                PrincipalsAPI.setUserVisibility(context, created_user.id, 'private', function(err) {
                    assert.ok(!err);

                    // Try updating it with a bad visibility.
                    PrincipalsAPI.setUserVisibility(context, created_user.id, 'totally-not-a-setting', function(err) {
                        assert.equal(err.code, 400);

                        // Try updating someone else his profile.
                        createUser(function(bad_user) {
                            var badContext = new Context(tenantA, bad_user);
                            PrincipalsAPI.setUserVisibility(badContext, created_user.id, 'loggedin', function(err) {
                                assert.equal(err.code, 401);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('Test getting a user by username and tenant', function(callback) {
            createUser(function(created_user) {
                var context = new Context(tenantA, created_user);
                PrincipalsAPI.getTenantUser(context, created_user.username, function(err, user) {
                    assert.ok(!err);
                    assert.equal(user.id, created_user.id);
                    assert.equal(user.username, created_user.username);
                    assert.equal(user.firstName, created_user.firstName);
                    assert.equal(user.lastName, created_user.lastName);
                    assert.equal(user.displayName, created_user.displayName);
                    callback();
                });
            });
        });

        it('Test getting a user by ugly username', function(callback) {
            var username = 'some.weird@`user\\name';
            var firstName = 'Bobby Tables';
            PrincipalsAPI.createUser(anonymousContext, username, 'password', 'public', 'en_GB', 'Europe/London', firstName, 'lastName', 'displayName', function(err, id) {
                PrincipalsAPI.getTenantUser(anonymousContext, username, function(err, user) {
                    assert.ok(!err);
                    assert.equal(user.username, username);
                    assert.equal(user.firstName, firstName)
                    callback();
                });
            });
        });

        it('Test getting a bad userid', function(callback) {
            createUser(function(created_user) {
                var context = new Context(tenantA, created_user);
                PrincipalsAPI.getUser(context, undefined, function(err, user) {
                    assert.ok(err.code, 400);
                    PrincipalsAPI.getUser(context, 'totally-not-a-valid-id', function(err, user) {
                        assert.ok(err.code, 400);
                        callback();
                    });
                });
            });
        });

        it('Test making someone an admin', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                createUser(function(jane) {
                    var janeContext = new Context(tenantA, jane);

                    // Ensure that anonymous can't do anything.
                    PrincipalsAPI.setGlobalAdmin(anonymousContext, john.id, true, function(err) {
                        assert.equal(err.code, 401);
                        PrincipalsAPI.setTenantAdmin(anonymousContext, john.id, true, function(err) {
                            assert.equal(err.code, 401);

                            // John (a regular user) will try to make himself and jane an admin.
                            // Both should fail.
                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, true, function(err) {
                                assert.equal(err.code, 401);
                                PrincipalsAPI.setGlobalAdmin(johnContext, john.id, true, function(err) {
                                    assert.equal(err.code, 401);

                                    // This test makes John a global admin.
                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, john.id, true, function(err) {
                                        assert.ok(!err);
                                        // We'll need to get a new context as the old one has cached that john is not an admin.
                                        TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                            assert.ok(!err);
                                            assert.ok(johnContext.user().isGlobalAdmin());
                                            assert.ok(johnContext.user().isAdmin(tenantA.alias));
                                            assert.ok(!johnContext.user().isTenantAdmin(tenantB));

                                            // Now John should be able to make jane an admin.
                                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, true, function(err) {
                                                assert.ok(!err);

                                                // We'll need to get a new context for jane as the old one is stale.
                                                TestAPI.User.invalidateContext(janeContext, function(err, janeContext) {
                                                    assert.ok(!err);
                                                    assert.ok(janeContext.user().isGlobalAdmin());
                                                    assert.ok(janeContext.user().isAdmin(tenantA.alias));
                                                    assert.ok(!janeContext.user().isTenantAdmin(tenantB));

                                                    // If we revoke his global admin rights, he should not be able to revoke jane's admin rights.
                                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, john.id, false, function(err) {
                                                        assert.ok(!err);

                                                        TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                                            assert.ok(!err);
                                                            assert.ok(!johnContext.user().isGlobalAdmin());
                                                            assert.ok(!johnContext.user().isAdmin(tenantA.alias));
                                                            assert.ok(!johnContext.user().isTenantAdmin(tenantB.alias));

                                                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, false, function(err) {
                                                                assert.equal(err.code, 401);

                                                                // Make sure it didn't go trough.
                                                                TestAPI.User.invalidateContext(janeContext, function(err, janeContext) {
                                                                    assert.ok(!err);
                                                                    assert.ok(janeContext.user().isGlobalAdmin());
                                                                    assert.ok(janeContext.user().isAdmin(tenantA.alias));
                                                                    assert.ok(!janeContext.user().isTenantAdmin(tenantB.alias));
                                                                    callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * We'll make John a tenant admin who then attempts to set himself as a global admin.
         * This should not be allowed.
         */
        it('Test that a tenant admin can\'t create a global admin', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                // This test makes John a tenant admin.
                PrincipalsAPI.setTenantAdmin(globalAdminContext, john.id, true, function(err) {
                    assert.ok(!err);
                    // We'll need to get a new context as the old one has cached that john is not an admin.
                    TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                        assert.ok(!err);
                        assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));
                        assert.ok(!johnContext.user().isGlobalAdmin());
                        assert.ok(johnContext.user().isAdmin(tenantA.alias));

                        PrincipalsAPI.setGlobalAdmin(johnContext, john.id, true, function(err) {
                            assert.equal(err.code, 401);
                            // Invalidate to be absolutely sure.
                            TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                assert.ok(!err);
                                assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));
                                assert.ok(!johnContext.user().isGlobalAdmin());
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('Test admin parameter validation', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                // This test makes John a tenant admin.
                PrincipalsAPI.setTenantAdmin(globalAdminContext, 'non-existing-id', true, function(err) {
                    assert.equal(err.code, 400);

                    // Groups cannot be made admin.
                    PrincipalsAPI.setTenantAdmin(globalAdminContext, 'g:cam:group', true, function(err) {
                        assert.equal(err.code, 400);
                        PrincipalsAPI.setTenantAdmin(globalAdminContext, 'u:camtest:non-existing-id', true, function(err) {
                            assert.equal(err.code, 404);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Create three users: john, jack and jane. John and Jack are in tenant A, Jane is in tenant B.
         * Promote John to a tenant admin (for A) and try to update the profile info for Jack and Jane.
         * It should only work for Jack.
         */
        it('Verify that a tenant admin can only update users within his own tenant.', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            // John and Jack
            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                createUser(function(jack) {
                    var jackContext = new Context(tenantA, jack);

                    // Jane
                    var anonymousContextTenantB = new Context(tenantB, null);
                    PrincipalsAPI.createUser(anonymousContextTenantB, 'jane', 'password', 'public', 'en_GB', 'Europe/London', 'firstName', 'lastName', 'displayName', function(err, id) {
                        PrincipalsAPI.getUser(anonymousContextTenantB, id, function(err, jane) {

                            // Promote John
                            PrincipalsAPI.setTenantAdmin(globalAdminContext, john.id, true, function(err) {
                                assert.ok(!err);
                                // We'll need to get a new context as the old one has cached that john is not an admin.
                                TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                    assert.ok(!err);
                                    assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));

                                    // Try to update Jack.
                                    PrincipalsAPI.updateUser(johnContext, jack.id, {
                                        'visibility': 'private',
                                        'locale': 'en_CA',
                                        'timezone': 'Canada/Toronto',
                                        'user_first_name': 'Jack',
                                        'user_last_name': 'Doe',
                                        'user_display_name': 'Jack Doe'
                                    }, function(err) {
                                        assert.ok(!err);
                                        // Verify it.
                                        PrincipalsAPI.getUser(jackContext, jack.id, function(err, user) {
                                            assert.ok(!err);
                                            assert.equal(user.firstName, 'Jack');
                                            assert.equal(user.lastName, 'Doe');
                                            assert.equal(user.displayName, 'Jack Doe');
                                            // Try a password change
                                            PrincipalsAPI.changePassword(johnContext, jack.id, '', 'foobar', function(err) {
                                                assert.ok(!err);

                                                // Try Jane
                                                PrincipalsAPI.updateUser(johnContext, jane.id, {
                                                    'visibility': 'private',
                                                    'locale': 'en_CA',
                                                    'timezone': 'Canada/Toronto',
                                                    'user_first_name': 'Jane',
                                                    'user_last_name': 'Doe',
                                                    'user_display_name': 'Jane Doe'
                                                }, function(err) {
                                                    assert.equal(err.code, 401);

                                                    // Try updating Jane her password, this should also fail.
                                                    PrincipalsAPI.changePassword(johnContext, jane.id, '', 'foobar', function(err) {
                                                        assert.equal(err.code, 401);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});