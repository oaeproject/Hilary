/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

var FollowingAPI = require('oae-following');
var FollowingConstants = require('oae-following/lib/constants').FollowingConstants;


//////////////////////
// SEARCH ENDPOINTS //
//////////////////////

SearchAPI.registerSearch('followers', require('./searches/followers'));
SearchAPI.registerSearch('following', require('./searches/following'));


////////////////////
// INDEXING TASKS //
////////////////////

/*!
 * Update the following search index and the followers search index based on the change in the following user and the followed user
 */
FollowingAPI.on(FollowingConstants.events.FOLLOW, function(ctx, followingUser, followedUser) {
    return _handleIndexChange(ctx, followingUser.id, followedUser.id);
});

/*!
 * Update the following search index and the followers search index based on the change in the following user and the unfollowed user
 */
FollowingAPI.on(FollowingConstants.events.UNFOLLOW, function(ctx, followingUser, unfollowedUserId) {
    return _handleIndexChange(ctx, followingUser.id, unfollowedUserId);
});

/*!
 * Handle the change in follower/following index. The `followingUserId` will have their following index updated
 * while the `followedUserId` will have their followers index updated
 *
 * @param  {Context}    ctx                 The context of the request that updated the index
 * @param  {String}     followingUserId     The id of the user whose following index to update
 * @param  {String}     followedUserId      The id of the user whose followers index to update
 */
var _handleIndexChange = function(ctx, followingUserId, followedUserId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'user',
        'resources': [

            // We index the "memberships" of the "following" user, which will update the search index for the user's list of
            // "following" users
            {
                'id': followingUserId,
                'opts': {
                    'indexResource': false,
                    'indexMembers': false,
                    'indexMemberships': true
                }
            },

            // We index the "members" of the user being followed, which will update the search index for the target user's
            // list of followers
            {
                'id': followedUserId,
                'opts': {
                    'indexResource': false,
                    'indexMembers': true,
                    'indexMemberships': false
                }
            }
        ]
    });
};
