/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var reCaptcha = require('recaptcha-async').reCaptcha;
var request = require('request');
var principalAPI = require('oae-principals');
var rolesAPI = require('oae-roles');
var rolesModel = require('oae-roles/lib/model');
var tenantAPI = require('oae-tenants');
var Context = require('oae-context').Context;

/**
 * Creates a user via the REST API.
 * Will use the currently logged in user's cookiestore.
 *
 * @param  {String}   username    The name of the user you wish to create.
 * @param  {String}   visibility  desired visibility
 * @param  {String}   firstName   desired first name
 * @param  {String}   lastName    desired last name
 * @param  {String}   displayName desired displayname
 * @param  {Function} callback    Callback method
 */
var createUserViaRest = function(username, visibility, firstName, lastName, displayName, callback) {
    request.post({
        'url': 'http://localhost:2001/api/users/create',
        'form': {
            'username': username,
            'password': 'testtest',
            'firstName': firstName,
            'lastName': lastName,
            'visibility': visibility,
            'displayName': displayName
        }
    }, callback);
};

var updateUserViaRest = function(test, userid, params, callback) {
    request.post({
        'url': 'http://localhost:2001/api/users/' + userid,
        'method': 'POST',
        'form': params
    }, callback);
};

/**
 * Gets a profile from the REST api and asserts some values.
 *
 * @param  {Object}   test        Nodeunit test object
 * @param  {String}   userid      Userid of the profile you wish to retrieve
 * @param  {String}   visibility  visibility to assert
 * @param  {String}   displayName displayname to assert
 * @param  {String}   firstName   first name to assert (pass in undefined for private profiles)
 * @param  {String}   lastName    last name to assert (pass in undefined for private profiles)
 * @param  {Function} callback    Callback method
 */
var getProfile = function(test, userid, visibility, displayName, firstName, lastName, callback) {
    request.get('http://localhost:2001/api/users/' + userid, function(err, response, body) {
        test.ok(!err);
        var j = JSON.parse(body);
        test.equals(visibility, j.visibility);
        test.equals(firstName, j.profile.firstName);
        test.equals(lastName, j.profile.lastName);
        test.equals(displayName, j.profile.displayName);

        callback(err, response, body);
    });
};

var login = function(username, password, test, callback) {
    request.post({
        'url': 'http://localhost:2001/api/auth/login',
        'method': 'POST',
        'form': { 'username': username, 'password': password }
    },function(err, response, body) {
        test.ok(!err);
        callback(err, response, body);
    });
};

var logout = function(test, callback) {
    request.post({
        'uri': 'http://localhost:2001/api/auth/logout',
        'followRedirect': false
    }, function(err, response, body) {
        test.ok(!err);
        callback(err, response, body);
    });
};


module.exports.testCreateUser = function(test) {
    test.expect(11);
    tenantAPI.getTenantByPort(2001, function(err, tenant) {
        test.ok(!err);
        var anonymousContext = new Context(tenant, null);

        var r = Math.floor(Math.random()*10000000);
        var username = 'johndoe-' + r;

        createUserViaRest(username, 'public', 'John', 'Doe', 'John Doe', function(err, response, body) {
            test.ok(!err);
            test.equal(400, response.statusCode, "Anonymous users without a reCaptcha shouldn't be able to create an account.");
            var j = JSON.parse(body);
            test.equal(j.msg, 'Invalid reCaptcha token.');

            // Create a user account directly and login with it.
            var tenantAdmin = 'tenantAdmin-' + r;
            principalAPI.createUser(anonymousContext, tenantAdmin, 'testtest', 'public', 'en_GB', 'Europe/London', 'tenant', 'admin', 'tenant admin', function(err, tenantAdminId) {
                test.ok(!err);
                login(tenantAdmin, 'testtest', test, function() {
                    // try creating a user.
                    createUserViaRest(username, 'public', 'John', 'Doe', 'John Doe', function(err, response, body) {
                        test.ok(!err);
                        test.equal(401, response.statusCode, "Non-admin logged-in users are not allowed to create an account.");

                        // Promote this user to an admin.
                        var tenantAdminResource = new rolesModel.Resource('r', tenant.alias, 'system');
                        rolesAPI.setRole(tenantAdminId, tenantAdminResource.toUuid(), 'admin', function(err) {
                            test.ok(!err);

                            // Try creating user.
                            createUserViaRest(username, 'public', 'John', 'Doe', 'John Doe', function(err, response, body) {
                                test.ok(!err);
                                test.equal(201, response.statusCode);
                                test.done();
                            });
                        });
                    });
                });
            });
        });
    });
};



module.exports.testUserPermissions = function(test) {
    var r = Math.floor(Math.random()*10000000);
    var username1 = 'johndoe-' + r;
    var username2 = 'janedoe-' + r;

    tenantAPI.getTenantByPort(2001, function(err, tenant) {
        test.ok(!err);
        var anonymousContext = new Context(tenant, null);

        principalAPI.createUser(anonymousContext, username1, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userid1) {
            test.ok(!err);

            principalAPI.createUser(anonymousContext, username2, 'testtest', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, userid2) {
                test.ok(!err);

                // Set user1 his visibility to logged in.
                login(username1, 'testtest', test, function() {
                    updateUserViaRest(test, userid1, {'visibility': 'loggedin'}, function(err, response, body) {
                        test.ok(!err);
                        test.equal(200, response.statusCode);

                        // Try to get the profile as anon, should fail.
                        logout(test, function() {
                            request.get('http://localhost:2001/api/users/' + userid1, function(err, response, body) {
                                test.ok(!err);
                                var j = JSON.parse(body);
                                test.equals('loggedin', j.visibility);
                                test.equals(undefined, j.profile.firstName);
                                test.equals(undefined, j.profile.lastName);
                                test.equals('John Doe', j.profile.displayName);

                                // Getting the profile as user 2 should still work.
                                login(username2, 'testtest', test, function() {
                                    request.get('http://localhost:2001/api/users/' + userid1, function(err, response, body) {
                                        test.ok(!err);
                                        var j = JSON.parse(body);
                                        test.equals('loggedin', j.visibility);
                                        test.equals('John', j.profile.firstName);
                                        test.equals('Doe', j.profile.lastName);
                                        test.equals('John Doe', j.profile.displayName);

                                        // Set it private.
                                        login(username1, 'testtest', test, function() {
                                            updateUserViaRest(test, userid1, {'visibility': 'private'}, function(err, response, body) {
                                                test.ok(!err);
                                                test.equal(200, response.statusCode);

                                                // As another user.
                                                login(username2, 'testtest', test, function() {
                                                    request.get('http://localhost:2001/api/users/' + userid1, function(err, response, body) {
                                                        test.ok(!err);
                                                        var j = JSON.parse(body);
                                                        test.equals('private', j.visibility);
                                                        test.equals(undefined, j.profile.firstName);
                                                        test.equals(undefined, j.profile.lastName);
                                                        test.equals('John Doe', j.profile.displayName);

                                                        // As anonymous
                                                        logout(test, function() {
                                                             request.get('http://localhost:2001/api/users/' + userid1, function(err, response, body) {
                                                                test.ok(!err);
                                                                var j = JSON.parse(body);
                                                                test.equals('private', j.visibility);
                                                                test.equals(undefined, j.profile.firstName);
                                                                test.equals(undefined, j.profile.lastName);
                                                                test.equals('John Doe', j.profile.displayName);
                                                                test.done();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};


module.exports.testTimezones = function(test) {
    test.expect(23);

    var updateAndCheckTimezone = function(userid, timezone, expected, callback) {
        updateUserViaRest(test, userid, {'timezone': timezone}, function(err, response, body) {
            test.ok(!err);
            test.equal(200, response.statusCode);

            request.get('http://localhost:2001/api/me', function(err, response, body) {
                test.ok(!err);

                test.equal(200, response.statusCode);
                var j = JSON.parse(body);
                test.equal(j.locale.timezone.offset, expected, "Wrong offset for " + timezone);
                callback();
            });
        });
    };

    var r = Math.floor(Math.random()*10000000);
    var username = 'johndoe-' + r;

    tenantAPI.getTenantByPort(2001, function(err, tenant) {
        test.ok(!err);
        var anonymousContext = new Context(tenant, null);

        principalAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userid) {
            test.ok(!err);

            login(username, 'testtest', test, function() {
                updateAndCheckTimezone(userid, 'America/Argentina/ComodRivadavia', -3, function() {
                    updateAndCheckTimezone(userid, 'America/Caracas', -4.5, function() {
                        updateAndCheckTimezone(userid, 'Asia/Kathmandu', 5.75, function() {
                            updateAndCheckTimezone(userid, 'Eire', 1, function() {
                                test.done();
                            });
                        });
                    });
                });
            });
        });
    });
};


module.exports.testChangePassword = function(test) {
    var r = Math.floor(Math.random()*10000000);
    var username = 'johndoe-' + r;

    tenantAPI.getTenantByPort(2001, function(err, tenant) {
        test.ok(!err);
        var anonymousContext = new Context(tenant, null);

        principalAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userid) {
            test.ok(!err);

            request.post({
                'url': 'http://localhost:2001/api/users/' + userid + '/password',
                'form': {
                    'oldPassword': 'testtest',
                    'newPassword': 'totally-new-password'
                }
            }, function(err, response, body) {
                test.ok(!err)
                test.equal(200, response.statusCode);

                logout(test, function() {
                    login(username, 'testtest', test, function(err, response, body) {
                        test.equal(401, response.statusCode, "Login with old password should fail.");

                        // Try with new.
                        login(username, 'totally-new-password', test, function(err, response, body) {
                            test.equal(200, response.statusCode, "Login with new password should succeed.");
                            test.done();
                        });
                    });
                });
            })
        });
    });
};