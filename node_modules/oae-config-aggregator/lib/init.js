/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var express = require('express');
var Time = require('time');

var PrincipalsAPI = require('oae-principals');
var Cassandra = require('oae-util/lib/cassandra');

var ConfigAPI = require('oae-config-aggregator');

module.exports = function(app, callback) {
    registerConfigAdminRestEndpoints(app);
    ensureSchema(callback);
}

/**
 * Register all the endpoints required for interacting with the configuration admin interface.
 */
var registerConfigAdminRestEndpoints = function(app) {

    app.server.use(express.static(__dirname + "/../public"));

    app.server.get('/api/me', function(req, res) {
        if (!req.ctx.user()) {
            return res.send(200, {'anon': true});
        }

        PrincipalsAPI.getBasicProfile(req.ctx, req.user.id, function(err, data) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            // calculate timezone offset in hours.
            var now = new Time.Date();
            now.setTimezone(req.user.timezone);
            var offset = -1 * now.getTimezoneOffset() / 60;

            data.locale = {
                'locale': req.user.locale,
                'timezone': {
                    'name': req.user.timezone,
                    'offset': offset
                }
            };

            res.send(200, data);
        });
    });

    app.server.get('/api/modules', function(req, res, next) {
        ConfigAPI.getModules(function(modules) {
            res.send(200, modules)
        });
    });

    app.server.get('/api/configuration', function(req, res, next) {
        ConfigAPI.readConfig(req.query.tenantid, function(err, configuration) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, configuration);
        });
    });

    app.server.post('/admin/update', function(req, res, next) {
        ConfigAPI.writeConfig(req.body, function(err) {
            if (err) {
                return res.send(err.code, err.body);
            }
            res.send(200, 'Config successfully stored.');
        });
    });
}

/**
 * Ensure that the config schema is created.
 * If both the schema and the default config exist, then this method will do nothing.
 *
 * @param {Function} callback A function(err), specifying whether or not there was an error creating the schema.
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamily('Config', 'CREATE COLUMNFAMILY Config (tenantid text PRIMARY KEY)', callback);
};
