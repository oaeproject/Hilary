/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var parseString = require('xml2js').parseString;
var request = require('request');
var util = require('util');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-preview-processor');
var PreviewConfig = require('oae-config').config('oae-preview-processor');

var LinkProcessorUtil = require('oae-preview-processor/lib/processors/link/util');
var PreviewUtil = require('oae-preview-processor/lib/util');

var SLIDES_REGEX = /^http(s)?:\/\/(www\.)?slideshare\.net\/(\w+)\/(\w+)/;

/**
 * @borrows Interface.test as SlideShareProcessor.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    // Don't bother with non-link content items.
    if (contentObj.resourceSubType !== 'link') {
        return callback(null, -1);
    }

    // Check if we're configured to deal with slideshare urls.
    var config = _getConfig();
    if (!config.apiKey || !config.sharedSecret) {
        return callback(null, -1);
    }

    // Check if they are SlideShare urls.
    if (SLIDES_REGEX.test(contentObj.link)) {
        return callback(null, 10);
    } else {
        return callback(null, -1);
    }
};

/**
 * @borrows Interface.generatePreviews as SlideShareProcessor.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {
    var config = _getConfig();

    // Do an API request first.
    // See http://www.slideshare.net/developers/documentation for more info.
    // Essentially each API call should look like:
    //     https://www.slideshare.net/api/2/<api method>?<method parameters>&api_key=<api key>&hash=<sha1(secret + ts)>&ts=<ts>
    var ts = Math.round(Date.now() / 1000);
    var shasum = crypto.createHash('sha1');
    shasum.update(config.sharedSecret + ts);
    var hash = shasum.digest('hex');
    var apiUrl = util.format('https://www.slideshare.net/api/2/get_slideshow?slideshow_url=%s&api_key=%s&hash=%s&ts=%s', contentObj.link, config.apiKey, hash, ts);
    request(apiUrl, function(err, response, body) {
        if (err || response.statusCode !== 200) {
            return callback(err || {'code': response.statusCode, 'msg': body});
        }

        // Get Thumbnail url.
        parseString(body, function (err, result) {
            if (err || result.SlideShareServiceError) {
                return callback(err || {'code': 500, 'msg': result.SlideShareServiceError.Message});

            // Ignore this image if it has no thumbnail.
            } else if (!(result.Slideshow && result.Slideshow.ThumbnailURL && result.Slideshow.ThumbnailURL.length > 0)) {
                return callback(null, true);
            }

            var opts = {};
            if (result.Slideshow && result.Slideshow.Title && result.Slideshow.Title.length > 0) {
                opts.displayName = result.Slideshow.Title[0];
            }
            if (result.Slideshow && result.Slideshow.Description && result.Slideshow.Description.length > 0) {
                opts.description = result.Slideshow.Description[0];
            }

            // Download it.
            var imageUrl = 'http:' + result.Slideshow.ThumbnailURL[0];
            var path = ctx.baseDir + '/slideshare.jpg';
            PreviewUtil.downloadRemoteFile(imageUrl, path, function(err, path) {
                if (err) {
                    return callback(err);
                }

                LinkProcessorUtil.generatePreviewsFromImage(ctx, path, opts, callback);
            });
        });
    });
};

/**
 * Get the SlideShare API values that have been configured in the Admin UI.
 *
 * @return {Object} The apiKey and sharedSecret from the Admin UI.
 * @api private
 */
var _getConfig = function() {
    return {
        'apiKey': PreviewConfig.getValue('admin', 'slideshare', 'apikey'),
        'sharedSecret': PreviewConfig.getValue('admin', 'slideshare', 'sharedsecret')
    };
};
