/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var Context = require('oae-context').Context;
var FollowingDAO = require('oae-following/lib/internal/dao');
var User = require('oae-principals/lib/model').User;

var PrincipalsAPI = require('oae-principals');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');


//////////////////
// GROUP-CREATE //
//////////////////

/*!
 * Fire the 'group-create' activity when a new group is created.
 */
PrincipalsAPI.on(PrincipalsConstants.events.CREATED_GROUP, function(ctx, group, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('group', group.id, {'group': group});
    var activitySeed = new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

ActivityAPI.registerActivityType(PrincipalsConstants.activity.ACTIVITY_GROUP_CREATE, {
    'groupBy': [{'actor': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-principals',
        'emailTemplateId': 'notify-group-add-member'
    },
    'routers': {
        'activity': {
            'actor': ['self', 'followers'],
            'object': ['self', 'members']
        },
        'notification': {
            'object': ['members']
        }
    }
});


//////////////////////////////////////////////
// GROUP-UPDATE and GROUP-UPDATE-VISIBILITY //
//////////////////////////////////////////////

/*!
 * Fire the 'group-update' or 'group-update-visibility' activity when a group is updated.
 */
PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP, function(ctx, newGroup, oldGroup) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('group', newGroup.id, {'group': newGroup});

    // If just update the group's visibility, we want to fire off a special "changed visibility" activity instead of the normal "group update"
    var activityType = null;
    if (newGroup.visibility === oldGroup.visibility) {
        activityType = PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE;
    } else {
        activityType = PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

var _groupUpdateRouters = {
    'activity': {
        'actor': ['self'],
        'object': ['self', 'members']
    },
    'notification': {
        'object': ['managers']
    }
};

ActivityAPI.registerActivityType(PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE, {'routers': _groupUpdateRouters});
ActivityAPI.registerActivityType(PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE_VISIBILITY, {'routers': _groupUpdateRouters});


/////////////////////////////////////
// GROUP-JOIN and GROUP-ADD-MEMBER //
/////////////////////////////////////

ActivityAPI.registerActivityType(PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN, {
    // "5 users have joined GroupA"
    'groupBy': [{'object': true}],
    'routers': {
        'activity': {
            'actor': ['self', 'followers'],
            'object': ['self', 'managers']
        }
    }

});

ActivityAPI.registerActivityType(PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, {
    'groupBy': [{'actor': true, 'target': true}],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-principals',
        'emailTemplateId': 'notify-group-add-member'
    },
    'routers': {
        'activity': {
            'actor': ['self'],
            'object': ['self', 'members', 'followers'],
            'target': ['self', 'managers']
        },
        'notification': {
            'object': ['self']
        }
    }
});

/*!
 * Fire the group-add-member activity when someone adds members to a group
 */
PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP_MEMBERS, function(ctx, group, members) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var targetResource = new ActivityModel.ActivitySeedResource('group', group.id, {'group': group});

    // We fire one group-add-member for each user that joined.
    var principalIds = _.keys(members);
    for (var i = 0; i < principalIds.length; i++) {
        var principalId = principalIds[i];
        if (members[principalId]) {
            var objectResourceType = PrincipalsUtil.isGroup(principalId) ? 'group' : 'user';
            var objectResource = new ActivityModel.ActivitySeedResource(objectResourceType, principalId);
            ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, millis, ActivityConstants.verbs.ADD, actorResource, objectResource, targetResource));
        }
    }
});

/*!
 * Fire the group-join activity when someone joins a group
 */
PrincipalsAPI.on(PrincipalsConstants.events.JOINED_GROUP, function(ctx, group, role) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    var objectResource = new ActivityModel.ActivitySeedResource('group', group.id, {'group': group});
    ActivityAPI.postActivity(ctx, new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN, millis, ActivityConstants.verbs.JOIN, actorResource, objectResource));
});


///////////////////////////
// ACTIVITY ENTITY TYPES //
///////////////////////////

/*!
 * Create the 'user' activity entity
 * @see ActivityAPI#registerActivityEntityType
 */
var _userProducer = function(resource, callback) {
    var user = (resource.resourceData) ? resource.resourceData.user : null;

    // If the user was provided in the resource data, use it instead of fetching
    if (user) {
        return callback(null, PrincipalsUtil.createPersistentUserActivityEntity(user.id, user));
    }

    // We didn't have a user to work with, fetch it and produce the persistent entity
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, user) {
        if (err) {
            return callback(err);
        }

        return callback(null, PrincipalsUtil.createPersistentUserActivityEntity(user.id, user));
    });
};

/*!
 * Transform the user persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _userTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            transformedActivityEntities[activityId][entityId] = PrincipalsUtil.transformPersistentUserActivityEntity(ctx, entityId, entity.user);
        });
    });
    return callback(null, transformedActivityEntities);
};

/*!
 * Create the 'group' activity entity
 * @see ActivityAPI#registerActivityEntityType
 */
var _groupProducer = function(resource, callback) {
    var group = (resource.resourceData) ? resource.resourceData.group : null;

    // If the group was delivered with the resource, use it instead of fetching
    if (group) {
        return callback(null, PrincipalsUtil.createPersistentGroupActivityEntity(group.id, group));
    }

    // Only the group id was added to the resource, query the group
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, group) {
        if (err) {
            return callback(err);
        }

        return callback(null, PrincipalsUtil.createPersistentGroupActivityEntity(group.id, group));
    });
};

/*!
 * Transform the group persistent activity entities into UI-friendly ones
 * @see ActivityAPI#registerActivityEntityType
 */
var _groupTransformer = function(ctx, activityEntities, callback) {
    var transformedActivityEntities = {};
    _.keys(activityEntities).forEach(function(activityId) {
        transformedActivityEntities[activityId] = transformedActivityEntities[activityId] || {};
        _.keys(activityEntities[activityId]).forEach(function(entityId) {
            var entity = activityEntities[activityId][entityId];
            transformedActivityEntities[activityId][entityId] = PrincipalsUtil.transformPersistentGroupActivityEntity(ctx, entityId, entity.group);
        });
    });
    return callback(null, transformedActivityEntities);
};

ActivityAPI.registerActivityEntityType('user', {
    'producer': _userProducer,
    'transformer': _userTransformer,
    'propagation': function(associationsCtx, entity, callback) {
        // We propagate private users everywhere as the transformer will scrub sensitive information where necessary
        return callback(null, [{'type': ActivityConstants.entityPropagation.ALL}]);
    }
});

ActivityAPI.registerActivityEntityType('group', {
    'producer': _groupProducer,
    'transformer': _groupTransformer,
    'propagation': function(associationsCtx, entity, callback) {
        /*!
         * We propagate groups to all feeds. If a group is private and not joinable, according to system privacy rules
         * it actually *wouldn't* be discoverable / readable by non-member users. However, there are some use-cases that
         * support the idea to propagate it any way:
         *
         * "I am a manager of a content item, and someone has shared my content item with a private group to which I don't
         * have access."
         *
         * Another way to think about this is, now that the content item has the group in its members list, the manager
         * is now able to discover it on the list of members any way.
         *
         * Another use case is:
         *
         * "I am following Simon, and he was just added to a private unjoinable group of which I am not a member"
         *
         * In this scenario, I could otherwise discover this group in the membership list of the user I'm following (when
         * a user changes their profile privacy to be more restrictive, it no longer routes to followers who no longer
         * have access to their profile). So this routing clause should be acceptable for this use case as well.
         */
        return callback(null, [{'type': ActivityConstants.entityPropagation.ALL}]);
    }
});


//////////////////////////////////
// ACTIVITY ENTITY ASSOCIATIONS //
//////////////////////////////////

/*!
 * Register a user association that presents the user themself
 */
ActivityAPI.registerActivityEntityAssociation('user', 'self', function(associationsCtx, entity, callback) {
    return callback(null, [entity.user.id]);
});

/*!
 * Register a group association that presents the group itself
 */
ActivityAPI.registerActivityEntityAssociation('group', 'self', function(associationsCtx, entity, callback) {
    return callback(null, [entity.group.id]);
});

/*!
 * Register a group association that presents the indirect members of the group categorized by role
 */
ActivityAPI.registerActivityEntityAssociation('group', 'members-by-role', function(associationsCtx, entity, callback) {
    return ActivityUtil.getAllAuthzMembersByRole(entity.group.id, callback);
});

/*!
 * Register a group association that presents all the indirect members of a group
 */
ActivityAPI.registerActivityEntityAssociation('group', 'members', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, _.flatten(_.values(membersByRole)));
    });
});

/*!
 * Register a group association that presents all the managers of a group
 */
ActivityAPI.registerActivityEntityAssociation('group', 'managers', function(associationsCtx, entity, callback) {
    associationsCtx.get('members-by-role', function(err, membersByRole) {
        if (err) {
            return callback(err);
        }

        return callback(null, membersByRole['manager']);
    });
});
