/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('./internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;


////////////////////////
// POSTING ACTIVITIES //
////////////////////////

/*!
 * Fire the 'group-create' activity when a new group is created.
 */
PrincipalsAPI.on(PrincipalsConstants.events.CREATED_GROUP, function(ctx, group, members) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('group', group.id, {'group': group});
    var activitySeed = new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(activitySeed);
});

/*!
 * Fire the 'group-update' or 'group-update-visibility' activity when a group is updated.
 */
PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP, function(ctx, newGroup, oldGroup) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('group', newGroup.id, {'group': newGroup});

    // If just update the group's visibility, we want to fire off a special "changed visibility" activity instead of the normal "group update"
    var activityType = null;
    if (newGroup.visibility === oldGroup.visibility) {
        activityType = PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE;
    } else {
        activityType = PrincipalsConstants.activity.ACTIVITY_GROUP_UPDATE_VISIBILITY;
    }

    var activitySeed = new ActivityModel.ActivitySeed(activityType, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(activitySeed);
});

/*!
 * Fire the 'group-join' or 'group-add-member' activity when a group's membership has changed.
 */
PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP_MEMBERS, function(ctx, groupId, members) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var targetResource = new ActivityModel.ActivitySeedResource('group', groupId);

    var principalIds = _.keys(members);
    for (var i = 0; i < principalIds.length; i++) {
        var principalId = principalIds[i];
        if (members[principalId]) {
            var objectResourceType = PrincipalsUtil.isGroup(principalId) ? 'group' : 'user';
            var objectResource = new ActivityModel.ActivitySeedResource(objectResourceType, principalId);

            if (objectResource.resourceId === actorResource.resourceId) {
                // A user doesn't "add themself" to a group, they "join" the group. In this case, the object is the group that was joined, so we swap it in to the objectResource
                objectResource = targetResource;
                ActivityAPI.postActivity(new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN, millis, ActivityConstants.verbs.JOIN, actorResource, objectResource));
            } else {
                ActivityAPI.postActivity(new ActivityModel.ActivitySeed(PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, millis, ActivityConstants.verbs.ADD, actorResource, objectResource, targetResource));
            }
        }
    }
});

///////////////////////////////
// ACTIVITY OBJECT PRODUCERS //
///////////////////////////////


/*!
 * Create the 'user' activity entity
 */
ActivityAPI.registerActivityEntityProducer('user', function(activityType, entityType, resource, callback) {
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, user) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(user.tenant, function(err, userTenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + userTenant.host;
            var globalId = httpHost + '/api/user/' + user.id;
            var profileUrl = httpHost + '/~' + user.id;
            var isPrivate = (!user.visibility || user.visibility === 'private');

            var opts = {};
            opts.displayName = (isPrivate) ? user.publicAlias : user.displayName;
            opts.url = (isPrivate) ? undefined : profileUrl;
            opts.image = (isPrivate) ? undefined : new ActivityModel.ActivityMediaLink('local://2012/11/28/17/image/to/come.png', 35, 35);

            opts.ext = {};
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = user.visibility;

            // Since activities always go to authenticated users, and we've scrubbed when the user is private, we can propagate this object to all feeds.
            var propagation = ActivityConstants.entityPropagation.ALL;
            var entity = new ActivityModel.ActivityEntity('user', globalId, opts);
            return callback(null, entity, propagation);
        });
    });
});

/*!
 * Create the 'group' activity entity
 */
ActivityAPI.registerActivityEntityProducer('group', function(activityType, entityType, resource, callback) {
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, group) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(group.tenant, function(err, groupTenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + groupTenant.host;
            var globalId = httpHost + '/api/group/' + group.id;
            var profileUrl = httpHost + '/~' + group.id;
            var isPrivate = (!group.visibility || group.visibility === 'private');
            var isJoinable = (group.joinable && group.joinable !== 'no');

            var opts = {};
            // TODO: When Issue #284 is merged, this will change to group.displayName
            opts.displayName = group.name;
            opts.url = profileUrl;
            // TODO: When profile pictures are merged, this should be the large picture if entityType is 'object', or a small picture if entityType is 'actor' or 'target'.
            opts.image = new ActivityModel.ActivityMediaLink('local://2012/11/28/17/image/to/come.png', 35, 35);

            // Extension properties
            opts.ext = {};
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = group.visibility;

            // Only show this group info in extended feeds if it is public, loggedin, or somehow joinable. otherwise, only distribute in its own routes.
            var propagation = (!isPrivate || isJoinable) ? ActivityConstants.entityPropagation.ALL : ActivityConstants.entityPropagation.OWN;
            var entity = new ActivityModel.ActivityEntity('group', globalId, opts);
            return callback(null, entity, propagation);
        });
    });
});


//////////////////////
// ACTIVITY ROUTERS //
//////////////////////

/*!
 * Routes a user entity when an activity has occurred. Currently it is only routed to the user themself.
 */
ActivityAPI.registerActivityRouter('user', function(activityType, entityType, userActivityEntity, callback) {
    // Route to activity the user's self, but no one else
    // TODO: When user 'following' is implemented, we'll be routing to the user's followers here as well
    return callback(null, [userActivityEntity[ActivityConstants.properties.OAE_ID]]);
});

/*!
 * Routes a group entity when an activity has occurred.
 */
ActivityAPI.registerActivityRouter('group', function(activityType, entityType, groupActivityEntity, callback) {
    // Deliver to all the group members, direct or indirect
    ActivityUtil.getAllAuthzMembersByRole(groupActivityEntity[ActivityConstants.properties.OAE_ID], function(err, membersByRole) {
        if (err) {
            return callback(err);
        }
        
        var routes = null;
        var isMembershipActivity = (activityType === PrincipalsConstants.activity.ACTIVITY_GROUP_JOIN || activityType === PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER);
        if (isMembershipActivity) {
            // If the activity is that a user became a member of the group, only managers are interested
            routes = membersByRole['manager'] || [];
        } else {
            // Union all members of all roles into one array as the routes
            routes = _.uniq(_.flatten(_.values(membersByRole)));
        }
        
        return callback(null, routes);
    });
});
