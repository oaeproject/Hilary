/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthzAPI = require('oae-authz');
var RestAPI = require('oae-rest');

var TestsUtil = require('oae-tests');
var TransferTestUtil = require('oae-transfer/lib/test/util');

describe('Transfer-discussions', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });


    describe('Make transfer - discussions', function() {
        /**
         * Test that verify if transfer find the good manager
         */
        it('verify if transfer find good members', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate discussions
                    TransferTestUtil.generateDiscussions(mrvisser.restContext, 'private', 1, function(err, mrvisserdoc) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightDiscussion(mrvisser, userOrigin, 'manager', mrvisserdoc[0], function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightDiscussion(mrvisser, stuartf, 'member', mrvisserdoc[0], function(err) {
                                assert.ok(!err);
                                TransferTestUtil.generateRightDiscussion(mrvisser, orodan, 'manager', mrvisserdoc[0], function(err) {
                                    assert.ok(!err);
                                    // Create list of members
                                    var membersListReal = [];
                                    membersListReal.push(stuartf.user.id);
                                    membersListReal.push(orodan.user.id);
                                    membersListReal.push(mrvisser.user.id);
                                    // Create and make transfer
                                    TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                        assert.ok(transfer);
                                        TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, members) {
                                            assert.ok(!err);
                                            // Keep only id from the members list
                                            var membersList = [];
                                            _.each(members, function(i) {
                                                membersList.push(i.profile.principalId);
                                            });
                                            // Sort lists to compare
                                            membersList.sort();
                                            membersListReal.sort();
                                            // Compare discussions id
                                            assert.deepEqual(membersList, membersListReal);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        /**
         * Test that verify if transfer give the good right to the target user
         */
        it('verify if transfer give good right', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate discussions
                    TransferTestUtil.generateDiscussions(mrvisser.restContext, 'private', 1, function(err, mrvisserdoc) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightDiscussion(mrvisser, userOrigin, 'manager', mrvisserdoc[0], function(err) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userTarget.user.id, mrvisserdoc[0].id, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.equal(hasRole, false);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvisserdoc[0].id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer update the right if the target user have less right than origin user
         */
        it('verify the case A transfer to B, A is a manager and B is a member : the role will be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate discussions
                    TransferTestUtil.generateDiscussions(mrvisser.restContext, 'private', 1, function(err, mrvisserdoc) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightDiscussion(mrvisser, userOrigin, 'manager', mrvisserdoc[0], function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightDiscussion(mrvisser, userTarget, 'member', mrvisserdoc[0], function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvisserdoc[0].id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer do not update the right if the target user have more right than origin user
         */
        it('verify the case A transfer to B, A is a member and B is a manager : the role will not be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate discussions
                    TransferTestUtil.generateDiscussions(userTarget.restContext, 'private', 1, function(err, mrvisserdoc) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightDiscussion(userTarget, userOrigin, 'member', mrvisserdoc[0], function(err) {
                            assert.ok(!err);
                            TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, members) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasAnyRole(userTarget.user.id, mrvisserdoc[0].id, function(err, hasRole) {
                                    AuthzAPI.hasRole(userTarget.user.id, mrvisserdoc[0].id, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer put all the element on the library
         */
        it('verify if transfer works in all cases of a discussions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, simong, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 3, function(err, users, stuartf, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate discussions
                    TransferTestUtil.generateDiscussions(mrvisser.restContext, 'loggedin', 3, function(err, mrvisserdoc) {
                        assert.ok(!err);
                        TransferTestUtil.generateDiscussions(stuartf.restContext, 'private', 3, function(err, stuartfdoc) {
                            assert.ok(!err);
                            TransferTestUtil.generateDiscussions(simong.restContext, 'public', 3, function(err, simongdoc) {
                                assert.ok(!err);
                                TransferTestUtil.generateDiscussions(orodan.restContext, 'private', 3, function(err, orodandoc) {
                                    assert.ok(!err);
                                    TransferTestUtil.generateDiscussions(userOrigin.restContext, 'private', 3, function(err, userOrigindoc) {
                                        assert.ok(!err);
                                        // Generate rights
                                        TransferTestUtil.generateRightDiscussion(stuartf, userOrigin, 'member', stuartfdoc[0], function(err) {
                                            assert.ok(!err);
                                            TransferTestUtil.generateRightDiscussion(stuartf, userOrigin, 'manager', stuartfdoc[1], function(err) {
                                                assert.ok(!err);
                                                TransferTestUtil.generateRightDiscussion(simong, userOrigin, 'member', simongdoc[0], function(err) {
                                                    assert.ok(!err);
                                                    TransferTestUtil.generateRightDiscussion(simong, userOrigin, 'manager', simongdoc[1], function(err) {
                                                        assert.ok(!err);
                                                        TransferTestUtil.generateRightDiscussion(mrvisser, userOrigin, 'member', mrvisserdoc[0], function(err) {
                                                            assert.ok(!err);
                                                            TransferTestUtil.generateRightDiscussion(mrvisser, userOrigin, 'manager', mrvisserdoc[1], function(err) {
                                                                assert.ok(!err);
                                                                TransferTestUtil.generateRightDiscussion(orodan, userTarget, 'member', orodandoc[0], function(err) {
                                                                    assert.ok(!err);
                                                                    TransferTestUtil.generateRightDiscussion(orodan, userTarget, 'manager', orodandoc[1], function(err) {
                                                                        assert.ok(!err);
                                                                        // Make list of discussion to compare
                                                                        RestAPI.Discussions.getDiscussionsLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                            var listDiscussionsBefore = [];
                                                                            _.each(result.results, function(i) {
                                                                                listDiscussionsBefore.push(i.id);
                                                                            });
                                                                            RestAPI.Discussions.getDiscussionsLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                _.each(result.results, function(i) {
                                                                                    listDiscussionsBefore.push(i.id);
                                                                                });
                                                                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                                                                    assert.ok(transfer);
                                                                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                                                                        assert.ok(!err);
                                                                                        //Verify that all discussions concerned by the trasnfer are in the library of userTarget
                                                                                        RestAPI.Discussions.getDiscussionsLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                                            RestAPI.Discussions.getDiscussionsLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                                var listDiscussionsTargetAfter = [];
                                                                                                _.each(result.results, function(i) {
                                                                                                    listDiscussionsTargetAfter.push(i.id);
                                                                                                });
                                                                                                // Sort lists to compare
                                                                                                listDiscussionsTargetAfter.sort();
                                                                                                listDiscussionsBefore.sort();
                                                                                                // Compare discussions
                                                                                                assert.deepEqual(listDiscussionsTargetAfter, listDiscussionsBefore);
                                                                                                return callback();
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

});
