/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');

var ConfigAPI = require('oae-config');
var OAE = require('oae-util/lib/oae');
var OaeServer = require('oae-util/lib/server');

var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');


// Ensure that the Shibboleth callback URL bypass CSRF validation. It has its own authenticity handling.
OaeServer.addSafePathPrefix('/api/auth/shibboleth/callback');

/*!
 * Redirect the user to the configured Shibboleth compatible IdP. When complete,
 * the IdP will redirect the user back to the application at
 * /api/auth/shibboleth/callback
 */
OAE.tenantRouter.on('get', '/api/auth/shibboleth', function(req, res, next) {
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.SHIBBOLETH);
    var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
    passport.authenticate(strategyId)(req, res, errorHandler);
});

/*!
 * The IdP will redirect the user to this URL after approval.
 */
OAE.tenantRouter.on('post', '/api/auth/shibboleth/callback', function(req, res, next) {
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.SHIBBOLETH);
    var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
    passport.authenticate(strategyId, {'failureRedirect': '/'}, function(err, user) {
        AuthenticationUtil.externalSuccessCallback(req, res, user, AuthenticationConstants.providers.SHIBBOLETH, next);
    })(req, res, errorHandler);
});

/*!
 * Dump an XML with information about this service provider that we
 * can use to register ourselves with the Identity Provider.
 */
OAE.tenantRouter.on('get', '/api/auth/shibboleth/metadata', function(req, res) {
    _getShibbolethSPMetadata(req.ctx, function(err, metadata) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, metadata);
    });
});

/**
 * Returns the Shibboleth metadata in XML format that can be used to register this app
 * as a Service Provider with an Identity Provider.
 *
 * @param  {Context}    ctx                 The current execution context
 * @param  {Function}   callback            Standard callback method
 * @param  {Object}     callback.err        Standard error object (if any.)
 * @param  {String}     callback.metadata   The SP metadata (in XML format.)
 * @api private
 */
var _getShibbolethSPMetadata = function(ctx, callback) {
    // Check if this tenant even has Shibboleth enabled.
    var isEnabled = AuthenticationConfig.getValue(ctx.tenant().alias, AuthenticationConstants.providers.SHIBBOLETH, 'enabled');
    if (!isEnabled) {
        return callback({'code': 400, 'msg': 'Shibboleth is not enabled on this tenant.'});
    }

    // Get the SamlStrategy.
    var strategyId = AuthenticationUtil.getStrategyId(ctx.tenant(), AuthenticationConstants.providers.SHIBBOLETH);
    var samlStrategy = passport._strategy(strategyId);
    var metadata = samlStrategy.getShibbolethMetadata();
    callback(null, metadata);
};
