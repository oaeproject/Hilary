/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthzAPI = require('oae-authz');
var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var User = require('oae-principals/lib/model.user').User;


describe('Groups', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    // Rest context for a user that will be used inside of the tests
    var johnRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Function that will create a user that will be used inside of the tests
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up tenant admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host); 
        // Fill up global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Fill up the rest context for our test user
        var userId = TestsUtil.generateTestUserId('john');
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'John Doe', null, function(err, createdUser) {
            johnRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');
            // Add the full user id onto the REST context for use inside of this test
            johnRestContext.id = createdUser.id;
            callback();
        });
    });


    describe('Create group', function() {

        /**
         * Test that verifies that group creation is successful when all of the parameters have been provided
         */
        it('verify that group creation succeeds given a valid request', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.ok(groupObj.id);
                assert.equal(groupObj.displayName, 'Group title');
                assert.equal(groupObj.resourceType, 'group');
                assert.equal(groupObj.profilePath, '/group/' + groupObj.id);
                callback();
            });
        });

        /**
         * Test that verifies that a group cannot be created when no group alias is provided
         */
        it('verify missing alias', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, undefined, 'Group name', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group cannot be created when the provided group alias contains a colon ':'
         */
        it('verify alias with colons', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'sneaky:alias', 'Group name', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a visibility setting creates the group with the default tenant
         * group visibility setting
         */
        it('verify that missing visibility uses tenant default', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', undefined, 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.visibility, 'public');
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a joinability setting creates the group with the default tenant
         * group joinability setting
         */
        it('verify that missing joinable uses tenant default', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', undefined, [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.joinable, 'yes');
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a description creates a valid group
         */
        it('verify that missing description is accepted', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', null, 'public', undefined, [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.description, '');
                callback();
            });
        });
        
        /**
         * Test that verifies that a group created with an invalid group manager does not succeed
         */
        it('verify that group creation fails if an invalid userId is specified as manager', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', ['totally-invalid'], [], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with an invalid group member does not succeed
         */
        it('verify that group creation fails if an invalid userId is specified as member', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], ['totally-invalid'], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with a non-existing group manager does not succeed
         */
        it('verify that group creation fails if an unknown user is specified as manager', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', ['u:camtest:totally-unknown'], [], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with a non-existing group member does not succeed
         */
        it('verify that group creation fails if an unknown user is specified as member', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], ['u:camtest:totally-unknown'], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that anonymous users cannot create groups
         */
        it('verify anonymous group creation', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(anonymousRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 401);
                callback();
            });
        });

        /**
         * Test that verifies that a list of members and meanagers can be passed in during group creation
         */
        it('verify that members can be specified on group creation', function(callback) {
            // Create 2 users.
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var janeUserId = TestsUtil.generateTestUserId('jane');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'John Doe', null, function(err, jack) {
                assert.ok(!err);
                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'Jane Doe', null, function(err, jane) {
                    assert.ok(!err);

                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [jane.id], [jack.id], function(err, groupObj) {
                        assert.ok(!err);
                        assert.ok(groupObj.id);
                        assert.equal(groupObj.displayName, 'Group title');
                        assert.equal(groupObj.resourceType, 'group');
                        assert.equal(groupObj.profilePath, '/group/' + groupObj.id);
                        // Get the members of this group.
                        RestAPI.Group.getGroupMembers(johnRestContext, groupObj.id, undefined, undefined, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.results.length, 3);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(members.results, function(member) { return member.profile.id; });
                            assert.equal(hash[jack.id][0].role, 'member');
                            assert.equal(hash[jane.id][0].role, 'manager');
                            assert.equal(hash[johnRestContext.id][0].role, 'manager');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a group cannot be created with an alias that is already in use
         */
        it('verify that group creation with duplicate alias fails', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.ok(groupObj.id);
                assert.equal(groupObj.displayName, 'Group title');
                assert.equal(groupObj.resourceType, 'group');
                assert.equal(groupObj.profilePath, '/group/' + groupObj.id);
                // Create the same one again, should fail.
                RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

    });

    
    describe('Get group', function() {

        /**
         * Test that verifies that an existing group can be successfully retrieved
         */
        it('verify group properties', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, groupObj) {
                assert.ok(!err);
                RestAPI.Group.getGroup(johnRestContext, groupObj.id, function(err, groupData) {
                    assert.ok(!err);
                    assert.ok(groupData.isMember);
                    assert.ok(groupData.isManager);
                    assert.equal(groupData.alias, groupId);
                    assert.equal(groupData.displayName, 'Group title');
                    assert.equal(groupData.description, 'Group description');
                    assert.equal(groupData.visibility, 'private');
                    assert.equal(groupData.joinable, 'request');
                    assert.equal(groupData.resourceType, 'group');
                    assert.equal(groupObj.profilePath, '/group/' + groupObj.id);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a non-existing group cannot be retrieved
         */
        it('verify non existing group', function(callback) {
            // Invalid group identifier
            RestAPI.Group.getGroup(johnRestContext, 'totally-unknown', function(err, groupData) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!groupData);

                // Non existing group
                RestAPI.Group.getGroup(johnRestContext, 'g:camtest:totally-unknown', function(err, groupData) {
                    assert.ok(err);
                    assert.equal(err.code, 404);
                    assert.ok(!groupData);
                    callback();
                });
            });
        });
        
        /**
         * Test that verifies that the isMember and isManager property is properly set on the 
         * group profile in different situations
         */
        it('verify isMember and isManager', function(callback) {
            // Create 3 users.
            // We'll make jane a group manager and jack a group member
            // Joe won't be a member of the group.
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var janeUserId = TestsUtil.generateTestUserId('jane');
            var joeUserId = TestsUtil.generateTestUserId('joe');

            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'John Doe', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'Jane Doe', null, function(err, jane) {
                    assert.ok(!err);
                    var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUserId, 'password');

                    RestAPI.User.createUser(camAdminRestContext, joeUserId, 'password', 'Joe Doe', null, function(err, joe) {
                        assert.ok(!err);
                        var joeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, joeUserId, 'password');

                        // Create a group in which Jane is a manager and Jack is a member
                        var groupId = TestsUtil.generateTestGroupId();
                        RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [jane.id], [jack.id], function(err, newGroup) {
                            assert.ok(!err);

                            // For each of the users, check the appropriate value of the isMember and isManager property
                            RestAPI.Group.getGroup(johnRestContext, newGroup.id, function(err, groupData) {
                                assert.ok(!err);
                                assert.ok(groupData.isMember);
                                assert.ok(groupData.isManager);

                                RestAPI.Group.getGroup(jackRestContext, newGroup.id, function(err, groupData) {
                                    assert.ok(!err);
                                    assert.ok(groupData.isMember);
                                    assert.ok(!groupData.isManager);
                                    
                                    RestAPI.Group.getGroup(janeRestContext, newGroup.id, function(err, groupData) {
                                        assert.ok(!err);
                                        assert.ok(groupData.isMember);
                                        assert.ok(groupData.isManager);
                                        
                                        RestAPI.Group.getGroup(joeRestContext, newGroup.id, function(err, groupData) {
                                            assert.ok(!err);
                                            assert.ok(!groupData.isMember);
                                            assert.ok(!groupData.isManager);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });


    describe('Update group', function() {

        /**
         * Test that verifies that a group can be successfully update with multiple fields
         * at the same time
         */
        it ('verify successful update', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                var profileFields = {
                    'displayName': 'new group name',
                    'description': 'new group description',
                    'visibility': 'loggedin',
                    'joinable': 'yes'
                };
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, profileFields, function(err) {
                    assert.ok(!err);
                    RestAPI.Group.getGroup(johnRestContext, newGroup.id, function(err, group) {
                        assert.ok(!err);
                        assert.equal(group.id, newGroup.id);
                        assert.equal(group.displayName, 'new group name');
                        assert.equal(group.description, 'new group description');
                        assert.equal(group.visibility, 'loggedin');
                        assert.equal(group.joinable, 'yes');
                        assert.equal(group.resourceType, 'group');
                        assert.equal(group.profilePath, '/group/' + group.id);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that updating a group with no parameters fails
         */
        it ('verify no parameters', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, {}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that an unrecognized joinability option causes the update to fail
         */
        it ('verify invalid joinable', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, {'joinable': 'invalid'}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that an unrecognized visibility option causes the update to fail
         */
        it('verify invalid visibility', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, {'visibility': 'invalid'}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a non-manager of a group cannot update the group
         */
        it('verify updating as a non-manager is not allowed', function(callback) {
            // We create 2 users. Jack will be a member, Jane will not be a member
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var janeUserId = TestsUtil.generateTestUserId('jane');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'John Doe', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'Jane Doe', null, function(err, jane) {
                    assert.ok(!err);
                    var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUserId, 'password');

                    // Create the group with Jack as a member
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [jack.id], function(err, newGroup) {
                        assert.ok(!err);
        
                        // Try to update the group as a member
                        RestAPI.Group.updateGroup(jackRestContext, newGroup.id, {'visibility': 'public'}, function(err) {
                            assert.equal(err.code, 401);
                            // Try to update the group as a non-member
                            RestAPI.Group.updateGroup(janeRestContext, newGroup.id, {'visibility': 'public'}, function(err) {
                                assert.equal(err.code, 401);
                                // Try to update the group as an anonymous user
                                RestAPI.Group.updateGroup(TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host), newGroup.id, {'visibility': 'public'}, function(err) {
                                    assert.equal(err.code, 401);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

    });

    
    describe('Get group members', function() {
        
        /**
         * Test that verifies that all group managers and members are returned appropriately
         */
        it('verify get group members', function(callback) {
            // Create 3 manager users
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, managerUsers) {
                assert.ok(!err);
                var managerUserIds = _.keys(managerUsers);
                // Create 3 member users
                TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, memberUsers) {
                    assert.ok(!err);
                    var memberUserIds = _.keys(memberUsers);
                    // Create the actual group
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', managerUserIds, memberUserIds, function(err, newGroup) {
                        assert.ok(!err);
                        // Get the group members
                        RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, 10, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.results.length, 7);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(members.results, function(member) { return member.profile.id; });
                            // Make sure that all of the expected members are there
                            assert.equal(hash[johnRestContext.id][0].role, 'manager');
                            assert.equal(hash[managerUserIds[0]][0].role, 'manager');
                            assert.equal(hash[managerUserIds[1]][0].role, 'manager');
                            assert.equal(hash[managerUserIds[2]][0].role, 'manager');
                            assert.equal(hash[memberUserIds[0]][0].role, 'member');
                            assert.equal(hash[memberUserIds[1]][0].role, 'member');
                            assert.equal(hash[memberUserIds[2]][0].role, 'member');
                            callback();
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that the group members of a non-existing group cannot be retrieved
         */
        it('verify non existing group', function(callback) {
            RestAPI.Group.getGroupMembers(johnRestContext, 'g:camtest:totally-unknown', null, null, function(err, members) {
                assert.equal(err.code, 404);
                callback();
            });
        });
        
        /**
         * Test that verifies that group members of private groups are only returned for members of that group. Non-members
         * should not be able to see the list of members
         */
        it('verify private membership visibility', function(callback) {
            // Create the user
            var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
            RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'tr123', null, function(err, branden) {
                assert.ok(!err);
                var brandenRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, brandenUserId, 'password');

                // Create a group
                RestAPI.Group.createGroup(johnRestContext, 'non-canadians', "Non-Canadians", "Group", 'private', 'yes', [], [], function(err, nonCanadiansGroup) {
                    assert.ok(!err);

                    // Branden should not be able to see the group members
                    RestAPI.Group.getGroupMembers(brandenRestContext, nonCanadiansGroup.id, null, null, function(err, members) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        assert.ok(!members);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that group members of loggedin groups are only returned for those who are logged in to the group's
         * tenant.
         */
        it('verify loggedin membership visibility', function(callback) {
            var tenantAliasB = TestsUtil.generateTestUserId();
            var usernameA = TestsUtil.generateTestUserId();
            var usernameA2 = TestsUtil.generateTestUserId();
            var groupNameA = TestsUtil.generateTestUserId();

            // Create user in tenant A
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                RestAPI.User.createUser(camAdminRestContext, usernameA2, 'password', 'Public User', null, function(err, userA2) {
                    assert.ok(!err);
                    var restCtxA2 = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA2, 'password');

                    // Create a "loggedin" group in tenant A
                    RestAPI.Group.createGroup(restCtxA, groupNameA, groupNameA, groupNameA, 'loggedin', 'no', [], [], function(err, groupA) {
                        assert.ok(!err);

                        // Ensure user A2 can see userA in the members list
                        RestAPI.Group.getGroupMembers(restCtxA2, groupA.id, null, 10, function(err, members) {
                            assert.ok(!err);
                            assert.ok(members);
                            assert.equal(members.results.length, 1);
                            assert.equal(members.results[0].profile.id, userA.id);

                            var usernameB = TestsUtil.generateTestUserId();

                            // Create user in tenant B
                            RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', null, function(err, userB) {
                                assert.ok(!err);
                                restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                                // Verify userB cannot see userA as a member of groupA
                                RestAPI.Group.getGroupMembers(restCtxB, groupA.id, null, 10, function(err, members) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                                    assert.ok(!members);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that group members of public groups are returned for users who are not logged in to the group's tenant
         */
        it('verify public membership visibility', function(callback) {
            var usernameA = TestsUtil.generateTestUserId();
            var usernameA2 = TestsUtil.generateTestUserId();
            var groupNameA = TestsUtil.generateTestUserId();

            // Create user in tenant A
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                RestAPI.User.createUser(camAdminRestContext, usernameA2, 'password', 'Public User', null, function(err, userA2) {
                    assert.ok(!err);
                    var restCtxA2 = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA2, 'password');

                    // Create a "loggedin" group in tenant A, with userA as a member
                    RestAPI.Group.createGroup(restCtxA, groupNameA, groupNameA, groupNameA, 'public', 'no', [], [userA.id], function(err, groupA) {
                        assert.ok(!err);

                        // Ensure user A2 can see userA in the members list
                        RestAPI.Group.getGroupMembers(restCtxA2, groupA.id, null, 10, function(err, members) {
                            assert.ok(!err);
                            assert.ok(members);
                            assert.equal(members.results.length, 1);
                            assert.equal(members.results[0].profile.id, userA.id);

                            var usernameB = TestsUtil.generateTestUserId();

                            // Create user in tenant B
                            RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', null, function(err, userB) {
                                assert.ok(!err);
                                var restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                                // Verify userB cann see userA as a member of groupA
                                RestAPI.Group.getGroupMembers(restCtxB, groupA.id, null, 10, function(err, members) {
                                    assert.ok(!err);
                                    assert.ok(members);
                                    assert.equal(members.results.length, 1);
                                    assert.equal(members.results[0].profile.id, userA.id);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that group member who is part of an external tenant (a tenant was changed from public to private)
         * can still access the group members view of an external group that belongs to a private tenant
         */
        it('verify user can see group membership to which he is a member in an external private tenant', function(callback) {
            var tenantAliasB = TestsUtil.generateTestUserId();
            var usernameA = TestsUtil.generateTestUserId();
            var groupNameB = TestsUtil.generateTestUserId();

            // Create user in tenant A
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                // Create tenant B
                TestsUtil.createTenantWithAdmin(tenantAliasB, tenantAliasB, function(err, tenantB, adminRestCtxB) {
                    assert.ok(!err);
                    var usernameB = TestsUtil.generateTestUserId();

                    // Create user in tenant B
                    RestAPI.User.createUser(adminRestCtxB, usernameB, 'password', 'Private User', null, function(err, userB) {
                        assert.ok(!err);
                        var restCtxB = TestsUtil.createTenantRestContext(tenantAliasB, usernameB, 'password');

                        // Create a "loggedin" group in tenant B, with userB and userA as a member
                        RestAPI.Group.createGroup(restCtxB, groupNameB, groupNameB, groupNameB, 'loggedin', 'no', [], [userA.id, userB.id], function(err, groupB) {
                            assert.ok(!err);

                            // Make tenant B private
                            ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenantAliasB, 'oae-tenants/tenantprivacy/tenantprivate', true, function(err) {
                                assert.ok(!err);

                                // Ensure user B can still see the memberships, even though the tenans has been "barred"
                                RestAPI.Group.getGroupMembers(restCtxB, groupB.id, null, 10, function(err, members) {
                                    assert.ok(!err);
                                    assert.ok(members);
                                    assert.equal(members.results.length, 2);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that group members are page appropriately and are sorted by userid
         */
        it('verify paging', function(callback) {
            // Create 10 users and get pages of 4.
            TestsUtil.generateTestUsers(camAdminRestContext, 10, function(err, createdUsers) {
                assert.ok(!err);
                var userIds = _.keys(createdUsers);

                // Add them to a group.
                var groupId = TestsUtil.generateTestGroupId();
                RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], userIds, function(err, newGroup) {

                    var shouldBeSortedArray = [];
                    RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, 4, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.results.length, 4);
                        for (var i = 0; i < 4; i++) {
                            shouldBeSortedArray.push(members.results[i].profile.id);
                        }
                        RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, members.results[3].profile.id, 4, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.results.length, 4);
                            for (var i = 0; i < 4; i++) {
                                shouldBeSortedArray.push(members.results[i].profile.id);
                            }
                            // Get the remaining 3
                            RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, members.results[3].profile.id, 4, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.results.length, 3);
                                for (var i = 0; i < 3; i++) {
                                    shouldBeSortedArray.push(members.results[i].profile.id);
                                }

                                // Make sure the shouldBeSortedArray is actually sorted.
                                for (var j = 1; j < shouldBeSortedArray.length;j++) {
                                    if (shouldBeSortedArray[j-1] > shouldBeSortedArray[j]) {
                                        assert.fail('The members did not return in a sorted fashion.');
                                    }
                                }
                                callback();
                            });
                        });
                    });
                
                });
            });
        });

        /**
         * Test that verifies that passing an invalid number of results that should be returned causes the
         * request to fail
         */
        it('verify parameter validation', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, 'totally-not-a-number', function(err, members) {
                    assert.equal(err.code, 400);
                    RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, -10, function(err, members) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a default number of 10 users are returned when no page limit has been
         * specified
         */
        it('verify default 10 members', function(callback) {
            // Create 15 users and retrieve a single page.
            // This should contain 10 members.
            TestsUtil.generateTestUsers(camAdminRestContext, 15, function(err, createdUsers) {
                assert.ok(!err);
                var userIds = _.keys(createdUsers);
                // Add them to a group.
                var groupId = TestsUtil.generateTestGroupId();
                RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], userIds, function(err, newGroup) {
                    RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, null, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.results.length, 10);
                        callback();
                    });
                });
            });
        });

    });


    describe('Set group members', function() {

        /**
         * Test that verifies that users who are not a manager of a group cannot add/remove members to that group
         */
        it('verify simple member adding', function(callback) {
            // Create a first user to use inside of test
            var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
            RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'Branden Visser', null, function(err, branden) {
                assert.ok(!err);
                var brandenRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, brandenUserId, 'password');
                // Create a second user to use inside of test
                var nicolaasUserId = TestsUtil.generateTestUserId('nicolaas');
                RestAPI.User.createUser(camAdminRestContext, nicolaasUserId, 'password', 'Nicolaas Matthijs', null, function(err, nicolaas) {
                    assert.ok(!err);
                    var nicolaasRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, nicolaasUserId, 'password');

                    // Create a group
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Test Group', "Group", 'public', 'yes', [], [], function(err, groupObj) {
                        assert.ok(!err);
                        
                        // Try and add a user as a non-member
                        var membersToAdd = {};
                        membersToAdd[nicolaas.id] = 'member';
                        RestAPI.Group.setGroupMembers(brandenRestContext, groupObj.id, membersToAdd, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                            // Verify that the user has not been added
                            RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, groupMemberships) {
                                assert.ok(!err);
                                assert.equal(groupMemberships.results.length, 0);
                                
                                // Add branden as a member, and make sure that he still cannot add a member
                                membersToAdd = {};
                                membersToAdd[branden.id] = 'member';
                                RestAPI.Group.setGroupMembers(johnRestContext, groupObj.id, membersToAdd, function(err) {
                                    assert.ok(!err);
                                    // Try to add nicolaas as a member
                                    membersToAdd = {};
                                    membersToAdd[nicolaas.id] = 'member';
                                    RestAPI.Group.setGroupMembers(brandenRestContext, groupObj.id, membersToAdd, function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 401);
                                        // Verify that the user has not been added
                                        RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, groupMemberships) {
                                            assert.ok(!err);
                                            assert.equal(groupMemberships.results.length, 0);
                                            
                                            // Add branden a manager, and make sure that he can add a member
                                            membersToAdd = {};
                                            membersToAdd[branden.id] = 'manager';
                                            RestAPI.Group.setGroupMembers(johnRestContext, groupObj.id, membersToAdd, function(err) {
                                                assert.ok(!err);
                                                // Try to add nicolaas as a member
                                                membersToAdd = {};
                                                membersToAdd[nicolaas.id] = 'member';
                                                RestAPI.Group.setGroupMembers(brandenRestContext, groupObj.id, membersToAdd, function(err) {
                                                    assert.ok(!err);
                                                    // Verify that the user has not been added
                                                    RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, groupMemberships) {
                                                        assert.ok(!err);
                                                        assert.equal(groupMemberships.results.length, 1);
                                                        assert.equal(groupMemberships.results[0].id, groupObj.id);

                                                        // Verify that members can be removed
                                                        membersToAdd = {};
                                                        membersToAdd[nicolaas.id] = false;
                                                        RestAPI.Group.setGroupMembers(brandenRestContext, groupObj.id, membersToAdd, function(err) {
                                                            assert.ok(!err);
                                                            // Verify that the user has been removed as a number
                                                            RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, groupMemberships) {
                                                                assert.ok(!err);
                                                                assert.equal(groupMemberships.results.length, 0);
                                                                callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that adding/removing multiple members at the same time is possible
         */
        it('verify combination of roles is possible', function(callback) {
            // Create 3 users.
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var janeUserId = TestsUtil.generateTestUserId('jane');
            var joeUserId = TestsUtil.generateTestUserId('joe');

            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'John Doe', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'Jane Doe', null, function(err, jane) {
                    assert.ok(!err);
                    var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUserId, 'password');

                    RestAPI.User.createUser(camAdminRestContext, joeUserId, 'password', 'Joe Doe', null, function(err, joe) {
                        assert.ok(!err);
                        var joeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, joeUserId, 'password');

                        // Create the test group
                        var groupId = TestsUtil.generateTestGroupId();
                        RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, newGroup) {
                            assert.ok(!err);
                            
                            // Add 3 members at the same time, using a combination of roles
                            var membersToAdd = {};
                            membersToAdd[jack.id] = 'member';
                            membersToAdd[jane.id] = 'manager';
                            membersToAdd[joe.id] = 'member';
                            RestAPI.Group.setGroupMembers(johnRestContext, newGroup.id, membersToAdd, function(err) {
                                assert.ok(!err);
                                
                                // Verify that each member has the correct role
                                RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, null, function(err, members) {
                                    assert.ok(!err);
                                    assert.equal(members.results.length, 4);
                                    // Morph results to hash for easy access.
                                    var hash = _.groupBy(members.results, function(member) { return member.profile.id; });
                                    assert.equal(hash[johnRestContext.id][0].role, 'manager');
                                    assert.equal(hash[jack.id][0].role, 'member');
                                    assert.equal(hash[jane.id][0].role, 'manager');
                                    assert.equal(hash[joe.id][0].role, 'member');
                                    
                                    // Make sure that the group shows up in Joe's membership list
                                    RestAPI.Group.memberOf(joeRestContext, joe.id, null, null, function(err, memberships) {
                                        assert.ok(!err);
                                        assert.equal(memberships.results.length, 1);
                                        assert.equal(memberships.results[0].id, newGroup.id);
                                        
                                        // Delete Joe and make Jane a member
                                        membersToAdd = {};
                                        membersToAdd[jane.id] = 'member';
                                        membersToAdd[joe.id] = false;
                                        RestAPI.Group.setGroupMembers(johnRestContext, newGroup.id, membersToAdd, function(err) {
                                            assert.ok(!err);
                                            
                                            // Make sure that the membership changes have happened
                                            RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, null, function(err, members) {
                                                assert.ok(!err);
                                                assert.equal(members.results.length, 3);
                                                // Morph results to hash for easy access.
                                                var hash = _.groupBy(members.results, function(member) { return member.profile.id; });
                                                assert.equal(hash[johnRestContext.id][0].role, 'manager');
                                                assert.equal(hash[jack.id][0].role, 'member');
                                                assert.equal(hash[jane.id][0].role, 'member');
                                                assert.equal(hash[joe.id], undefined);
                                                
                                                // Make sure that the group does not show up in Joe's membership list
                                                RestAPI.Group.memberOf(joeRestContext, joe.id, null, null, function(err, memberships) {
                                                    assert.ok(!err);
                                                    assert.equal(memberships.results.length, 0);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that it should not be possible to add members as an unprivileged user
         */
        it('verify add members no access', function(callback) {
            var simonUserId = TestsUtil.generateTestUserId('simong');
            RestAPI.User.createUser(camAdminRestContext, simonUserId, 'password', 'Simon Gaeremynck', null, function(err, simon) {
                assert.ok(!err);
                var simonRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, simonUserId, 'password');
                // Create a second user to use inside of test
                var nicolaasUserId = TestsUtil.generateTestUserId('nicolaas');
                RestAPI.User.createUser(camAdminRestContext, nicolaasUserId, 'password', 'Nicolaas Matthijs', null, function(err, nicolaas) {
                    assert.ok(!err);
                    var nicolaasRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, nicolaasUserId, 'password');
                    
                    // Create a test group
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Test Group', "Group", 'public', 'yes', [], [], function(err, groupObj) {
                        assert.ok(!err);
                        
                        // Try and add nicolaas to the group as an unprivileged user
                        var membersToAdd = {};
                        membersToAdd[nicolaas.id] = 'member';
                        RestAPI.Group.setGroupMembers(simonRestContext, groupObj.id, membersToAdd, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                            // Verify that nicolaas has not been added to the group
                            RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, memberships) {
                                assert.ok(!err);
                                assert.equal(memberships.results.length, 0);
                                
                                // Add simon as a member of the group
                                membersToAdd = {};
                                membersToAdd[simon.id] = 'member';
                                RestAPI.Group.setGroupMembers(johnRestContext, groupObj.id, membersToAdd, function(err) {
                                    assert.ok(!err);
                                    
                                    // Make sure that simon still can't add any members
                                    membersToAdd = {};
                                    membersToAdd[nicolaas.id] = 'member';
                                    RestAPI.Group.setGroupMembers(simonRestContext, groupObj.id, membersToAdd, function(err) {
                                        assert.ok(err);
                                        // Verify that nicolaas has not been added to the group
                                        RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, memberships) {
                                            assert.ok(!err);
                                            assert.equal(memberships.results.length, 0);
                                    
                                            // Add simon as a manager of the group
                                            membersToAdd = {};
                                            membersToAdd[simon.id] = 'manager';
                                            RestAPI.Group.setGroupMembers(johnRestContext, groupObj.id, membersToAdd, function(err) {
                                                assert.ok(!err);
                                                
                                                // Verify that simon can now add members to the group
                                                membersToAdd = {};
                                                membersToAdd[nicolaas.id] = 'member';
                                                RestAPI.Group.setGroupMembers(simonRestContext, groupObj.id, membersToAdd, function(err) {
                                                    assert.ok(!err);
                                                    // Verify that nicolaas has been added to the group
                                                    RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, memberships) {
                                                        assert.ok(!err);
                                                        assert.equal(memberships.results.length, 1);
                                                        assert.equal(memberships.results[0].id, groupObj.id);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test to verify that it should be possible for an indirect manager to add members
         */
        it('verify add members indirect access', function(callback) {
            // Create a first user to use inside of test
            var simonUserId = TestsUtil.generateTestUserId('simong');
            RestAPI.User.createUser(camAdminRestContext, simonUserId, 'password', 'Simon Gaeremynck', null, function(err, simon) {
                assert.ok(!err);
                var simonRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, simonUserId, 'password');
                // Create a second user to use inside of test
                var nicolaasUserId = TestsUtil.generateTestUserId('nicolaas');
                RestAPI.User.createUser(camAdminRestContext, nicolaasUserId, 'password', 'Nicolaas Matthijs', null, function(err, nicolaas) {
                    assert.ok(!err);
                    var nicolaasRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, nicolaasUserId, 'password');
                    
                    // Create the base group
                    var managedByCambridgeGroupId = TestsUtil.generateTestGroupId('managed-by-cambridge');
                    RestAPI.Group.createGroup(johnRestContext, managedByCambridgeGroupId, 'Test Group', "Group", 'public', 'yes', [], [], function(err, managedByCambridge) {
                        assert.ok(!err);
            
                        // Create the "Cambridge" group that will manage the Managed-by-cambridge group
                        var cambridgeGroupId = TestsUtil.generateTestGroupId('cambridge');
                        RestAPI.Group.createGroup(johnRestContext, cambridgeGroupId, 'Test Group', "Group", 'public', 'yes', [], [], function(err, cambridge) {
                            assert.ok(!err);
            
                            // Make the "Cambridge" group a manager of the Managed-by-cambridge group
                            var membersToAdd = {};
                            membersToAdd[cambridge.id] = 'manager';
                            RestAPI.Group.setGroupMembers(johnRestContext, managedByCambridge.id, membersToAdd, function(err) {
                                assert.ok(!err);
                                
                                // Make "simon" a member of the "Cambridge" group, then verify he can manage "Managed-by-cambridge"
                                membersToAdd = {};
                                membersToAdd[simon.id] = 'member';
                                RestAPI.Group.setGroupMembers(johnRestContext, cambridge.id, membersToAdd, function(err) {
                                    assert.ok(!err);
                                    
                                    // Check if "simon" can manage the "Managed-by-cambridge" group through the internal Authz API
                                    AuthzAPI.hasRole(simon.id, managedByCambridge.id, 'manager', function(err, isAllowed) {
                                        assert.ok(!err);
                                        assert.equal(isAllowed, true);
                                        
                                        // Verify that "simon" can add someone to the "Managed-by-cambridge" group
                                        membersToAdd = {};
                                        membersToAdd[nicolaas.id] = 'member';
                                        RestAPI.Group.setGroupMembers(simonRestContext, managedByCambridge.id, membersToAdd, function(err) {
                                            assert.ok(!err);
                                            
                                            // Verify that the "nicolaas" has been added to the group
                                            RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, memberships) {
                                                assert.ok(!err);
                                                assert.equal(memberships.results.length, 1);
                                                assert.equal(memberships.results[0].id, managedByCambridge.id);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify that non-existing users and/or groups cannot be added as members to a group
         */
        it('verify that non-existing principals cannot be added to a group', function(callback) {
            var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
            RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'Branden Visser', null, function(err, branden) {
                assert.ok(!err);
            
                // Create the group
                var groupId = TestsUtil.generateTestGroupId();
                RestAPI.Group.createGroup(johnRestContext, groupId, 'Public Group', 'This is a test group', 'public', 'yes', [], [], function(err, groupObj) {
                    assert.ok(!err);
                    
                    // Try to add an existing and non-existing user
                    var membersToAdd = {};
                    membersToAdd[branden.id] = 'member';
                    membersToAdd['u:camtest:non-existing'] = 'member';
                    RestAPI.Group.setGroupMembers(johnRestContext, groupObj.id, membersToAdd, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Make sure that the request hasn't gone through
                        RestAPI.Group.getGroupMembers(johnRestContext, groupObj.id, null, null, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.results.length, 1);
                            assert.equal(members.results[0].profile.id, johnRestContext.id);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that it is not possible for a group to be added of a member of itself
         */
        it('verify that a group cannot be made a member of itself', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, "Public group", "This is a test group", 'public', 'yes', [], {}, function(err, groupObj) {
                assert.ok(!err);
                    
                // Try to add the group as a member to itself
                var membersToAdd = {};
                membersToAdd[groupObj.id] = 'member';
                RestAPI.Group.setGroupMembers(johnRestContext, groupObj.id, membersToAdd, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that it's not possible to remove all the managers of a group.
         */
        it('verify that a group always has at least 1 manager', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users) {
                assert.ok(!err);
                var contexts = _.values(users);
                var simon = contexts[0];
                var branden = contexts[1];
                var nico = contexts[2];
                var bert = contexts[3];

                // Make Simon & Branden a manager and Bert & Nico members.
                var groupId = TestsUtil.generateTestGroupId();
                RestAPI.Group.createGroup(branden.restContext, groupId, "Public group", "This is a test group", 'public', 'yes', [simon.user.id], [nico.user.id, bert.user.id], function(err, groupObj) {
                    assert.ok(!err);

                    // Try to make everyone a member.
                    var members = {};
                    members[simon.user.id] = 'member';
                    members[branden.user.id] = 'member';
                    members[nico.user.id] = 'member';
                    members[bert.user.id] = 'member';
                    RestAPI.Group.setGroupMembers(simon.restContext, groupObj.id, members, function(err) {
                        assert.equal(err.code, 400);

                        // Try to remove everyone.
                        var members = {};
                        members[simon.user.id] = false;
                        members[branden.user.id] = false;
                        members[nico.user.id] = false;
                        members[bert.user.id] = false;
                        RestAPI.Group.setGroupMembers(simon.restContext, groupObj.id, members, function(err) {
                            assert.equal(err.code, 400);

                            // Try to remove just the managers.
                            var members = {};
                            members[simon.user.id] = false;
                            members[branden.user.id] = false;
                            RestAPI.Group.setGroupMembers(simon.restContext, groupObj.id, members, function(err) {
                                assert.ok(err.code, 400);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify that a group that is part of a public tenant can add a user member from an external public tenant', function(callback) {
            var usernameA = TestsUtil.generateTestUserId();
            var usernameA2 = TestsUtil.generateTestUserId();
            var groupNameA = TestsUtil.generateTestUserId();

            // Create user in tenant A
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                RestAPI.User.createUser(camAdminRestContext, usernameA2, 'password', 'Public User', null, function(err, userA2) {
                    assert.ok(!err);
                    var restCtxA2 = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA2, 'password');

                    // Create a "loggedin" group in tenant A, with userA as a member
                    RestAPI.Group.createGroup(restCtxA, groupNameA, groupNameA, groupNameA, 'loggedin', 'no', [], [], function(err, groupA) {
                        assert.ok(!err);

                        // Ensure user A2 can see userA in the members list
                        RestAPI.Group.getGroupMembers(restCtxA2, groupA.id, null, 10, function(err, members) {
                            assert.ok(!err);
                            assert.ok(members);
                            assert.equal(members.results.length, 1);
                            assert.equal(members.results[0].profile.id, userA.id);

                            var usernameB = TestsUtil.generateTestUserId();

                            // Create user in tenant B
                            RestAPI.User.createUser(gtAdminRestContext, usernameB, 'password', 'Private User', null, function(err, userB) {
                                assert.ok(!err);
                                var restCtxB = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, usernameB, 'password');

                                // Verify userB cannot see userA as a member of groupA
                                RestAPI.Group.getGroupMembers(restCtxB, groupA.id, null, 10, function(err, members) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify that a group that is part of a public tenant cannot add a user from an external private tenant', function(callback) {
            var usernameB = TestsUtil.generateTestUserId();
            var tenantAliasB = TestsUtil.generateTestUserId();
            var usernameA = TestsUtil.generateTestUserId();
            var usernameA2 = TestsUtil.generateTestUserId();
            var groupNameA = TestsUtil.generateTestUserId();

            // Create user in tenant A
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                RestAPI.User.createUser(camAdminRestContext, usernameA2, 'password', 'Public User', null, function(err, userA2) {
                    assert.ok(!err);
                    var restCtxA2 = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA2, 'password');

                    // Create a "public" group in tenant A, with userA as a member
                    RestAPI.Group.createGroup(restCtxA, groupNameA, groupNameA, groupNameA, 'public', 'no', [], [], function(err, groupA) {
                        assert.ok(!err);

                        // Ensure user A2 can see userA in the members list
                        RestAPI.Group.getGroupMembers(restCtxA2, groupA.id, null, 10, function(err, members) {
                            assert.ok(!err);
                            assert.ok(members);
                            assert.equal(members.results.length, 1);
                            assert.equal(members.results[0].profile.id, userA.id);

                            // Create tenant B
                            TestsUtil.createTenantWithAdmin(tenantAliasB, tenantAliasB, function(err, tenantB, adminRestCtxB) {
                                assert.ok(!err);

                                // Create user in tenant B
                                RestAPI.User.createUser(adminRestCtxB, usernameB, 'password', 'Private User', null, function(err, userB) {
                                    assert.ok(!err);
                                    var restCtxB = TestsUtil.createTenantRestContext(tenantAliasB, usernameB, 'password');

                                    // Make tenant B private
                                    ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenantAliasB, 'oae-tenants/tenantprivacy/tenantprivate', true, function(err) {
                                        assert.ok(!err);

                                        // Verify we can't add userB as a member of groupA.
                                        newMemberB = {};
                                        newMemberB[userB.id] = 'member';
                                        RestAPI.Group.setGroupMembers(restCtxA, groupA.id, newMemberB, function(err) {
                                            assert.ok(err);
                                            assert.equal(err.code, 400);

                                            // Verify userB is not added to the group
                                            RestAPI.Group.getGroupMembers(restCtxB, groupA.id, null, 10, function(err, members) {
                                                assert.ok(!err);
                                                assert.equal(members.results.length, 1);
                                                assert.equal(members.results[0].profile.id, userA.id);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify that a group that is part of a private tenant cannot add a user from an external public tenant', function(callback) {
            var usernameB = TestsUtil.generateTestUserId();
            var tenantAliasB = TestsUtil.generateTestUserId();
            var usernameA = TestsUtil.generateTestUserId();
            var usernameA2 = TestsUtil.generateTestUserId();
            var groupNameB = TestsUtil.generateTestUserId();

            // Create user in tenant A
            RestAPI.User.createUser(camAdminRestContext, usernameA, 'password', 'Public User', null, function(err, userA) {
                assert.ok(!err);
                var restCtxA = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA, 'password');

                RestAPI.User.createUser(camAdminRestContext, usernameA2, 'password', 'Public User', null, function(err, userA2) {
                    assert.ok(!err);
                    var restCtxA2 = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, usernameA2, 'password');

                    // Create tenant B
                    TestsUtil.createTenantWithAdmin(tenantAliasB, tenantAliasB, function(err, tenantB, adminRestCtxB) {
                        assert.ok(!err);

                        // Create user in tenant B
                        RestAPI.User.createUser(adminRestCtxB, usernameB, 'password', 'Private User', null, function(err, userB) {
                            assert.ok(!err);
                            var restCtxB = TestsUtil.createTenantRestContext(tenantAliasB, usernameB, 'password');

                            // Create a "public" group in tenant B
                            RestAPI.Group.createGroup(restCtxB, groupNameB, groupNameB, groupNameB, 'public', 'no', [], [], function(err, groupB) {
                                assert.ok(!err);

                                // Make tenant B private
                                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenantAliasB, 'oae-tenants/tenantprivacy/tenantprivate', true, function(err) {
                                    assert.ok(!err);

                                    // Verify we can't add userA as a member of groupA.
                                    newMemberA = {};
                                    newMemberA[userA.id] = 'member';
                                    RestAPI.Group.setGroupMembers(restCtxB, groupB.id, newMemberA, function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);

                                        // Verify userB cannot see userA as a member of groupA
                                        RestAPI.Group.getGroupMembers(restCtxB, groupB.id, null, 10, function(err, members) {
                                            assert.ok(!err);
                                            assert.equal(members.results.length, 1);
                                            assert.equal(members.results[0].profile.id, userB.id);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of leaving a group
         */
        it('verify validation and success of leaving a group', function(callback) {

            // Create a first user to setup the test
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'Jack', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');

                // Create a user as our test subject
                RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'Branden Visser', null, function(err, branden) {
                    assert.ok(!err);
                    var brandenRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, brandenUserId, 'password');

                    // Create a group that is joinable
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(jackRestContext, groupId, 'Test Group', 'Group', 'public', 'yes', [], [], function(err, group) {
                        assert.ok(!err);

                        // Verify cannot leave group of which I am not a member
                        RestAPI.Group.leaveGroup(brandenRestContext, group.id, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            // Now join the group
                            RestAPI.Group.joinGroup(brandenRestContext, group.id, function(err) {
                                assert.ok(!err);

                                // Verify not a valid id
                                RestAPI.Group.leaveGroup(brandenRestContext, 'not-a-valid-id', function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Verify a non-group id
                                    RestAPI.Group.leaveGroup(brandenRestContext, branden.id, function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);

                                        // Verify anonymous user cannot leave
                                        RestAPI.Group.leaveGroup(anonymousRestContext, group.id, function(err) {
                                            assert.ok(err);
                                            assert.equal(err.code, 401);

                                            // Verify branden is still a member
                                            RestAPI.Group.getGroupMembers(brandenRestContext, group.id, null, 10000, function(err, members) {
                                                assert.ok(!err);
                                                assert.equal(members.results.length, 2);

                                                // Verify successful leave
                                                RestAPI.Group.leaveGroup(brandenRestContext, group.id, function(err) {
                                                    assert.ok(!err);

                                                    // Verify only jack is a member
                                                    RestAPI.Group.getGroupMembers(brandenRestContext, group.id, null, 10000, function(err, members) {
                                                        assert.ok(!err);
                                                        assert.equal(members.results.length, 1);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of joining a group
         */
        it('verify validation and success of joining a group', function(callback) {

            // Create a first user to setup the test
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'Jack', null, function(err, jack) {
                assert.ok(!err);
                var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUserId, 'password');

                // Create a user as our test subject
                RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'Branden Visser', null, function(err, branden) {
                    assert.ok(!err);
                    var brandenRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, brandenUserId, 'password');

                    // Create a group that is not joinable
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(jackRestContext, groupId, 'Test Group', 'Group', 'public', 'request', [], [], function(err, group) {
                        assert.ok(!err);

                        // Validate invalid group id
                        RestAPI.Group.joinGroup(brandenRestContext, 'not-a-valid-id', function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            // Validate non-group group id
                            RestAPI.Group.joinGroup(brandenRestContext, branden.id, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Validate non-joinable group
                                RestAPI.Group.joinGroup(brandenRestContext, group.id, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);

                                    // Make group joinable
                                    RestAPI.Group.updateGroup(jackRestContext, group.id, {'joinable': 'yes'}, function(err) {
                                        assert.ok(!err);

                                        // Join as anonymous and verify it still fails
                                        RestAPI.Group.joinGroup(anonymousRestContext, group.id, function(err) {
                                            assert.ok(err);
                                            assert.equal(err.code, 401);

                                            // Verify we still aren't a member
                                            RestAPI.Group.getGroupMembers(jackRestContext, group.id, null, 10000, function(err, members) {
                                                assert.ok(!err);
                                                assert.equal(members.results.length, 1);

                                                // Join as branden, should finally work
                                                RestAPI.Group.joinGroup(brandenRestContext, group.id, function(err) {
                                                    assert.ok(!err);

                                                    // Verify the user was added
                                                    RestAPI.Group.getGroupMembers(jackRestContext, group.id, null, 10000, function(err, members) {
                                                        assert.ok(!err);
                                                        assert.equal(members.results.length, 2);

                                                        // Verify jack cannot join, he is already manager
                                                        RestAPI.Group.joinGroup(jackRestContext, group.id, function(err) {
                                                            assert.ok(err);
                                                            assert.equal(err.code, 400);

                                                            // Verify he was not demoted to member
                                                            RestAPI.Group.getGroupMembers(jackRestContext, group.id, null, 10000, function(err, members) {
                                                                assert.ok(!err);
                                                                assert.equal(members.results.length, 2);
                                                                
                                                                var hadJack = false;
                                                                _.each(members.results, function(result) {
                                                                    if (result.profile.id === jack.id) {
                                                                        hadJack = true;
                                                                        assert.equal(result.role, 'manager');
                                                                    }
                                                                });

                                                                assert.ok(hadJack);
                                                                callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Member of', function() {

        /**
         * Test that verifies that the memberOf function returns all of the groups a user is a member of
         */
        it('verify memberof', function(callback) {
            // Create the users to test with
            var nicolaasUserId = TestsUtil.generateTestUserId('nicolaas');
            RestAPI.User.createUser(camAdminRestContext, nicolaasUserId, 'password', 'Nicolaas Matthijs', null, function(err, nicolaas) {
                assert.ok(!err);
                var nicolaasRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, nicolaasUserId, 'password');
                
                var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
                RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'Branden Visser', null, function(err, branden) {
                    assert.ok(!err);
                    var brandenRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, brandenUserId, 'password');
                
                    // Create 3 groups
                    TestsUtil.generateTestGroups(nicolaasRestContext, 3, function(err, groups) {
                        assert.ok(!err);
                        var groupIds = _.keys(groups);
    
                        // Check that all those groups are part of the memberships
                        RestAPI.Group.memberOf(nicolaasRestContext, nicolaas.id, null, null, function(err, memberships) {
                            assert.ok(!err);
                            assert.equal(memberships.results.length, 3);
                            assert.ok(groupIds.indexOf(memberships.results[0].id) !== -1);
                            assert.ok(groupIds.indexOf(memberships.results[1].id) !== -1);
                            assert.ok(groupIds.indexOf(memberships.results[2].id) !== -1);
                            
                            // Verify that the groups are not part of branden's membership list
                            RestAPI.Group.memberOf(brandenRestContext, branden.id, null, null, function(err, memberships) {
                                assert.ok(!err);
                                assert.equal(memberships.results.length, 0);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that getting the list of members of an empty user doesn't work
         */
        it('verify empty memberof', function(callback) {
            RestAPI.Group.memberOf(anonymousRestContext, null, null, null, function(err, memberships) {
                assert.ok(err);
                callback();
            });
        });

    });


    describe('Group exists', function() {

        /**
         * Test that verifies that checking for an existing group alias works as expected
         */
        it('verify group alias existence', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, "Public group", "This is a test group", 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);

                // Check that the created group exists
                RestAPI.Group.exists(johnRestContext, groupId, function(err, exists) {
                    assert.ok(!err);
                    assert.equal(exists, true);

                    // Check that a non-existing group alias doesn't exist
                    RestAPI.Group.exists(johnRestContext, 'some-none-existing-alias', function(err, exists) {
                        assert.ok(!err);
                        assert.equal(exists, false);
                        callback();
                    });
                });
            });
        });

    });


    describe('Simple group structure', function() {
        
        /**
         * Utility function that will create a number of groups and users that will be used inside of the test.
         * @param  {Function(principals)}    callback        Standard callback function executed when all users and groups have been created
         * @param  {Object}                  principals      Object where the keys are identifiers for the created principals and the values are
         *                                                   are the actual group/user rest context object
         */
        var createPrincipals = function(callback) {

            var createdPrincipals = {};

            var createPrincipal = function(type, identifier, metadata) {
                var principalId = TestsUtil.generateTestUserId(identifier);
                if (type === 'group') {
                    RestAPI.Group.createGroup(johnRestContext, principalId, metadata, metadata, 'public', 'yes', [], [], function(err, groupObj) {
                        assert.ok(!err);
                        createdPrincipals[identifier] = groupObj;
                        if (_.keys(createdPrincipals).length === 12) {
                            callback(createdPrincipals);
                        }
                    });
                } else {
                    RestAPI.User.createUser(camAdminRestContext, principalId, 'password', metadata, null, function(err, userObj) {
                        assert.ok(!err);
                        var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, principalId, 'password');
                        userRestContext.id = userObj.id;
                        createdPrincipals[identifier] = userRestContext;
                        if (_.keys(createdPrincipals).length === 12) {
                            callback(createdPrincipals);
                        }
                    });
                }
            };

            ////////////////////
            // Group creation //
            ////////////////////

            createPrincipal('group', 'oae-team', 'OAE Team');
            createPrincipal('group', 'backend-team', 'Backend Team');
            createPrincipal('group', 'ui-team', 'UI Team');
            createPrincipal('group', 'canadian', 'Canadian Team');
            createPrincipal('group', 'not-canadian', 'Not Canadian Team');
            createPrincipal('group', 'belgian', 'Belgian Team');
            createPrincipal('group', 'west-flemish', 'West Flemish Team');
            createPrincipal('group', 'east-flemish', 'East Flemish Team');
                                            
            ///////////////////
            // User creation //
            ///////////////////
                                            
            createPrincipal('user', 'bert', 'Bert Pareyn');
            createPrincipal('user', 'branden', 'Branden Visser');
            createPrincipal('user', 'nicolaas', 'Nicolaas Matthijs');
            createPrincipal('user', 'simon', 'Simon Gaeremynck');

        };

        /**
         * Utility function that will be used to create a 4-level deep group structure that will be used
         * inside of the tests. The creation of this structure will not be done in a top-down or bottom-up
         * approach, but will use a random strategy. The membership structure will be the following:
         * 
         *                          OAE Team
         *                        /          \
         *           Back-End Team            UI Team
         *           /           \               \
         *       Canadian   Not-Canadian       Belgian
         *          |            |            /       \
         *       Branden       Simon    West Flemish  East Flemish
         *                                   |            |
         *                                 Bert        Nicolaas
         * 
         * @param  {Function(principals)}   callback                Standard callback function executed when all checks have finished
         * @param  {Object}                 callback.principals     Object where the keys are identifiers for the created principals and the values are
         *                                                          are the actual group/user rest context object
         */
        var createOAEStructure = function(callback) {
            createPrincipals(function(createdPrincipals) {

                // Make Branden a member of the canadian group
                var membersToAdd = {};
                membersToAdd[createdPrincipals['branden'].id] = 'member';
                RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['canadian'].id, membersToAdd, function(err) {
                    assert(!err);

                    // Make Simon a member of the not-canadian group
                    membersToAdd = {};
                    membersToAdd[createdPrincipals['simon'].id] = 'member';
                    RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['not-canadian'].id, membersToAdd, function(err) {
                        assert(!err);

                        // Make West Flemish and East Flemish members of the Belgian Group
                        membersToAdd = {};
                        membersToAdd[createdPrincipals['west-flemish'].id] = 'member';
                        membersToAdd[createdPrincipals['east-flemish'].id] = 'member';
                        RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['belgian'].id, membersToAdd, function(err) {
                            assert(!err);

                            // Make Bert a member of the west flemish group
                            membersToAdd = {};
                            membersToAdd[createdPrincipals['bert'].id] = 'member';
                            RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['west-flemish'].id, membersToAdd, function(err) {
                                assert(!err);

                                // Make Nicolaas a member of the east flemish group
                                membersToAdd = {};
                                membersToAdd[createdPrincipals['nicolaas'].id] = 'member';
                                RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['east-flemish'].id, membersToAdd, function(err) {
                                    assert(!err);

                                    // Make Back end team and UI dev team a member of the OAE Team group
                                    membersToAdd = {};
                                    membersToAdd[createdPrincipals['backend-team'].id] = 'member';
                                    membersToAdd[createdPrincipals['ui-team'].id] = 'member';
                                    RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['oae-team'].id, membersToAdd, function(err) {
                                        assert(!err);
                                        
                                        // Make the Candadian and Not canadian group a member of the Back end Team group
                                        membersToAdd = {};
                                        membersToAdd[createdPrincipals['canadian'].id] = 'member';
                                        membersToAdd[createdPrincipals['not-canadian'].id] = 'member';
                                        RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['backend-team'].id, membersToAdd, function(err) {
                                            assert(!err);
                                        
                                            // Make the Belgian Team a member of the UI team
                                            membersToAdd = {};
                                            membersToAdd[createdPrincipals['belgian'].id] = 'member';
                                            RestAPI.Group.setGroupMembers(johnRestContext, createdPrincipals['ui-team'].id, membersToAdd, function(err) {
                                                assert(!err);
                                                callback(createdPrincipals);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
        
        /**
         * Utility function that will make sure that a particular group has the expected
         * set of group members
         *  @param  {Object}           createdPrincipals    Object where the keys are identifiers for the created principals and the values are
         *                                                  are the actual group/user rest context object
         *  @param  {String}           groupIdentifier      Group identifer for the group we want to check the members for. This should correspond
         *                                                  with a created prinicpal in createdPrincipals
         *  @param  {Array<String>}    expectedMembers      Array of user and group identifier ids representing the expected members. These identifiers
         *                                                  should correspond with a created prinicpal in createdPrincipals
         *  @param  {Function}         callback             Standard callback function
         */
        assertGroupMembers = function(createdPrincipals, groupIdentifier, expectedMembers, callback) {
            RestAPI.Group.getGroupMembers(johnRestContext, createdPrincipals[groupIdentifier].id, null, null, function(err, members) {
                assert.ok(!err);
                // We also always expect John to come back as a member
                assert.equal(members.results.length, expectedMembers.length + 1);
                // Morph results to hash for easy access.
                var hash = _.groupBy(members.results, function(principal) { return principal.profile.id; });
                for (var i = 0; i < expectedMembers.length; i++) {
                    assert.equal(hash[createdPrincipals[expectedMembers[i]].id][0].profile.id, createdPrincipals[expectedMembers[i]].id);
                }
                callback();
            });
        };
        
        /**
         * Utility function that will make sure that a principal is a member of the expected
         * set of groups
         *  @param  {Object}           createdPrincipals    Object where the keys are identifiers for the created principals and the values are
         *                                                  are the actual group/user rest context object
         *  @param  {String}           userIdentifier       User identifer for the user we want to check the membershups for. This should correspond
         *                                                  with a created prinicpal in createdPrincipals
         *  @param  {Array<String>}    expectedGroups       Array of group identifiers representing the expected memberships. These identifiers
         *                                                  should correspond with a created prinicpal in createdPrincipals
         *  @param  {Function}         callback             Standard callback function
         */
        assertMemberOf = function(createdPrincipals, userIdentifier, expectedGroups, callback) {
            RestAPI.Group.memberOf(createdPrincipals[userIdentifier], createdPrincipals[userIdentifier].id, null, null, function(err, memberships) {
                assert.ok(!err);
                assert.equal(memberships.results.length, expectedGroups.length);
                // Morph results to hash for easy access.
                var hash = _.groupBy(memberships.results, function(membership) { return membership.id; });
                for (var i = 0; i < expectedGroups.length; i++) {
                    assert.equal(hash[createdPrincipals[expectedGroups[i]].id][0].id, createdPrincipals[expectedGroups[i]].id);
                }
                callback();
            });
        };
        
        /**
         * Test that verifies that deep-level memberships propogate appropriately
         */
        it('verify simple group structure', function(callback) {
            createOAEStructure(function(createdPrincipals) {
                
                // Check that all of the groups return the correct group members. This should only contain direct members
                assertGroupMembers(createdPrincipals, 'oae-team', ['backend-team', 'ui-team'], function() {
                    assertGroupMembers(createdPrincipals, 'backend-team', ['canadian', 'not-canadian'], function() {
                        assertGroupMembers(createdPrincipals, 'canadian', ['branden'], function() {
                            assertGroupMembers(createdPrincipals, 'not-canadian', ['simon'], function() {
                                assertGroupMembers(createdPrincipals, 'belgian', ['east-flemish', 'west-flemish'], function() {
                                    assertGroupMembers(createdPrincipals, 'east-flemish', ['nicolaas'], function() {
                                        assertGroupMembers(createdPrincipals, 'west-flemish', ['bert'], function() {
                                            
                                            // Check that all groups are listed in each of the user's memberships list
                                            assertMemberOf(createdPrincipals, 'nicolaas', ['east-flemish', 'ui-team', 'belgian', 'oae-team'], function() {
                                                assertMemberOf(createdPrincipals, 'bert', ['west-flemish', 'ui-team', 'belgian', 'oae-team'], function() {
                                                    assertMemberOf(createdPrincipals, 'simon', ['not-canadian', 'backend-team', 'oae-team'], function() {
                                                        assertMemberOf(createdPrincipals, 'branden', ['canadian', 'backend-team', 'oae-team'], function() {
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });

                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

    
    describe("Group visibility", function() {

        /**
         * Test that verifies that group visibility works as expected. Group information should be retrievable
         * every time, but the members should only be accessible when the group is not private or
         * when the current user is a member
         */
        it('verify group visibility', function(callback) {

            var assertGroupVisibility = function(restContext, groupObj, expectedMembers, expectedMemberLength, callback) {
                // Check whether the group can be retrieved
                RestAPI.Group.getGroup(restContext, groupObj.id, function(err, retrievedGroupObj) {
                    assert.ok(!err);
                    assert.equal(retrievedGroupObj.id, groupObj.id);
                    assert.equal(retrievedGroupObj.displayName, groupObj.displayName);

                    // Check whether the group members can be retrieved
                    RestAPI.Group.getGroupMembers(restContext, groupObj.id, null, null, function(err, members) {
                        if (expectedMembers) {
                            assert.ok(!err);
                            assert.equal(members.results.length, expectedMemberLength);
                        } else {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                        }
                        callback();
                    });
                });
            };

            // Create 2 users to be used inside of the test
            var nicolaasUserId = TestsUtil.generateTestUserId('nicolaas');
            RestAPI.User.createUser(camAdminRestContext, nicolaasUserId, 'password', 'Nicolaas Matthijs', null, function(err, nicolaas) {
                assert.ok(!err);
                var nicolaasRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, nicolaasUserId, 'password');
                
                var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
                RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'Branden Visser', null, function(err, branden) {
                    assert.ok(!err);
                    var brandenRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, brandenUserId, 'password');
            
                    // Create a group and add nicolaas as a member
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, "Test Group", "Group", 'public', 'yes', [], [nicolaas.id], function(err, groupObj) {
                        assert.ok(!err);

                        // Check that everyone is able to get the group and its members, including the anonymous user
                        assertGroupVisibility(johnRestContext, groupObj, true, 2, function() {
                            assertGroupVisibility(nicolaasRestContext, groupObj, true, 2, function() {
                                assertGroupVisibility(brandenRestContext, groupObj, true, 2, function() {
                                    assertGroupVisibility(anonymousRestContext, groupObj, true, 2, function() {
                                    
                                        // Make the group visible to loggedin users only
                                        RestAPI.Group.updateGroup(johnRestContext, groupObj.id, {'visibility': 'loggedin'}, function(err) {
                                            assert.ok(!err);
    
                                            // Check that everyone is able to get the group and its members, except for the anonymous user
                                            assertGroupVisibility(johnRestContext, groupObj, true, 2, function() {
                                                assertGroupVisibility(nicolaasRestContext, groupObj, true, 2, function() {
                                                    assertGroupVisibility(brandenRestContext, groupObj, true, 2, function() {
                                                        assertGroupVisibility(anonymousRestContext, groupObj, false, null, function() {
    
                                                            // Make the group private
                                                            RestAPI.Group.updateGroup(johnRestContext, groupObj.id, {'visibility': 'private'}, function(err) {
                                                                assert.ok(!err);
        
                                                                // Check that only the members can see the group members
                                                                assertGroupVisibility(johnRestContext, groupObj, true, 2, function() {
                                                                    assertGroupVisibility(nicolaasRestContext, groupObj, true, 2, function() {
                                                                        assertGroupVisibility(brandenRestContext, groupObj, false, null, function() {
                                                                            assertGroupVisibility(anonymousRestContext, groupObj, false, null, function() {
                                                                                callback();
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

});
