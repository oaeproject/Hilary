/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var _ = require('underscore');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('doc');
var OAE = require('oae-util/lib/oae');
var Validator = require('oae-util/lib/validator').Validator;

var dox = require('dox');

var cachedDocs = {};

/**
 * Retrieves the docs for the requested module
 * @param   {String}     moduleId        The module to get docs for
 * @param   {Function}   callback        The function to call when complete
 * @param {Object}       callback.doc    The documentation for the module requested
 */
var getDoc = module.exports.getDoc = function(moduleId, callback) {
    var validator = new Validator();
    validator.check(moduleId, {'code': 400, 'msg': 'Missing moduleId'}).notEmpty();
    validator.check(moduleId.substring(0, 4), {'code': 400, 'msg': 'No such OAE module'}).equals('oae-');
    validator.check(moduleId, {'code': 400, 'msg': 'ModuleId can\'t contain \'.\''}).notContains('.');
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    if (cachedDocs[moduleId]) {
        return callback(false, cachedDocs[moduleId]);
    } else {
        return callback({'code': 404, 'msg': 'No documentation for this module was found'});
    }
};

/*!
 * Parse module doc into json
 *
 * @param   {string}      moduleId        The module to get docs for
 * @param   {Function}    callback        The function to call when complete
 * @param   {Object}      callback.doc    The documentation for the module requested
 */
var readDoc = function(moduleId, callback) {

    var dir = 'node_modules/' + moduleId + '/lib';

    /*!
     * Asynchronous read of the JavaScript file needed to parse docs
     * @param   {String}     lib             The lib file to be read
     * @param   {Function}   callback        Function executed when the file has been read, or failed to be read
     * @param   {Object}     callback.err    Error, if any, returned when done reading the file
     * @param   {Object}     callback.data   Data returned after reading the file completed
     */
    var readFile = function(lib, callback) {
        fs.readFile(dir + "/" + lib, 'utf-8', function(err, data) {
            callback(err, data);
        });
    };

    /*!
     * Filters out file names that are not api.js, model.js or rest.js and returns the filtered array
     * Takes into account that some file names can have a slightly different name e.g. model.group.js
     * @param    {Array}   libs          The unfiltered Array of file names in the modules lib directory
     * @return   {Array}   allowedLibs   The returned, filtered, Array of file names that can be used to show documentation
     */
    var filterLibs = function(libs) {
        var allowedFiles = ['api', 'model', 'rest'];
        var allowedLibs = [];
        for (var i=0; i < libs.length; i++) {
            if (_.indexOf(allowedFiles, libs[i].split('.')[0]) !== -1) {
                allowedLibs.push(libs[i]);
            }
        }
        return allowedLibs;
    };

    IO.getFileListForFolder(dir, function(libs) {
        // Filter lib files that cannot be returned
        libs = filterLibs(libs);

        var toDo = libs.length;
        var done = 0;
        var doc = {};

        for (var i=0; i < libs.length; i++) {
            var lib = libs[i];

            (function(lib) {
                readFile(lib, function(err, data) {
                    done++;

                    if (!err) {
                        doc[lib] = dox.parseComments(data);
                    } else {
                        log().error('Failed reading ' + dir + "/" + lib);
                    }

                    if (done === toDo) {
                        return callback(err, doc);
                    }
                });
            })(lib);
        }

        if (!libs.length) {
            callback({'code': 404, 'msg': 'No documentation for this module was found'});
        }
    });
};

/**
 * Initializes the documentation by fetching all modules + configuration for those modules and caching it
 * @param   {Function}   callback              The function to call when complete
 * @param   {Object}     callback.cachedDocs   The cached documentation is passed back in the callback function
 */
var initializeDocs = module.exports.initializeDocs = function(callback) {
    var modules = OAE.getAvailableModules();
    var toDo = modules.length;
    var done = 0;

    for (var i = 0; i < toDo; i++) {
        var moduleId = modules[i];

        (function(moduleId) {
            readDoc(moduleId, function(err, doc) {
                done++;
                cachedDocs[moduleId] = doc;
                if (done === toDo) {
                    callback(cachedDocs);
                }
            });
        })(moduleId);
    };
};
