var _ = require('underscore');
var assert = require('assert');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');


describe('Authz-Permissions', function() {

    describe('#isAllowed()', function() {

        it('verify invalid principal uuid error', function(callback) {
            AuthzAPI.isAllowed('not a uuid', 'member', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify non-principal member uuid error', function(callback) {
            AuthzAPI.isAllowed('c:cam:mrvisser', 'member', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify null role error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', null, 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify undefined role error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', undefined, 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify false role error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', false, 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify invalid resource uuid error', function(callback) {
            AuthzAPI.isAllowed('u:cam:mrvisser', 'member', 'not a uuid', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify empty data', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'ia-empty', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-empty', 'SomeContent');
            AuthzAPI.isAllowed(userUuid, 'member', resourceUuid, function(err, isAllowed) {
                assert.ok(!err);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify direct permission', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'ia-direct', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-direct', 'SomeContent');
            AuthzAPI.setRole(userUuid, resourceUuid, 'viewer', function(err) {
                assert.ok(!err);
                AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                    assert.ok(!err);
                    assert.ok(isAllowed);
                    callback();
                });
            });
        });

        it('verify direct single group permission', function(callback) {
            var groupUuid = AuthzUtil.toUuid('g', 'ia-single', 'oae-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-single', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-single', 'SomeContent');

            AuthzAPI.addGroupMember(groupUuid, userUuid, 'member', function(err) {
                assert.ok(!err);
                AuthzAPI.setRole(groupUuid, resourceUuid, 'viewer', function(err) {
                    assert.ok(!err);
                    AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);
                        callback();
                    });
                });
            });
        });

        it('verify direct multi group permission', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'ia-multi', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'ia-multi', 'oae-backend-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-multi', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-multi', 'SomeContent');

            AuthzAPI.addGroupMember(groupUuid1, userUuid, 'member', function(err) {
                assert.ok(!err);
                AuthzAPI.addGroupMember(groupUuid2, userUuid, 'member', function(err) {
                    assert.ok(!err);
                    AuthzAPI.setRole(groupUuid1, resourceUuid, 'viewer', function(err) {
                        assert.ok(!err);
                        AuthzAPI.setRole(groupUuid2, resourceUuid, 'manager', function(err) {
                            assert.ok(!err);
                            AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(isAllowed);
                                AuthzAPI.isAllowed(userUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(isAllowed);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify multi group hierarchy permission', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'ia-hier', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'ia-hier', 'oae-backend-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-hier', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-hier', 'SomeContent');
            AuthzAPI.addGroupMember(groupUuid1, userUuid, 'member', function(err) {
                assert.ok(!err);
                AuthzAPI.addGroupMember(groupUuid2, groupUuid1, 'member', function(err) {
                    assert.ok(!err);
                    AuthzAPI.setRole(groupUuid1, resourceUuid, 'viewer', function(err) {
                        assert.ok(!err);
                        AuthzAPI.setRole(groupUuid2, resourceUuid, 'manager', function(err) {
                            assert.ok(!err);
                            AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(isAllowed);
                                AuthzAPI.isAllowed(userUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(isAllowed);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify circular group hierarchy permission', function(callback) {
            var groupUuid1 = AuthzUtil.toUuid('g', 'ia-circ', 'oae-team');
            var groupUuid2 = AuthzUtil.toUuid('g', 'ia-circ', 'oae-backend-team');
            var groupUuid3 = AuthzUtil.toUuid('g', 'ia-circ', 'oae-ui-team');
            var userUuid = AuthzUtil.toUuid('u', 'ia-circ', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-circ', 'SomeContent');
            AuthzAPI.addGroupMember(groupUuid1, userUuid, 'member', function(err) {
                assert.ok(!err);
                AuthzAPI.addGroupMember(groupUuid2, groupUuid1, 'member', function(err) {
                    assert.ok(!err);
                    AuthzAPI.addGroupMember(groupUuid3, groupUuid2, 'member', function(err) {
                        assert.ok(!err);
                        AuthzAPI.addGroupMember(groupUuid1, groupUuid3, 'member', function(err) {
                            assert.ok(!err);
                            AuthzAPI.setRole(groupUuid1, resourceUuid, 'viewer', function(err) {
                                assert.ok(!err);
                                AuthzAPI.setRole(groupUuid2, resourceUuid, 'manager', function(err) {
                                    assert.ok(!err);
                                    AuthzAPI.setRole(groupUuid3, resourceUuid, 'editor', function(err) {
                                        assert.ok(!err);
                                        AuthzAPI.isAllowed(userUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                            assert.ok(!err);
                                            assert.ok(isAllowed);
                                            AuthzAPI.isAllowed(userUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                assert.ok(!err);
                                                assert.ok(isAllowed);
                                                AuthzAPI.isAllowed(userUuid, 'editor', resourceUuid, function(err, isAllowed) {
                                                    assert.ok(!err);
                                                    assert.ok(isAllowed);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#isAllowedAny()', function() {
        it('verify invalid principal uuid error', function(callback) {
            AuthzAPI.isAllowedAny('not a uuid', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify non-principal uuid error', function(callback) {
            AuthzAPI.isAllowedAny('c:cam:mrvisser', 'c:cam:Foo.docx', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify invalid resource uuid error', function(callback) {
            AuthzAPI.isAllowedAny('u:cam:mrvisser', 'not a uuid', function(err, isAllowed) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify empty data', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'iaa-empty', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'iaa-empty', 'SomeContent');
            AuthzAPI.isAllowedAny(userUuid, resourceUuid, function(err, isAllowed) {
                assert.ok(!err);
                assert.ok(!isAllowed);
                callback();
            });
        });

        it('verify direct permission', function(callback) {
            var userUuid = AuthzUtil.toUuid('u', 'iaa-direct', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'iaa-direct', 'SomeContent');
            AuthzAPI.setRole(userUuid, resourceUuid, 'viewer', function(err) {
                assert.ok(!err);
                AuthzAPI.isAllowedAny(userUuid, resourceUuid, function(err, isAllowed) {
                    assert.ok(!err);
                    assert.ok(isAllowed);
                    callback();
                });
            });
        });

        it('verify direct single group permission', function(callback) {
            var groupUuid = AuthzUtil.toUuid('g', 'iaa-single', 'oae-team');
            var userUuid = AuthzUtil.toUuid('u', 'iaa-single', 'mrvisser');
            var resourceUuid = AuthzUtil.toUuid('c', 'ia-single', 'SomeContent');

            AuthzAPI.addGroupMember(groupUuid, userUuid, 'member', function(err) {
                assert.ok(!err);
                AuthzAPI.setRole(groupUuid, resourceUuid, 'viewer', function(err) {
                    assert.ok(!err);
                    AuthzAPI.isAllowedAny(userUuid, resourceUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);
                        callback();
                    });
                });
            });
        });
    });

    describe('Permissions Cache', function() {

        describe('#isAllowed()', function() {

            it('verify user role removal', function(callback) {

                /**
                 * Invalidation Case: When a user principal role is removed from a resource, all cached permissions for that principal on that resource should be invalidated.
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-role-removal', 'mrvisser');
                var resourceUuid = AuthzUtil.toUuid('c', 'cc-role-removal', 'testHasRoleContent');
                // add the 'manager' role
                AuthzAPI.setRole(principalUuid, resourceUuid, 'manager', function(err) {
                    assert.ok(!err);
                    // verify that the user has the permission. this should also make a storage entry in the cache.
                    AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);
                        // remove the role and verify the user no longer has it
                        AuthzAPI.removeRole(principalUuid, resourceUuid, function(err) {
                            assert.ok(!err);
                            AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);

                                // if this fails, it is likely that the permission was not properly invalidated from the cache
                                assert.ok(!isAllowed);

                                callback();
                            });
                        });
                    });
                });
            });

            it('verify user role update', function(callback) {

                /**
                 * Invalidation Case: When a user principal role is updated on a resource, all cached permissions for that principal on that resource should be invalidated.
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-role-update', 'mrvisser');
                var resourceUuid = AuthzUtil.toUuid('c', 'cc-role-update', 'testHasRoleContent');
                // add the 'manager' role
                AuthzAPI.setRole(principalUuid, resourceUuid, 'manager', function(err) {
                    assert.ok(!err);

                    // verify that the user has the permission. this should also make a storage entry in the cache.
                    AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);

                        // verify that the user does not have 'viewer'.
                        AuthzAPI.isAllowed(principalUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                            assert.ok(!err);
                            assert.ok(!isAllowed);
                            
                            // update the role to viewer and verify the opposite as above
                            AuthzAPI.setRole(principalUuid, resourceUuid, 'viewer', function(err) {
                                assert.ok(!err);

                                AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);

                                    // if this fails, it is likely that the 'manager' permission was not properly invalidated from the cache
                                    assert.ok(!isAllowed);

                                    AuthzAPI.isAllowed(principalUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                        assert.ok(!err);
                                        assert.ok(isAllowed);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });

            it('verify simple group role removal', function(callback) {

                /**
                 * Invalidation Case: When a group principal's role has been removed from a resource, its permission cache plus all of its membership descendants' permission
                 * caches for that resource should be invalidated.
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-group-role-removal', 'mrvisser');
                var groupUuid = AuthzUtil.toUuid('g', 'cc-group-role-removal', 'oae-team');
                var resourceUuid = AuthzUtil.toUuid('c', 'cc-group-role-removal', 'testHasRoleContent');

                AuthzAPI.addGroupMember(groupUuid, principalUuid, 'member', function(err) {
                    assert.ok(!err);
                    // add the 'manager' role for the group
                    AuthzAPI.setRole(groupUuid, resourceUuid, 'manager', function(err) {
                        assert.ok(!err);

                        // verify that the group and user have the permission. this should also make a storage entry in the cache.
                        AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                            assert.ok(!err);
                            assert.ok(isAllowed);

                            AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(isAllowed);

                                // remove the role from the group and verify both group and user no longer have it
                                AuthzAPI.removeRole(groupUuid, resourceUuid, function(err) {
                                    assert.ok(!err);

                                    AuthzAPI.isAllowed(groupUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                        assert.ok(!err);

                                        // if this fails, it is likely that the group permission was not properly invalidated from the cache
                                        assert.ok(!isAllowed);

                                        AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                            assert.ok(!err);

                                            // if this fails, it is likely that the principal permission was not invalidated.
                                            // the principal's permissions cache for the resource should be purged due to a parent group having a role update
                                            assert.ok(!isAllowed);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            it('verify simple group role update', function(callback) {

                /**
                 * Invalidation Case: When a group principal's role has been updated on a resource, its permission cache plus all of its membership descendants' permission
                 * caches for that resource should be invalidated.
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-group-role-update', 'mrvisser');
                var groupUuid = AuthzUtil.toUuid('g', 'cc-group-role-update', 'oae-team');
                var resourceUuid = AuthzUtil.toUuid('c', 'cc-group-role-update', 'testHasRoleContent');

                AuthzAPI.addGroupMember(groupUuid, principalUuid, 'member', function(err) {
                    assert.ok(!err);

                    // add the 'manager' role for the group
                    AuthzAPI.setRole(groupUuid, resourceUuid, 'manager', function(err) {
                        assert.ok(!err);

                        // verify that the group and user have the permission. this should also make a storage entry in the cache.
                        AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                            assert.ok(!err);
                            assert.ok(isAllowed);
                            AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(isAllowed);

                                // verify that the group and user don't have 'manager' permission.
                                AuthzAPI.isAllowed(principalUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(!isAllowed);

                                    // verify that the user has the permission. this should also make a storage entry in the cache.
                                    AuthzAPI.isAllowed(principalUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                        assert.ok(!err);
                                        assert.ok(!isAllowed);

                                        // update the role for the group and verify both group and user no longer have 'manager'
                                        AuthzAPI.setRole(groupUuid, resourceUuid, 'viewer', function(err) {
                                            assert.ok(!err);

                                            AuthzAPI.isAllowed(groupUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                assert.ok(!err);

                                                // if this fails, it is likely that the group permission was not properly invalidated from the cache
                                                assert.ok(!isAllowed);

                                                AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                    assert.ok(!err);

                                                    // if this fails, it is likely that the principal permission was not invalidated.
                                                    // the principal's permissions cache for the resource should be purged due to a parent group having a role update
                                                    assert.ok(!isAllowed);

                                                    // verify that the group and user now have 'viewer' permission
                                                    AuthzAPI.isAllowed(principalUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                        assert.ok(!err);
                                                        assert.ok(isAllowed);

                                                        // verify that the user has the permission. this should also make a storage entry in the cache.
                                                        AuthzAPI.isAllowed(principalUuid, 'viewer', resourceUuid, function(err, isAllowed) {
                                                            assert.ok(!err);
                                                            assert.ok(isAllowed);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

            it('verify simple group membership removal', function(callback) {

                /**
                 * Invalidation Case: When a user is removed from a group, their cached permission check for that group must be invalidated.
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-group-membership-removal', 'mrvisser');
                var groupUuid = AuthzUtil.toUuid('g', 'cc-group-membership-removal', 'oae-team');

                AuthzAPI.addGroupMember(groupUuid, principalUuid, 'member', function(err) {
                    assert.ok(!err);

                    // fire up the cache entry for their membership permission
                    AuthzAPI.isAllowed(principalUuid, 'member', groupUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);

                        AuthzAPI.removeGroupMember(groupUuid, principalUuid, function(err) {
                            assert.ok(!err);

                            AuthzAPI.isAllowed(principalUuid, 'member', groupUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(!isAllowed);
                                callback();
                            });
                        });
                    });
                });
            });

            it('verify simple group membership update', function(callback) {

                /**
                 * Invalidation Case: When a user's membership role in a group is updated, their cached permission check for that group must be invalidated.
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-group-membership-update', 'mrvisser');
                var groupUuid = AuthzUtil.toUuid('g', 'cc-group-membership-update', 'oae-team');

                AuthzAPI.addGroupMember(groupUuid, principalUuid, 'member', function(err) {
                    assert.ok(!err);

                    // fire up the cache entry for their membership permission
                    AuthzAPI.isAllowed(principalUuid, 'member', groupUuid, function(err, isAllowed) {
                        assert.ok(!err);
                        assert.ok(isAllowed);

                        AuthzAPI.isAllowed(principalUuid, 'manager', groupUuid, function(err, isAllowed) {
                            assert.ok(!err);
                            assert.ok(!isAllowed);

                            AuthzAPI.addGroupMember(groupUuid, principalUuid, 'manager', function(err) {
                                assert.ok(!err);

                                AuthzAPI.isAllowed(principalUuid, 'member', groupUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(!isAllowed);

                                    AuthzAPI.isAllowed(principalUuid, 'manager', groupUuid, function(err, isAllowed) {
                                        assert.ok(!err);
                                        assert.ok(isAllowed);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });

            it('verify group membership removal invalidation', function(callback) {

                /**
                 * Invalidation Case: When a user's membership in a group is removed, their entire permissions cache should be invalidated
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-group-membership-removal-invalidate', 'mrvisser');
                var groupUuid = AuthzUtil.toUuid('g', 'cc-group-membership-removal-invalidate', 'oae-team');
                var resourceUuid = AuthzUtil.toUuid('c', 'cc-group-membership-removal-invalidate', 'testHasRoleContent');

                AuthzAPI.setRole(groupUuid, resourceUuid, 'manager', function(err) {
                    assert.ok(!err);

                    AuthzAPI.addGroupMember(groupUuid, principalUuid, 'member', function(err) {
                    assert.ok(!err);

                        // fire up the cache entry for their manager permission
                        AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                            assert.ok(!err);
                            assert.ok(isAllowed);

                            AuthzAPI.removeGroupMember(groupUuid, principalUuid, function(err) {
                                assert.ok(!err);

                                AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(!isAllowed);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });

            it('verify indirect group membership removal invalidation', function(callback) {

                /**
                 * Invalidation Case: When a user's membership in a group is removed, their entire permissions cache should be invalidated
                 */

                var principalUuid = AuthzUtil.toUuid('u', 'cc-indirect-group-membership-removal-invalidate', 'mrvisser');
                var groupUuid = AuthzUtil.toUuid('g', 'cc-indirect-group-membership-removal-invalidate', 'oae-backend-team');
                var groupUuid2 = AuthzUtil.toUuid('g', 'cc-indirect-group-membership-removal-invalidate', 'oae-team');
                var resourceUuid = AuthzUtil.toUuid('c', 'cc-indirect-group-membership-removal-invalidate', 'testHasRoleContent');

                // 1. set up permissions and group hierarchy
                AuthzAPI.setRole(groupUuid2, resourceUuid, 'manager', function(err) {
                    assert.ok(!err);

                    AuthzAPI.addGroupMember(groupUuid2, groupUuid, 'member', function(err) {
                        assert.ok(!err);

                        AuthzAPI.addGroupMember(groupUuid, principalUuid, 'member', function(err) {
                            assert.ok(!err);

                            // 2. test the setup, while heating up the cache entries
                            AuthzAPI.isAllowed(groupUuid2, 'manager', resourceUuid, function(err, isAllowed) {
                                assert.ok(!err);
                                assert.ok(isAllowed);

                                AuthzAPI.isAllowed(groupUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                    assert.ok(!err);
                                    assert.ok(isAllowed);

                                    AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                        assert.ok(!err);
                                        assert.ok(isAllowed);

                                        // 3. remove oae-backend-team from oae-team, its permission cache and mrvisser's permission cache should be purged
                                        AuthzAPI.removeGroupMember(groupUuid2, groupUuid, function(err) {
                                            assert.ok(!err);

                                            // 4. verify that oae-backend-team and mrvisser caches have been purged, therefore these checks should be in sync
                                            AuthzAPI.isAllowed(principalUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                assert.ok(!err);
                                                assert.ok(!isAllowed);

                                                AuthzAPI.isAllowed(groupUuid, 'manager', resourceUuid, function(err, isAllowed) {
                                                    assert.ok(!err);
                                                    assert.ok(!isAllowed);

                                                    // 5. ensure groupUuid2 can still manage the resource, they should have been unaffected
                                                    AuthzAPI.isAllowed(groupUuid2, 'manager', resourceUuid, function(err, isAllowed) {
                                                        assert.ok(!err);
                                                        assert.ok(isAllowed);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});