var OAE = require('oae-util/lib/OAE');
var api = require('oae-roles/lib/api');
var model = require('oae-roles/lib/model');
var schema = require('oae-roles/lib/schema');
var PrincipalTypes = api.PrincipalTypes;
var ObjectTypes = api.ObjectTypes;

var KEYSPACE = 'oae';

module.exports.setUp = function(callback) {
    OAE.initializeKeySpace(function() {
        schema.dropSchema(function(err) {
            if (err) throw err;
            schema.ensureSchema(function(err) {
                if (err) throw err;
                callback();
            });
        });
    });
};

module.exports.tearDown = function(callback) {
  schema.dropSchema(function(err) {
    callback();
  });
}

/**
 * Verify that users with the same userid from different tenants maintain distinct role associations
 */
module.exports.testTenantSeparation = function(test) {
    test.expect(8);

    var securityContextA = new api.SecurityContext(new model.Principal('testTenantSeparationA', PrincipalTypes.USER, 'mrvisser'));
    var securityContextB = new api.SecurityContext(new model.Principal('testTenantSeparationB', PrincipalTypes.USER, 'mrvisser'));

    securityContextA.addRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'manager', function(err) {
        test.ok(!err);

        // verify tenant B user does not have a role on that content
        securityContextB.hasAnyRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', function(hasAnyRole, err) {
            test.ok(!err);
            test.ok(!hasAnyRole);

            // add 'viewer' for security context B
            securityContextB.addRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'viewer', function(err) {
                test.ok(!err);

                // ensure user from tenant A is still manager, not viewer
                securityContextA.hasRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'manager', function(hasRole, err) {
                    test.ok(!err);
                    test.ok(hasRole);

                    // ensure user from context B is a viewer, not manager
                    securityContextB.hasRole(ObjectTypes.CONTENT, 'testTenantSeparationContent', 'viewer', function(hasRole, err) {
                        test.ok(!err);
                        test.ok(hasRole);
                        test.done();
                    });
                });
            });
        });
    });
};

/**
 * Verify the functionality of the `api.SecurityContext.hasRole` function
 */
module.exports.testHasRole = function(test) {
    test.expect(6);

    var securityContext = new api.SecurityContext(new model.Principal('testHasRole', PrincipalTypes.USER, 'mrvisser'));

    // add the 'manager' role
    securityContext.addRole(ObjectTypes.CONTENT, 'testHasRoleContent', 'manager', function(err) {
        test.ok(!err);

        // verify that hasRole reports that the user has the manager role
        securityContext.hasRole(ObjectTypes.CONTENT, 'testHasRoleContent', 'manager', function(hasRole, err) {
            test.ok(!err);
            test.ok(hasRole);

            // remove the role from the user
            securityContext.removeRole(ObjectTypes.CONTENT, 'testHasRoleContent', function(err) {
                test.ok(!err);

                // verify that the user no longer has the role
                securityContext.hasRole(ObjectTypes.CONTENT, 'testHasRoleContent', 'manager', function(hasRole, err) {
                    test.ok(!err);
                    test.ok(!hasRole);
                    test.done();
                });
            });
        });
    });
};

/**
 * Verify the functionality of the `api.SecurityContext.hasAnyRole` function
 */
module.exports.testHasAnyRole = function(test) {
    test.expect(6);

    var securityContext = new api.SecurityContext(new model.Principal('testHasAnyRole', PrincipalTypes.USER, 'mrvisser'));

    // add the 'manager' role
    securityContext.addRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', 'manager', function(err) {
        test.ok(!err);

        // verify that hasRole reports that the user has the manager role
        securityContext.hasAnyRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', function(hasAnyRole, err) {
            test.ok(!err);
            test.ok(hasAnyRole);

            // remove the role from the user
            securityContext.removeRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', function(err) {
                test.ok(!err);

                // verify that the user no longer has the role
                securityContext.hasRole(ObjectTypes.CONTENT, 'testHasAnyRoleContent', 'manager', function(hasAnyRole, err) {
                    test.ok(!err);
                    test.ok(!hasAnyRole);
                    test.done();
                });
            });
        });
    });
};

/**
 * Verify the functionality of the `api.SecurityContext.getRolesForObjectType` function
 */
module.exports.testGetRolesForObjectType = function(test) {
    test.expect(9);

    var baseViewerContentId = 'contentIView';
    var baseManagerContentId = 'contentIManage';
    var securityContext = new api.SecurityContext(new model.Principal('testGetRolesForObjectType', PrincipalTypes.USER, 'mrvisser'));
    loadContentRoles(securityContext, baseViewerContentId, ObjectTypes.CONTENT, 300, 'viewer', function() {
        loadContentRoles(securityContext, baseManagerContentId, ObjectTypes.CONTENT, 300, 'manager', function() {

            // an aggregate to hold a unique set of all keys. Used to ensure we get all the elements back
            var aggregate = {};

            // grab the first 250
            securityContext.getRolesForObjectType(ObjectTypes.CONTENT, null, 250, function(entries250_1, err) {
                test.ok(!err);
                test.equal(entries250_1.length, 250);
                
                // get the next 250
                securityContext.getRolesForObjectType(ObjectTypes.CONTENT, entries250_1[249].id, 250, function(entries250_2, err) {
                    test.ok(!err);
                    test.equal(entries250_2.length, 250);
                    test.notEqual(entries250_1[249].id, entries250_2[0].id, 'The paging should be exclusive, but this test shows it was inclusive');

                    // get the rest, with overflow
                    securityContext.getRolesForObjectType(ObjectTypes.CONTENT, entries250_2[249].id, 250, function(entries100, err) {
                        test.ok(!err);
                        test.equal(entries100.length, 100);
                        test.notEqual(entries250_2[249].id, entries100[0].id, 'The paging should be exclusive, but this test shows it was inclusive');

                        // now make sure we read 600 unique entries from cassandra
                        for (var i = 0; i < 250; i++) {
                            aggregate[entries250_1[i].id] = true;
                            aggregate[entries250_2[i].id] = true;

                            if (i < 100)
                                aggregate[entries100[i].id] = true;
                        }

                        test.equal(Object.keys(aggregate).length, 600);
                        test.done();
                    });
                });

            });
        });
    });
};

/**
 * Verify the functionality of the `api.getAssociationsForPrincipalsAndObjectType` function
 */
module.exports.testGetAssociationsForPrincipalsAndObjectType = function(test) {
    test.expect(8);

    var baseViewerContentId = 'contentIView';
    var baseManagerContentId = 'contentIManage';
    var principal1 = new model.Principal('testGetRolesForObjectType', PrincipalTypes.USER, 'mrvisser');
    var principal2 = new model.Principal('testGetRolesForObjectType', PrincipalTypes.GROUP, 'simong');

    var securityContext1 = new api.SecurityContext(principal1);
    var securityContext2 = new api.SecurityContext(principal2);

    loadContentRoles(securityContext1, baseViewerContentId, ObjectTypes.GROUP, 300, 'viewer', function() {
        loadContentRoles(securityContext2, baseManagerContentId, ObjectTypes.GROUP, 300, 'manager', function() {

            // make sure they work together
            api.getAssociationsForPrincipalsAndObjectType([principal1, principal2], ObjectTypes.GROUP, 1000, function(entries, err) {
                test.ok(!err);
                test.equal(Object.keys(entries).length, 600);
                
                // make sure they work individually
                api.getAssociationsForPrincipalsAndObjectType([principal1], ObjectTypes.GROUP, 1000, function(entries, err) {
                    test.ok(!err);
                    test.equal(Object.keys(entries).length, 300);

                    api.getAssociationsForPrincipalsAndObjectType([principal2], ObjectTypes.GROUP, 1000, function(entries, err) {
                        test.ok(!err);
                        test.equal(Object.keys(entries).length, 300);

                        // test per-principal limitations
                        api.getAssociationsForPrincipalsAndObjectType([principal1, principal2], ObjectTypes.GROUP, 100, function(entries, err) {
                            test.ok(!err);
                            test.equal(Object.keys(entries).length, 200);
                            test.done();
                        });
                    });
                });
            });

        });
    });
};

/**
 * Verify the functionality for the use-case of getting full group ancestry using `api.getAssociationsForPrincipalsAndObjectType`
 */
module.exports.testExplodeGroupHierarchy = function(test) {
    test.expect(1);

    var tenantId = 'testExplodeGroupHierarchy';

    // user 'mrvisser' is part of 30 groups
    joinGroups(tenantId, 'mrvisser', PrincipalTypes.USER, 'member-direct', 30, function() {

        // groups 1-5 are members of other groups
        joinGroups(tenantId, 'member-direct-1', PrincipalTypes.GROUP, 'member-indirect-1', 5, function() {
            joinGroups(tenantId, 'member-direct-2', PrincipalTypes.GROUP, 'member-indirect-2', 5, function() {
                joinGroups(tenantId, 'member-direct-3', PrincipalTypes.GROUP, 'member-indirect-3', 5, function() {
                    joinGroups(tenantId, 'member-direct-4', PrincipalTypes.GROUP, 'member-indirect-4', 5, function() {
                        joinGroups(tenantId, 'member-direct-5', PrincipalTypes.GROUP, 'member-indirect-5', 5, function() {

                            // groups 5-10 have other groups as children
                            addMembers(tenantId, 'member-direct-5', 'notmember-5', 5, function() {
                                addMembers(tenantId, 'member-direct-6', 'notmember-6', 5, function() {
                                    addMembers(tenantId, 'member-direct-7', 'notmember-7', 5, function() {
                                        addMembers(tenantId, 'member-direct-8', 'notmember-8', 5, function() {
                                            addMembers(tenantId, 'member-direct-9', 'notmember-9', 5, function() {
                                                addMembers(tenantId, 'member-direct-10', 'notmember-10', 5, function() {
                                                    var mrvisser = new model.Principal(tenantId, PrincipalTypes.USER, 'mrvisser');

                                                    explodeGroupAncestry(tenantId, [mrvisser], {}, function(results) {

                                                        // groups prefixed with 'member' are groups that mrvisser is indirectly a member of
                                                        // groups prefixed with 'notmember' are groups that mrvisser is NOT indirectly a member of
                                                        // mrvisser should be a member of 30+(5*5) = 55 groups
                                                        // there should be 5*6 = 30 groups that mrvisser is not a member of

                                                        test.equal(Object.keys(results).length, 55);
                                                        test.done();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

function explodeGroupAncestry(tenantId, principals, results, callback) {
    var nextPrincipalBatch = [];
    api.getAssociationsForPrincipalsAndObjectType(principals, ObjectTypes.GROUP, 1000, function(entries, err) {
        if (err) throw err;
        var ancestors = Object.keys(entries);
        for (var i = 0; i < ancestors.length; i++) {
            var ancestor = ancestors[i];
            if (!results[ancestor]) {
                results[ancestor] = true;
                nextPrincipalBatch.push(new model.Principal(tenantId, PrincipalTypes.GROUP, ancestor));
            }
        }

        if (nextPrincipalBatch.length > 0) {
            explodeGroupAncestry(tenantId, nextPrincipalBatch, results, callback);
        } else {
            callback(results);
        }
    });
}


function joinGroups(tenantId, memberId, memberPrincipalType, groupPrefix, numGroups, callback) {
    if (numGroups === 0) {
        callback();
        return;
    }

    var securityContext = new api.SecurityContext(new model.Principal(tenantId, memberPrincipalType, memberId));
    securityContext.addRole(ObjectTypes.GROUP, groupPrefix+'-'+numGroups, 'member', function(err) {
        if (err) throw err;
        joinGroups(tenantId, memberId, memberPrincipalType, groupPrefix, numGroups-1, callback);
    });
}

function addMembers(tenantId, groupId, memberPrefix, numMembers, callback) {
    if (numMembers === 0) {
        callback();
        return;
    }

    var securityContext = new api.SecurityContext(new model.Principal(tenantId, PrincipalTypes.GROUP, memberPrefix+'-'+numMembers));
    securityContext.addRole(ObjectTypes.GROUP, groupId, 'member', function(err) {
        if (err) throw err;
        addMembers(tenantId, groupId, memberPrefix, numMembers-1, callback);
    });
}

function loadContentRoles(securityContext, baseContentId, objectType, numContentItems, role, callback) {
    if (numContentItems === 0) {
        callback();
        return;
    }

    securityContext.addRole(objectType, baseContentId+'-'+numContentItems, role, function(err) {
        if (err) throw err;
        loadContentRoles(securityContext, baseContentId, objectType, numContentItems-1, role, callback);
    });
}
