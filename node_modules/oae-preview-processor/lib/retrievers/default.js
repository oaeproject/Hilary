/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var exec = require('child_process').exec;
var util = require('util');
// Don't require webshot yet, as that is an optional dependency not required
// to start up the application
var webshot = null;

var log = require('oae-logger').logger('oae-preview-processor');

// Default config options.
var defaultOptions = {
    'phantomPath': 'phantomjs',
    'renderDelay': 5000,
    'script': function() {
        // A script that will be executed when the page loads.
        // If there is no background color defined, we set it to white.
        if (!document.body.style.backgroundColor) {
            document.body.style.backgroundColor = '#ffffff';
        }
    }
};

/**
 * Initialize the default retriever with the PhantomJS configuration.
 *
 * @param  {Object}     config              The configuration object
 * @param  {String}     config.binary       The path to the `phantomjs` executable. This should either be a direct path or the filename that's on the `PATH` environment.
 * @param  {Number}     config.renderDelay  Specifies the time (in ms) between page load and taking a screenshot. This is to allow for AJAX content to be loaded into the page. (Default: 5000ms)
 * @param  {Function}   callback            Standard callback method.
 * @param  {Function}   callback.err        Standard error object (if any.)
 */
var init = module.exports.init = function(config, callback) {

    try {
        webshot = require('webshot');
    } catch (ex) {
        log().error({'err': ex}, 'Error importing webshot.');
        return callback({'code': 500, 'msg': 'Error importing webshot'});
    }

    // The config object doesn't match entirely what webshot expects,
    // so create it in a global (to this file) variable.
    if (config && config.binary) {
        defaultOptions.phantomPath = config.binary;
    }
    if (config && config.renderDelay) {
        defaultOptions.renderDelay = config.renderDelay;
    }

    // Try to execute `phantomjs --help`.
    var cmd = util.format('%s --help', defaultOptions.phantomPath);
    log().trace('Executing %s to verify if the path to the phantomjs binary is configured correctly.', cmd);
    exec(cmd, { 'timeout': 10000 }, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'stdout': stdout, 'stderr': stderr}, 'Could not properly execute the phantomjs binary.');
            return callback({'code': 500, 'msg': 'The path for the phantomjs binary is misconfigured.'});
        }
        callback();
    });
};

/**
 * Whether or not this retriever can handle the passed in URL.
 *
 * @param  {String}     url     The URL to generate images for.
 * @return {Boolean}            true if this retriever can handle the URL, false otherwise.
 */
var test = module.exports.test = function(url) {
    return true;
};

/**
 * Get an image for a URL.
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {String}             url             The URL to generate images for.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 * @param  {String}             callback.path   The path on disk where the image is stored.
 */
var getImage = module.exports.getImage = function(ctx, url, callback) {
    if (url.indexOf('http://') !== 0) {
        return callback({'code': 400, 'msg': 'Only HTTP(S) urls are supported'});
    }
    getImageWithScript(ctx, url, null, callback);
};

/**
 * Get an image for a URL and specify some javascript that should be executed on page load.
 * The URL can be anything, including file://<..> URLs. This is to allow other PP to download/create local files
 * and generate preview images of those.
 * It's up to the caller to sanitize their input!
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {String}             url             The URL to generate images for. This will *NOT* be checked if it's a correct URL. Please sanitize your input!
 * @param  {Object}             options         The options object that will be passed into the webshot module.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 * @param  {String}             callback.path   The path on disk where the image is stored.
 */
var getImageWithScript = module.exports.getImageWithScript = function(ctx, url, options, callback) {
    var path = ctx.baseDir + '/webshot.png';
    log().trace({'contentId': ctx.contentId}, 'Webshotting to %s', path);

    var _options = _.extend({}, defaultOptions, options);
    webshot(url, path, _options, function(err) {
        if (err) {
            log().error({'err': err}, 'Could not generate a screenshot.');
            return callback(err);
        }

        callback(null, path);
    });
};
