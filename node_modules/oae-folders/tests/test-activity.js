/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityTestsUtil = require('oae-activity/lib/test/util');
var AuthzUtil = require('oae-authz/lib/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');
var FoldersLibrary = require('oae-folders/lib/library');
var FoldersTestUtil = require('oae-folders/lib/test/util');

describe('Folders - Activity', function() {

    var camAdminRestContext = null;

    /*!
     * Set up an admin REST context before the tests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });

    /**
     * Set up some users and groups. One of the users will follow another user
     *
     * @param  {Function}   callback            Standard callback function
     * @param  {Object}     callback.user1      The first user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.user2      The second user as returned by `TestsUtil.generateTestUsers`. This user will follow user1
     * @param  {Object}     callback.user3      The third user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.user4      The fourth user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.user5      The fifth user as returned by `TestsUtil.generateTestUsers`
     * @param  {Object}     callback.group1     The first group as returned by `TestsUtil.generateTestGroups`
     * @param  {Object}     callback.group2     The second group as returned by `TestsUtil.generateTestGroups`
     */
    var _setup = function(callback) {
        // Generate some users
        TestsUtil.generateTestUsers(camAdminRestContext, 7, function(err, users, simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB) {
            assert.ok(!err);

            // Generate some groups
            TestsUtil.generateTestGroups(simong.restContext, 2, function(groupA, groupB) {

                // Add regular members in both groups
                var groupAmembers = {};
                groupAmembers[groupMemberA.user.id] = 'member';
                RestAPI.Group.setGroupMembers(simong.restContext, groupA.group.id, groupAmembers, function(err) {
                    assert.ok(!err);
                    var groupBmembers = {};
                    groupBmembers[groupMemberB.user.id] = 'member';
                    RestAPI.Group.setGroupMembers(simong.restContext, groupB.group.id, groupBmembers, function(err) {
                        assert.ok(!err);

                        // Nico follows simong
                        RestAPI.Following.follow(nico.restContext, simong.user.id, function(err) {
                            assert.ok(!err);

                            return callback(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB);
                        });
                    });
                });
            });
        });
    };

    describe('Create permutations', function() {

        /**
         * Test that verifies the folder-create activity when there are no extra members
         */
        it('verify no extra members', function(callback) {
            _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                    // The actor should receive an activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                        // Users who follows the actor receive the activity
                        ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                            // Everyone else gets nothing
                            ActivityTestsUtil.assertFeedDoesNotContainActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                ActivityTestsUtil.assertFeedDoesNotContainActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberA.restContext, groupMemberA.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupMemberB.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the folder-create activity when there is one extra user
         */
        it('verify one extra user', function(callback) {
            _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [bert], [], function(folder) {

                    // The actor should receive an activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, bert.user.id, function() {

                        // Users who follows the actor receive the activity
                        ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, bert.user.id, function() {

                            // The user who was made a member gets an activity
                            ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, bert.user.id, function() {

                                // Everyone else gets nothing
                                ActivityTestsUtil.assertFeedDoesNotContainActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberA.restContext, groupMemberA.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupMemberB.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the folder-create activity when there is one extra group
         */
        it('verify one extra group', function(callback) {
            _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [groupA], [], function(folder) {

                    // The actor should receive an activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, groupA.group.id, function() {

                        // Users who follow the actor receive the activity
                        ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, groupA.group.id, function() {

                            // The group who was made a member gets an activity
                            ActivityTestsUtil.assertFeedContainsActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, groupA.group.id, function() {

                                // Members of the group get an activity
                                ActivityTestsUtil.assertFeedContainsActivity(groupMemberA.restContext, groupMemberA.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, groupA.group.id, function() {

                                    // Everyone else gets nothing
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupMemberB.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the folder-create activity when there is more than one extra member
         */
        it('verify more than one extra member', function(callback) {
            _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [bert, groupA], [], function(folder) {

                    // The actor should receive an activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                        // Users who follow the actor receive the activity
                        ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                            // The user who was made a member gets an activity
                            ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                                // The group who was made a member gets an activity
                                ActivityTestsUtil.assertFeedContainsActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                                    // Members of the group get an activity
                                    ActivityTestsUtil.assertFeedContainsActivity(groupMemberA.restContext, groupMemberA.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, ActivityConstants.verbs.CREATE, simong.user.id, folder.id, null, function() {

                                        // Everyone else gets nothing
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupMemberB.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, function() {
                                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_CREATE, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the update activity is generated and propagated to the correct users
     */
    it('verify the update activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

            // Simon creates a folder that Bert co-manages and Stuart and groupA can view
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [bert], [stuart, groupA], function(folder) {

                // Simon updates the folder's name
                var updates = {'displayName': 'blabla'};
                RestAPI.Folders.updateFolder(simong.restContext, folder.id, updates, function(err, data) {
                    assert.ok(!err);

                    // Simon, Nico, Bert, Stuart and groupA should've received a folder update activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                        ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                            ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                                ActivityTestsUtil.assertFeedContainsActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                    // Assert the remaining users and/or groups did not get the activity
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, function() {

                                                // Only managers should receive a notification
                                                ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                                    // Non members get nothing
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the update-visibility activity is generated and propagated to the correct users
     */
    it('verify the update visibility activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

            // Simon creates a folder that Bert co-manages and Stuart and groupA can view
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [bert], [stuart, groupA], function(folder) {

                // Simon updates the folder's visibility
                var updates = {'visibility': 'loggedin'};
                RestAPI.Folders.updateFolder(simong.restContext, folder.id, updates, function(err, data) {
                    assert.ok(!err);

                    // Simon, Nico, Bert, Stuart and groupA should've received a folder update activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                        ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                            ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {
                                ActivityTestsUtil.assertFeedContainsActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                    // Assert the remaining users and/or groups did not get the activity
                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, function() {
                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, function() {
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberB.restContext, groupB.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, function() {

                                                // Only managers should receive a notification
                                                ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, ActivityConstants.verbs.UPDATE, simong.user.id, folder.id, null, function() {

                                                    // Non members get nothing
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_VISIBILITY, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the share and add-to-library activities are generated and propagated to the correct users
     */
    it('verify the share and add-to-library activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

            // Stephen creates a folder
            FoldersTestUtil.assertCreateFolderSucceeds(stephen.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                // Simon shares it with himself and Bert
                FoldersTestUtil.assertShareFolderSucceeds(stephen.restContext, simong.restContext, folder.id, [simong.user.id, bert.user.id, groupA.group.id], function() {

                    // Simon should have an `add-to-library` activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_LIBRARY, ActivityConstants.verbs.ADD, simong.user.id, folder.id, null, function() {
                        // Folder managers get an aggregated share
                        ActivityTestsUtil.assertFeedContainsActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, ActivityConstants.verbs.SHARE, simong.user.id, folder.id, [bert.user.id, groupA.group.id], function() {
                            // Bert should have a share activity
                            ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, ActivityConstants.verbs.SHARE, simong.user.id, folder.id, bert.user.id, function() {
                                // Nico should have a share activity as he follows Simon
                                ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, ActivityConstants.verbs.SHARE, simong.user.id, folder.id, [bert.user.id, groupA.group.id], function() {
                                    // Only the users with who the folder was shared with get a notification
                                    ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, ActivityConstants.verbs.SHARE, simong.user.id, folder.id, bert.user.id, function() {

                                        // Noone else should have a notification
                                        ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(simong.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, function() {
                                            ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stuart.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, function() {
                                                ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stephen.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_SHARE, function() {

                                                    // Assert nobody got a role update activity
                                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                                        ActivityTestsUtil.assertFeedDoesNotContainActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, callback);
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the update-member-role activities are generated and propagated to the correct users
     */
    it('verify the update-member-role activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

            // Simon creates a folder, makes Nico a manager and Bert a member
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [nico], [bert, groupA], function(folder) {

                // Simon makes Bert and groupA managers
                var updates = {};
                updates[bert.user.id] = _.extend({}, bert, {'role': 'manager'});
                updates[groupA.group.id] = _.extend({}, groupA, {'role': 'manager'});
                FoldersTestUtil.assertUpdateFolderMembersSucceeds(simong.restContext, simong.restContext, folder.id, updates, function() {

                    // Simon should have an update-member-role activity
                    ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, simong.user.id, [bert.user.id, groupA.group.id], folder.id, function() {

                        // Bert should have an update-member-role activity
                        ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, simong.user.id, [bert.user.id, groupA.group.id], folder.id, function() {

                            // Managers get an update-member-role activity
                            ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, simong.user.id, [bert.user.id, groupA.group.id], folder.id, function() {

                                // GroupA should have an update-member-role activitiy
                                ActivityTestsUtil.assertFeedContainsActivity(groupMemberA.restContext, groupA.group.id, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, ActivityConstants.verbs.UPDATE, simong.user.id, [bert.user.id, groupA.group.id], folder.id, function() {

                                    // Noone gets a notification for this activity
                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(simong.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                        ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                            ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                                ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stuart.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, function() {
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stephen.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_UPDATE_MEMBER_ROLE, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the folder-comment activities are generated and propagated to the correct users
     */
    it('verify the folder-comment activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

            // Simon creates a folder
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                // Stuart comments on the folder
                FoldersTestUtil.assertCreateMessageSucceeds(stuart.restContext, folder.id, 'Message body', null, function(message) {
                    assert.ok(message);

                    // Stuart should have a folder-comment activity
                    ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, ActivityConstants.verbs.POST, stuart.user.id, message.id, folder.id, function() {
                        // Simon should see the activity
                        ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, ActivityConstants.verbs.POST, stuart.user.id, message.id, folder.id, function() {
                            // Unrelated users don't see it
                            ActivityTestsUtil.assertFeedDoesNotContainActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, function() {
                                ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, function() {

                                    // When Simon makes a comment, stuart should see it as he's considered to be a recent contributor
                                    FoldersTestUtil.assertCreateMessageSucceeds(simong.restContext, folder.id, 'Message body', null, function(message2) {
                                        ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, ActivityConstants.verbs.POST, [stuart.user.id, simong.user.id], [message.id, message2.id], folder.id, function() {
                                            // Simon should see the activity
                                            ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, ActivityConstants.verbs.POST, [stuart.user.id, simong.user.id], [message.id, message2.id], folder.id, function() {
                                                // Unrelated users don't see it
                                                ActivityTestsUtil.assertFeedDoesNotContainActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, function() {
                                                    ActivityTestsUtil.assertFeedDoesNotContainActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_COMMENT, function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the properties of a folder comment
     */
    it('verify the folder-comment message entity model contains the correct information', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, simong, nico) {

            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                FoldersTestUtil.assertCreateMessageSucceeds(simong.restContext, folder.id, 'Message body', null, function(message) {
                    assert.ok(message);

                    ActivityTestsUtil.collectAndGetActivityStream(simong.restContext, simong.user.id, null, function(err, activityStream) {
                        assert.ok(!err);
                        var entity = activityStream.items[0];

                        // Assert the correct entities are all present
                        ActivityTestsUtil.assertActivity(entity, 'folder-comment', 'post', simong.user.id, message.id, folder.id);

                        // Assert the folder information is available on the target
                        assert.equal(entity.target['displayName'], folder.displayName);
                        assert.equal(entity.target['oae:profilePath'], folder.profilePath);

                        // Assert the comment information is available on the object
                        assert.equal(entity.object['oae:messageBoxId'], message.messageBoxId);
                        assert.equal(entity.object['oae:threadKey'], message.threadKey);
                        assert.equal(entity.object['content'], message.body);
                        assert.equal(entity.object['published'], message.created);
                        assert.equal(entity.object['objectType'], 'folder-comment');
                        assert.equal(entity.object['id'], 'http://' + global.oaeTests.tenants.cam.host + '/api/folder/' + folder.id + '/messages/' + message.created);

                        // Nico replies
                        FoldersTestUtil.assertCreateMessageSucceeds(nico.restContext, folder.id, 'A reply', message.created, function(nicosMessage) {
                            assert.ok(nicosMessage);

                            ActivityTestsUtil.collectAndGetActivityStream(simong.restContext, simong.user.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                var entity = activityStream.items[0];

                                // Assert the correct entities are all present. The first item should be
                                // an aggregated `folder-comment` activity. The object and actor will now
                                // be collections rather than a single message/person
                                ActivityTestsUtil.assertActivity(entity, 'folder-comment', 'post', [simong.user.id, nico.user.id], [message.id, nicosMessage.id], folder.id);

                                // The object should be an oae:collection containing 2 messages (the original message and the reply)
                                assert.equal(entity.object['objectType'], 'collection');
                                assert.ok(entity.object['oae:collection']);
                                assert.equal(entity.object['oae:collection'].length, 2);
                                var originalMessage = _.find(entity.object['oae:collection'], function(activityMessage) { return activityMessage['oae:id'] === message.id; });
                                assert.ok(originalMessage);
                                assert.equal(originalMessage['oae:id'], message.id);
                                assert.equal(originalMessage['content'], message.body);
                                assert.equal(originalMessage['author']['oae:id'], simong.user.id);
                                assert.equal(originalMessage['oae:tenant']['alias'], global.oaeTests.tenants.cam.alias);

                                // Assert the reply contains all the correct information
                                var reply = _.find(entity.object['oae:collection'], function(activityMessage) { return activityMessage['oae:id'] === nicosMessage.id; });
                                assert.ok(reply);
                                assert.equal(reply['oae:id'], nicosMessage.id);
                                assert.equal(reply['oae:messageBoxId'], nicosMessage.messageBoxId);
                                assert.equal(reply['oae:threadKey'], nicosMessage.threadKey);
                                assert.equal(reply['oae:tenant']['alias'], global.oaeTests.tenants.cam.alias);
                                assert.equal(reply['content'], nicosMessage.body);
                                assert.equal(reply['published'], nicosMessage.created);
                                assert.equal(reply['author']['oae:id'], nico.user.id);
                                assert.ok(reply['inReplyTo']);
                                assert.equal(reply['inReplyTo']['oae:id'], message.id);

                                // Verify both actors are present
                                assert.equal(entity.actor['objectType'], 'collection');
                                var simonEntity = _.find(entity.actor['oae:collection'], function(userEntity) { return userEntity['oae:id'] === simong.user.id; });
                                assert.ok(simonEntity);
                                assert.equal(simonEntity['oae:id'], simong.user.id);
                                assert.equal(simonEntity['oae:profilePath'], '/user/' + simong.user.tenant.alias + '/' + AuthzUtil.getResourceFromId(simong.user.id).resourceId);

                                var nicoEntity = _.find(entity.actor['oae:collection'], function(userEntity) { return userEntity['oae:id'] === nico.user.id; });
                                assert.ok(nicoEntity);
                                assert.equal(nicoEntity['oae:id'], nico.user.id);
                                assert.equal(nicoEntity['oae:profilePath'], '/user/' + nico.user.tenant.alias + '/' + AuthzUtil.getResourceFromId(nico.user.id).resourceId);

                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the add-to-folder activities are generated and propagated to the correct users
     */
    it('verify the add-to-folder activity', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

            // Simon creates a folder and makes Bert a member
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [bert], function(folder) {

                // Stephen creates 2 files
                RestAPI.Content.createLink(stephen.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, [], function(err, link1) {
                    assert.ok(!err);
                    RestAPI.Content.createLink(stephen.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, [], function(err, link2) {
                        assert.ok(!err);

                        // Simon adds the two items to the folder
                        FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folder.id, [link1.id, link2.id], function() {

                            // Simon should have an add-to-folder activity
                            ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {
                                // Nico follows Simon and should see the activity
                                ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {
                                    // Members of the folder should see the activity
                                    ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {
                                        // Managers of the content should see the activity
                                        ActivityTestsUtil.assertFeedContainsActivity(stephen.restContext, stephen.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {

                                            // Unrelated users don't see it
                                            ActivityTestsUtil.assertFeedDoesNotContainActivity(stuart.restContext, stuart.user.id, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, function() {

                                                // Members of the folder should've received a notification
                                                ActivityTestsUtil.assertNotificationStreamContainsActivity(bert.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, ActivityConstants.verbs.ADD, simong.user.id, [link1.id, link2.id], folder.id, function() {

                                                    // Others shouldn't receive a notification
                                                    ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(nico.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, function() {
                                                        ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stephen.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, function() {
                                                            ActivityTestsUtil.assertNotificationStreamDoesNotContainActivity(stuart.restContext, FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER, callback);
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the add-to-folder activities aggregate on the folder
     */
    it('verify the add-to-folder aggregation rules', function(callback) {
        _setup(function(simong, nico, bert, stuart, stephen, groupMemberA, groupMemberB, groupA, groupB) {

            // Simon creates 2 folders
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folderA) {
                FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folderB) {

                    // Stephen creates 2 files
                    RestAPI.Content.createLink(stephen.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, [], function(err, link1) {
                        assert.ok(!err);
                        RestAPI.Content.createLink(stephen.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, [], function(err, link2) {
                            assert.ok(!err);

                            // Simon adds both files to both of his folders. This should
                            // result in 2 separate activities
                            FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folderA.id, [link1.id, link2.id], function() {
                                FoldersTestUtil.assertAddContentItemsToFolderSucceeds(simong.restContext, folderB.id, [link1.id, link2.id], function() {

                                    ActivityTestsUtil.collectAndGetActivityStream(simong.restContext, simong.user.id, null, function(err, data) {
                                        assert.ok(!err);

                                        // Get the add-to-folder activities
                                        var addToFolderActivities = _.filter(data.items, function(activity) {
                                            return (activity['oae:activityType'] === FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_FOLDER);
                                        });

                                        // We should have 2 activities as we added content to 2 folders
                                        assert.strictEqual(addToFolderActivities.length, 2);

                                        // Sanity-check we have an activity for each folder
                                        assert.strictEqual(addToFolderActivities[0].target['oae:id'], folderB.id);
                                        assert.strictEqual(addToFolderActivities[1].target['oae:id'], folderA.id);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that previews are added to the folder entities when they are available
     */
    it('verify previews are added when available', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            // Simon creates a folder and makes Bert a member
            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                // Fake some previews for the folder
                var previews = {
                    'thumbnailUri': 'local:f/camtest/ab/cd/ef/gh/thumbnail.jpg',
                    'wideUri': 'local:f/camtest/ab/cd/ef/gh/wide.jpg'
                };
                FoldersDAO.setPreviews(folder, previews, function(err, folder) {
                    assert.ok(!err);

                    // Get the activities
                    ActivityTestsUtil.collectAndGetActivityStream(simong.restContext, simong.user.id, null, function(err, response) {
                        assert.ok(!err);

                        // Assert the activity is present
                        var createdFolderActivity = _.findWhere(response.items, {'oae:activityType': FoldersConstants.activity.ACTIVITY_FOLDER_CREATE});
                        assert.ok(createdFolderActivity);

                        // Assert the folder has a thumbnail and wide image
                        assert.ok(createdFolderActivity.object);
                        assert.ok(createdFolderActivity.object.image);
                        assert.ok(createdFolderActivity.object.image.url);
                        assert.ok(createdFolderActivity.object['oae:wideImage']);
                        assert.ok(createdFolderActivity.object['oae:wideImage'].url);

                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that adding content to a folder upon creation does not result in an add-to-folder activity
     */
    it('verify adding content to a folder upon content creation does not result in an add-to-folder activity', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
            assert.ok(!err);

            FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [], [], function(folder) {

                RestAPI.Content.createLink(simong.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, [folder.id], function(err, link1) {
                    assert.ok(!err);

                    ActivityTestsUtil.collectAndGetActivityStream(simong.restContext, simong.user.id, null, function(err, response) {
                        assert.ok(!err);

                        // Assert the add-to-folder activity is not present
                        var addToLibraryActivity = _.findWhere(response.items, {'oae:activityType': FoldersConstants.activity.ACTIVITY_FOLDER_ADD_TO_LIBRARY});
                        assert.ok(!addToLibraryActivity);

                        // Assert the content-create activity is present
                        var contentCreateActivity = _.findWhere(response.items, {'oae:activityType': 'content-create'});
                        assert.ok(contentCreateActivity);

                        // Assert the content-create activity contains the folder as a target
                        assert.strictEqual(contentCreateActivity.target['oae:id'], folder.id);
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that content-create activities their targets can contain folders and the activities
     * are routed to the correct activity stream
     */
    it('verify content-create activities are routed to the correct activity streams and contain the correct target information', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, simong, nico, bert, stuart) {
            assert.ok(!err);

            TestsUtil.generateTestGroups(nico.restContext, 2, function(nicosGroup1, nicosGroup2) {
                TestsUtil.generateTestGroups(bert.restContext, 1, function(bertsGroup) {

                    FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [nicosGroup1, bertsGroup, stuart], [], function(folder1) {
                        FoldersTestUtil.assertCreateFolderSucceeds(simong.restContext, 'test displayName', 'test description', 'public', [nicosGroup2], [], function(folder2) {

                            RestAPI.Content.createLink(simong.restContext, 'test', 'test', 'public', 'http://www.google.ca', null, null, [folder1.id, folder2.id], function(err, link) {
                                assert.ok(!err);

                                // Simon sees both folders
                                ActivityTestsUtil.assertFeedContainsActivity(simong.restContext, simong.user.id, 'content-create', ActivityConstants.verbs.CREATE, simong.user.id, link.id, null, function() {

                                    // Nico sees both folders in his personal stream and each one
                                    // distinctly in his two groups
                                    ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nico.user.id, 'content-create', ActivityConstants.verbs.CREATE, simong.user.id, link.id, null, function() {
                                        ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nicosGroup1.group.id, 'content-create', ActivityConstants.verbs.CREATE, simong.user.id, link.id, null, function() {
                                            ActivityTestsUtil.assertFeedContainsActivity(nico.restContext, nicosGroup2.group.id, 'content-create', ActivityConstants.verbs.CREATE, simong.user.id, link.id, null, function() {

                                                // Bert only sees folder1 in his personal stream and in his group's stream
                                                ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bert.user.id, 'content-create', ActivityConstants.verbs.CREATE, simong.user.id, link.id, null, function() {
                                                    ActivityTestsUtil.assertFeedContainsActivity(bert.restContext, bertsGroup.group.id, 'content-create', ActivityConstants.verbs.CREATE, simong.user.id, link.id, null, function() {

                                                        // Stuart only sees the first folder
                                                        ActivityTestsUtil.assertFeedContainsActivity(stuart.restContext, stuart.user.id, 'content-create', ActivityConstants.verbs.CREATE, simong.user.id, link.id, null, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
