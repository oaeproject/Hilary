/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var parseString = require('xml2js').parseString;
var request = require('request');
var slideshare = require('slideshare');
var url = require('url');
var util = require('util');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-preview-processor');
var PreviewConfig = require('oae-config').config('oae-preview-processor');

var LinkProcessorUtil = require('oae-preview-processor/lib/processors/link/util');
var PreviewUtil = require('oae-preview-processor/lib/util');

// Regular expression that will be used to check if the provided URL is a SlideShare URL
var SLIDES_REGEX = /^http(s)?:\/\/(www\.)?slideshare\.net\/(\w+)\/(\w+)/;

/**
 * @borrows Interface.test as SlideShareProcessor.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    // Don't bother with non-link content items
    if (contentObj.resourceSubType !== 'link') {
        return callback(null, -1);
    }

    // Check if we're configured to deal with SlideShare URLs
    var config = _getConfig();
    if (!config.apiKey || !config.sharedSecret) {
        return callback(null, -1);
    }

    // Check if they are SlideShare URLs
    if (SLIDES_REGEX.test(contentObj.link)) {
        return callback(null, 10);
    } else {
        return callback(null, -1);
    }
};

/**
 * @borrows Interface.generatePreviews as SlideShareProcessor.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {
    var config = _getConfig();

    var ss = new slideshare(config.apiKey, config.sharedSecret);
    ss.getSlideshowByURL(contentObj.link, function(response) {
        if (!response || response.SlideShareServiceError) {
            log().error({'err': response.SlideShareServiceError}, 'Failed to interact with the SlideShare API');
            return callback({'code': 500, 'msg': 'Failed to interact with the SlideShare API'});

        // Ignore this image if it has no thumbnail
        } else if (!response.Slideshow || !response.Slideshow.ThumbnailURL) {
            return callback(null, true);
        }

        var result = response.Slideshow;

        // Try to get some optional metadata about this slideshow such as the title and/or description. The display name
        // will only be overridden with the title retrieved from SlideShare when the content item's display name has not been set
        // by the user (i.e. the SlideShare URL is used as the displayName). The description retrieved from SlideShare will only be
        // set on the content item when the content item has no description
        var opts = {};
        if (result.Title && result.Title.length > 0) {
            opts.displayName = result.Title[0];
        }
        if (result.Description && result.Description.length > 0) {
            opts.description = result.Description[0];
        }

        // Download the thumbnail
        var imageUrl = 'http:' + result.ThumbnailURL[0];
        var path = ctx.baseDir + '/slideshare.jpg';
        PreviewUtil.downloadRemoteFile(imageUrl, path, function(err, path) {
            if (err) {
                return callback(err);
            }

            LinkProcessorUtil.generatePreviewsFromImage(ctx, path, opts, callback);
        });
    });
};

/**
 * Get the SlideShare API values that have been configured in the Admin UI
 *
 * @return {Object}     The apiKey and sharedSecret from the Admin UI
 * @api private
 */
var _getConfig = function() {
    return {
        'apiKey': PreviewConfig.getValue('admin', 'slideshare', 'apikey'),
        'sharedSecret': PreviewConfig.getValue('admin', 'slideshare', 'sharedsecret')
    };
};
