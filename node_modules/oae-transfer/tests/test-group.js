/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthzAPI = require('oae-authz');
var RestAPI = require('oae-rest');
var FolderAPI = require('oae-folders');

var TestsUtil = require('oae-tests');
var TransferTestUtil = require('oae-transfer/lib/test/util');

describe('Transfer-group', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });

    describe('Account transfer impact on groups', function() {
        /**
         * Test that verify if transfer find the good manager
         */
        it('verify if transfer find the members associated to the contents of the user which will make a transfer', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 2, function(err, users, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate group
                    RestAPI.Group.createGroup(mrvisser.restContext, 'Group title', 'Group description', 'private', 'yes', [userOrigin.user.email, orodan.user.email], [stuartf.user.email], function(err, group) {
                        assert.ok(!err);
                        // Create list of members
                        var membersListReal = [];
                        membersListReal.push(stuartf.user.id);
                        membersListReal.push(orodan.user.id);
                        membersListReal.push(mrvisser.user.id);
                        // Create and make transfer
                        TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                            assert.ok(transfer);
                            TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, members) {
                                assert.ok(!err);
                                // Keep only id from the members list
                                var membersList = [];
                                _.each(members, function(i) {
                                    membersList.push(i.profile.principalId);
                                });
                                // Sort lists to compare
                                membersList.sort();
                                membersListReal.sort();
                                // Compare links id
                                assert.deepEqual(membersList, membersListReal);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer give the good permission to the target user
         */
        it('verify if transfer give the right permissions', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    RestAPI.Group.createGroup(userOrigin.restContext, 'Group title', 'Group description', 'private', 'yes', [mrvisser.user.email, userOrigin.user.email], [], function(err, group) {
                        assert.ok(!err);
                        TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                            assert.ok(transfer);
                            TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                assert.ok(!err);
                                // Verify the role
                                AuthzAPI.hasRole(userTarget.user.id, group.id, 'manager', function(err, hasRole) {
                                    assert.equal(hasRole, true);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * verify the case A transfer to B, A is a manager and B is a viewer : the role will be update
         * Test that verify if transfer update the right if the target user have less right than origin user
         */
        it('verify if the transfer update the permission when the target user have less right than origin user', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate group
                    RestAPI.Group.createGroup(userOrigin.restContext, 'Group title', 'Group description', 'private', 'yes', [mrvisser.user.email, userOrigin.user.email], [userTarget.user.email], function(err, group) {
                        assert.ok(!err);
                        TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                            assert.ok(transfer);
                            TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                assert.ok(!err);
                                // Verify the role
                                AuthzAPI.hasRole(userTarget.user.id, group.id, 'manager', function(err, hasRole) {
                                    assert.equal(hasRole, true);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * verify the case A transfer to B, A is a viewer and B is a manager : the role will not be update
         * Test that verify if transfer do not update the right if the target user have more right than origin user
         */
        it('verify if the transfer do not update the permission when the target user have more right than origin user', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate group
                    RestAPI.Group.createGroup(userOrigin.restContext, 'Group title', 'Group description', 'private', 'yes', [userTarget.user.email], [userOrigin.user.email], function(err, group) {
                        assert.ok(!err);
                        TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                            assert.ok(transfer);
                            TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                assert.ok(!err);
                                // Verify the role
                                AuthzAPI.hasRole(userTarget.user.id, group.id, 'manager', function(err, hasRole) {
                                    assert.equal(hasRole, true);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });        

        /**
         * Test that verify if a file inside a group is transfered 
         */
        it('verify that the target have access to the file inside the group after the transfer', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate folder
                    RestAPI.Group.createGroup(userOrigin.restContext, 'Group title', 'Group description', 'private', 'yes', [userOrigin.user.email], [], function(err, group) {
                        assert.ok(group);
                        // Create files
                        TransferTestUtil.generateFileOnFolder(mrvisser.restContext, 'private', null, group.id, function(err, mrvisserfile) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userOrigin.user.id, group.id, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.equal(hasRole, true);
                                AuthzAPI.hasRole(userOrigin.user.id, mrvisserfile.id, 'manager', function(err, hasRole) {
                                    assert.ok(!err);
                                    assert.equal(hasRole, true);
                                    TransferTestUtil.assertInitiateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                        assert.ok(transfer);
                                        TransferTestUtil.assertCompleteTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                            assert.ok(!err);
                                            // Verify the role
                                            AuthzAPI.hasRole(userTarget.user.id, group.id, 'manager', function(err, hasRole) {
                                                assert.equal(hasRole, true);
                                                AuthzAPI.hasRole(userTarget.user.id, mrvisserfile.id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

});
