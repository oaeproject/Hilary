/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var MqTestsUtil = require('oae-util/lib/test/mq-util');
var RestAPI = require('oae-rest');

var ActivityAggregator = require('oae-activity/lib/internal/aggregator');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;

/**
 * Get the activity stream by its id, but delay and perform an activity collection first to ensure the stream is
 * updated.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {String}         [activityStreamId]  The id of the activity stream to get. If `null`, will get the stream of the current user
 * @param  {Object}         [opts]              @see RestAPI.Activity#getActivityStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getActivityStream for more information.
 */
var collectAndGetActivityStream = module.exports.collectAndGetActivityStream = function(restCtx, activityStreamId, opts, callback) {
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            if (activityStreamId) {
                RestAPI.Activity.getActivityStream(restCtx, activityStreamId, opts, callback);
            } else {
                RestAPI.Activity.getCurrentUserActivityStream(restCtx, opts, callback);
            }
        });
    });
};

/**
 * Get the notification stream, but delay and perform an activity collection first to ensure the stream is
 * updated.
 *
 * @param  {RestContext}    restCtx             The context of the current request
 * @param  {Object}         [opts]              @see RestAPI.Activity#getNotificationStream for available options
 * @param  {Function}       callback            Invoked when the process completes
 * @param  {Object}         callback.err        An error that occurred, if any
 *
 * @see RestAPI.Activity#getNotificationStream for more information.
 */
var collectAndGetNotificationStream = module.exports.collectAndGetNotificationStream = function(restCtx, opts, callback) {
    MqTestsUtil.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            RestAPI.Activity.getNotificationStream(restCtx, opts, callback);
        });
    });
};
