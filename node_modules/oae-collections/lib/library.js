/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var ContentDAO = require('oae-content/lib/internal/dao');
var LibraryAPI = require('oae-library');

var CollectionsConstants = require('oae-collections/lib/constants').CollectionsConstants;
var CollectionsDAO = require('oae-collections/lib/internal/dao');

/*!
 * Register a library indexer that can provide resources to reindex the collections library
 */
LibraryAPI.Index.registerLibraryIndex(CollectionsConstants.library.COLLECTIONS_LIBRARY_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the group ids ('g') to which the principal is directly associated in this
        // batch of paged resources. Since the group can be a member of both user groups and
        // collection groups, we filter down to just the collection groups for collection libraries
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, 'g', start, limit, function(err, roles, nextToken) {
            if (err) {
                return callback(err);
            }

            // We just need the ids, not the roles
            var ids = _.pluck(roles, 'id');
            CollectionsDAO.getCollectionsByGroupIds(ids, function(err, collections) {
                if (err) {
                    return callback(err);
                }

                // Remove empty items, which indicates they mapped to user groups and not collection
                // groups
                collections = _.compact(collections);

                // Convert all the collections into the light-weight library items that describe how
                // they are placed in a library index
                var resources = _.map(collections, function(collection) {
                    return {
                        'id': collection.id,
                        'rank': collection.lastModified,
                        'tenant': collection.tenant,
                        'visibility': collection.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});

/*!
 * Register a library indexer that can provide resources to reindex the collection content library
 */
LibraryAPI.Index.registerLibraryIndex(CollectionsConstants.library.CONTENT_LIBRARY_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        // Query all the content ids ('c') to which the collection is directly associated in this
        // batch of paged resources. Since the group can be a member of both user groups and
        // collection groups, we filter down to just the collection groups for collection libraries
        AuthzAPI.getRolesForPrincipalAndResourceType(libraryId, 'c', start, limit, function(err, roles, nextToken) {
            if (err) {
                return callback(err);
            }

            // We just need the ids, not the roles
            var ids = _.pluck(roles, 'id');

            ContentDAO.Content.getMultipleContentItems(ids, ['contentId', 'tenantAlias', 'visibility', 'lastModified'], function(err, contentItems) {
                if (err) {
                    return callback(err);
                }

                // Convert all the content into the light-weight library items that describe how
                // they are placed in a library index
                var resources = _.map(contentItems, function(contentItem) {
                    return {
                        'id': contentItem.id,
                        'rank': contentItem.lastModified,
                        'tenant': contentItem.tenant,
                        'visibility': contentItem.visibility
                    };
                });

                return callback(null, resources, nextToken);
            });
        });
    }
});
