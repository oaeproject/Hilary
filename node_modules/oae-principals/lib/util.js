/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var sanitize = require('validator').sanitize;

var cassandra = require('oae-util/lib/cassandra');
var GroupAPI = require('oae-principals/lib/api.group');
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var User = require('./model').User;
var Group = require('./model').Group;
var VISIBILITY_OPTIONS = require('./model').VISIBILITY_OPTIONS;

var tz = require('oae-util/lib/tz');

/**
 * Gets a principal from the DB and converts the returned data to the correct model (user or group).
 * 
 * @param  {Context}    ctx                 The current context
 * @param  {String}     principalId         The ID of the principal that should be retrieved.
 * @param  {Function}   callback            A callback method.
 * @param  {Object}     callback.err        An error object (if any)
 * @param  {User|Group} callback.principal  The asked for principal.
 */
var getPrincipal = module.exports.getPrincipal = function(ctx, principalId, callback) {
    cassandra.runQuery('SELECT * FROM Principals USING CONSISTENCY QUORUM WHERE principalId = ?', [principalId], function (err, rows) {
        if (err) {
            return callback(err);
        }

        // check if no users were returned
        if (rows[0].count === 1) {
            return callback({'code': 404, 'msg': "Couldn't find principal: " + principalId});
        }

        var principal = getPrincipalFromRow(ctx, rows[0]);
        callback(null, principal);
    });
};

/**
 * Retrieves a principal from a row object. It performs all the visibility checks
 * and takes the current execution context into account.
 *
 * @param  {Context}       ctx     The current context
 * @param  {Row}           row     A Helenus row object.
 * @return {User|Group}            A user or group object.
 * @api private
 */
var getPrincipalFromRow = function(ctx, row) {
    if (module.exports.isGroup(row.get('principalId').value)) {
        // The data that sits on the group object is always visible.
        return rowToGroup(row);
    } else {
        var user = rowToUser(row);
        
        var isAnon = !ctx.user();
        var isTargetUser = (!isAnon && ctx.user().id === user.id);
        var isAdmin = (!isAnon && ctx.user().isAdmin && ctx.user().isAdmin(user.tenant));

        if (isAdmin || isTargetUser) {
            return user;
        }

        // Hide the sensitive profile information if needed
        if ((user.visibility === VISIBILITY_OPTIONS.LOGGEDIN && isAnon) ||
            (user.visibility === VISIBILITY_OPTIONS.PRIVATE && !isTargetUser)) {
            // the user does not have access to see the 'private' portion of this user's info
            user.displayName = user.publicAlias;
            delete user.publicAlias;
            delete user.timezone;
            delete user.locale;
        } else {
            // they have access to see private but are not the target user, avoid exposing the public alias unnecessarily
            delete user.publicAlias;
        }

        return user;
    }
};

/**
 * Gets a set of principals (user or groups). This method *will* throw an error if some of the principals
 * don't exist.
 *
 * @param  {Context}   ctx                         The current context
 * @param  {String[]}  principalIds                The ID of the principal that should be retrieved.
 * @param  {Function}  callback                    Standard callback function
 * @param  {Object}    callback.err                Error object containing the error message.
 * @param  {Object}    callback.principals         Object representing the retrieved principals. The keys will be the principal ids and the values will be the principal basic profiles
 */
var getPrincipals = module.exports.getPrincipals = function(ctx, principalIds, callback) {
    if (principalIds.length === 0) {
        return callback(null, {});
    }
    cassandra.runQuery("SELECT * FROM Principals USING CONSISTENCY QUORUM WHERE principalId IN (?)", [principalIds], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var isMissingPrincipals = false;
        var principals = {};
        for (var i = 0; i < rows.length; i++) {
            // An empty row will come back for non-existing principals
            if (rows[i].count > 1) {
                var principal = getPrincipalFromRow(ctx, rows[i]);
                principals[principal.id] = principal;
            } else {
                isMissingPrincipals = true;
            }
        }

        if (isMissingPrincipals) {
            return callback({'code': 400, 'msg': 'These principals could not be found: ' + _.difference(principalIds, _.keys(principals))});
        }

        callback(null, principals);
    });
};

/**
 * Check if an identifier really is a group identifier.
 * 
 * @param  {String}  groupId    An identifier
 * @return {Boolean}            Whether or not the provided identifier is a group identifier.
 */
var isGroup = module.exports.isGroup = function(groupId) {
    var principal = AuthzUtil.getPrincipalFromId(groupId);
    return (principal.principalType === "g");
};

/**
 * Check if an identifier really is a user identifier.
 * 
 * @param  {String}  userId     An identifier
 * @return {Boolean}            Whether or not the provided identifier is a user identifier.
 */
var isUser = module.exports.isUser = function(userId) {
    var principal = AuthzUtil.getPrincipalFromId(userId);
    return (principal.principalType === "u");
};

/**
 * Creates a Group from a Cassandra row.
 * 
 * @param  {Row}    row     Cassandra Row
 * @return {Group}          A group object.
 * @api private
 */
var rowToGroup = function (row) {
    var hash = cassandra.rowToHash(row);
    return new Group(hash.tenant, hash.principalId, hash.alias, hash.name, hash.description, hash.visibility, hash.joinable);
};

/**
 * Creates a User from a Cassandra row.
 * 
 * @param  {Row}    row     Cassandra Row
 * @return {User}           A User object.
 * @api private
 */
var rowToUser = function(row) {
    var hash = cassandra.rowToHash(row);
    var isGlobalAdmin = (row.get('admin:global') && sanitize(row.get('admin:global').value).toBooleanStrict());
    var isTenantAdmin = (row.get('admin:tenant') && sanitize(row.get('admin:tenant').value).toBooleanStrict());

    // Ensure that the timezone we're setting is something the app
    // can deal with.
    var timezone = hash.timezone;
    if (timezone === 'UTC') {
        timezone = 'Etc/UTC';
    }
    try {
        var date = new tz.Date(null, timezone);
        if (date.getTimezone === null) {
            throw new Error();
        }
    } catch (err) {
        // We can't deal with this timezone.
        // default to UTC
        timezone = 'Etc/UTC';
    }

    var user = new User(hash.tenant, hash.principalId, hash.displayName, {
        visibility: hash.visibility,
        locale: hash.locale,
        timezone: timezone,
        publicAlias: hash.publicAlias,
        isGlobalAdmin: isGlobalAdmin,
        isTenantAdmin: isTenantAdmin
    });

    // The row might contain extra data that we wish to pass back.
    user.extra = {};
    var keys = _.keys(hash);
    var blacklist = ['tenant', 'principalId', 'displayName', 'visibility', 'locale', 'timezone', 'publicAlias', 'admin:global', 'admin:tenant'];
    for (var i = 0; i < keys.length; i++) {
        if (blacklist.indexOf(keys[i]) === -1) {
            user.extra[keys[i]] = hash[keys[i]];
        }
    }
    return user;
};
