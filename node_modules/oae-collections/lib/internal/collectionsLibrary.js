/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var LibraryAPI = require('oae-library');
var OaeUtil = require('oae-util/lib/util');

var CollectionsConstants = require('../constants').CollectionsConstants;

/**
 * Get the ids of the collections in the collections library of a specified user or group
 *
 * @param  {User|Group}     principal               The user or group whose collections library to list
 * @param  {String}         visibility              The effective library visibility to list
 * @param  {Object}         [opts]                  Optional arguments for listing the library items
 * @param  {String}         [opts.start]            The token that indicates from where to start listing items
 * @param  {Number}         [opts.limit]            The maximum number of items to list
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {String[]}       callback.collectionIds  The collection ids in the specified library
 * @param  {String}         callback.nextToken      The token to use for the `start` parameter for the next invocation to get the next page of results. If `null`, indicates that there are no more items to list
 */
var list = module.exports.list = function(principal, visibility, opts, callback) {
    LibraryAPI.Index.list(CollectionsConstants.library.COLLECTIONS_LIBRARY_INDEX_NAME, principal.id, visibility, {'start': opts.start, 'limit': opts.limit}, callback);
};

/**
 * Insert a collection into the libraries of all the provided user and group ids
 *
 * @param  {String[]}       principalIds    The ids of the users and groups whose libraries to insert the provided collection
 * @param  {Collection}     collection      The collection to insert
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 */
var insert = module.exports.insert = function(principalIds, collection, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'principalIds': principalIds,
                'collectionId': collection.id
            }, 'Error inserting collection into principal libraries');
        }
    };

    if (_.isEmpty(principalIds)) {
        return callback();
    }

    var effectiveLibraryVisibilities = LibraryAPI.Authz.resolveEffectiveLibraryVisibilities(principalIds, collection);
    LibraryAPI.Index.insert(CollectionsConstants.library.COLLECTIONS_LIBRARY_INDEX_NAME, effectiveLibraryVisibilities, collection.id, collection.lastModified, callback);
};

/**
 * Update the collection in the libraries of all the provided user and group ids
 *
 * @param  {String[]}       principalIds        The ids of the users and groups whose libraries should have the collection updated
 * @param  {Collection}     collection          The collection to update
 * @param  {Number}         oldLastModified     The previous collection last modified time
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 */
var update = module.exports.update = function(principalIds, collection, oldLastModified, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'principalIds': principalIds,
                'collectionId': collection.id
            }, 'Error updating collection for principal libraries');
        }
    };

    // Do not perform a library update for no principals
    if (_.isEmpty(principalIds)) {
        return callback();
    }

    // If no old last modified date was provided, we touch the collection to update it and treat the
    // provided collection as the old version
    var touchCollection = true;
    if (!oldLastModified) {
        touchCollection = false;
        oldLastModified = collection.lastModified;
    }

    // If it specified we should "touch" the collection, we simply update its lastModified timestamp
    // before updating the library indices
    OaeUtil.invokeIfNecessary(touchCollection, CollectionsDAO.updateCollection, collection.id, {}, function(err, updatedCollection) {
        if (err) {
            return callback(err);
        }

        // Update the library entries for the provided principal ids
        var effectiveLibraryVisibilities = LibraryAPI.Authz.resolveEffectiveLibraryVisibilities(principalIds, collection);
        return LibraryAPI.Index.update(CollectionsConstants.library.COLLECTIONS_LIBRARY_INDEX_NAME, effectiveLibraryVisibilities, updatedCollection.id, updatedCollection.lastModified, oldLastModified, callback);
    });
};

/**
 * Remove the collection from the libraries of the provided user and group ids
 *
 * @param  {String[]}       principalIds    The ids of the users and groups whose libraries will have the collection removed
 * @param  {Collection}     collection      The collection to remove from the libraries
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 */
var remove = module.exports.remove = function(principalIds, collection, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({
                'err': err,
                'principalIds': principalIds,
                'collectionId': collection.id
            }, 'Error removing collection from principal libraries');
        }
    };

    if (_.isEmpty(principalIds) || !collection) {
        return callback();
    }

    LibraryAPI.Index.remove(CollectionsConstants.library.COLLECTIONS_LIBRARY_INDEX_NAME, principalIds, collection.id, collection.lastModified, callback);
};
