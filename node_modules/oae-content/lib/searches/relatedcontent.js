/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var OaeUtil = require('oae-util/lib/util');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');
var TenantsUtil = require('oae-tenants/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

var ContentDAO = require('oae-content/lib/internal/dao');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;

// The boosting factors that will be used in the filters.
// See http://www.elasticsearch.org/guide/reference/query-dsl/custom-filters-score-query.html for more information
var BOOST_FACTORS = {
    'THUMBNAIL': '1.5',
    'DESCRIPTION': '1.1',
    'CREATED_BY': '1.1'
};

/**
 * A search that searches for related content items to a specified content item.
 * This search will search trough public content items (or loggedin ones local to the current tenant.)
 * Setting the scope flag to 'all', allows you to find related content in other tenants as well.
 * This will mostly happen on account of the displayName.
 * Content items who have a thumbnail or a description or are also created by the creator of the base piece of content will get boosted.
 * By default this feed only returns 5 items.
 *
 * @param  {Context}        ctx                     The context of the current request
 * @param  {Object}         opts                    General search options
 * @param  {String[]}       opts.pathParams         An array with 1 string. That string should be the ID of the piece of content that will act as the base content item.
 * @param  {String}         [opts.scope]            Specifies if the search is cross-tenant. Can be `all`. (Default: null)
 * @param  {Function}       callback                Invoked when the process completes
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {SearchResult}   callback.results        An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // Sanitize custom search options
    opts = opts || {};
    opts.limit = OaeUtil.getNumberParam(opts.limit, 5, 1, 25);
    opts.scope = opts.scope || null;
    var contentId = (opts.pathParams && opts.pathParams.length > 0) ? opts.pathParams[0] : null;

    var validator = new Validator();
    validator.check(contentId, {'code': 400, 'msg': 'A content id must be provided'}).isResourceId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Retrieve the piece of content.
    ContentDAO.Content.getContent(contentId, function(err, contentObj) {
        if (err) {
            return callback(err);
        }

        // The query object for the Query DSL
        var query = _createRelatedQuery(contentObj);

        // The filter object for the Query DSL
        var filter = null;

        // We're searching for documents of type `resource` and resourceType `content`.
        var typeFilter = SearchUtil.filterTerm('_type', SearchConstants.resourceMappingName);
        var resourceTypeFilter = SearchUtil.filterTerm('resourceType', SearchConstants.general.RESOURCE_TYPE_CONTENT);

        // If external resources should be included, we need to know the tenants with which the current
        // tenant can interact, so we can properly filter out content items from non-permeable tenants
        // and private and loggedin items from permeable tenants
        var interactingTenantAliases = TenantsUtil.getAllTenantsForInteraction(ctx.tenant().alias);

        // This base filter gets applied to the query unconditionally.
        var baseFilter = SearchUtil.filterAnd(typeFilter, resourceTypeFilter);

        if (ctx.user() && ctx.user().isGlobalAdmin()) {
            // As the user is a global admin, we get everything from the current tenant or everything from all tenants depending on the value of `scope`
            filter = SearchUtil.filterAnd(
                baseFilter,
                (opts.scope !== 'all') ? SearchUtil.filterTerm('tenantAlias', opts.scope || ctx.tenant().alias) : null
            );

        } else if (ctx.user()) {
            // The user is authenticated
            filter = SearchUtil.filterAnd(
                baseFilter,
                SearchUtil.filterAnd(

                    // Only resources from the current tenant will be included when `scope` has not been specified
                    (opts.scope !== 'all') ? SearchUtil.filterTerm('tenantAlias', opts.scope || ctx.tenant().alias) : null,

                    // This or statement applies visibility restrictions
                    SearchUtil.filterOr(

                        // Public resources from the current tenant should always be included. If external results should be included, resources from
                        // other permeable tenants should be included as well
                        SearchUtil.filterAnd(
                            SearchUtil.filterTerm('visibility', AuthzConstants.visibility.PUBLIC),
                            SearchUtil.filterOr(
                                SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                                (opts.scope && interactingTenantAliases.length > 0) ? SearchUtil.filterTerms('tenantAlias', interactingTenantAliases) : null
                            )
                        ),

                        // Logged in resources from the current tenant should also be included
                        SearchUtil.filterAnd(
                            SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                            SearchUtil.filterTerm('visibility', AuthzConstants.visibility.LOGGEDIN)
                        )
                    )
                )
            );
        } else {
            // For anonymous users, only show public resources
            filter = SearchUtil.filterAnd(
                baseFilter,

                // Limit to the current tenant unless specified otherwise
                (opts.scope !== 'all') ? SearchUtil.filterTerm('tenantAlias', opts.scope || ctx.tenant().alias) : null,

                // Public resources from the current tenant and other permeable tenants should be included
                SearchUtil.filterAnd(
                    SearchUtil.filterTerm('visibility', AuthzConstants.visibility.PUBLIC),
                    SearchUtil.filterOr(
                        SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                        (opts.scope && interactingTenantAliases.length > 0) ? SearchUtil.filterTerms('tenantAlias', interactingTenantAliases) : null
                    )
                )
            );
        }

        // wrap the query and filter into the top-level Query DSL "query" object
        return callback(null, SearchUtil.createQuery(query, filter, opts));
    });
};

/**
 * Creates a query where documents must be similar to the passed in piece of content.
 * Documents who have a description and/or thumbnail are boosted.
 * Documents who are created by the same creator will also be boosted.
 *
 * @param  {Object} content     The content object
 * @return {Object}             The appropriate ElasticSearch query.
 * @api private
 */
var _createRelatedQuery = function(content) {
    return {
        'custom_filters_score': {
            'query': {
                'bool': {
                    'must': SearchUtil.createMoreLikeThisQuery(content.displayName),
                    'must_not': SearchUtil.filterIds([content.id]),
                    'boost': 500
                }
            },
            'filters': [{
                'filter': SearchUtil.filterExists('description'),
                'boost': BOOST_FACTORS.DESCRIPTION
            }, {
                'filter': SearchUtil.filterExists('thumbnailUrl'),
                'boost': BOOST_FACTORS.THUMBNAIL
            }, {
                'filter': SearchUtil.filterMembers([content.createdBy]),
                'boost': BOOST_FACTORS.CREATED_BY
            }],
            'score_mode': 'total'
        }
    };
};
