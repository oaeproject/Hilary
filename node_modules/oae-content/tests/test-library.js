/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var ShortId = require('shortid');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Content Libraries', function() {

    var camAnonymousRestCtx = null;
    var camAdminRestCtx = null;
    var globalAdminRestContext = null;

    beforeEach(function() {
        camAnonymousRestCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestCtx = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
    });

    // TODO: Tests around libraries
    // User library
    // Mix of private, public, logged in content
    // Mix of created himself, manager through setPermissions and shared
    // Check the library as user, other user, anonymous
    // Check paging
    // Group library
    // TODO: Get library that doesn't exist

    /**
     * Test that will verify if the returned items from the library are sorted by their last modified date.
     */
    it('verify library is sorted on last modified', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users) {
            assert.ok(!err);
            var nicolaas = _.values(users)[0];

            var items = [];
            RestAPI.Content.createLink(nicolaas.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                assert.ok(!err);
                items.push(contentObj.id);

                RestAPI.Content.createLink(nicolaas.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                    assert.ok(!err);
                    items.push(contentObj.id);

                    RestAPI.Content.createLink(nicolaas.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        items.push(contentObj.id);

                        // Get the 2 most recent items.
                        RestAPI.Content.getLibrary(nicolaas.restContext, nicolaas.user.id, null, 2, function(err, data) {
                            assert.ok(!err);
                            var library = data.results;
                            assert.equal(library.length, 2);
                            assert.equal(library[0].id, items[2]);
                            assert.equal(library[1].id, items[1]);

                            // Modify the oldest one.
                            RestAPI.Content.updateContent(nicolaas.restContext, items[0], {'description': 'lalila'}, function(err) {
                                assert.ok(!err);

                                // When we retrieve the library the just modified one, should be on-top.
                                RestAPI.Content.getLibrary(nicolaas.restContext, nicolaas.user.id, null, 2, function(err, data) {
                                    assert.ok(!err);
                                    var library = data.results;
                                    assert.equal(library.length, 2);
                                    assert.equal(library[0].id, items[0]);
                                    assert.equal(library[1].id, items[2]);

                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Verifies the parameters on the `removeContentFromLibrary` method.
     */
    it('verify removeContentFromLibrary parameter validation', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users) {
            assert.ok(!err);
            var simon = _.values(users)[0];

            RestAPI.Content.createLink(simon.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                assert.ok(!err);

                RestAPI.Content.removeContentFromLibrary(camAnonymousRestCtx, simon.user.id, contentObj.id, function(err) {
                    assert.equal(err.code, 401);

                    RestAPI.Content.removeContentFromLibrary(simon.restContext, 'invalid-user-id', contentObj.id, function(err) {
                        assert.equal(err.code, 400);

                        RestAPI.Content.removeContentFromLibrary(simon.restContext, simon.user.id, 'invalid-content-id', function(err) {
                            assert.equal(err.code, 400);

                            RestAPI.Content.removeContentFromLibrary(simon.restContext, simon.user.id, 'c:camtest:nonexisting', function(err) {
                                assert.equal(err.code, 404);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that will verify if an item can be removed from a user library.
     */
    it('verify deleting an item removes it from the library', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users) {
            assert.ok(!err);
            var nicolaas = _.values(users)[0];

            RestAPI.Content.createLink(nicolaas.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                assert.ok(!err);

                RestAPI.Content.deleteContent(nicolaas.restContext, contentObj.id, function(err) {
                    assert.ok(!err);

                    RestAPI.Content.getLibrary(nicolaas.restContext, nicolaas.user.id, null, null, function(err, data) {
                        assert.ok(!err);
                        var library = data.results;
                        assert.equal(library.length, 0);
                        callback();
                    });
                });
            });
        });
    });


    /**
     * Test that will verify if an item can be removed from a user library if the user only holds a viewer permission.
     */
    it('verify a content viewer can remove the content item from his library', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users) {
            assert.ok(!err);
            var nicolaas = _.values(users)[0];
            var simon = _.values(users)[1];

            RestAPI.Content.createLink(nicolaas.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                assert.ok(!err);

                RestAPI.Content.shareContent(nicolaas.restContext, contentObj.id, [simon.user.id], function(err) {
                    assert.ok(!err);

                    // Sanity check that Simon has the item
                    RestAPI.Content.getLibrary(simon.restContext, simon.user.id, null, null, function(err, data) {
                        assert.ok(!err);
                        var library = data.results;
                        assert.equal(library.length, 1);
                        assert.equal(library[0].id, contentObj.id);

                        RestAPI.Content.removeContentFromLibrary(simon.restContext, simon.user.id, contentObj.id, function(err) {
                            assert.ok(!err);
                            RestAPI.Content.getLibrary(simon.restContext, simon.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                var library = data.results;
                                assert.equal(library.length, 0);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that will verify that removing a piece of content from a library won't leave
     * the content item unmanaged.
     */
    it('verify a piece of content cannot be left managerless by removing it from the library', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users) {
            assert.ok(!err);
            var nicolaas = _.values(users)[0];

            RestAPI.Content.createLink(nicolaas.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                assert.ok(!err);

                // Nicolaas can't remove the content from his library
                // as he is the only manager for it.
                RestAPI.Content.removeContentFromLibrary(nicolaas.restContext, nicolaas.user.id, contentObj.id, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });
    });

    /**
     * Consider the following situation:
     * 2 public tenants: A and B
     * 2 users: userA in tenant A and userB in tenant B
     *
     * User A creates a piece of content and shares it with user B.
     * Tenant A becomes private
     * User B should still be able to remove it from his library
     */
    it('verify a piece of content can be removed after a tenant becomes private', function(callback) {
        // We'll create two new tenants.
        var tenantAliasA = ShortId.generate();
        var tenantAliasB = ShortId.generate();
        TestsUtil.createTenantWithAdmin(tenantAliasA, tenantAliasA, function(err, tenantA, adminRestCtxA) {
            assert.ok(!err);
            TestsUtil.createTenantWithAdmin(tenantAliasB, tenantAliasB, function(err, tenantB, adminRestCtxB) {
                assert.ok(!err);

                TestsUtil.generateTestUsers(adminRestCtxA, 1, function(err, users) {
                    assert.ok(!err);
                    var userA = _.values(users)[0];
                    TestsUtil.generateTestUsers(adminRestCtxB, 1, function(err, users) {
                        assert.ok(!err);
                        var userB = _.values(users)[0];

                        RestAPI.Content.createLink(userA.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [userB.user.id], function(err, contentObj) {
                            assert.ok(!err);

                            // Sanity check that userB has the item in his library
                            RestAPI.Content.getLibrary(userB.restContext, userB.user.id, null, null, function(err, data) {
                                assert.ok(!err);
                                var library = data.results;
                                assert.equal(library.length, 1);
                                assert.equal(library[0].id, contentObj.id);

                                // Now make tenantA private.
                                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenantAliasA, 'oae-tenants/tenantprivacy/tenantprivate', true, function(err) {
                                    assert.ok(!err);

                                    RestAPI.Content.removeContentFromLibrary(userB.restContext, userB.user.id, contentObj.id, function(err) {
                                        assert.ok(!err);
                                        RestAPI.Content.getLibrary(userB.restContext, userB.user.id, null, null, function(err, data) {
                                            assert.ok(!err);
                                            var library = data.results;
                                            assert.equal(library.length, 0);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Verifies a user cannot remove content from another user his library.
     */
    it('verify a user can only remove content from libraries he owns', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users) {
            assert.ok(!err);
            var nicolaas = _.values(users)[0];
            var simon = _.values(users)[1];

            RestAPI.Content.createLink(nicolaas.restContext, 'Test Content', 'Test content description', 'public', 'http://www.oaeproject.org/', [], [], function(err, contentObj) {
                assert.ok(!err);

                // This should fail as Simon can't manage Nicolaas his library.
                RestAPI.Content.removeContentFromLibrary(simon.restContext, nicolaas.user.id, contentObj.id, function(err) {
                    assert.equal(err.code, 401);

                    // Sanity check Nicolaas his library to ensure nothing got removed.
                    RestAPI.Content.getLibrary(nicolaas.restContext, nicolaas.user.id, null, null, function(err, data) {
                        assert.ok(!err);
                        var library = data.results;
                        assert.equal(library.length, 1);
                        assert.equal(library[0].id, contentObj.id);
                        callback();
                    });
                });
            });
        });
    });


    /**
     * Test that will verify a user can remove content from a group library by virtue of his group ancestry.
     */
    it('verify a user can remove content from a group library by virtue of his group ancestry', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestCtx, 3, function(err, users) {
            assert.ok(!err);
            var nicolaas = _.values(users)[0];
            var simon = _.values(users)[1];
            var bert = _.values(users)[2];

            // Create three nested, groups.
            TestsUtil.generateTestGroups(nicolaas.restContext, 3, function(err, groups) {
                assert.ok(!err);
                var group = _.keys(groups)[0];
                var parent = _.keys(groups)[1];
                var grandParent = _.keys(groups)[2];
                var groupIds = [ grandParent, parent, group ];
                TestsUtil.generateGroupHierarchy(nicolaas.restContext, groupIds, 'manager', function() {

                    // Make Simon a manager of the 'group' group (ie: the farthest one down)
                    // That should make him a manager of all the groups above this one as well.
                    var permissions = {};
                    permissions[simon.user.id] = 'manager';
                    RestAPI.Group.setGroupMembers(nicolaas.restContext, group, permissions, function(err) {
                        assert.ok(!err);

                        // Bert shares some content with the top group
                        RestAPI.Content.createLink(bert.restContext, 'Test Content', 'Test content description', 'public', 'http://www.google.com/', [], [ grandParent ], function(err, contentObj) {
                            assert.ok(!err);

                            // Sanity check it's there.
                            RestAPI.Content.getLibrary(nicolaas.restContext, grandParent, null, null, function(err, data) {
                                assert.ok(!err);
                                var library = data.results;
                                assert.equal(library.length, 1);
                                assert.equal(library[0].id, contentObj.id);

                                // Simon decides the content isn't all that great and removes it.
                                RestAPI.Content.removeContentFromLibrary(simon.restContext, grandParent, contentObj.id, function(err) {
                                    assert.ok(!err);

                                    // Sanity check that it's gone.
                                    RestAPI.Content.getLibrary(nicolaas.restContext, grandParent, null, null, function(err, data) {
                                        assert.ok(!err);
                                        var library = data.results;
                                        assert.equal(library.length, 0);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});