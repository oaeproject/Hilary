/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var util = require('util');

var AuthzUtil = require('oae-authz/lib/util');
var LibraryAPI = require('oae-library');
var log = require('oae-logger').logger('content-search');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var Signature = require('oae-util/lib/signature');
var TenantsAPI = require('oae-tenants');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');
var ContentUtil = require('oae-content/lib/internal/util');


//////////////////////
// SEARCH ENDPOINTS //
//////////////////////

LibraryAPI.Search.registerLibrarySearch('content-library', 'content');
SearchAPI.registerSearch('relatedcontent', require('./searches/relatedcontent'));


////////////////////
// INDEXING TASKS //
////////////////////

// Binds the local events to the MQ task queue to assign indexing jobs

ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, revision, members) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': content.id,
            'opts': {
                'indexResource': true,
                'indexMembers': true
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent, revision) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': newContent.id,
            'opts': {
                'indexResource': true,
                'indexMembers': false
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': content.id,
            'opts': {
                'indexResource': false,
                'indexMembers': true
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_PREVIEW, function(ctx, contentId, content) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': contentId,
            'opts': {
                'indexResource': true,
                'indexMembers': false
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, content, revision) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': content.id,
            'opts': {
                'indexResource': true,
                'indexMembers': false
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.DELETED_CONTENT, function(ctx, contentId) {
    MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'resourceType': 'content', 'id': contentId});
});



////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for 'content' resources.
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceContentSearchDocuments = function(resources, callback) {
    if (!resources || resources.length === 0) {
        return callback(null, []);
    }

    var docs = [];
    _getContentItems(resources, function(err, contentItems) {
        if (err) {
            return callback(err);
        } else if (contentItems.length === 0) {
            // If the content items could not be found, there isn't much we can do.
            return callback(null, docs);
        }

        _getRevisionItems(contentItems, function(err, revisionsById) {
            if (err) {
                return callback(err);
            }

            _.each(contentItems, function(contentItem) {
                docs.push(_produceContentSearchDocument(contentItem, revisionsById[contentItem.latestRevisionId]));
            });
            callback(null, docs);
        });
    });
};

/**
 * Gets the revision for those content items that happen to be collaborative documents.
 *
 * @param  {Content[]}  contentItems    An array of content items.
 * @param  {Function}   callback        Standard callback method.
 * @return {Object}                     An object where the key is a revisionId and the value the corresponding revision. If none of the content items are collaborative documents, the object will be empty.
 * @api private
 */
var _getRevisionItems = function(contentItems, callback) {
    // Check if we need to fetch revisions.
    var revisionsToRetrieve = [];
    _.each(contentItems, function(content) {
        if (content.resourceSubType === 'collabdoc') {
            revisionsToRetrieve.push(content.latestRevisionId);
        }
    });

    if (revisionsToRetrieve.length === 0) {
        return callback(null, {});
    } else {
        ContentDAO.Revisions.getMultipleRevisions(revisionsToRetrieve, function(err, revisions) {
            if (err) {
                return callback(err);
            }

            // Map each revision by its ID.
            var revisionsById = {};
            _.each(revisions, function(revision) { revisionsById[revision.revisionId] = revision; });
            callback(null, revisionsById);
        });
    }
};

/**
 * Retrieves a set of content items given a set of resources.
 *
 * @param  {Object[]}   resources       An array of objects that represent the content items.
 * @param  {Function}   callback        Standard callback function.
 * @param  {Content[]}  contentItems    An array of content items that were present in the `resources` object.
 * @api private
 */
var _getContentItems = function(resources, callback) {
    // For indexing resources that have content items attached, return the content item. For those that don't,
    // aggregate the ids so the content items may be fetched
    var contentIdsToFetch = [];
    var contentItems = [];
    _.each(resources, function(resource) {
        if (resource.content) {
            contentItems.push(resource.content);
        } else {
            contentIdsToFetch.push(resource.id);
        }
    });

    if (contentIdsToFetch.length === 0) {
        // No content items to be fetched, return what we have
        return callback(null, contentItems);
    }

    // Remove duplicates (if any).
    contentIdsToFetch = _.uniq(contentIdsToFetch);

    // Get the content objects.
    ContentDAO.Content.getMultipleContentItems(contentIdsToFetch, function(err, extraContentItems) {
        if (err) {
            return callback(err);
        }

        // Filter the null values from the multiple content items array.
        extraContentItems = _.compact(extraContentItems);

        // Add the content items that came from Cassandra.
        contentItems = contentItems.concat(extraContentItems);
        callback(null, contentItems);
    });
};

/**
 * Convert a content item into a resource search document.
 *
 * @param  {Content}    content     The content item to convert
 * @param  {Revision}   revision    The revision associated to the content item.
 * @return {Object}                 A search document
 * @api private
 */
var _produceContentSearchDocument = function(content, revision) {
    // Allow full-text search on name and description, but only if they are specified. We also sort on this text
    var fullText = _.compact([content.displayName, content.description]).join(' ');
    if (content.resourceSubType === 'collabdoc' && revision && revision.etherpadHtml) {
        fullText += ' ' + revision.etherpadHtml;
    }

    // Add all properties for the resource document metadata
    var doc = {
        'resourceType': 'content',
        'resourceSubType': content.resourceSubType,
        'id': content.id,
        'tenantAlias': content.tenant.alias,
        'displayName': content.displayName,
        'visibility': content.visibility,
        'q_high': content.displayName,
        'q_low': fullText,
        'sort': fullText,
        '_extra': {
            'lastModified': content.lastModified
        }
    };

    if (content.resourceSubType === 'file') {
        doc._extra.mime = content.mime;
    }

    if (content.previews.thumbnailUri) {
        doc.thumbnailUrl = content.previews.thumbnailUri;
    }

    if (content.description) {
        doc.description = content.description;
    }

    return doc;
};

SearchAPI.registerSearchDocumentProducer('content', _produceContentSearchDocuments);



///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

/**
 * Given an array of content search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param  {Context}   ctx             The current context
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformContentDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    var principalId = (ctx.user() ? ctx.user().id : null);
    _.each(docs, function(doc, docId) {
        var result = _.extend({}, doc.fields, {'id': doc['_id']});
        result.lastModified = doc.fields._extra.lastModified;
        if (doc.fields._extra.mime) {
            result.mime = doc.fields._extra.mime;
        }
        if (doc.fields.thumbnailUrl && result.lastModified) {
            result.thumbnailUrl = ContentUtil.getDownloadUrlForUri(principalId, ctx.tenant().alias, doc.fields.thumbnailUrl);
        }
        result.tenant = TenantsAPI.getCachedTenantByAlias(result.tenantAlias).compact();
        result.profilePath = '/content/' + result.tenant.alias + '/' + AuthzUtil.getResourceFromId(result.id).resourceId;

        transformedDocs[docId] = result;
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('content', _transformContentDocuments);


/////////////////////////
// REINDEX ALL HANDLER //
/////////////////////////

SearchAPI.registerReindexAllHandler('content', function(callback) {

    /*!
     * Handles each iteration of the ContentDAO iterate all method, firing tasks for all content to
     * be reindexed.
     *
     * @see ContentDAO.Content#iterateAll
     * @api private
     */
    var _onEach = function(contentRows, done) {
        // Batch up this iteration of task resources
        var contentResources = [];
        _.each(contentRows, function(contentRow) {
            contentResources.push({
                'id': contentRow.contentId,
                'opts': {
                    'indexResource': true,
                    'indexMembers': true
                }
            });
        });

        log().info('Firing re-indexing task for %s content items.', contentResources.length);

        MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
            'resourceType': 'content',
            'resources': contentResources
        });

        done();
    };

    ContentDAO.Content.iterateAll(['contentId'], 1000, _onEach, callback);
});

