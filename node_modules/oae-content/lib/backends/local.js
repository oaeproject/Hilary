/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

const fs = require('fs');
const makeDir = require('make-dir');
const Path = require('path');
const ShortId = require('shortid');
const util = require('util');

const Cassandra = require('oae-util/lib/cassandra');
const Config = require('oae-config').config('oae-content');
const IO = require('oae-util/lib/io');
const log = require('oae-logger').logger('local-storage');
const Revision = require('oae-content/lib/model').Revision;
const TempFile = require('oae-util/lib/tempfile');
const Validator = require('oae-util/lib/validator').Validator;

const BackendUtil = require('./util');
const ContentConstants = require('../constants').ContentConstants;
const DownloadStrategy = require('../model').DownloadStrategy;

var _rootDir = null;

/**
 * An implementation that will store files on a local directory.
 * Unless the directory you're writing to is a mounted NFS/Samba share,
 * you probably don't want to use this in production as it would restrict
 * you from scaling your app servers horizontally.
 */

/**
 * Initializes the local storage backend with its root directory.
 *
 * @param  {String}     rootDir         The directory where files can be stored
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 */
var init = (module.exports.init = function(rootDir, callback) {
  _rootDir = Path.resolve(rootDir);
  _ensureDirectoryExists(_rootDir, function(err) {
    if (err) {
      log().error(
        { dir: _rootDir, err: err },
        'Could not create/find the local storage directory',
      );
      return callback(err);
    }
    callback();
  });
});

/**
 * Get the root directory where files will be stored.
 *
 * @return {String}     The root directory where files will be stored
 */
var getRootDirectory = (module.exports.getRootDirectory = function() {
  return _rootDir;
});

/////////////////////
// Storage methods //
/////////////////////

/**
 * @borrows Interface.store as Local.store
 */
var store = (module.exports.store = function(
  tenantAlias,
  file,
  options,
  callback,
) {
  options = options || {};

  // Generate the uri for this file
  var uri = BackendUtil.generateUri(file, options);

  // Get the paths on disk where we'll store the file
  var destPath = util.format('%s/%s', getRootDirectory(), uri);
  var destDir = Path.dirname(destPath);

  // Make sure the directory tree exists by creating them if necessary
  _ensureDirectoryExists(destDir, function(err) {
    if (err) {
      log().error({ err: err }, 'Error ensuring directories exist %s', destDir);
      return callback(err);
    }

    // Move the file
    log().trace('Moving %s to %s', file.path, destPath);
    IO.moveFile(file.path, destPath, function(err) {
      if (err) {
        log().error({ err: err }, 'Error moving %s to %s', file.path, destPath);
        return callback(err);
      }

      return callback(null, 'local:' + uri);
    });
  });
});

/**
 * @borrows Interface.get as Local.get
 */
var get = (module.exports.get = function(tenantAlias, uri, callback) {
  // Construct the path where the file is stored
  var path = util.format(
    '%s/%s',
    getRootDirectory(),
    BackendUtil.splitUri(uri).location,
  );

  // Copy it to a temp folder
  var filename = Path.basename(path);
  var tmp = TempFile.createTempFile({ suffix: filename });
  IO.copyFile(path, tmp.path, function(err) {
    if (err) {
      log().error({ err: err }, 'Error getting %s', path);
      return callback(err);
    }

    // Get the file size and pass it on
    tmp.update(callback);
  });
});

/**
 * @borrows Interface.remove as Local.remove
 */
var remove = (module.exports.remove = function(tenantAlias, uri, callback) {
  // Construct the path where the file is stored
  var path = util.format(
    '%s/%s',
    getRootDirectory(),
    BackendUtil.splitUri(uri).location,
  );

  // Unlink it
  fs.unlink(path, function(err) {
    // If no file existed at the given path, we do not pass back an error
    // as the intent was to remove a file at that path
    if (err && err.code === 'ENOENT') {
      log().warn(
        { uri: uri, path: path },
        'Tried to remove a file that was no longer there',
      );
      return callback();

      // Otherwise we pass back an error
    } else if (err) {
      log().error({ err: err }, 'Error removing %s', path);
      return callback({ code: 500, msg: 'Unable to remove the file: ' + err });
    }

    return callback();
  });
});

/**
 * @borrows Interface.getDownloadStrategy as Local.getDownloadStrategy
 */
var getDownloadStrategy = (module.exports.getDownloadStrategy = function(
  tenantAlias,
  uri,
) {
  return new DownloadStrategy(
    ContentConstants.backend.DOWNLOAD_STRATEGY_INTERNAL,
    '/files/' + BackendUtil.splitUri(uri).location,
  );
});

/////////////////////
// Private methods //
/////////////////////

/**
 * Creates the directory structure and applies the correct file mode.
 *
 * @param  {String}   dir            The absolute path to the directory that needs to exist
 * @param  {Function} callback       Standard callback function
 * @param  {Object}   callback.err   An error that occurred, if any
 * @api private
 */
var _ensureDirectoryExists = function(dir, callback) {
  makeDir(dir)
    .then(path => {
      return callback();
    })
    .catch(err => {
      return callback({ code: 500, msg: err });
    });
};
