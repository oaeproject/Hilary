/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var ConfigAPI = require('oae-config');


/**
 * Convenience method to handle getting the configuration schema for the current tenant
 *
 * @param  {Request}    req     The Express Request object of the current request
 * @param  {Response}   res     The Express Response object to which to send the response
 * @api private
 */
var _handleGetSchema = function(req, res) {
    ConfigAPI.getSchema(req.ctx, function(err, schema) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, schema);
    });
};

/**
 * @REST getConfigSchema
 *
 * Get the configuration schema
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /config/schema
 * @Return      {ConfigSchema}          The configuration schema
 */
OAE.globalAdminRouter.on('get', '/api/config/schema', _handleGetSchema);
OAE.tenantRouter.on('get', '/api/config/schema', _handleGetSchema);

/**
 * Convenience method to handle the general specification of clearing configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body.configFields]     One or more config keys to be cleared
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleClearConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    var configFields = OaeUtil.toArray(req.body.configFields);
    ConfigAPI.clearConfig(req.ctx, tenantAlias, configFields, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * @REST postConfigClear
 *
 * Clear a configuration value for the current tenant
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /config/clear
 * @BodyParam   {string[]}      configFields            Name(s) of the configuration element(s) to clear (e.g. `oae-authentication/twitter/enabled`)
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/config/clear', _handleClearConfig);
OAE.tenantRouter.on('post', '/api/config/clear', _handleClearConfig);

/**
 * @REST postConfigTenantAliasClear
 *
 * Clear a configuration value for a tenant
 *
 * @Server      admin
 * @Method      POST
 * @Path        /config/{tenantAlias}/clear
 * @PathParam   {string}        tenantAlias             The alias of the tenant on which the configuration value should be cleared
 * @BodyParam   {string[]}      configFields            Name(s) of the configuration element(s) to clear (e.g. `oae-authentication/twitter/enabled`)
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/config/:tenantAlias/clear', _handleClearConfig);

/**
 * Convenience method to handle the general specification of getting configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleGetConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    ConfigAPI.getTenantConfig(req.ctx, tenantAlias, function(err, config) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, config);
    });
};

/**
 * @REST getConfig
 *
 * Get the configuration for the current tenant
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /config
 * @Return      {Config}                            The configuration for the current tenant
 */
OAE.globalAdminRouter.on('get', '/api/config', _handleGetConfig);
OAE.tenantRouter.on('get', '/api/config', _handleGetConfig);

/**
 * @REST getConfigTenantAlias
 *
 * Get the configuration for a tenant
 *
 * @Server      admin
 * @Method      GET
 * @Path        /config/{tenantAlias}
 * @PathParam   {string}            tenantAlias     The alias of the tenant for which to get the configuration
 * @Return      {Config}                            The configuration for the specified tenant
 */
OAE.globalAdminRouter.on('get', '/api/config/:tenantAlias', _handleGetConfig);

/**
 * Convenience method to handle the general specification of updating configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body]                  The request body parameter keys are the configuration keys, and the value is the value to set
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleUpdateConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    ConfigAPI.updateConfig(req.ctx, tenantAlias, req.body, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * @REST postConfig
 *
 * Update a configuration value for the current tenant
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /config
 * @BodyParam   {ConfigValues}      body            Configuration value(s) to update
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/config', _handleUpdateConfig);
OAE.tenantRouter.on('post', '/api/config', _handleUpdateConfig);

/**
 * @REST postConfigTenantAlias
 *
 * Update a configuration value for a tenant
 *
 * @Server      admin
 * @Method      POST
 * @Path        /config/{tenantAlias}
 * @PathParam   {string}            tenantAlias     The alias of the tenant on which to update the configuration value(s)
 * @BodyParam   {ConfigValues}      body            Configuration value(s) to update
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/config/:tenantAlias', _handleUpdateConfig);
