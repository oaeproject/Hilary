/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var assert = require('assert');

var log = require('oae-logger').logger('test-activity');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('Principals Activity', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    var _getActivity = function(activityStream, activityType, entityType, entityOaeId) {
        if (!activityStream || !activityStream.items) {
            return null;
        }

        for (var i = 0; i < activityStream.items.length; i++) {
            var activity = activityStream.items[i];
            if (activity['oae:activityType'] === activityType && activity[entityType] && activity[entityType]['oae:id'] === entityOaeId) {
                return activity;
            }
        }
        return null;
    };

    describe('Routes', function() {

        /**
         * Test that verifies that activities are routed to indirect group member descendants. This exercises a "membership" operation which should
         * only be routed to managers, as well as a regular update operation which should get routed to all members.
         */
        it('verify group activities are routed to group member descendants', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var targetGroupAlias = TestsUtil.generateTestUserId('targetGroup');
            var managerGroupAlias = TestsUtil.generateTestUserId('managerGroup');
            var memberGroupAlias = TestsUtil.generateTestUserId('memberGroup');
            var managerGroupMemberUsername = TestsUtil.generateTestUserId('managerGroupMember');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, managerGroupMemberUsername, 'password', 'Jane', null, function(err, managerGroupMember) {
                    assert.ok(!err);

                    // Create the member group, which will be member to the group that gets updated and has a user added. This group should not receive the "user added" activity
                    RestAPI.Group.createGroup(camAdminRestContext, memberGroupAlias, memberGroupAlias, memberGroupAlias, 'public', 'no', [], [], function(err, memberGroup) {
                        assert.ok(!err);

                        // Create the manager group, which should receive both update and "user added" activities
                        RestAPI.Group.createGroup(camAdminRestContext, managerGroupAlias, managerGroupAlias, managerGroupAlias, 'public', 'no', [], [], function(err, managerGroup) {
                            assert.ok(!err);

                            // ManagerGroupMember should be a member of the manager group to verify indirect group member routing
                            var membership = {};
                            membership[managerGroupMember.id] = 'manager';
                            RestAPI.Group.setGroupMembers(camAdminRestContext, managerGroup.id, membership, function(err) {
                                assert.ok(!err);

                                // Create the target group, manager group and member group are members
                                RestAPI.Group.createGroup(camAdminRestContext, targetGroupAlias, targetGroupAlias, targetGroupAlias, 'public', 'yes', [managerGroup.id], [memberGroup.id], function(err, targetGroup) {
                                    assert.ok(!err);

                                    // Jack joins the group
                                    membership = {};
                                    membership[jack.id] = 'member';
                                    RestAPI.Group.setGroupMembers(jackCtx, targetGroup.id, membership, function(err) {
                                        assert.ok(!err);

                                        // Update the group to propagate an activity
                                        RestAPI.Group.updateGroup(camAdminRestContext, targetGroup.id, {'name': 'Ha ha I make change'}, function(err) {
                                            assert.ok(!err);

                                            // Ensure manager group received both update and join activities
                                            setTimeout(RestAPI.Activity.getActivityStream, 150, camAdminRestContext, managerGroup.id, null, function(err, activityStream) {
                                                assert.ok(!err);
                                                assert.ok(_getActivity(activityStream, 'group-update', 'object', targetGroup.id));
                                                assert.ok(_getActivity(activityStream, 'group-join', 'object', targetGroup.id));

                                                // Ensure the member group received update, but not join
                                                RestAPI.Activity.getActivityStream(camAdminRestContext, memberGroup.id, null, function(err, activityStream) {
                                                    assert.ok(!err);
                                                    assert.ok(_getActivity(activityStream, 'group-update', 'object', targetGroup.id));
                                                    assert.ok(!_getActivity(activityStream, 'group-join', 'object', targetGroup.id));

                                                    // Ensure member of the manager group got both update and join
                                                    RestAPI.Activity.getActivityStream(camAdminRestContext, managerGroupMember.id, null, function(err, activityStream) {
                                                        assert.ok(!err);
                                                        assert.ok(_getActivity(activityStream, 'group-update', 'object', targetGroup.id));
                                                        assert.ok(_getActivity(activityStream, 'group-join', 'object', targetGroup.id));
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Activity Entity Model', function() {

        it('verify the user and group activity entity model', function(callback) {
            var publicUsername = TestsUtil.generateTestUserId('userPublic');
            var privateUsername = TestsUtil.generateTestUserId('userPrivate');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Just create a public user, private user and a group, and look at the group-create activity to verify the user, group and visibility
            RestAPI.User.createUser(camAdminRestContext, publicUsername, 'password', 'Jack McJackerson', {'visibility': 'public'}, function(err, publicUser) {
                assert.ok(!err);
                var publicUserRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, publicUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, privateUsername, 'password', 'Jane Janerville', {'visibility': 'private', 'publicAlias': 'Jane'}, function(err, privateUser) {
                    assert.ok(!err);

                    RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'no', [publicUser.id], [], function(err, group) {
                        assert.ok(!err);

                        var memberships = {};
                        memberships[privateUser.id] = 'member';
                        RestAPI.Group.setGroupMembers(publicUserRestContext, group.id, memberships, function(err) {
                            assert.ok(!err);

                            // Verify the private user feed, which will have the add group member activity. It will have the public user as the actor, the private user as the object and the group as the target
                            setTimeout(RestAPI.Activity.getActivityStream, 150, camAdminRestContext, privateUser.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                
                                var activity = activityStream.items[0];
                                assert.ok(activity);

                                var actor = activity.actor;     // Public user
                                var object = activity.object;   // Private user
                                var target = activity.target;   // Group
                                assert.ok(actor);
                                assert.ok(object);
                                assert.ok(target);

                                // Verify the public user model
                                assert.equal(actor['oae:visibility'], publicUser.visibility);
                                assert.ok(actor['url'].indexOf(publicUser.id) !== -1);
                                assert.equal(actor['objectType'], 'user');
                                assert.ok(actor['id'].indexOf(publicUser.id) !== -1);
                                assert.ok(actor['image']);
                                assert.equal(actor['oae:id'], publicUser.id);
                                assert.equal(actor['displayName'], publicUser.displayName);

                                // Verify the private user model
                                assert.equal(object['oae:visibility'], privateUser.visibility);
                                assert.equal(object['objectType'], 'user');
                                assert.ok(object['id'].indexOf(privateUser.id) !== -1);
                                assert.equal(object['oae:id'], privateUser.id);
                                assert.equal(object['displayName'], privateUser.publicAlias);
                                // Url and image are not defined for private users in feeds
                                assert.ok(!object['url']);
                                assert.ok(!object['image']);

                                // Verify the group model
                                assert.equal(target['oae:visibility'], group.visibility);
                                assert.equal(target['displayName'], group.name);
                                assert.ok(target['url'].indexOf(group.id) !== -1);
                                assert.equal(target['objectType'], 'group');
                                assert.ok(target['id'].indexOf(group.id) !== -1);
                                assert.equal(target['oae:id'], group.id);
                                assert.ok(target['image']);

                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify private group does not propagate to unauthorized users', function(callback) {
            // 1. Create user with admin
            // 2. Create private group with admin
            // 3. Create content with user
            // 4. Share content with private group admin
            // 5. Verify that the group information is not leaked to the user

            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create a user with which to create a group, then ensure the user gets the activity
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                assert.ok(!err);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'private', 'no', [], [], function(err, group) {
                    assert.ok(!err);

                    RestAPI.Content.createLink(userRestContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                        assert.ok(!err);

                        RestAPI.Content.shareContent(camAdminRestContext, link.contentId, [group.id], function(err) {
                            assert.ok(!err);

                            setTimeout(RestAPI.Activity.getActivityStream, 150, camAdminRestContext, user.id, null, function(err, activityStream) {
                                assert.ok(!err);

                                // Verify the target group is scrubbed
                                var activity = _getActivity(activityStream, 'content-share', 'target', group.id);
                                assert.ok(activity);
                                assert.ok(!activity['displayName']);
                                assert.ok(!activity['id']);
                                assert.ok(!activity['oae:visibility']);
                                assert.ok(!activity['url']);
                                assert.ok(!activity['image']);

                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Posting Activities', function() {

        /**
         * Test that verifies the group-create, group-update and group-update-visibility activities gets generated
         */
        it('verify group-create, group-update, group-update-visibility activities gets generated', function(callback) {
            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create a user with which to create a group, then ensure the user gets the activity
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                assert.ok(!err);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'no', [user.id], [], function(err, group) {
                    assert.ok(!err);

                    RestAPI.Group.updateGroup(camAdminRestContext, group.id, {'visibility': 'loggedin'}, function(err) {
                        assert.ok(!err);

                        RestAPI.Group.updateGroup(camAdminRestContext, group.id, {'name': 'har har har'}, function(err) {
                            assert.ok(!err);

                            setTimeout(RestAPI.Activity.getActivityStream, 150, camAdminRestContext, user.id, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(_getActivity(activityStream, 'group-create', 'object', group.id));
                                assert.ok(_getActivity(activityStream, 'group-update', 'object', group.id));
                                assert.ok(_getActivity(activityStream, 'group-update-visibility', 'object', group.id));
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the group-join activity gets fired
         */
        it('verify group-join activity gets generated', function(callback) {
            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create a user with which to create a group, then ensure the user gets the activity
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                assert.ok(!err);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'yes', [], [], function(err, group) {
                    assert.ok(!err);

                    var memberships = {};
                    memberships[user.id] = 'member';
                    RestAPI.Group.setGroupMembers(userRestContext, group.id, memberships, function(err) {
                        assert.ok(!err);

                        setTimeout(RestAPI.Activity.getActivityStream, 150, camAdminRestContext, user.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            assert.ok(_getActivity(activityStream, 'group-join', 'object', group.id));
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the group-add-member activity gets generated
         */
        it('verify group-add-member activity gets generated', function(callback) {
            var username = TestsUtil.generateTestUserId('user');
            var groupAlias = TestsUtil.generateTestGroupId('group');

            // Create a user with which to create a group, then ensure the user gets the activity
            RestAPI.User.createUser(camAdminRestContext, username, 'password', 'Jack McJackerson', null, function(err, user) {
                assert.ok(!err);
                var userRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, username, 'password');

                RestAPI.Group.createGroup(camAdminRestContext, groupAlias, groupAlias, groupAlias, 'public', 'yes', [], [], function(err, group) {
                    assert.ok(!err);

                    var memberships = {};
                    memberships[user.id] = 'member';
                    RestAPI.Group.setGroupMembers(camAdminRestContext, group.id, memberships, function(err) {
                        assert.ok(!err);

                        setTimeout(RestAPI.Activity.getActivityStream, 150, camAdminRestContext, user.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            assert.ok(_getActivity(activityStream, 'group-add-member', 'target', group.id));
                            callback();
                        });
                    });
                });
            });
        });
    });
});

