/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');

var DefaultRetriever = require('./retrievers/default');
var PreviewConstants = require('./constants');
var PreviewImages = require('./api.images');

var options = {
    'script': function() {
        // For collab docs we simply show the HTML that is in the document.
        // We make it a bit bigger and use a square window size so we can get prettier thumbnails.
        document.body.style.backgroundColor = '#ffffff';
        document.body.style.fontSize = '2.5em';
        document.body.style.margin = '20px';
    },
    'windowSize': {
        'width': 1024,
        'height': 1024
    }
};

/**
 * Generates previews for a collaborative document.
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, callback) {
    // Ignore collaborative documents who don't have any HTML (yet.)
    if (!ctx.content.etherpadHtml) {
        return ctx.setStatus('ignored', callback);
    }

    // Write the HTML to a file and create thumbnail with the default link retriever.
    var collabFile = ctx.baseDir + '/collabdoc.html';
    fs.writeFile(collabFile, ctx.content.etherpadHtml, 'utf8', function(err) {
        if (err) {
            log().error({'err': err}, 'Could not write the collabdoration document to disk.');
        }

        // Generate a screenshot.
        var collabDoc = 'file://localhost' + collabFile;
        DefaultRetriever.getImageWithScript(ctx, collabDoc, options, function(err, path) {
            if (err) {
                return callback(err);
            }

            // Crop the screenshot.
            var sizes = [
                { 'width': PreviewConstants.SIZES.IMAGE.MEDIUM, 'height': PreviewConstants.SIZES.IMAGE.MEDIUM, 'size': 'medium' },
                { 'width': PreviewConstants.SIZES.IMAGE.SMALL, 'height': PreviewConstants.SIZES.IMAGE.SMALL, 'size': 'small' }
            ];
            PreviewImages.resizeImages(ctx, path, sizes, function(err) {
                if (err) {
                    return callback(err);
                }

                // Intelligently crop out a part of the image that we can use as a thumbnail.
                PreviewImages.cropThumbnail(ctx, path, callback);
            });
        });
    });
};
