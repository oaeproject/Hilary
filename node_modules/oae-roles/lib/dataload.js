var OAE = require('oae-util/lib/OAE');
var api = require('oae-roles/lib/api');
var model = require('oae-roles/lib/model');
var schema = require('oae-roles/lib/schema');

module.exports = (function() {

    var that = {};

	/**
	 * Load a batch of data in a sequental (numerically based) manner.
	 *
	 * @param {String} baseTenantId The tenant prefix, the suffix will be the numerical increment of the tenant
	 * @param {String} baseUserId The user id prefix, the suffix will be the numerical increment of users
	 * @param {String} baseContentId The content id prefix, the suffix will be the numerical increment of content
	 * @param {Number} numTenants The number of tenants to load
	 * @param {Number} numUserIdsPerTenant The number of users should be assigned roles per tenant; if there are 5 tenants and 5 users, there will be 5*5=25 users total
	 * @param {Number} numContentPerUserId The number of content items to which each user will be assigned a role. If there are 5 tenants, 5 users, and 5 content items, there will be total 5*5*5=125 role entries
	 */
    that.loadSequential = function(baseTenantId, baseUserId, baseContentId, numTenants, numUserIdsPerTenant, numContentPerUserId, callback) {
        OAE.initializeKeySpace(function() {
            schema.ensureSchema(function(err) {
                if (err) throw err;
                loadSequential(baseTenantId, baseUserId, baseContentId, numTenants, numUserIdsPerTenant, numContentPerUserId, callback);
            });
        });
    };

    function loadSequential(baseTenantId, baseUserId, baseContentId, numTenants, numUserIdsPerTenant, numContentPerUserId, callback) {
        if (numTenants === 0) {
            try { callback(); } catch (err) {}
            return;
        }

        var tenantId = baseTenantId+'-'+numTenants;
        var userId = baseUserId+'-'+numTenants;
        var contentId = baseContentId+'-'+numTenants;

        loadUserIdsForTenant(tenantId, userId, contentId, numUserIdsPerTenant, numContentPerUserId, function() {
            loadSequential(baseTenantId, baseUserId, baseContentId, numTenants-1, numUserIdsPerTenant, numContentPerUserId, callback);
        });
    };



    function loadUserIdsForTenant(tenantId, baseUserId, baseContentId, numUserIdsPerTenant, numContentPerUserId, callback) {
        if (numUserIdsPerTenant === 0) {
            try { callback(); } catch (err) {}
            return;
        }

        var userId = baseUserId+'-'+numUserIdsPerTenant;
        var contentId = baseContentId+'-'+numUserIdsPerTenant;
        var securityContext = new api.SecurityContext(new model.Principal(tenantId, api.PrincipalTypes.USER, userId));

        loadContentRolesForUser(securityContext, baseContentId, numContentPerUserId, function() {
            loadUserIdsForTenant(tenantId, baseUserId, baseContentId, numUserIdsPerTenant-1, numContentPerUserId, callback);
        });
    }

    function loadContentRolesForUser(securityContext, baseContentId, numContentPerUserId, callback) {
        if (numContentPerUserId === 0) {
            try { callback(); } catch (err) {}
            return;
        }

        var contentId = baseContentId+'-'+numContentPerUserId
        securityContext.addRole(api.ObjectTypes.CONTENT, contentId, 'viewer', function(err) {
            if (!err) {
                console.log('Added one for %s...', contentId);
                loadContentRolesForUser(securityContext, baseContentId, numContentPerUserId-1, callback);
            } else {
                console.log(err);
            }
        });
    }

    return that;
})();