/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');


/**
 * Get all the statistics for a given tenant
 *
 * @param  {String}     tenantAlias         The alias of the tenant for which the stats should be retrieved
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Object[]}   callback.stats      The statistics for this tenant. Each object holds a `name` and `value` key
 */
var getAllStatistics = module.exports.getAllStatistics = function(tenantAlias, callback) {
    Cassandra.runQuery('SELECT * FROM "StatsByTenant" WHERE "tenantAlias" = ?', [tenantAlias], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var stats = [];
        _.each(rows, function(row) {
            var hash = Cassandra.rowToHash(row);
            stats.push({
                'name': hash['name'],
                'value': hash['value']
            });
        });
        return callback(null, stats);
    });
};

/**
 * Get a specific statistic for a given tenant
 *
 * @param  {String}     tenantAlias         The alias of the tenant for which to retrieve the statistic
 * @param  {String}     name                The name of the statistic to retrieve
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Number}     callback.value      The value for the desired statistic
 */
var getStatistic = module.exports.getStatistic = function(tenantAlias, name, callback) {
    Cassandra.runQuery('SELECT "value" FROM "StatsByTenant" WHERE "tenantAlias" = ? AND "name" = ?', [tenantAlias, name], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (rows.length === 0) {
            return callback({'code': 404, 'msg': 'No statistic found by that name'});
        }

        var value = rows[0].get('value').value;
        return callback(null, value);
    });
};

/**
 * Persists one or more statistic(s) to the database
 *
 * @param  {Object[]}   stats           The stats to persist. Each object should have a `name`, a `tenantAlias` and a numeric `value`
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var setStatistics = module.exports.setStatistics = function(stats, callback) {
    var batch = [];
    _.each(stats, function(stat) {
        batch.push({
            'query': 'UPDATE "StatsByTenant" SET "value" = ? WHERE "tenantAlias" = ? AND "name" = ?',
            'parameters': [stat.value, stat.tenantAlias, stat.name]
        });
    });
    Cassandra.runBatchQuery(batch, callback);
};