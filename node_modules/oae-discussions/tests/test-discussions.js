/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthzAPI = require('oae-authz');
var ConfigTestsUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var RestUtil = require('oae-rest/lib/util');
var TestsUtil = require('oae-tests');

var DiscussionsConfig = require('oae-config').config('oae-discussions');
var DiscussionsDAO = require('oae-discussions/lib/internal/dao');
var DiscussionsTestsUtil = require('oae-discussions/lib/test/util');

describe('Discussions', function() {

    var camAdminRestCtx = null;

    beforeEach(function() {
        camAnonymousRestCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestCtx = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    });

    describe('Creating Discussions', function() {

        /**
         * Test that verifies miscellaneous validation input when creating a discussion
         */
        it('verify create discussion validation', function(callback) {

            // Create a user to test with
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var displayName = 'test-create-displayName';
                var description = 'test-create-description';
                var visibility = 'public';

                // Verify cannot create discussion anonymously
                RestAPI.Discussions.createDiscussion(camAnonymousRestCtx, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // Verify cannot create discussion with null displayName
                    RestAPI.Discussions.createDiscussion(user.restContext, null, description, visibility, null, null, function(err, discussion) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Verify cannot create discussion with invalid visibility
                        RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, 'not-a-visibility', null, null, function(err, discussion) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            // Verify with an invalid manager id
                            RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, ['not-an-id'], null, function(err, discussion) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Verify with multiple invalid manager ids
                                RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, ['not-an-id', 'another-one'], null, function(err, discussion) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Verify with an invalid member id
                                    RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, ['not-an-id'], function(err, discussion) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);

                                        // Verify with multiple invalid member ids
                                        RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, ['not-an-id', 'another-one'], function(err, discussion) {
                                            assert.ok(err);
                                            assert.equal(err.code, 400);

                                            // Sanity check a good discussion creation
                                            RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                                                assert.ok(!err);
                                                assert.ok(discussion);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a discussion is successfully created, with the proper discussion model and members model
         */
        it('verify successful discussion creation and model', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant) {
                var displayName = 'test-create-displayName';
                var description = 'test-create-description';
                var visibility = 'public';
                var managers = [publicTenant.publicUser.user.id];
                var members = [publicTenant.loggedinUser.user.id];

                // Create the discussion whose model to verify
                RestAPI.Discussions.createDiscussion(publicTenant.privateUser.restCtx, displayName, description, visibility, managers, members, function(err, discussion) {
                    assert.ok(!err);
                    assert.ok(discussion.id);
                    assert.ok(discussion.createdBy, publicTenant.privateUser.user.id);
                    assert.equal(discussion.displayName, displayName);
                    assert.equal(discussion.description, description);
                    assert.equal(discussion.visibility, visibility);
                    assert.ok(discussion.created);
                    assert.ok(discussion.lastModified);
                    assert.ok(discussion.tenant);
                    assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                    assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);
                    return callback();
                });
            });
        });
    });

    describe('Updating Discussions', function() {

        /**
         * Test that verifies miscellaneous validation of update discussion inputs
         */
        it('verify update discussion validation', function(callback) {
            var displayName = 'test-update-displayName';
            var description = 'test-update-description';
            var visibility = 'public';

            var updates = {
                'displayName': 'new-display-name',
                'description': 'new-description'
            };

            // Create a user to test with
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                // Create a discussion that we'll try and update
                RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, null, function(err, createdDiscussion) {
                    assert.ok(!err);

                    // Verify not a valid discussion id
                    RestAPI.Discussions.updateDiscussion(user.restContext, 'not-a-valid-id', updates, function(err, discussion) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!discussion);

                        // Verify no fields to update
                        RestAPI.Discussions.updateDiscussion(user.restContext, createdDiscussion.id, {}, function(err, discussion) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            assert.ok(!discussion);

                            // Verify invalid visibility value
                            RestAPI.Discussions.updateDiscussion(user.restContext, createdDiscussion.id, {'visibility': 'not-a-visibility'}, function(err, discussion) {
                                assert.ok(err);
                                assert.equal(err.code, 400);
                                assert.ok(!discussion);

                                // Verify an invalid field name
                                RestAPI.Discussions.updateDiscussion(user.restContext, createdDiscussion.id, {'not-a-valid-field': 'loggedin'}, function(err, discussion) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);
                                    assert.ok(!discussion);

                                    // Verify the discussion has not changed
                                    RestAPI.Discussions.getDiscussion(user.restContext, createdDiscussion.id, function(err, discussionProfile) {
                                        assert.ok(!err);
                                        assert.equal(discussionProfile.displayName, displayName);
                                        assert.equal(discussionProfile.description, description);
                                        assert.equal(discussionProfile.visibility, visibility);
                                        assert.equal(discussionProfile.created, discussionProfile.lastModified);

                                        // Now do a real update as a sanity check
                                        RestAPI.Discussions.updateDiscussion(user.restContext, createdDiscussion.id, updates, function(err, discussion) {
                                            assert.ok(!err);
                                            assert.equal(discussion.displayName, updates.displayName);
                                            assert.equal(discussion.description, updates.description);
                                            assert.ok(discussion.canShare);
                                            assert.ok(discussion.canPost);
                                            assert.ok(discussion.isManager);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });

        });

        /**
         * Test that verifies a discussion can be updated and its model data
         */
        it('verify discussion update and model', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant) {
                var displayName = 'test-update-displayName';
                var description = 'test-update-description';
                var visibility = 'public';
                var managers = [publicTenant.publicUser.user.id];
                var members = [publicTenant.loggedinUser.user.id];

                // Create the discussion whose model to verify
                RestAPI.Discussions.createDiscussion(publicTenant.adminRestCtx, displayName, description, visibility, managers, members, function(err, discussion) {
                    assert.ok(!err);

                    // Update the discussion displayName, description and visibility with the manager user
                    var updates = {
                        'displayName': 'new-display-name',
                        'description': 'new-description'
                    };

                    // Verify the returned discussion model with a partial update.
                    RestAPI.Discussions.updateDiscussion(publicTenant.publicUser.restCtx, discussion.id, updates, function(err, discussion) {
                        assert.ok(!err);
                        assert.ok(discussion.id);
                        assert.equal(discussion.displayName, updates.displayName);
                        assert.equal(discussion.description, updates.description);
                        assert.equal(discussion.visibility, 'public');
                        assert.ok(parseInt(discussion.created, 10) < parseInt(discussion.lastModified, 10));
                        assert.ok(discussion.created);
                        assert.ok(discussion.lastModified);
                        assert.ok(discussion.tenant);
                        assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                        assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                        // Verify updating just the visibility
                        RestAPI.Discussions.updateDiscussion(publicTenant.publicUser.restCtx, discussion.id, {'visibility': 'private'}, function(err, discussion) {
                            assert.ok(!err);
                            assert.ok(discussion.id);
                            assert.equal(discussion.displayName, updates.displayName);
                            assert.equal(discussion.description, updates.description);
                            assert.equal(discussion.visibility, 'private');
                            assert.ok(parseInt(discussion.created, 10) < parseInt(discussion.lastModified, 10));
                            assert.ok(discussion.created);
                            assert.ok(discussion.lastModified);
                            assert.ok(discussion.tenant);
                            assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                            assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the permissions restrictions on updating discussions
         */
        it('verify unauthorized users cannot update discussions', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant) {
                var updates = {
                    'displayName': 'new-display-name',
                    'description': 'new-description',
                    'visibility': 'private'
                };

                // Verify anonymous user cannot update
                RestAPI.Discussions.updateDiscussion(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, updates, function(err, discussion) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.ok(!discussion);

                    // Verify loggedin non-member cannot update
                    RestAPI.Discussions.updateDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, updates, function(err, discussion) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        assert.ok(!discussion);

                        // Verify member cannot update
                        RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, [publicTenant.publicUser.user.id], function(err) {
                            assert.ok(!err);

                            RestAPI.Discussions.updateDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, updates, function(err, discussion) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                                assert.ok(!discussion);

                                // Verify the discussion is still the same
                                RestAPI.Discussions.getDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, function(err, discussion) {
                                    assert.ok(!err);
                                    assert.equal(discussion.displayName, publicTenant.publicDiscussion.displayName);
                                    assert.equal(discussion.description, publicTenant.publicDiscussion.description);
                                    assert.equal(discussion.visibility, publicTenant.publicDiscussion.visibility);

                                    // Verify the manager can update
                                    var permissionChange = {};
                                    permissionChange[publicTenant.publicUser.user.id] = 'manager';
                                    RestAPI.Discussions.updateDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, permissionChange, function(err) {
                                        assert.ok(!err);

                                        RestAPI.Discussions.updateDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, updates, function(err, discussion) {
                                            assert.ok(!err);
                                            assert.ok(discussion);

                                            // Verify the discussion update took
                                            RestAPI.Discussions.getDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, function(err, discussion) {
                                                assert.ok(!err);
                                                assert.equal(discussion.displayName, updates.displayName);
                                                assert.equal(discussion.description, updates.description);
                                                assert.equal(discussion.visibility, updates.visibility);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Deleting Discussions', function() {
        /**
         * Test that verifies that only managers can delete a discussion.
         */
        it('verify deleting a discussion', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, users) {
                assert.ok(!err);
                var branden = _.values(users)[0];
                var simon = _.values(users)[1];

                RestAPI.Discussions.createDiscussion(branden.restContext, 'name', 'descr', 'public', null, [simon.user.id], function(err, discussion) {
                    assert.ok(!err);

                    // First, do a sanity check that the discusion is in Branden and Simon's library.
                    RestAPI.Discussions.getDiscussionsLibrary(branden.restContext, branden.user.id, null, null, function(err, items) {
                        assert.ok(!err);
                        assert.equal(items.results.length, 1);
                        assert.equal(items.results[0].id, discussion.id);
                        RestAPI.Discussions.getDiscussionsLibrary(simon.restContext, simon.user.id, null, null, function(err, items) {
                            assert.ok(!err);
                            assert.equal(items.results.length, 1);
                            assert.equal(items.results[0].id, discussion.id);

                            // Verify Simon cannot delete the discussion (as he's not the manager.)
                            RestAPI.Discussions.deleteDiscussion(simon.restContext, discussion.id, function(err) {
                                assert.equal(err.code, 401);

                                // Branden can delete it.
                                RestAPI.Discussions.deleteDiscussion(branden.restContext, discussion.id, function(err) {
                                    assert.ok(!err);

                                    // The discussion should be removed from all the libraries.
                                    RestAPI.Discussions.getDiscussionsLibrary(branden.restContext, branden.user.id, null, null, function(err, items) {
                                        assert.ok(!err);
                                        assert.equal(items.results.length, 0);
                                        RestAPI.Discussions.getDiscussionsLibrary(simon.restContext, simon.user.id, null, null, function(err, items) {
                                            assert.ok(!err);
                                            assert.equal(items.results.length, 0);

                                            // Getting the discussion profile should result in a 404
                                            RestAPI.Discussions.getDiscussion(branden.restContext, discussion.id, function(err, discussion) {
                                                assert.equal(err.code, 404);
                                                assert.ok(!discussion);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies some basic parameter validation when deleting a discussion.
         */
        it('verify deleting discussion validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, users) {
                assert.ok(!err);
                var branden = _.values(users)[0];

                // An invalid discussion id, should result in a  400.
                RestAPI.Discussions.deleteDiscussion(branden.restContext, 'invalid id', function(err) {
                    assert.equal(err.code, 400);

                     // A non-existing discussion should result in a 404
                    RestAPI.Discussions.deleteDiscussion(branden.restContext, 'd:camtest:bleh', function(err) {
                        assert.equal(err.code, 404);
                        callback();
                    });
                });
            });
        });
    });

    describe('Discussions Model', function() {

        /**
         * Test that verifies the full profile model of a discussion, and the privacy rules for its access.
         */
        it('verify discussion full profile model, privacy and validation', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
                var displayName = 'test-fullprofile-displayName';
                var description = 'test-fullprofile-description';
                var visibility = 'public';

                ////////////////////////////////
                // ANONYMOUS SAME-TENANT USER //
                ////////////////////////////////

                // Ensure getDiscussion validation
                RestAPI.Discussions.getDiscussion(publicTenant.anonymousRestCtx, 'not-a-valid-id', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Ensure anonymous user cannot see the full profile of loggedin and private
                    RestAPI.Discussions.getDiscussion(publicTenant.anonymousRestCtx, publicTenant.privateDiscussion.id, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        RestAPI.Discussions.getDiscussion(publicTenant.anonymousRestCtx, publicTenant.loggedinDiscussion.id, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 401);

                            // Verify they can see public
                            RestAPI.Discussions.getDiscussion(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, function(err, discussion) {
                                assert.ok(!err);

                                // Basic info
                                assert.equal(discussion.id, discussion.id);
                                assert.equal(discussion.displayName, discussion.displayName);
                                assert.equal(discussion.description, discussion.description);
                                assert.equal(discussion.visibility, discussion.visibility);
                                assert.equal(discussion.created, discussion.lastModified);
                                assert.equal(discussion.created, discussion.created);
                                assert.ok(discussion.tenant);
                                assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                                assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                                // Access info
                                assert.ok(!discussion.isManager);
                                assert.ok(!discussion.canPost);
                                assert.ok(!discussion.canShare);



                                ///////////////////////////////
                                // LOGGEDIN SAME-TENANT USER //
                                ///////////////////////////////

                                // Ensure loggedin user cannot see the full profile of private
                                RestAPI.Discussions.getDiscussion(publicTenant.publicUser.restCtx, publicTenant.privateDiscussion.id, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);

                                    // Loggedin user can see the profile of logged, and they can post and share on it
                                    RestAPI.Discussions.getDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, function(err, discussion) {
                                        assert.ok(!err);

                                        // Basic info
                                        assert.equal(discussion.id, discussion.id);
                                        assert.equal(discussion.displayName, discussion.displayName);
                                        assert.equal(discussion.description, discussion.description);
                                        assert.equal(discussion.visibility, discussion.visibility);
                                        assert.equal(discussion.created, discussion.lastModified);
                                        assert.equal(discussion.created, discussion.created);
                                        assert.ok(discussion.tenant);
                                        assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                                        assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                                        // Access info
                                        assert.ok(!discussion.isManager);
                                        assert.ok(discussion.canPost);
                                        assert.ok(discussion.canShare);

                                        // Verify they can see, share, post on public
                                        RestAPI.Discussions.getDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, function(err, discussion) {
                                            assert.ok(!err);

                                            // Basic info
                                            assert.equal(discussion.id, discussion.id);
                                            assert.equal(discussion.displayName, discussion.displayName);
                                            assert.equal(discussion.description, discussion.description);
                                            assert.equal(discussion.visibility, discussion.visibility);
                                            assert.equal(discussion.created, discussion.lastModified);
                                            assert.equal(discussion.created, discussion.created);
                                            assert.ok(discussion.tenant);
                                            assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                                            assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                                            // Access info
                                            assert.ok(!discussion.isManager);
                                            assert.ok(discussion.canPost);
                                            assert.ok(discussion.canShare);


                                            ////////////////////////
                                            // MEMBER SAME-TENANT //
                                            ////////////////////////

                                            // Share private discussion with the loggedin user
                                            RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.privateDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                                                assert.ok(!err);

                                                // Loggedin user can now view, and post on discussion, but still cannot share
                                                RestAPI.Discussions.getDiscussion(publicTenant.loggedinUser.restCtx, publicTenant.privateDiscussion.id, function(err, discussion) {
                                                    assert.ok(!err);

                                                    // Basic info
                                                    assert.equal(discussion.id, discussion.id);
                                                    assert.equal(discussion.displayName, discussion.displayName);
                                                    assert.equal(discussion.description, discussion.description);
                                                    assert.equal(discussion.visibility, discussion.visibility);
                                                    assert.equal(discussion.created, discussion.lastModified);
                                                    assert.equal(discussion.created, discussion.created);
                                                    assert.ok(discussion.tenant);
                                                    assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                                                    assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                                                    // Access info
                                                    assert.ok(!discussion.isManager);
                                                    assert.ok(discussion.canPost);
                                                    assert.ok(!discussion.canShare);


                                                    /////////////////////////
                                                    // MANAGER SAME-TENANT //
                                                    /////////////////////////

                                                    // Make public user manager
                                                    var permissionChanges = {};
                                                    permissionChanges[publicTenant.loggedinUser.user.id] = 'manager';
                                                    RestAPI.Discussions.updateDiscussionMembers(publicTenant.adminRestCtx, publicTenant.privateDiscussion.id, permissionChanges, function(err) {
                                                        assert.ok(!err);

                                                        // Loggedin user can now view, share, and post on private discussion
                                                        RestAPI.Discussions.getDiscussion(publicTenant.loggedinUser.restCtx, publicTenant.privateDiscussion.id, function(err, discussion) {
                                                            assert.ok(!err);

                                                            // Basic info
                                                            assert.equal(discussion.id, discussion.id);
                                                            assert.equal(discussion.displayName, discussion.displayName);
                                                            assert.equal(discussion.description, discussion.description);
                                                            assert.equal(discussion.visibility, discussion.visibility);
                                                            assert.equal(discussion.created, discussion.lastModified);
                                                            assert.equal(discussion.created, discussion.created);
                                                            assert.ok(discussion.tenant);
                                                            assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                                                            assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                                                            // Access info
                                                            assert.ok(discussion.isManager);
                                                            assert.ok(discussion.canPost);
                                                            assert.ok(discussion.canShare);


                                                            ////////////////////////////////////////////
                                                            // ADMIN USER FROM EXTERNAL PUBLIC TENANT //
                                                            ////////////////////////////////////////////

                                                            // Ensure cross-tenant user cannot see the full profile of loggedin and private
                                                            RestAPI.Discussions.getDiscussion(publicTenant1.adminRestCtx, publicTenant.privateDiscussion.id, function(err) {
                                                                assert.ok(err);
                                                                assert.equal(err.code, 401);

                                                                RestAPI.Discussions.getDiscussion(publicTenant1.adminRestCtx, publicTenant.loggedinDiscussion.id, function(err) {
                                                                    assert.ok(err);
                                                                    assert.equal(err.code, 401);

                                                                    // Verify they can see, share and post on public discussions (both are public tenants)
                                                                    RestAPI.Discussions.getDiscussion(publicTenant1.adminRestCtx, publicTenant.publicDiscussion.id, function(err, discussion) {
                                                                        assert.ok(!err);

                                                                        // Basic info
                                                                        assert.equal(discussion.id, discussion.id);
                                                                        assert.equal(discussion.displayName, discussion.displayName);
                                                                        assert.equal(discussion.description, discussion.description);
                                                                        assert.equal(discussion.visibility, discussion.visibility);
                                                                        assert.equal(discussion.created, discussion.lastModified);
                                                                        assert.equal(discussion.created, discussion.created);
                                                                        assert.ok(discussion.tenant);
                                                                        assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                                                                        assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                                                                        // Access info
                                                                        assert.ok(!discussion.isManager);
                                                                        assert.ok(discussion.canPost);
                                                                        assert.ok(discussion.canShare);


                                                                        /////////////////////////////////////////////
                                                                        // ADMIN USER FROM EXTERNAL PRIVATE TENANT //
                                                                        /////////////////////////////////////////////

                                                                        // Ensure cross-tenant user cannot see the full profile of loggedin and private
                                                                        RestAPI.Discussions.getDiscussion(privateTenant1.adminRestCtx, publicTenant.privateDiscussion.id, function(err) {
                                                                            assert.ok(err);
                                                                            assert.equal(err.code, 401);

                                                                            RestAPI.Discussions.getDiscussion(privateTenant1.adminRestCtx, publicTenant.loggedinDiscussion.id, function(err) {
                                                                                assert.ok(err);
                                                                                assert.equal(err.code, 401);

                                                                                // Verify they can see the public discussion, but cannot post or share because the tenant is private
                                                                                RestAPI.Discussions.getDiscussion(privateTenant1.adminRestCtx, publicTenant.publicDiscussion.id, function(err, discussion) {
                                                                                    assert.ok(!err);

                                                                                    // Basic info
                                                                                    assert.equal(discussion.id, discussion.id);
                                                                                    assert.equal(discussion.displayName, discussion.displayName);
                                                                                    assert.equal(discussion.description, discussion.description);
                                                                                    assert.equal(discussion.visibility, discussion.visibility);
                                                                                    assert.equal(discussion.created, discussion.lastModified);
                                                                                    assert.equal(discussion.created, discussion.created);
                                                                                    assert.ok(discussion.tenant);
                                                                                    assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                                                                                    assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);

                                                                                    // Access info
                                                                                    assert.ok(!discussion.isManager);
                                                                                    assert.ok(!discussion.canPost);
                                                                                    assert.ok(!discussion.canShare);

                                                                                    return callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies just the `createdBy` field of the full discussion profile. Verifies it gets scrubbed appropriately due to user profile
         * visibility restrictions.
         */
        it('verify discussion full profile createdBy model and privacy', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
                var displayName = 'test-createdBy-displayName';
                var description = 'test-createdBy-description';
                var visibility = 'public';

                // Create the discussion whose createdBy model to verify
                RestAPI.Discussions.createDiscussion(publicTenant.loggedinUser.restCtx, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // Verify anonymous user gets a scrubbed createdBy object
                    RestAPI.Discussions.getDiscussion(publicTenant.anonymousRestCtx, discussion.id, function(err, discussion) {
                        assert.ok(!err);

                        // Display name should have been swapped out for the publicAlias
                        assert.ok(discussion.createdBy);
                        assert.equal(discussion.createdBy.id, publicTenant.loggedinUser.user.id);
                        assert.equal(discussion.createdBy.displayName, publicTenant.loggedinUser.user.publicAlias);

                        // Verify authenticated user gets a full createdBy object
                        RestAPI.Discussions.getDiscussion(publicTenant.publicUser.restCtx, discussion.id, function(err, discussion) {
                            assert.ok(!err);

                            assert.ok(discussion.createdBy);
                            assert.equal(discussion.createdBy.id, publicTenant.loggedinUser.user.id);
                            assert.equal(discussion.createdBy.tenant.alias, publicTenant.tenant.alias);
                            assert.equal(discussion.createdBy.tenant.displayName, publicTenant.tenant.displayName);
                            assert.equal(discussion.createdBy.displayName, publicTenant.loggedinUser.user.displayName);
                            assert.ok(!discussion.createdBy.publicAlias);
                            assert.equal(discussion.createdBy.visibility, publicTenant.loggedinUser.user.visibility);
                            assert.equal(discussion.createdBy.resourceType, 'user');
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Discussions Members', function() {

        /**
         * Verify the model of the discussions member listing, and the privacy rules associated to its access, and the access of
         * data associated to users and groups inside of it.
         */
        it('verify discussion members list model, privacy and validation', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
                var displayName = 'test-membersprivacy-displayName';
                var description = 'test-membersprivacy-description';
                var visibility = 'public';

                // Share public discussion with loggedin and private user
                var members = [publicTenant.loggedinUser.user.id, publicTenant.privateUser.user.id];
                RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, members, function(err) {
                    assert.ok(!err);

                    // Verify validation getting discussion members
                    RestAPI.Discussions.getDiscussionMembers(publicTenant.anonymousRestCtx, 'not-a-valid-id', null, null, function(err, members) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Verify anonymous user gets a scrubbed member for loggedin and private member
                        RestAPI.Discussions.getDiscussionMembers(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, null, null, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.results.length, 3);

                            var hadLoggedinUser = false;
                            var hadPrivateUser = false;

                            // Verify the members model
                            _.each(members.results, function(member) {
                                if (member.profile.id === publicTenant.loggedinUser.user.id) {
                                    hadPublicUser = true;
                                    assert.equal(member.role, 'member');
                                    assert.equal(member.profile.tenant.alias, publicTenant.tenant.alias);
                                    assert.equal(member.profile.tenant.displayName, publicTenant.tenant.displayName);
                                    assert.equal(member.profile.displayName, publicTenant.loggedinUser.user.publicAlias);
                                    assert.equal(member.profile.visibility, publicTenant.loggedinUser.user.visibility);
                                    assert.ok(!member.profile.profilePath);
                                    assert.ok(!member.profile.publicAlias);
                                    assert.equal(member.profile.resourceType, 'user');
                                } else if (member.profile.id === publicTenant.privateUser.user.id) {
                                    hadLoggedinUser = true;
                                    assert.equal(member.role, 'member');
                                    assert.equal(member.profile.tenant.alias, publicTenant.tenant.alias);
                                    assert.equal(member.profile.tenant.displayName, publicTenant.tenant.displayName);
                                    assert.equal(member.profile.displayName, publicTenant.privateUser.user.publicAlias);
                                    assert.equal(member.profile.visibility, publicTenant.privateUser.user.visibility);
                                    assert.ok(!member.profile.profilePath);
                                    assert.ok(!member.profile.publicAlias);
                                    assert.equal(member.profile.resourceType, 'user');
                                } else {
                                    // Admin user
                                    assert.equal(member.role, 'manager');
                                }
                            });


                            // Verify authenticated user gets a scrubbed member for private member, but full loggedin user profile
                            RestAPI.Discussions.getDiscussionMembers(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, null, null, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.results.length, 3);

                                var hadLoggedinUser = false;
                                var hadPrivateUser = false;

                                // Verify the members model
                                _.each(members.results, function(member) {
                                    if (member.profile.id === publicTenant.loggedinUser.user.id) {
                                        hadPublicUser = true;
                                        assert.equal(member.role, 'member');
                                        assert.equal(member.profile.tenant.alias, publicTenant.tenant.alias);
                                        assert.equal(member.profile.tenant.displayName, publicTenant.tenant.displayName);
                                        assert.equal(member.profile.displayName, publicTenant.loggedinUser.user.displayName);
                                        assert.equal(member.profile.visibility, publicTenant.loggedinUser.user.visibility);
                                        assert.ok(member.profile.profilePath);
                                        assert.ok(!member.profile.publicAlias);
                                        assert.equal(member.profile.resourceType, 'user');
                                    } else if (member.profile.id === publicTenant.privateUser.user.id) {
                                        hadLoggedinUser = true;
                                        assert.equal(member.role, 'member');
                                        assert.equal(member.profile.tenant.alias, publicTenant.tenant.alias);
                                        assert.equal(member.profile.tenant.displayName, publicTenant.tenant.displayName);
                                        assert.equal(member.profile.displayName, publicTenant.privateUser.user.publicAlias);
                                        assert.equal(member.profile.visibility, publicTenant.privateUser.user.visibility);
                                        assert.ok(!member.profile.profilePath);
                                        assert.ok(!member.profile.publicAlias);
                                        assert.equal(member.profile.resourceType, 'user');
                                    } else {
                                        // Admin user
                                        assert.equal(member.role, 'manager');
                                    }
                                });

                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Discussions Library', function() {

        /*!
         * Verify that the set of discussion library results has the item with id `id`
         *
         * @param  {Message[]}  results         The array of messages to check
         * @param  {String}     id              The id to search for in the messages
         * @throws {Error}                      Throws an assertion error if the id is not in the list of messages
         */
        var _assertContainsItem = function(results, id) {
            var hasItem = false;
            _.each(results, function(item) {
                if (item.id === id) {
                    hasItem = true;
                }
            });

            assert.ok(hasItem);
        };

        /*!
         * Verify that the set of discussion library results does not have the item with id `id`
         *
         * @param  {Message[]}  results         The array of messages to check
         * @param  {String}     id              The id to search for in the messages
         * @throws {Error}                      Throws an assertion error if the id is in the list of messages
         */
        var _assertDoesNotContainItem = function(results, id) {
            _.each(results, function(item) {
                assert.notEqual(item.id, id);
            });
        };

        /**
         * Test that verifies the validation of listing a discussion library
         */
        it('verify validation when listing discussion library', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Discussions.getDiscussionsLibrary(user.restContext, 'not-a-valid-id', null, null, function(err, items) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    RestAPI.Discussions.getDiscussionsLibrary(user.restContext, user.user.id, null, null, function(err, items) {
                        assert.ok(!err);
                        return callback();
                    });
                });
            });
        });

        /**
         * Verify the model of discussions that appear in the discussion libraries
         */
        it('verify discussion library model', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Share an item with the public user
                RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, [publicTenant.publicUser.user.id], function(err) {
                    assert.ok(!err);

                    // Get and verify the model in the public user's library
                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant.publicUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                        assert.ok(!err);
                        assert.equal(items.results.length, 1);
                        assert.ok(!items.nextToken);

                        var discussion = items.results[0];
                        assert.equal(discussion.tenant.alias, publicTenant.tenant.alias);
                        assert.equal(discussion.tenant.displayName, publicTenant.tenant.displayName);
                        assert.equal(discussion.id, publicTenant.publicDiscussion.id);
                        assert.equal(discussion.createdBy, publicTenant.publicDiscussion.createdBy);
                        assert.equal(discussion.displayName, publicTenant.publicDiscussion.displayName);
                        assert.equal(discussion.description, publicTenant.publicDiscussion.description);
                        assert.equal(discussion.visibility, publicTenant.publicDiscussion.visibility);
                        assert.equal(discussion.created, publicTenant.publicDiscussion.created);
                        assert.ok(discussion.lastModified);
                        return callback();
                    });
                });
            });
        });

        /**
         * Verify the access privacy of discussions inside a discussion user library. Ensures discussions in libraries do not leak to users viewing
         * other user libraries.
         */
        it('verify discussion user library privacy', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Make public user manager of the public discussion so it goes in their library
                var updatePermissions = {};
                updatePermissions[publicTenant.publicUser.user.id] = 'manager';
                RestAPI.Discussions.updateDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, updatePermissions, function(err) {
                    assert.ok(!err);


                    //////////////////////////////////////////////////////
                    // VERIFY PUBLIC DISCUSSION VISIBILITY IN LIBRARIES //
                    //////////////////////////////////////////////////////

                    // Verify anonymous user can see it
                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant.anonymousRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                        assert.ok(!err);
                        _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                        // Verify authenticated user can see it
                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                            assert.ok(!err);
                            _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                            // Verify own user can see it
                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant.publicUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                assert.ok(!err);
                                _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                // Verify cross-tenant user can see it
                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.publicUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                    assert.ok(!err);
                                    _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                    // Verify cross-tenant anonymous can see it
                                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.anonymousRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                        assert.ok(!err);
                                        _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                        // Verify cross-tenant admin can see it
                                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.adminRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                            assert.ok(!err);
                                            _assertContainsItem(items.results, publicTenant.publicDiscussion.id);


                                            ////////////////////////////////////////////////////////
                                            // VERIFY LOGGEDIN DISCUSSION VISIBILITY IN LIBRARIES //
                                            ////////////////////////////////////////////////////////

                                            RestAPI.Discussions.updateDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, {'visibility': 'loggedin'}, function(err) {
                                                assert.ok(!err);

                                                // Verify anonymous user cannot see it
                                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant.anonymousRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                    assert.ok(!err);
                                                    _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                    // Verify authenticated user can see it
                                                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                        assert.ok(!err);
                                                        _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                                        // Verify own user can see it
                                                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant.publicUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                            assert.ok(!err);
                                                            _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                                            // Verify cross-tenant user cannot see it
                                                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.publicUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                assert.ok(!err);
                                                                _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                                // Verify cross-tenant anonymous cannot see it
                                                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.anonymousRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                    assert.ok(!err);
                                                                    _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                                    // Verify cross-tenant admin cannot see it
                                                                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.adminRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                        assert.ok(!err);
                                                                        _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);


                                                                        ///////////////////////////////////////////////////////
                                                                        // VERIFY PRIVATE DISCUSSION VISIBILITY IN LIBRARIES //
                                                                        ///////////////////////////////////////////////////////

                                                                        RestAPI.Discussions.updateDiscussion(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, {'visibility': 'private'}, function(err) {
                                                                            assert.ok(!err);

                                                                            // Verify anonymous user cannot see it
                                                                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant.anonymousRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                                assert.ok(!err);
                                                                                _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                                                // Verify authenticated user cannot see it
                                                                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                                    assert.ok(!err);
                                                                                    _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                                                    // Verify own user can see it
                                                                                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant.publicUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                                        assert.ok(!err);
                                                                                        _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                                                                        // Verify cross-tenant user cannot see it
                                                                                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.publicUser.restCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                                            assert.ok(!err);
                                                                                            _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                                                            // Verify cross-tenant anonymous cannot see it
                                                                                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.anonymousRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                                                assert.ok(!err);
                                                                                                _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                                                                // Verify cross-tenant admin cannot see it
                                                                                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.adminRestCtx, publicTenant.publicUser.user.id, null, null, function(err, items) {
                                                                                                    assert.ok(!err);
                                                                                                    _assertDoesNotContainItem(items.results, publicTenant.publicDiscussion.id);

                                                                                                    return callback();
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * Verify the access privacy of discussions inside a discussion user library. Ensures discussions in libraries do not leak to users viewing
         * other user libraries.
         */
        it('verify discussion group library privacy', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                var randomId = TestsUtil.generateTestGroupId();
                RestAPI.Group.createGroup(publicTenant.loggedinUser.restCtx, randomId, randomId, 'public', 'no', [], [publicTenant.publicUser.user.id], function(err, group) {
                    assert.ok(!err);

                    // Share private, loggedin and public discussion with the group
                    RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, [group.id], function(err) {
                        assert.ok(!err);

                        RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.loggedinDiscussion.id, [group.id], function(err) {
                            assert.ok(!err);

                            RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.privateDiscussion.id, [group.id], function(err) {
                                assert.ok(!err);

                                // Verify anonymous gets public library
                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant.anonymousRestCtx, group.id, null, null, function(err, items) {
                                    assert.ok(!err);
                                    assert.equal(items.results.length, 1);
                                    _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                    // Verify authenticated same-tenant user gets loggedin library
                                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant.privateUser.restCtx, group.id, null, null, function(err, items) {
                                        assert.ok(!err);
                                        assert.equal(items.results.length, 2);
                                        _assertContainsItem(items.results, publicTenant.publicDiscussion.id);
                                        _assertContainsItem(items.results, publicTenant.loggedinDiscussion.id);

                                        // Verify member gets private library
                                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant.publicUser.restCtx, group.id, null, null, function(err, items) {
                                            assert.ok(!err);
                                            assert.equal(items.results.length, 3);
                                            _assertContainsItem(items.results, publicTenant.publicDiscussion.id);
                                            _assertContainsItem(items.results, publicTenant.loggedinDiscussion.id);
                                            _assertContainsItem(items.results, publicTenant.privateDiscussion.id);

                                            // Verify authenticated cross-tenant user gets public library
                                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant.anonymousRestCtx, group.id, null, null, function(err, items) {
                                                assert.ok(!err);
                                                assert.equal(items.results.length, 1);
                                                _assertContainsItem(items.results, publicTenant.publicDiscussion.id);

                                                // Verify admin gets private library
                                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant.adminRestCtx, group.id, null, null, function(err, items) {
                                                    assert.ok(!err);
                                                    assert.equal(items.results.length, 3);
                                                    _assertContainsItem(items.results, publicTenant.publicDiscussion.id);
                                                    _assertContainsItem(items.results, publicTenant.loggedinDiscussion.id);
                                                    _assertContainsItem(items.results, publicTenant.privateDiscussion.id);

                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation logic for sharing discussions
         */
        it('verify discussion share validation', function(callback) {
            // Create users to test with
            TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, user) {
                assert.ok(!err);
                var user1 = _.values(user)[0];
                var user2 = _.values(user)[1];

                var displayName = 'test-create-displayName';
                var description = 'test-create-description';
                var visibility = 'public';

                // Create discussion to test with
                RestAPI.Discussions.createDiscussion(user1.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // Verify cannot share with invalid discussion id
                    RestAPI.Discussions.shareDiscussion(user1.restContext, 'not-a-valid-id', [user2.user.id], function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Verify cannoy share with no target users
                        RestAPI.Discussions.shareDiscussion(user1.restContext, discussion.id, [], function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            RestAPI.Discussions.shareDiscussion(user1.restContext, discussion.id, null, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Verify cannot share with invalid target
                                RestAPI.Discussions.shareDiscussion(user1.restContext, discussion.id, ['not-a-valid-id'], function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Sanity check
                                    RestAPI.Discussions.shareDiscussion(user1.restContext, discussion.id, [user2.user.id], function(err) {
                                        assert.ok(!err);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify a share cannot demote a manager
         */
        it('verify sharing a discussion cannot result in a demotion of a manager', function(callback) {
            // Create users to test with
            TestsUtil.generateTestUsers(camAdminRestCtx, 3, function(err, user) {
                assert.ok(!err);
                var user1 = _.values(user)[0];
                var user2 = _.values(user)[1];
                var user3 = _.values(user)[1];

                var displayName = 'test-create-displayName';
                var description = 'test-create-description';
                var visibility = 'public';

                // Create discussion to test with
                RestAPI.Discussions.createDiscussion(user1.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // user2 will share with user1 who is a manager
                    RestAPI.Discussions.shareDiscussion(user2.restContext, discussion.id, [user1.user.id, user3.user.id], function(err) {
                        assert.ok(!err);

                        // Ensure user1 can still update the discussion
                        RestAPI.Discussions.updateDiscussion(user1.restContext, discussion.id, {'visibility': 'private'}, function(err, discussion) {
                            assert.ok(!err);

                            // Get the discussion members and make sure it says the user1 role is manager
                            RestAPI.Discussions.getDiscussionMembers(user1.restContext, discussion.id, null, null, function(err, members) {
                                assert.ok(!err);

                                var hasUser1 = false;
                                _.each(members.results, function(result) {
                                    if (result.profile.id === user1.user.id) {
                                        hasUser1 = true;
                                        assert.equal(result.role, 'manager');
                                    }
                                });

                                assert.ok(hasUser1);

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies share permissions
         */
        it('verify discussion share permissions', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // 1. Verify anonymous user cannot share public discussion
                RestAPI.Discussions.shareDiscussion(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, [publicTenant.publicUser.user.id], function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // 2. Verify authenticated user cannot share private discussion
                    RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.privateDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        // 3. Verify authenticated user can share loggedin discussion
                        RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                            assert.ok(!err);

                            // 3.1 Verify it went into loggedinUser's library
                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, null, null, function(err, items) {
                                assert.ok(!err);
                                assert.equal(items.results.length, 1);
                                _assertContainsItem(items.results, publicTenant.loggedinDiscussion.id);

                                // 3.2 Verify loggedin user from another tenant cannot see loggedin discussion in the library
                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, null, null, function(err, items) {
                                    assert.ok(!err);
                                    assert.equal(items.results.length, 0);

                                    // 4. Verify authenticated user can share loggedin discussion with public external tenant user
                                    RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, [publicTenant1.publicUser.user.id], function(err) {
                                        assert.ok(!err);

                                        // 4.1 Verify it went into tenant1 publicUser's library
                                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.publicUser.restCtx, publicTenant1.publicUser.user.id, null, null, function(err, items) {
                                            assert.ok(!err);
                                            assert.equal(items.results.length, 1);
                                            _assertContainsItem(items.results, publicTenant.loggedinDiscussion.id);

                                            // 4.2 Verify a user from the external tenant (publicTenant1) cannot see the loggedin item in the shared user's library, because it is loggedin from another tenant
                                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant1.loggedinUser.restCtx, publicTenant1.publicUser.user.id, null, null, function(err, items) {
                                                assert.ok(!err);
                                                assert.equal(items.results.length, 0);

                                                // 5. Verify authenticated user cannot share loggedin discussion with private external tenant user
                                                RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, [privateTenant.publicUser.user.id], function(err) {
                                                    assert.ok(err);
                                                    assert.equal(err.code, 400);

                                                    // 6. Verify authenticated user cannot share external loggedin discussion
                                                    RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant1.loggedinDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                                                        assert.ok(err);
                                                        assert.equal(err.code, 401);

                                                        // 7. Verify authenticated user can share external public discussion
                                                        RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant1.publicDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                                                            assert.ok(!err);

                                                            // 7.1 Verify it went into the user's library
                                                            RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, null, null, function(err, items) {
                                                                assert.ok(!err);
                                                                assert.equal(items.results.length, 2);
                                                                _assertContainsItem(items.results, publicTenant1.publicDiscussion.id);

                                                                // 7.2 Verify public user from the same tenant can see the public external item in the library -- because it is public.
                                                                RestAPI.Discussions.getDiscussionsLibrary(publicTenant.publicUser.restCtx, publicTenant.loggedinUser.user.id, null, null, function(err, items) {
                                                                    assert.ok(!err);
                                                                    assert.equal(items.results.length, 2);
                                                                    _assertContainsItem(items.results, publicTenant.loggedinDiscussion.id);
                                                                    _assertContainsItem(items.results, publicTenant1.publicDiscussion.id);

                                                                    // 8. Verify authenticated user cannot share external public discussion with external public user from private tenant
                                                                    RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, privateTenant1.publicDiscussion.id, [privateTenant1.publicUser.user.id], function(err) {
                                                                        assert.ok(err);
                                                                        assert.equal(err.code, 401);

                                                                        // 9. Verify authenticated user cannot share external public discussion from private tenant with user from their own tenant
                                                                        RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, privateTenant1.publicDiscussion.id, [publicTenant.publicUser.user.id], function(err) {
                                                                            assert.ok(err);
                                                                            assert.equal(err.code, 401);
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify input validation logic for the update members method
         */
        it('verify discussion update members validation', function(callback) {
            // Create users to test with
            TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, user) {
                assert.ok(!err);
                var user1 = _.values(user)[0];
                var user2 = _.values(user)[1];

                var displayName = 'test-create-displayName';
                var description = 'test-create-description';
                var visibility = 'public';

                var user2Update = {};
                user2Update[user2.user.id] = 'member';

                // Create discussion to test with
                RestAPI.Discussions.createDiscussion(user1.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // Verify invalid discussion id
                    RestAPI.Discussions.updateDiscussionMembers(user1.restContext, 'not-a-valid-id', user2Update, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Verify null update
                        RestAPI.Discussions.updateDiscussionMembers(user1.restContext, discussion.id, null, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            // Verify no updates
                            RestAPI.Discussions.updateDiscussionMembers(user1.restContext, discussion.id, {}, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Verify invalid member id
                                RestAPI.Discussions.updateDiscussionMembers(user1.restContext, discussion.id, {'not-a-valid-id': 'member'}, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // Verify invalid role
                                    user2Update[user2.user.id] = 'not-a-valid-role';
                                    RestAPI.Discussions.updateDiscussionMembers(user1.restContext, discussion.id, user2Update, function(err) {
                                        assert.ok(err);
                                        assert.equal(err.code, 400);

                                        // Verify the user is not a member
                                        user2Update[user2.user.id] = 'member';
                                        RestAPI.Discussions.getDiscussionMembers(user1.restContext, discussion.id, null, null, function(err, members) {
                                            assert.ok(!err);
                                            assert.equal(members.results.length, 1);

                                            // Sanity check the inputs for success
                                            RestAPI.Discussions.updateDiscussionMembers(user1.restContext, discussion.id, user2Update, function(err) {
                                                assert.ok(!err);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies permission rules for updating discussion permissions
         */
        it('verify discussion update members and permissions', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                var setLoggedinUserMember = {};
                setLoggedinUserMember[publicTenant.loggedinUser.user.id] = 'member';

                var setPublicUserMember = {};
                setPublicUserMember[publicTenant.publicUser.user.id] = 'member';

                var setPublicUserManager = {};
                setPublicUserManager[publicTenant.publicUser.user.id] = 'manager';

                // 1. Verify anonymous user cannot update members
                RestAPI.Discussions.updateDiscussionMembers(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, setLoggedinUserMember, function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // 2. Verify loggedin non-member user cannot update members
                    RestAPI.Discussions.updateDiscussionMembers(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, setLoggedinUserMember, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 401);

                        // 3. Verify member user cannot update members
                        RestAPI.Discussions.updateDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, setPublicUserMember, function(err) {
                            assert.ok(!err);

                            RestAPI.Discussions.updateDiscussionMembers(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, setLoggedinUserMember, function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // 4. Verify cannot set access across to private tenant
                                var setExternalPrivateUserMember = {};
                                setExternalPrivateUserMember[privateTenant.publicUser.id] = 'member';
                                RestAPI.Discussions.updateDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, setExternalPrivateUserMember, function(err) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);

                                    // 5. Ensure the access hasn't changed
                                    RestAPI.Discussions.getDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, null, null, function(err, items) {
                                        assert.ok(!err);
                                        assert.equal(items.results.length, 2);

                                        var hadPublicUser = false;
                                        _.each(items.results, function(result) {
                                            if (result.profile.id === publicTenant.publicUser.user.id) {
                                                // Ensure the public user is a member
                                                hadPublicUser = true;
                                                assert.equal(result.role, 'member');
                                            }
                                        });

                                        assert.ok(hadPublicUser);

                                        // 6. Verify manager user can update members
                                        RestAPI.Discussions.updateDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, setPublicUserManager, function(err) {
                                            assert.ok(!err);

                                            RestAPI.Discussions.updateDiscussionMembers(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, setLoggedinUserMember, function(err) {
                                                assert.ok(!err);

                                                // 7. Ensure the access has now changed
                                                RestAPI.Discussions.getDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, null, null, function(err, items) {
                                                    assert.ok(!err);
                                                    // Tenant admin and public user are the only ones
                                                    assert.equal(items.results.length, 3);

                                                    var hadPublicUser = false;
                                                    var hadLoggedinUser = false;
                                                    _.each(items.results, function(result) {
                                                        if (result.profile.id === publicTenant.publicUser.user.id) {
                                                            // Ensure the public user is now a manager
                                                            hadPublicUser = true;
                                                            assert.equal(result.role, 'manager');
                                                        } else if (result.profile.id === publicTenant.loggedinUser.user.id) {
                                                            // Ensure the loggedin user is just a member
                                                            hadLoggedinUser = true;
                                                            assert.equal(result.role, 'member');
                                                        }
                                                    });

                                                    assert.ok(hadPublicUser);
                                                    assert.ok(hadLoggedinUser);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies logic of removing discussions from libraries, and the awkward permissions cases for the operation
         */
        it('verify discussion remove from library and permissions', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // 1. Verify member can remove private discussion from their library
                RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                    assert.ok(!err);

                    // 1.1 Remove it
                    RestAPI.Discussions.removeDiscussionFromLibrary(publicTenant.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, publicTenant.loggedinDiscussion.id, function(err) {
                        assert.ok(!err);

                        // 1.2 Make sure it isn't there
                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, null, null, function(err, items) {
                            assert.ok(!err);
                            assert.equal(items.results.length, 0);

                            // 2. Verify user can remove item from their library across tenant boundaries

                            // 2.1 Share an item from an external public tenant
                            RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant1.publicDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                                assert.ok(!err);

                                // 2.1 Make that tenant private
                                ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), publicTenant1.tenant.alias, 'oae-tenants/tenantprivacy/tenantprivate', true, function(err) {
                                    assert.ok(!err);

                                    // 2.2 Removes it from the library, should be able to even though the discussion's tenant has become private
                                    RestAPI.Discussions.removeDiscussionFromLibrary(publicTenant.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, publicTenant1.publicDiscussion.id, function(err) {
                                        assert.ok(!err);

                                        // 2.3 Make sure it isn't there
                                        RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, null, null, function(err, items) {
                                            assert.ok(!err);
                                            assert.equal(items.results.length, 0);

                                            // 3. Verify user cannot remove a discussion from another user's library
                                            RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, [publicTenant.loggedinUser.user.id], function(err) {
                                                assert.ok(!err);

                                                // 3.1 Try and remove it with another user
                                                RestAPI.Discussions.removeDiscussionFromLibrary(publicTenant.publicUser.restCtx, publicTenant.loggedinUser.user.id, publicTenant.loggedinDiscussion.id, function(err) {
                                                    assert.ok(err);
                                                    assert.equal(err.code, 401);

                                                    // 3.2 Make sure it is still there
                                                    RestAPI.Discussions.getDiscussionsLibrary(publicTenant.loggedinUser.restCtx, publicTenant.loggedinUser.user.id, null, null, function(err, items) {
                                                        assert.ok(!err);
                                                        assert.equal(items.results.length, 1);
                                                        _assertContainsItem(items.results, publicTenant.loggedinDiscussion.id);

                                                        var randomId = TestsUtil.generateTestGroupId();
                                                        RestAPI.Group.createGroup(publicTenant.loggedinUser.restCtx, randomId, randomId, 'public', 'no', [], [publicTenant.publicUser.user.id], function(err, group) {
                                                            assert.ok(!err);

                                                            // Share an item with the group
                                                            RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, [group.id], function(err) {
                                                                assert.ok(!err);

                                                                // Try and remove it with a member user, should fail because only managers can remove from library
                                                                RestAPI.Discussions.removeDiscussionFromLibrary(publicTenant.publicUser.restCtx, group.id, publicTenant.loggedinDiscussion.id, function(err) {
                                                                    assert.ok(err);
                                                                    assert.equal(err.code, 401);

                                                                    // Try and remove it with a manager user. Should succeed
                                                                    RestAPI.Discussions.removeDiscussionFromLibrary(publicTenant.loggedinUser.restCtx, group.id, publicTenant.loggedinDiscussion.id, function(err) {
                                                                        assert.ok(!err);

                                                                        // Share an item with the group again
                                                                        RestAPI.Discussions.shareDiscussion(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, [group.id], function(err) {
                                                                            assert.ok(!err);

                                                                            // Try and remove it with a tenant admin. Should succeed again
                                                                            RestAPI.Discussions.removeDiscussionFromLibrary(publicTenant.adminRestCtx, group.id, publicTenant.loggedinDiscussion.id, function(err) {
                                                                                assert.ok(!err);

                                                                                // Verify it complains when a user tries to remove a discussion from their library that isn't in it
                                                                                RestAPI.Discussions.removeDiscussionFromLibrary(publicTenant.adminRestCtx, group.id, publicTenant.loggedinDiscussion.id, function(err) {
                                                                                    assert.ok(err);
                                                                                    assert.ok(err.code, 400);
                                                                                    return callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a discussion cannot be reduced to 0 manager members
         */
        it('verify discussion does not end up with 0 managers', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, user) {
                assert.ok(!err);
                var user1 = _.values(user)[0];
                var user2 = _.values(user)[1];

                var displayName = 'test-create-displayName';
                var description = 'test-create-description';
                var visibility = 'public';

                // user1 becomes manager of discussion
                RestAPI.Discussions.createDiscussion(user1.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // Try and make user1 remove it from their library, they shouldn't as they are only manager
                    RestAPI.Discussions.removeDiscussionFromLibrary(user1.restContext, user1.user.id, discussion.id, function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Try and demote user1 to member when they are the only manager
                        var makeUserMember = {};
                        makeUserMember[user1.user.id] = 'member';
                        RestAPI.Discussions.updateDiscussionMembers(camAdminRestCtx, discussion.id, makeUserMember, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            // Make user2 manager so we can test demoting user1 now
                            var makeUser2Manager = {};
                            makeUser2Manager[user2.user.id] = 'manager';
                            RestAPI.Discussions.updateDiscussionMembers(user1.restContext, discussion.id, makeUser2Manager, function(err) {
                                assert.ok(!err);

                                // Admin should now be able to demote user1 since there is another manager
                                RestAPI.Discussions.updateDiscussionMembers(camAdminRestCtx, discussion.id, makeUserMember, function(err) {
                                    assert.ok(!err);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation of inputs for removing a discussion from a library
         */
        it('verify remove from library validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Discussions.removeDiscussionFromLibrary(user.restContext, user.user.id, 'not-a-valid-id', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400, JSON.stringify(err, null, 4));

                    RestAPI.Discussions.removeDiscussionFromLibrary(user.restContext, 'not-a-valid-id', 'd:cam:somenonexistent', function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        RestAPI.Discussions.removeDiscussionFromLibrary(user.restContext, user.user.id, 'd:cam:somenonexistent', function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 404);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies library feeds are automatically repaired when there are duplicate items in the feed
         */
        it('verify library auto-repair on duplicate items', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var displayName = 'test';
                var description = 'test';
                var visibility = 'public';

                // Create 2 library items to test with
                RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, null, function(err, discussion1) {
                    assert.ok(!err);

                    RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, null, function(err, discussion2) {
                        assert.ok(!err);

                        // Revert the discussion2 lastModified to over an hour ago so we can induce a duplicate
                        var oldLastModified = discussion2.lastModified - (1 * 60 * 61 * 1000);
                        DiscussionsDAO.updateDiscussion(discussion2, {'lastModified': oldLastModified}, function(err, discussion2) {
                            assert.ok(!err);

                            // Post a message to force it to update the lastModified. This will cause a duplicate because we tampered with the lastModified
                            RestAPI.Discussions.createMessage(user.restContext, discussion2.id, 'My message', null, function(err, message) {
                                assert.ok(!err);

                                // At this point we will have 3 items in our library index. 2 for discussion2 and one for discssion1. Now we page to observe
                                // the auto-repair. Since the library update happens asynchronously to the message, we need to try several times to jam it
                                // through.

                                /*!
                                 * Continue checking the library feed until the tries run out. When the feed reaches a state where it is inconsistent
                                 * (i.e., a fetch of 2 items only returns 1, and there are more to fetch), then we proceed to fetch the feed until it
                                 * has become consistent again (i.e., the fetch of 2 items once again returns exactly 2 items)
                                 *
                                 * If this fails, it means the feed has not become inconsistent. What gives?
                                 *
                                 * @param  {Number}     triesLeft   The number of tries to perform
                                 */
                                var _checkDuplicatedFeed = function(triesLeft) {
                                    if (!triesLeft) {
                                        // Fail if we have run out of tries
                                        assert.fail('The library did not incur a duplicate within a certaim amount of tries');
                                    }

                                    // The first time, we set a limit 2, we should end up with only 1. Because the one duplicate was filtered out
                                    RestAPI.Discussions.getDiscussionsLibrary(user.restContext, user.user.id, null, 2, function(err, items) {
                                        assert.ok(!err);

                                        try {
                                            assert.equal(items.results.length, 1);
                                            _assertContainsItem(items.results, discussion2.id);

                                            // nextToken should be there because there was still 1 item to page through (discussion1)
                                            assert.ok(items.nextToken);

                                            // We fetch an inconsistent feed, this is good. This fetch, since it was inconsistent should have
                                            // triggered a repair. Now check the feed until it has been repaired
                                            return _checkRepairedFeed(10);
                                        } catch (assertionErr) {
                                            return _checkDuplicatedFeed(triesLeft - 1);
                                        }
                                    });
                                };

                                /*!
                                 * Continue checking the library feed until it comes consistent.
                                 *
                                 * If this fails, it means the feed never returned to be consistent. What gives?
                                 *
                                 * @param  {Number}     triesLeft   The number of tries to perform
                                 */
                                var _checkRepairedFeed = function(triesLeft) {
                                    if (!triesLeft) {
                                        assert.fail('The library feed was not auto-repaired within a certain amount of tries.');
                                    }

                                    triesLeft--;

                                    RestAPI.Discussions.getDiscussionsLibrary(user.restContext, user.user.id, null, 2, function(err, items) {
                                        assert.ok(!err);

                                        try {
                                            assert.equal(items.results.length, 2);
                                            _assertContainsItem(items.results, discussion2.id);
                                            _assertContainsItem(items.results, discussion1.id);

                                            // Everything checked out, continue on with the tests!
                                            return callback();
                                        } catch (assertionError) {
                                            // Not in the right state yet. Try again
                                            return _checkRepairedFeed(triesLeft);
                                        }
                                    });
                                };

                                // Start the check for an inconsistent feed
                                _checkDuplicatedFeed(100);
                            });
                        });
                    });
                });
            });
        });

    });


    describe('Posting Messages', function() {

        /**
         * Test that verifies input validation when creating a message
         */
        it('verify message creation validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 2, function(err, user) {
                assert.ok(!err);
                var user1 = _.values(user)[0];
                var user2 = _.values(user)[1];

                var displayName = 'test-create-displayName';
                var description = 'test-create-description';
                var visibility = 'public';

                // Create discussion to test with
                RestAPI.Discussions.createDiscussion(user1.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // Test invalid discussion id
                    RestAPI.Discussions.createMessage(user1.restContext, 'not-a-valid-id', 'This should result in a 400', null, function(err, message) {
                        assert.ok(err);
                        assert.equal(err.code, 400);
                        assert.ok(!message);

                        // Test no body
                        RestAPI.Discussions.createMessage(user1.restContext, discussion.id, null, null, function(err, message) {
                            assert.ok(err);
                            assert.equal(err.code, 400);
                            assert.ok(!message);

                            // Test invalid reply-to timestamp
                            RestAPI.Discussions.createMessage(user1.restContext, discussion.id, 'This should result in a 400', 'NaN', function(err, message) {
                                assert.ok(err);
                                assert.equal(err.code, 400);
                                assert.ok(!message);

                                // Test non-existing reply-to timestamp
                                RestAPI.Discussions.createMessage(user1.restContext, discussion.id, 'This should result in a 400', Date.now(), function(err, message) {
                                    assert.ok(err);
                                    assert.equal(err.code, 400);
                                    assert.ok(!message);

                                    // Sanity check
                                    RestAPI.Discussions.createMessage(user1.restContext, discussion.id, 'This should be ok', null, function(err, message) {
                                        assert.ok(!err);
                                        assert.ok(message);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the model of created messages, and permissions of creating messages on different types of discussions
         */
        it('verify creating a message, model and permissions', function(callback) {
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
                // Cannot post message as anonymous user
                RestAPI.Discussions.createMessage(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, 'This should result in a 401', null, function(err, message) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.ok(!message);

                    // Cannot post to private discussion as non-member
                    RestAPI.Discussions.createMessage(publicTenant.privateUser.restCtx, publicTenant.privateDiscussion.id, 'This should result in a 401', null, function(err, message) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        assert.ok(!message);

                        // Can post as an authenticated user from the same tenant, verify the model
                        RestAPI.Discussions.createMessage(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, 'Top-level message', null, function(err, message) {
                            assert.ok(!err);
                            assert.ok(message);

                            // This is the expected messagebox id of the discussion
                            var messageBoxId = publicTenant.publicDiscussion.id;

                            assert.equal(message.id, messageBoxId + '#' + message.created);
                            assert.equal(message.messageBoxId, messageBoxId);
                            assert.equal(message.threadKey, message.created + '|');
                            assert.equal(message.body, 'Top-level message');
                            assert.equal(message.createdBy.id, publicTenant.publicUser.user.id);
                            assert.notEqual(parseInt(message.created, 10), NaN);
                            assert.strictEqual(message.level, 0);
                            assert.ok(!message.replyTo);

                            // Reply to that message and verify the model
                            RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, 'Reply message', message.created, function(err, replyMessage) {
                                assert.ok(!err);
                                assert.ok(replyMessage);

                                // This is the expected replyMessagebox id of the discussion
                                assert.equal(replyMessage.id, messageBoxId + '#' + replyMessage.created);
                                assert.equal(replyMessage.messageBoxId, messageBoxId);
                                assert.equal(replyMessage.threadKey, message.created + '#' + replyMessage.created + '|');
                                assert.equal(replyMessage.body, 'Reply message');
                                assert.equal(replyMessage.createdBy.id, publicTenant.loggedinUser.user.id);
                                assert.notEqual(parseInt(replyMessage.created, 10), NaN);
                                assert.strictEqual(replyMessage.level, 1);
                                assert.ok(replyMessage.replyTo, message.created);

                                // Cross-tenant user from public tenant can post to a public discussion
                                RestAPI.Discussions.createMessage(publicTenant1.publicUser.restCtx, publicTenant.publicDiscussion.id, 'Message from external user', null, function(err, message) {
                                    assert.ok(!err);
                                    assert.ok(message);

                                    // Cross-tenant user from public tenant cannot post to a loggedin discussion
                                    RestAPI.Discussions.createMessage(publicTenant1.publicUser.restCtx, publicTenant.loggedinDiscussion.id, 'Message from external user', null, function(err, message) {
                                        assert.ok(err);
                                        assert.ok(err.code, 401);
                                        assert.ok(!message);

                                        // Cross-tenant user from private tenant cannot post to a public discussion
                                        RestAPI.Discussions.createMessage(privateTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, 'Message from external user', null, function(err, message) {
                                            assert.ok(err);
                                            assert.ok(err.code, 401);
                                            assert.ok(!message);

                                            // Cross-tenant admin cannot post to a loggedin discussion
                                            RestAPI.Discussions.createMessage(publicTenant1.adminRestCtx, publicTenant.loggedinDiscussion.id, 'Message from external user', null, function(err, message) {
                                                assert.ok(err);
                                                assert.ok(err.code, 401);
                                                assert.ok(!message);

                                                // Can post to private discussion as a member. Share it, then test creating a message
                                                RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.privateDiscussion.id, [publicTenant.privateUser.user.id], function(err) {
                                                    assert.ok(!err);

                                                    RestAPI.Discussions.createMessage(publicTenant.privateUser.restCtx, publicTenant.privateDiscussion.id, 'Message from member', null, function(err, message) {
                                                        assert.ok(!err);
                                                        assert.ok(message);

                                                        // Can post to discussion as admin
                                                        RestAPI.Discussions.createMessage(publicTenant.adminRestCtx, publicTenant.privateDiscussion.id, 'Message from admin', null, function(err, message) {
                                                            assert.ok(!err);
                                                            assert.ok(message);
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a discussion is updated at most every hour as a result of new message postings
         */
        it('verify discussion update threshold with messages', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var displayName = 'test';
                var description = 'test';
                var visibility = 'public';

                // Create a discussion to test with
                RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    var lastModified1 = discussion.lastModified;

                    // Create a discussion to test with
                    RestAPI.Discussions.createMessage(user.restContext, discussion.id, 'My message', null, function(err, message) {
                        assert.ok(!err);

                        // Ensure lastModified didn't change because it is within the one hour threshold (hopefully)
                        RestAPI.Discussions.getDiscussion(user.restContext, discussion.id, function(err, discussion) {
                            assert.ok(!err);
                            assert.equal(discussion.lastModified, lastModified1);

                            // Force a naughty update through the DAO of the lastModified to more than an hour ago (threshold duration)
                            var lastModified0 = lastModified1 - (1 * 60 * 61 * 1000);
                            DiscussionsDAO.updateDiscussion(discussion, {'lastModified': lastModified0}, function(err, discussion) {
                                assert.ok(!err);
                                assert.equal(discussion.lastModified, lastModified0);

                                // Message again, this time the lastModified should update
                                RestAPI.Discussions.createMessage(user.restContext, discussion.id, 'My message', null, function(err, message) {
                                    assert.ok(!err);

                                    // Ensure the new lastModified is greater than the original creation one
                                    RestAPI.Discussions.getDiscussion(user.restContext, discussion.id, function(err, discussion) {
                                        assert.ok(!err);
                                        assert.ok(parseInt(discussion.lastModified, 10) > parseInt(lastModified1, 10));

                                        // Note at this time, since the lastModified of the discussion updated under the hood without
                                        // a library update, the library of user should 2 versions of this discussion. Lets see if it
                                        // auto-repairs

                                        // Make sure the library does not have a duplicate
                                        RestAPI.Discussions.getDiscussionsLibrary(user.restContext, user.user.id, null, null, function(err, items) {
                                            assert.ok(!err);
                                            assert.equal(items.results.length, 1);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies input validation of listing messages from a discussion
         */
        it('verify list messages validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var displayName = 'test';
                var description = 'test';
                var visibility = 'public';

                // Create a discussion to test with
                RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // Validate invalid discussion id
                    RestAPI.Discussions.getMessages(user.restContext, 'not-a-valid-id', null, null, function(err, messages) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Validate invalid limit
                        // It should default to 10 messages
                        RestAPI.Discussions.getMessages(user.restContext, discussion.id, null, 'not-a-valid-limit', function(err, messages) {
                            assert.ok(!err);
                            assert.ok(messages);

                            // Sanity check
                            RestAPI.Discussions.getMessages(user.restContext, discussion.id, null, null, function(err, messages) {
                                assert.ok(!err);
                                assert.ok(messages);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the model of messages, and permissions for accessing them
         */
        it('verify listing messages, model and permissions', function(callback) {

            /*!
             * Ensure that the message model is correct between the message to test and the message against which to test.
             *
             * @param  {Message}    messageToTest           The message to test
             * @param  {Message}    messageToTestAgainst    The message against which to test
             * @param  {User}       creatorToTestAgainst    The user data (i.e., `createdBy`) to test against for the message creator
             * @param  {Boolean}    userScrubbed            Whether or not the createdBy field should have scrubbed user data
             * @throws {Error}                              Throws an assertion error if the data fails assertions
             */
            var _assertMessageModel = function(messageToTest, messageToTestAgainst, creatorToTestAgainst, userScrubbed) {

                // Verify message model
                assert.equal(messageToTest.id, messageToTestAgainst.id);
                assert.equal(messageToTest.messageBoxId, messageToTestAgainst.messageBoxId);
                assert.equal(messageToTest.threadKey, messageToTestAgainst.threadKey);
                assert.equal(messageToTest.body, messageToTestAgainst.body);
                assert.equal(messageToTest.created, messageToTestAgainst.created);
                assert.strictEqual(messageToTest.level, messageToTestAgainst.level);
                assert.equal(messageToTest.replyTo, messageToTestAgainst.replyTo);

                // Verify creator model
                assert.ok(messageToTest.createdBy);
                assert.equal(messageToTest.createdBy.tenant.alias, creatorToTestAgainst.tenant.alias);
                assert.equal(messageToTest.createdBy.tenant.displayName, creatorToTestAgainst.tenant.displayName);
                assert.equal(messageToTest.createdBy.visibility, creatorToTestAgainst.visibility);

                // Privacy check
                if (userScrubbed) {
                    assert.equal(messageToTest.createdBy.displayName, creatorToTestAgainst.publicAlias);
                } else {
                    assert.equal(messageToTest.createdBy.displayName, creatorToTestAgainst.displayName);
                }
            };

            // Set up the tenants for tenant privacy rule checking
            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {


                // Create message structure on the public discussion
                RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, 'Message1 parent on public', null, function(err, publicMessage1) {
                    assert.ok(!err);

                    RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, 'Message1 reply on public', publicMessage1.created, function(err, replyPublicMessage1) {
                        assert.ok(!err);

                        RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, 'Message2 parent on public', null, function(err, publicMessage2) {
                            assert.ok(!err);


                            // Create message on the loggedin discussion
                            RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.loggedinDiscussion.id, 'Message on loggedin', null, function(err, loggedinMessage) {
                                assert.ok(!err);


                                // Share and post message on the private discussion
                                RestAPI.Discussions.shareDiscussion(publicTenant.adminRestCtx, publicTenant.privateDiscussion.id, [publicTenant.privateUser.user.id], function(err) {
                                    assert.ok(!err);

                                    RestAPI.Discussions.createMessage(publicTenant.privateUser.restCtx, publicTenant.privateDiscussion.id, 'Message on private', null, function(err, privateMessage) {
                                        assert.ok(!err);


                                        // Anonymous can read on public, but not loggedin or private
                                        RestAPI.Discussions.getMessages(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, null, null, function(err, messages) {
                                            assert.ok(!err);
                                            assert.ok(messages);
                                            assert.equal(messages.results.length, 3);

                                            // Verify the model of all 3 messages
                                            _assertMessageModel(messages.results[0], publicMessage2, publicTenant.loggedinUser.user, true);
                                            _assertMessageModel(messages.results[1], publicMessage1, publicTenant.loggedinUser.user, true);
                                            _assertMessageModel(messages.results[2], replyPublicMessage1, publicTenant.loggedinUser.user, true);

                                            RestAPI.Discussions.getMessages(publicTenant.anonymousRestCtx, publicTenant.loggedinDiscussion.id, null, null, function(err, messages) {
                                                assert.ok(err);
                                                assert.ok(err.code, 401);
                                                assert.ok(!messages);

                                                RestAPI.Discussions.getMessages(publicTenant.anonymousRestCtx, publicTenant.privateDiscussion.id, null, null, function(err, messages) {
                                                    assert.ok(err);
                                                    assert.ok(err.code, 401);
                                                    assert.ok(!messages);


                                                    // Authenticated user can read loggedin
                                                    RestAPI.Discussions.getMessages(publicTenant.publicUser.restCtx, publicTenant.loggedinDiscussion.id, null, null, function(err, messages) {
                                                        assert.ok(!err);
                                                        assert.ok(messages);
                                                        assert.equal(messages.results.length, 1);

                                                        // Verify the model of the message, the loggedin user should not be scrubbed
                                                        _assertMessageModel(messages.results[0], loggedinMessage, publicTenant.loggedinUser.user, false);

                                                        // Authenticated user cannot read private
                                                        RestAPI.Discussions.getMessages(publicTenant.publicUser.restCtx, publicTenant.privateDiscussion.id, null, null, function(err, messages) {
                                                            assert.ok(err);
                                                            assert.ok(err.code, 401);
                                                            assert.ok(!messages);

                                                            // Member user can read private
                                                            RestAPI.Discussions.getMessages(publicTenant.privateUser.restCtx, publicTenant.privateDiscussion.id, null, null, function(err, messages) {
                                                                assert.ok(!err);
                                                                assert.ok(messages);
                                                                assert.equal(messages.results.length, 1);

                                                                // Verify the model of the message, the loggedin user should not be scrubbed
                                                                _assertMessageModel(messages.results[0], privateMessage, publicTenant.privateUser.user, false);

                                                                // Ensure paging of the messages

                                                                // Get the first two only
                                                                RestAPI.Discussions.getMessages(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, null, 2, function(err, messages) {
                                                                    assert.ok(!err);
                                                                    assert.ok(messages);

                                                                    assert.equal(messages.results.length, 2);

                                                                    // Verify the model and ordering of the messages
                                                                    _assertMessageModel(messages.results[0], publicMessage2, publicTenant.loggedinUser.user, true);
                                                                    _assertMessageModel(messages.results[1], publicMessage1, publicTenant.loggedinUser.user, true);

                                                                    // Try and get 2 more. Should only get 1 and it should be the 3rd message
                                                                    RestAPI.Discussions.getMessages(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, publicMessage1.threadKey, 2, function(err, messages) {
                                                                        assert.ok(!err);
                                                                        assert.ok(messages);
                                                                        assert.equal(messages.results.length, 1);

                                                                        // Verify the model and ordering of the messages
                                                                        _assertMessageModel(messages.results[0], replyPublicMessage1, publicTenant.loggedinUser.user, true);

                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies input validation of deleting messages from a discussion
         */
        it('verify delete message validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestCtx, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var displayName = 'test';
                var description = 'test';
                var visibility = 'public';

                // Create a discussion to test with
                RestAPI.Discussions.createDiscussion(user.restContext, displayName, description, visibility, null, null, function(err, discussion) {
                    assert.ok(!err);

                    // Create message on the discussion to delete
                    RestAPI.Discussions.createMessage(user.restContext, discussion.id, 'a message', null, function(err, message) {
                        assert.ok(!err);

                        // Validate invalid discussion id
                        RestAPI.Discussions.deleteMessage(user.restContext, 'not-an-id', message.created, function(err) {
                            assert.ok(err);
                            assert.equal(err.code, 400);

                            // Validate invalid timestamp
                            RestAPI.Discussions.deleteMessage(user.restContext, discussion.id, 'invalid-created', function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 400);

                                // Sanity check input
                                RestAPI.Discussions.deleteMessage(user.restContext, discussion.id, message.created, function(err) {
                                    assert.ok(!err);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the logic of deleting messages, and the model and permissions for the operation
         */
        it('verify deleting messages, model and permissions', function(callback) {

            DiscussionsTestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {

                // Create message structure on the public discussion
                RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, 'Message1 parent on public', null, function(err, publicMessage1) {
                    assert.ok(!err);

                    RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, 'Message1 reply on public', publicMessage1.created, function(err, replyPublicMessage1) {
                        assert.ok(!err);

                        RestAPI.Discussions.createMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, 'Message2 parent on public', null, function(err, publicMessage2) {
                            assert.ok(!err);

                            // Add a manager to the discussion
                            var updates = {};
                            updates[publicTenant.privateUser.user.id] = 'manager';
                            RestAPI.Discussions.updateDiscussionMembers(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, updates, function(err) {
                                assert.ok(!err);

                                // Verify anonymous cannot delete a message
                                RestAPI.Discussions.deleteMessage(publicTenant.anonymousRestCtx, publicTenant.publicDiscussion.id, publicMessage1.created, function(err, message) {
                                    assert.ok(err);
                                    assert.equal(err.code, 401);
                                    assert.ok(!message);

                                    // Verify non-manager, non-creator user can't delete a message
                                    RestAPI.Discussions.deleteMessage(publicTenant.publicUser.restCtx, publicTenant.publicDiscussion.id, publicMessage1.created, function(err, message) {
                                        assert.ok(err);
                                        assert.equal(err.code, 401);
                                        assert.ok(!message);

                                        // Verify manager can delete, also verify the parent message is soft-deleted and its model
                                        RestAPI.Discussions.deleteMessage(publicTenant.privateUser.restCtx, publicTenant.publicDiscussion.id, publicMessage1.created, function(err, message) {
                                            assert.ok(!err);
                                            assert.ok(message);

                                            // Ensure the deleted message model
                                            assert.equal(message.id, publicMessage1.id);
                                            assert.equal(message.messageBoxId, publicMessage1.messageBoxId);
                                            assert.equal(message.threadKey, publicMessage1.threadKey);
                                            assert.equal(message.created, publicMessage1.created);
                                            assert.equal(message.replyTo, publicMessage1.replyTo);
                                            assert.notEqual(parseInt(message.deleted, 10), NaN);
                                            assert.ok(parseInt(message.deleted, 10) > parseInt(message.created, 10));
                                            assert.strictEqual(message.level, publicMessage1.level);
                                            assert.ok(!message.body);
                                            assert.ok(!message.createdBy);

                                            // Ensure the deleted message is in the list of messages still, but deleted
                                            RestAPI.Discussions.getMessages(publicTenant.privateUser.restCtx, publicTenant.publicDiscussion.id, null, null, function(err, items) {
                                                assert.ok(!err);
                                                assert.ok(items.results.length, 3);

                                                var message = items.results[1];
                                                assert.equal(message.id, publicMessage1.id);
                                                assert.equal(message.messageBoxId, publicMessage1.messageBoxId);
                                                assert.equal(message.threadKey, publicMessage1.threadKey);
                                                assert.equal(message.created, publicMessage1.created);
                                                assert.equal(message.replyTo, publicMessage1.replyTo);
                                                assert.notEqual(parseInt(message.deleted, 10), NaN);
                                                assert.ok(parseInt(message.deleted, 10) > parseInt(message.created, 10));
                                                assert.strictEqual(message.level, publicMessage1.level);
                                                assert.ok(!message.body);
                                                assert.ok(!message.createdBy);

                                                // Delete the rest of the messages to test hard-deletes. This also tests owner can delete
                                                RestAPI.Discussions.deleteMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, replyPublicMessage1.created, function(err, message) {
                                                    assert.ok(!err);
                                                    assert.ok(!message);

                                                    // We re-delete this one, but it should actually do a hard delete this time as there are no children
                                                    RestAPI.Discussions.deleteMessage(publicTenant.loggedinUser.restCtx, publicTenant.publicDiscussion.id, publicMessage1.created, function(err, message) {
                                                        assert.ok(!err);
                                                        assert.ok(!message);

                                                        // Perform a hard-delete on this leaf message. This also tests admin can delete
                                                        RestAPI.Discussions.deleteMessage(publicTenant.adminRestCtx, publicTenant.publicDiscussion.id, publicMessage2.created, function(err, message) {
                                                            assert.ok(!err);
                                                            assert.ok(!message);

                                                            // Should be no more messages in the discussion as they should have all been de-indexed by hard deletes
                                                            RestAPI.Discussions.getMessages(publicTenant.privateUser.restCtx, publicTenant.publicDiscussion.id, null, null, function(err, items) {
                                                                assert.ok(!err);
                                                                assert.ok(items);
                                                                assert.equal(items.results.length, 0);
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
