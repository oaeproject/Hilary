/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var OaeUtil = require('oae-util/lib/util');
var Telemetry = require('oae-telemetry').telemetry('search-general');
var TenantsUtil = require('oae-tenants/lib/util');

var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var RESOURCE_TYPES_ACCESS_SCOPED = [SearchConstants.general.RESOURCE_TYPE_ALL,
        SearchConstants.general.RESOURCE_TYPE_CONTENT, SearchConstants.general.RESOURCE_TYPE_GROUP];

/**
 * General search that searches a 'general' analyzed field on content, scoping it by user access.
 *
 * In addition to the specific `opts` parameters documented here, there are more generic options available that impact all
 * searches. @see SearchAPI#search for more information.
 *
 * @param  {Context}       ctx                     The context of the current request
 * @param  {Object}        [opts]                  General search options
 * @param  {String[]}      [opts.resourceTypes]    An array of resource types to search (e.g., content, user). If not specified, then the search will not filter on resource type at all. Possible resource types are those that have registered producers in SearchAPI#registerSearchDocumentProducer.
 * @param  {String}        [opts.includeExternal]  Whether or not to include content from other tenants ('true' or 'false') (Default: 'false')
 * @param  {String}        [opts.includeIndirect]  Whether or not to include private resources that the user has access to indirectly (Default: 'true');
 * @param  {Function}      callback                Invoked when the process completes
 * @param  {Object}        callback.err            An error that occurred, if any
 * @param  {SearchResult}  callback.results        An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // Sanitize custom search options
    opts = opts || {};
    opts.resourceTypes = opts.resourceTypes || [];
    opts.includeExternal = (opts.includeExternal === 'true');
    opts.includeIndirect = (opts.includeIndirect !== 'false');
    opts.limit = OaeUtil.getNumberParam(opts.limit, 10, 1, 25);

    // Sanitize the resourceTypes array
    if (!_.isArray(opts.resourceTypes)) {
        // Convert to an array if it's a single value
        opts.resourceTypes = [opts.resourceTypes];
    }

    // Remove any falsy values from the array
    opts.resourceTypes = _.compact(opts.resourceTypes);

    // If there were no valid values for resource type, we search everything
    opts.searchAll = (opts.resourceTypes.length === 0);

    // opts.q is required to determine _needsFilterByAccess
    opts.q = SearchUtil.getQueryParam(opts.q);

    var needsFilterByAccess = _needsFilterByAccess(ctx, opts);
    if (needsFilterByAccess && opts.includeIndirect) {
        // We'll need to know the group membership of this user to scope by resources they have access to directly or indirectly
        AuthzAPI.getPrincipalMemberships(ctx.user().id, null, 10000, function(err, groups) {
            if (err) {
                return callback(err);
            }

            // Bind the access array to the search options
            var access = groups || [];
            access.push(ctx.user().id);
            opts.access = access;

            _search(ctx, opts, callback);
        });
    } else if (needsFilterByAccess && !opts.includeIndirect) {
        // If we're not including indirect resources, only filter by direct user access
        opts.access = [ctx.user().id];
        _search(ctx, opts, callback);
    } else {
        _search(ctx, opts, callback);
    }
};

/**
 * Perform the search that searches a 'q' analyzed field on documents, scoping it by user access. This is delegated from the
 * `module.exports` function for convenience, as it will access the members array only if necessary.
 *
 * @param  {Context}       ctx                 The context of the current request
 * @param  {Object}        opts                General search options
 * @param  {Function}      callback            Invoked when the process completes
 * @param  {Object}        callback.err        An error that occurred, if any
 * @param  {SearchResult}  callback.results    An object that represents the results of the query
 */
var _search = function(ctx, opts, callback) {
    var data = {};

    // The query object for the Query DSL
    var query = SearchUtil.createQueryStringQuery(opts.q);

    // The filter object for the Query DSL
    var filter = null;
    var typeFilter = SearchUtil.filterTerm('_type', SearchConstants.resourceMappingName);

    // The resource type filter will filter by a particular document type (e.g., content, user, group)
    var resourceTypeFilter = (!opts.searchAll) ? SearchUtil.filterTerms('resourceType', opts.resourceTypes) : null;

    // The access filter will filter by the user's group membership, or the whole tenant if it is tenant admin
    var accessFilter = (ctx.user() && ctx.user().isTenantAdmin(ctx.tenant().alias)) ?
            SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias) : SearchUtil.filterMembers(opts.access);

    // This base filter gets applied to the query unconditionally.
    var baseFilter = SearchUtil.filterAnd(typeFilter, resourceTypeFilter);

    // If external resources should be included, we need to know the tenants with which the current
    // tenant can interact, so we can properly filter out resources from non-permeable tenants
    // and private and loggedin resources from permeable tenants
    var interactingTenantAliases = TenantsUtil.getAllTenantsForInteraction(ctx.tenant().alias);


    if (ctx.user() && ctx.user().isGlobalAdmin()) {
        // If user is global admin, forget filtering by members and visibility, just query *everything*
        filter = baseFilter;
    } else if (ctx.user()) {
        // The user is authenticated

        filter = SearchUtil.filterAnd(
            baseFilter,
            SearchUtil.filterOr(

                // I can always see content that I have explicit access to, even if it belongs to another tenant and I haven't specified `includeExternal`
                accessFilter,

                SearchUtil.filterAnd(

                    // I will only get resources from my own tenant if I have not specified to include external
                    (!opts.includeExternal) ? SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias) : null,

                    // This or statement applies visibility restrictions
                    SearchUtil.filterOr(

                        // Public resources from the current tenant should always be included. If external results should be included, resources from
                        // other permeable tenants should be included as well
                        SearchUtil.filterAnd(
                            SearchUtil.filterTerm('visibility', 'public'),
                            SearchUtil.filterOr(
                                SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                                (opts.includeExternal && interactingTenantAliases.length > 0) ? SearchUtil.filterTerms('tenantAlias', interactingTenantAliases) : null
                            )
                        ),

                        // I can see all joinable resources from my own tenant
                        // I can see joinable resources from other tenants that I can interact with (if any) if I have specified to view external resources
                        SearchUtil.filterAnd(
                            SearchUtil.filterOr(
                                SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                                (opts.includeExternal && interactingTenantAliases.length > 0) ? SearchUtil.filterTerms('tenantAlias', interactingTenantAliases) : null
                            ),
                            SearchUtil.filterTerm('resourceType', 'group'),
                            SearchUtil.filterTerms('joinable', ['yes', 'request'])
                        ),

                        // Logged in resources from the current tenant should also be included
                        SearchUtil.filterAnd(
                            SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                            SearchUtil.filterTerm('visibility', 'loggedin')
                        )
                    )
                )
            )
        );
    } else {
        // For anonymous users, only show public resources
        filter = SearchUtil.filterAnd(
            baseFilter,

            // Limit to the current tenant unless specified otherwise
            (!opts.includeExternal) ? SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias) : null,

            // Public resources from the current tenant and other permeable tenants should be included
            SearchUtil.filterAnd(
                SearchUtil.filterTerm('visibility', 'public'),
                SearchUtil.filterOr(
                    SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                    (opts.includeExternal && interactingTenantAliases.length > 0) ? SearchUtil.filterTerms('tenantAlias', interactingTenantAliases) : null
                )
            )
        );
    }

    // wrap the query and filter into the top-level Query DSL "query" object
    return callback(null, SearchUtil.createQuery(query, filter, opts));
};

/**
 * Determines whether or not the search needs to be scoped by the user's access privileges. This is true when:
 *
 *  * The user is authenticated; and
 *  * The user is not a global administrator; and
 *  * The search includes content and groups (users are not filtered by access); and
 *  * The search is actually specifying a query (e.g., if the search is '*', then we only include content that is public / loggedin)
 *
 * @param  {Context}   ctx         The context of the current request performing the search
 * @param  {Object}    opts        The (sanitized) search options
 * @return {Boolean}               Whether or not the query specified by this user and options requires filtering by access privileges
 * @api private
 */
var _needsFilterByAccess = function(ctx, opts) {
    var isAuthenticated = (ctx.user()) ? true : false;
    var isNotGlobalAdmin = (!isAuthenticated || !ctx.user().isGlobalAdmin());
    var includesContentOrGroups = (opts.searchAll || _.intersection(RESOURCE_TYPES_ACCESS_SCOPED, opts.resourceTypes).length > 0);
    var hasTextQuery = (opts.q !== SearchConstants.query.ALL);
    return isAuthenticated && isNotGlobalAdmin && includesContentOrGroups && hasTextQuery;
};
