/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');

var Context = require('oae-context').Context;
var TestAPI = require('oae-tests');

var ConfigAPI = require('oae-config');

describe('Config Aggregator', function() {

    describe('Admin UI', function() {

        it('Test accessing the global admin UI succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/admin.html'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        it('Test accessing the tenant admin UI succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2001/admin/tenant/camtest'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

    });

    describe('Configuration', function() {

        it('Test configuration retrieval succeeds', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/config'
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                body = JSON.parse(body);
                assert.ok(body['oae-authentication']);
                assert.equal(body['oae-authentication'].title, 'OAE Authentication Module');
                callback();
            });
        });

        it('Test persisting a global configuration value succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/config',
                'json': {
                    'oae-authentication/twitter/enabled': false
                }
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });

        it('Test global configuration value overrides config.json value', function(callback) {
            request.get({
                'uri': 'http://localhost:2000/api/config'
            }, function(err, response, modules) {
                assert.ok(!err);
                modules = JSON.parse(modules);
                assert.equal(modules['oae-authentication']['twitter'].elements['enabled'].defaultValue, false);
                callback();
            });
        });

        it('Test persisting a tenant configuration value succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/config',
                'json': {
                    'oae-authentication/twitter/enabled': false
                }
            }, function(err, response, body) {
                assert.ok(!err);
                assert.equal(response.statusCode, 200);
                request.get({
                    'uri': 'http://localhost:2000/api/config'
                }, function(err, response, modules) {
                    assert.ok(!err);
                    modules = JSON.parse(modules);
                    assert.equal(modules['oae-authentication']['twitter'].elements['enabled'].defaultValue, false);

                    request.post({
                        'uri': 'http://localhost:2001/api/config',
                        'json': {
                            "oae-authentication/twitter/enabled": true
                        }
                    }, function(err, response, body) {
                        assert.ok(!err);
                        assert.equal(response.statusCode, 200);
                        callback();
                    });
                });
            });
        });

        it('Test tenant configuration value overrides global value', function(callback) {
            request.get({
                'uri': 'http://localhost:2001/api/config'
            }, function(err, response, modules) {
                assert.ok(!err);
                modules = JSON.parse(modules);
                assert.equal(modules['oae-authentication']['twitter'].elements['enabled'].defaultValue, true);
                callback();
            });
        });

        it('Test saving tenant configuration value requires configuration', function(callback) {
            request.post({
                'uri': 'http://localhost:2001/api/config'
            }, function(err, response, body) {
                assert.ok(!err);
                assert.equal(400, response.statusCode);
                assert.ok(body.indexOf('Missing configuration') != -1, body);
                callback();
            });
        });

    });

});
