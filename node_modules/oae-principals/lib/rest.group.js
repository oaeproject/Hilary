/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var PrincipalsAPI = require('./api');
var PrincipalsConstants = require('./constants').PrincipalsConstants;

/**
 * @REST postGroupCreate
 *
 * Create a new group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/create
 * @FormParam   {string}        displayName             The display name of the group
 * @FormParam   {string}        [description]           A longer description for the group
 * @FormParam   {string}        [joinable]              How the group can be joined            [no,request,yes]
 * @FormParam   {string[]}      [managers]              Unique identifier(s) for users and groups to add as manager of the group. The user creating the group will be added as a manager automatically
 * @FormParam   {string[]}      [members]               Unique identifier(s) for users and groups to add as members of the group
 * @FormParam   {string}        [visibility]            The visibility of the group. Defaults to the configured tenant default           [loggedin,private,public]
 * @Return      {BasicGroup}                            The created group
 */
OAE.tenantRouter.on('post', '/api/group/create', function(req, res) {
    var managers = OaeUtil.toArray(req.body.managers);
    var members = OaeUtil.toArray(req.body.members);

    // Construct a single hash that will contain the permissions
    var memberHash = {};
    _.each(managers, function(userId) {
        memberHash[userId] = PrincipalsConstants.roles.MANAGER;
    });
    _.each(members, function(userId) {
        memberHash[userId] = PrincipalsConstants.roles.MEMBER;
    });


    PrincipalsAPI.createGroup(req.ctx, req.body.displayName, req.body.description, req.body.visibility, req.body.joinable, memberHash, function(err, group) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, group);
    });
});

/**
 * @REST getGroupGroupId
 *
 * Get a full group profile
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /group/{groupId}
 * @PathParam   {string}        groupId             The id of the group to get
 * @Return      {Group}                             Full group profile
 */
OAE.tenantRouter.on('get', '/api/group/:groupId', function(req, res) {
    PrincipalsAPI.getFullGroupProfile(req.ctx, req.params.groupId, function(err, group) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, group);
    });
});

/**
 * @REST postGroupGroupId
 *
 * Update a group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{groupId}
 * @PathParam   {string}        groupId             The id of the group to update
 * @FormParam   {string}        [description]       Updated description for the discussion
 * @FormParam   {string}        [displayName]       Updated display name for the discussion
 * @FormParam   {string}        [joinable]          Updated joinability for the discussion            [no,request,yes]
 * @FormParam   {string}        [visibility]        Updated visibility for the discussion             [loggedin,private,public]
 * @Return      {BasicGroup}                        The updated group
 */
OAE.tenantRouter.on('post', '/api/group/:groupId', function(req, res) {
    // Get the fields we wish to update.
    PrincipalsAPI.updateGroup(req.ctx, req.params.groupId, req.body, function(err, updatedGroup) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, updatedGroup);
    });
});

/**
 * @REST getGroupGroupIdMembers
 *
 * Get the members of a group and their roles
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /group/{groupId}/members
 * @PathParam   {string}            groupId             The id of the group to get the members for
 * @QueryParam  {number}            [limit]             The maximum number of results to return. Default: 10
 * @QueryParam  {string}            [start]             The group paging token from which to start fetching group members
 * @Return      {MembersResponse}                       Members of the specified group
 */
OAE.tenantRouter.on('get', '/api/group/:groupId/members', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    PrincipalsAPI.getGroupMembers(req.ctx, req.params.groupId, req.query.start, limit, function(err, members, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, {'results': members, 'nextToken': nextToken});
    });
});

/**
 * @REST postGroupGroupIdMembers
 *
 * Update the members of a group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{groupId}/members
 * @PathParam   {string}                groupId         The id of the group to update the members for
 * @BodyParam   {GroupMembersUpdate}    body            Object that describes the membership updates to apply to the group
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/group/:groupId/members', function(req, res) {
    // Convert the string 'false' to a proper boolean
    var members = req.body;
    var principals = _.keys(members);
    for (var i = 0; i < principals.length; i++) {
        if (members[principals[i]] === 'false') {
            members[principals[i]] = false;
        }
    }
    PrincipalsAPI.setGroupMembers(req.ctx, req.params.groupId, members, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200);
    });
});

/**
 * @REST postGroupGroupIdJoin
 *
 * Join a group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{groupId}/join
 * @PathParam   {string}        groupId                 The id of the group to join
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/group/:groupId/join', function(req, res) {
    PrincipalsAPI.joinGroup(req.ctx, req.params.groupId, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/**
 * @REST postGroupGroupIdLeave
 *
 * Leave a group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{groupId}/leave
 * @PathParam   {string}        groupId                 The id of the group to leave
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/group/:groupId/leave', function(req, res) {
    PrincipalsAPI.leaveGroup(req.ctx, req.params.groupId, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/**
 * @REST postGroupGroupIdPicture
 *
 * Store the large picture for a group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{groupId}/picture
 * @PathParam   {string}        groupId                 The id of the group to store the large picture for
 * @FormParam   {File}          file                    Image that should be stored as the large group picture
 * @Return      {BasicGroup}                            The updated group
 */
OAE.tenantRouter.on('post', '/api/group/:groupId/picture', function(req, res) {
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.groupId, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response.
        res.set('Content-Type', 'text/plain');
        res.send(200, principal);
    });
});
