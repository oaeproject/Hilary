/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var ConfigTestUtil = require('oae-config/lib/test/util');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Set up a CAS server and configure the CAS authentication strategy
 * for a given tenant. The CAS server will return a user for which
 * the attributes can be configured
 *
 * @param  {String}     tenantAlias                     The alias of the tenant that should be configured with a CAS authentication strategy
 * @param  {Boolean}    enabled                         Whether or not the CAS strategy should be enabled
 * @param  {String}     externalId                      The external id of the user that will be returned by the CAS server
 * @param  {String}     displayName                     The display name of the user that will be returned by the CAS server
 * @param  {String}     email                           The email of the user that will be returned by the CAS server
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.validTicket            A ticket that can be used with the CAS server to return a valid CAS user response
 * @param  {Function}   callback.closeCallback          A function that will close down the CAS server
 * @param  {Function}   callback.closeCallback.done     A function that wil be called once the CAS server has been closed
 */
var setupCASServer = module.exports.setupCASServer = function(tenantAlias, enabled, externalId, displayName, email, callback) {
    TestsUtil.createTestServer(function(app, server, port) {
        // Generate a valid ticket
        var validTicket = 'ticket-' + _.random(0, 10000);

        // Mock CAS's /serviceValidate endpoint
        app.get('/cas/serviceValidate', function(req, res) {
            if (req.query.ticket === validTicket) {
                var successXml = '<cas:serviceResponse>';
                successXml += '<cas:authenticationSuccess>';
                successXml += '<cas:user>' + externalId + '</cas:user>';
                successXml += '<cas:attributes>';
                successXml += '  <cas:displayName>' + displayName + '</cas:displayName>';
                successXml += '  <cas:email>' + email + '</cas:email>';
                successXml += '</cas:attributes>';
                successXml += '</cas:authenticationSuccess>';
                successXml += '</cas:serviceResponse>';
                res.send(200, successXml);
            } else {
                res.send(401, '<cas:serviceResponse><cas:authenticationFailure>true</cas:authenticationFailure></cas:serviceResponse>');
            }
        });

        // Setup the CAS strategy
        var configUpdate = {};
        configUpdate['oae-authentication/cas/enabled'] = enabled;
        configUpdate['oae-authentication/cas/url'] = 'http://localhost:' + port + '/cas';
        configUpdate['oae-authentication/cas/logoutUrl'] = 'http://localhost:' + port + '/cas/logout';
        configUpdate['oae-authentication/cas/loginPath'] = '/login';
        configUpdate['oae-authentication/cas/mapDisplayName'] = '{displayName}';
        configUpdate['oae-authentication/cas/mapEmail'] = '{email}';
        var globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenantAlias, configUpdate, function(err) {
            assert.ok(!err);
        });

        /*!
         * Stop the server and disable the CAS authentication strategy
         *
         * @param  {Function}       callback      Standard callback function
         */
        var stopServer = function(callback) {
            server.close(function(err) {
                assert.ok(!err);
                var keysToClear = [
                  'oae-authentication/cas/enabled',
                  'oae-authentication/cas/url',
                  'oae-authentication/cas/loginPath',
                  'oae-authentication/cas/mapDisplayName',
                  'oae-authentication/cas/mapEmail'
                ];

                ConfigTestUtil.clearConfigAndWait(globalAdminRestContext, tenantAlias, keysToClear, function(err) {
                  assert.ok(!err);
                });

                AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {
                  return callback();
                });
            });
        };


        // Wait until the authentication api has finished refreshing its strategies
        AuthenticationAPI.once(AuthenticationConstants.events.REFRESHED_STRATEGIES, function(tenant) {
            return callback(validTicket, stopServer);
        });
    });
};
