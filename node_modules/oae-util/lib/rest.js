/*!
* Copyright 2014 Apereo Foundation (AF) Licensed under the
* Educational Community License, Version 2.0 (the "License"); you may
* not use this file except in compliance with the License. You may
* obtain a copy of the License at
*
*     http://opensource.org/licenses/ECL-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an "AS IS"
* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing
* permissions and limitations under the License.
*/

/**
 * REST documentation for models that are referenced by multiple modules
 */

/**
 * @RESTModel Image
 *
 * @Required    [height,url,width]
 * @Property    {number}        height                  Height of image in pixels
 * @Property    {string}        url                     URL for image
 * @Property    {number}        width                   Width of image in pixels
 */

/**
 * @RESTModel Item
 *
 * @Required    [created,createdBy,description,displayName,id,lastModified,latestRevisionId,previews,profilePath,resourceSubType,resourceType,signature,tenant,visibility]
 * @Property    {number}     created            Timestamp at which this content item was created in milliseconds since epoch
 * @Property    {string}     createdBy          Unique identifier of the user who created this content item
 * @Property    {string}     description        Description of the content item
 * @Property    {string}     displayName        Title of the content item
 * @Property    {string}     downloadPath       Relative URL to download content source
 * @Property    {string}     filename           Name of content file
 * @Property    {string}     id                 Globally unique content ID for this content item
 * @Property    {number}     lastModified       Timestamp at which this content item was modified for the last time in milliseconds since epoch
 * @Property    {String}     latestRevisionId   Unique identifier of the latest revision associated with this piece of content
 * @Property    {string}     mime               MIME type for content (e.g. "text/plain")
 * @Property    {Previews}   previews           Preview data of the latest revision of the content item
 * @Property    {string}     profilePath        Relative URL for content's main page
 * @Property    {string}     resourceSubType    Type of content item                   [collabdoc,file,link]
 * @Property    {string}     resourceType       Type of resource                       [content]
 * @Property    {Signature}  signature          Credentials to access content
 * @Property    {number}     size               Size of content file in bytes
 * @Property    {TenantInfo} tenant             Information about the tenant this content item is being created in
 * @Property    {string}     visibility         Visibility of the content item         [loggedin,private,public]
 */

/**
 * @RESTModel ItemsResponse
 *
 * @Required    [nextToken,results]
 * @Property    {Item[]}        results                 Array of content items associated with object
 * @Property    {string}        nextToken               Marker to allow continuation of search (empty if search has been exhausted)
 */

/**
 * @RESTModel Member
 *
 * @Required    [profile,role]
 * @Property    {User}          profile                 Profile of member
 * @Property    {string}        role                    Role of member          [manager,member,viewer]
 */

/**
 * @RESTModel MemberList
 *
 * @Required    [members]
 * @Property    {string[]}      members                 Array of unique identifiers(s) for user(s)
 */

/**
 * @RESTModel MembersResponse
 *
 * @Required    [nextToken,results]
 * @Property    {Member[]}      results                 Array of members associated with object
 * @Property    {string}        nextToken               Marker to allow continuation of search (empty if search has been exhausted)
 */

/**
 * @RESTModel Message
 *
 * @Required    [created,id,level,replyTo]
 * @Property    {string}        body                    Content of message
 * @Property    {string}        created                 Time message was created (epoch format)
 * @Property    {User}          createdBy               User that created message (not present if message deleted)
 * @Property    {string}        deleted                 Time message was deleted (epoch format)
 * @Property    {string}        id                      Unique identifier for message
 * @Property    {number}        level                   Nesting level within message/replies (root is 0)
 * @Property    {string}        messageBoxId            Unique identifier of discussion
 * @Property    {string}        replyTo                 Creation time of parent message
 * @Property    {string}        threadKey               Unique identifier for message thread
 */

/**
 * @RESTModel MessagesResponse
 *
 * @Required    [nextToken,results]
 * @Property    {Message[]}     results                 Array of messages
 * @Property    {string}        nextToken               Marker to allow continuation of search (empty if search has been exhausted)
 */

/**
 * @RESTModel NewMessage
 *
 * @Required    [body]
 * @Property    {string}        body                    Content of new message
 * @Property    {string}        replyTo                 Created time for message to which the new message is a reply
 */

/**
 * @RESTModel PictureInfo
 *
 * @Required    []
 * @Property    {string}        large                   URL for large image of resource
 * @Property    {string}        medium                  URL for medium image of resource
 * @Property    {string}        small                   URL for small image of resource
 */

/**
 * @RESTModel Signature
 *
 * @Required    [expires, signature]
 * @Property    {number}        expires                 Time current access signature expires (epoch format)
 * @Property    {string}        signature               Access control signature
 */

/**
 * @RESTModel Tenant
 *
 * @Required    [alias,displayName,host]
 * @Property    {string}        alias                   Unique short name for tenant in URLs (should be lowercase)
 * @Property    {string}        displayName             Display name for tenant
 * @Property    {string}        host                    Host address for tenant
 * @Property    {boolean}       active                  Is tenant active?
 * @Property    {boolean}       deleted                 Is tenant deleted?
 * @Property    {boolean}       isGlobalAdminServer     Is tenant the global administrative server?
 */

/**
 * @RESTModel TenantInfo
 *
 * @Required    [alias,displayName]
 * @Property    {string}        alias                   Unique identifier for tenant
 * @Property    {string}        displayName             Displayable name for tenant
 */

/**
 * @RESTModel User
 *
 * @Required    [id,lastModified,profilePath,tenant,resourceType,visibility]
 * @Property    {number}        acceptedTC              Time user accepted terms and conditions (epoch format)
 * @Property    {string}        displayName             Name to display for user
 * @Property    {string}        email                   Email address for user
 * @Property    {string}        id                      Unique identifier for user
 * @Property    {number}        lastModified            Time user's information was last modified (epoch format)
 * @Property    {string}        locale                  Locale for user (e.g. en_US)
 * @Property    {number}        notificationsLastRead   Time user last read (epoch format)
 * @Property    {number}        notificationsUnread     Number of unread notifications for user
 * @Property    {PictureInfo}   picture                 User's thumbnail information
 * @Property    {string}        profilePath             URL for user's main page
 * @Property    {string}        publicAlias             Public alias for user
 * @Property    {string}        resourceType            Type of resource (user)
 * @Property    {TenantInfo}    tenant                  User's tenant
 * @Property    {string}        timezone                Time zone for user
 * @Property    {string}        visibility              Visibility of user      [loggedin,private,public]
 */

/**
 * @RESTModel ViewerList
 *
 * @Required    [viewers]
 * @Property    {string[]}      viewers                 Unique identifiers of users
 */
