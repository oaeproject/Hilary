/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * The interface that each Storage Backend should implement.
 */

/**
 * Stores a file body on the storage backend.
 * This method will return a uri that can be used to retrieve the file body.
 * The implementer will ensure that the temporary file will be removed.
 * It's up to the caller to store this uri appropriately.
 *
 * @param {Context}     ctx             The current execution context.
 * @param {Object}      file            An object that holds 4 data keys (`filename`, `path`, `mime` and `size`). This file should be removed once the file is stored or in case something goes wrong.
 * @param {Function}    callback        A callback method
 * @param {Object}      callback.err    An error object (if any)
 * @param {String}      callback.uri    A URI that can be used to retrieve the filebody.
 */
var store = module.exports.store = function(ctx, opts, callback) {};

/**
 * In case the storage backend is not hosted on this app server,
 * the user will need to be redirected to a URL that gets generated by this method.
 *
 * @param   {Context}     ctx                   The current execution context.
 * @param   {Content}     uri                   A URI that identifies the filebody.
 * @returns {Object}                            An object that holds a `code` key and a `url` key. If the code is `200` it's assumed that this should be an X-Accel-Redirect via nginx, if it's a 301 the provided url is a complete url to an outside source.
 */
var getDownloadLink = module.exports.getDownloadLink = function(ctx, uri) {};