/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var log = require('oae-logger').logger('oae-preview-processor');
var RestAPI = require('oae-rest');

var DefaultRetriever = require('./retrievers/default');
var PreviewConstants = require('./constants');
var PreviewImages = require('./api.images');

var _retrievers = [
    require('./retrievers/flickr'),
    require('./retrievers/slideshare'),
    require('./retrievers/vimeo'),
    require('./retrievers/youtube')
];

/**
 * Inits the link processor.
 * This method will check if the phantomjs binary can be executed.
 *
 * @param  {Object} config                                  The main config object.
 * @param  {Object} config.previews                         The namespace for all preview related configuration.
 * @param  {Object} config.previews.phantomjs               The namespace for all PhantomJS related configuration.
 * @param  {String} config.previews.phantomjs.binary        The path to the `phantomjs` executable. This should either be a direct path or the filename that's on the `PATH` environment.
 * @param  {Number} config.previews.phantomjs.renderDelay   Specifies the time (in ms) between page load and taking a screenshot. This is to allow for AJAX content to be loaded into the page. (Default: 5000ms)
 */
var init = module.exports.init = function(config, callback) {
    DefaultRetriever.init(config.previews.phantomjs, callback);
};


/**
 * Generates previews for a link.
 *
 * @param  {PreviewContext}     ctx                         The preview context associated to this piece of content.
 * @param  {Object}             ctx.content                 The content profile as returned from the REST API.
 * @param  {Object}             ctx.content.link            The actual link.
 * @param  {Object}             [ctx.content.displayName]   The display name for this link. If none is specified and we have special handlers for this type of link, it will be filled in.
 * @param  {Object}             [ctx.content.description]   The description for this link. If none is specified and we have special handlers for this type of link, it will be filled in.
 * @param  {Function}           callback                    Standard callback method.
 * @param  {Object}             callback.err                Standard error object (if any.)
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, callback) {
    var url = ctx.content.link;

    // Select a retriever, the default one will open up the URL in webkit and take a screenshot.
    var retriever = DefaultRetriever;
    for (var i = 0; i < _retrievers.length; i++) {
        if (_retrievers[i].test(url)) {
            retriever = _retrievers[i];
            break;
        }
    }

    // Get an image that we can use to generate activity images from
    retriever.getImage(ctx, url, function(err, path, opts) {
        if (err) {
            return callback(err);
        }

        // Crop the screenshot.
        var sizes = [
            { 'width': PreviewConstants.SIZES.IMAGE.MEDIUM, 'height': PreviewConstants.SIZES.IMAGE.MEDIUM, 'size': 'medium' },
            { 'width': PreviewConstants.SIZES.IMAGE.SMALL, 'height': PreviewConstants.SIZES.IMAGE.SMALL, 'size': 'small' }
        ];
        PreviewImages.resizeImages(ctx, path, sizes, function(err) {
            if (err) {
                return callback(err);
            }

            // Intelligently crop out a part of the image that we can use as a thumbnail.
            PreviewImages.cropThumbnail(ctx, path, function(err) {
                if (err) {
                    return callback(err);
                }

                // Check if we can update the main content metadata (displayname, description, ..)
                var params = {};
                opts = opts || {};
                if (opts.displayName && ctx.content.displayName === url) {
                    params.displayName = opts.displayName;
                }
                if (opts.description && !ctx.content.description) {
                    params.description = opts.description;
                }

                if (_.keys(params).length === 0) {
                    // The user has filled in his own metadata.
                    // Nothing further to do here.
                    return callback();
                } else {
                    // As the user didn't enter his own metadata,
                    // fill it up with whatever came back from the retriever.
                    log().trace({'contentId': ctx.contentId}, 'Updating the content displayName and description.');
                    RestAPI.Content.updateContent(ctx.tenantRestContext, ctx.contentId, params, callback);
                }
            });
        });
    });
};
