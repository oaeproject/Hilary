// Module dependencies
var Cassandra = require('oae-util/lib/cassandra');
var log = require('oae-logger').logger('oae-loodle-dao-loodles');
var http = require('http');
var request = require('request');
var async = require('async');

var LoodleConfig = require('oae-config').config('oae-loodle');

var UserDAO = require('./users');

/**
 * Update the visibility of a loodle
 *
 * @param ctx
 * @param token
 * @param loodleId
 * @param visibility
 * @param callback
 */
exports.updateVisibility = function (ctx, token, loodleId, visibility, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId + '/category/',
        method:'PUT',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var data = JSON.stringify({
        category: (visibility == 'private') ? 'private' : 'public'
    });

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data.id);

        });
    });


    req.on('error', function (err) {
        log().error("Can't update the category of a loodle in the loodle application : ", err.message);
    });

    // Write data to request body
    req.write(data);
    req.end();

};

exports.removeUser = function (ctx, loodleId, userId, currentUserToken, callback) {

    // Recuperation of the user id in the loodle application
    // Suppression of the user from the loodle

    async.waterfall([
        function (done) {
            UserDAO.getToken(userId, done);
        },
        function (token, done) {
            UserDAO.get(ctx, token, done);
        },
        function (user, done) {
            _removeUser(ctx, loodleId, user.id, currentUserToken, done);
        }
    ], callback)

};

var _removeUser = function (ctx, loodleId, userId, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId + '/user/' + userId,
        method:'DELETE',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null);

        });
    });

    req.on('error', function (err) {
        log().error("Can't remove the user from the loodle in the loodle application : ", err.message);
    });

    req.end();

};

exports.get = function (ctx, loodleId, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId,
        method: 'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        }
    }

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data);
        });

    });

    req.on('error', function (err) {
        log().error("Can't get the loodle in the loodle application : ", err.message);
    });

    req.end();

};

/**
 * Create the loodle in the loodle application
 *
 * @param  {String}     name                    Name of the loodle
 * @param  {String}     description             Description of the loodle
 * @param  {String}     visibility              Visibility of the loodle
 * @param  {Function}   callback                Standard callback function
 */
exports.createLoodle = function (ctx, token, name, description, visibility, callback) {

    visibility = 'public';

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var data = JSON.stringify({
        'name': name,
        'description': description,
        'category': visibility
    });

    var options = {
        host: host,
        port: port,
        path: '/api/loodle',
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Content-length': Buffer.byteLength(data),
            'Authorization': 'Bearer ' + token
        }
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data.id);

        });
    });


    req.on('error', function (err) {
        log().error("Can't create the loodle in the loodle application : ", err.message);
    });

    // Write data to request body
    req.write(data);
    req.end();

};

/**
 * Get loodle id from content id
 *
 * @param  {String}   contentId  Content id
 * @param  {Function} callback   Standard callback function
 * @return {String}              Loodle id or error message
 */
exports.getLoodleId = function (contentId, callback) {

    var query = 'SELECT "loodleId" FROM "LoodleIdByContent" WHERE "contentId" = ?';
    var parameters = [
        contentId
    ];

    Cassandra.runQuery(query, parameters, function (err, result) {
        if (err)
            return callback(err);

        if (result.length === 0)
            return callback("No loodle id associated with this content id");

        return callback(null, Cassandra.rowToHash(result[0]).loodleId);
    });

};

/**
 * Call the loodle api to get the loodle data
 *
 * @param  {String}   loodleId  Loodle id
 * @param  {Function} callback  Standard callback function
 * @return {Object}             Loodle data object or error message
 */
exports.getLoodleData = function (ctx, token, loodleId, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId,
        method:'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data);

        });
    });

    req.on('error', function (err) {
        log().error("Can't get the loodle in the loodle application : ", err.message);
    });

    req.end();

};

exports.getPublicLoodleData  = function (ctx, loodleId, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/public/loodle/' + loodleId,
        method:'GET',
        headers: {
            'Content-type': 'application/json'
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null, response.data);

        });
    });


    req.on('error', function (err) {
        log().error("Can't get the public loodle in the loodle application : ", err.message);
    });

    req.end();

};

/**
 * Save the match contentId - loodleId
 *
 * @param  {String}   contentId  Content id
 * @param  {String}   loodleId   Loodle id
 * @param  {Function} callback   Standard callback function
 * @return {Void}                Null or error message
 */
exports.saveMatch = function (contentId, loodleId, callback) {

    var query = 'INSERT INTO "LoodleIdByContent" ("contentId", "loodleId") values (?, ?)';
    var parameters = [
        contentId,
        loodleId
    ];

    Cassandra.runQuery(query, parameters, callback);
};

/**
 * Delete loodle in loodle application
 *
 * @param  {String}   token      Access token to communicate with the loodle application
 * @param  {String}   contentId  Content id
 * @param  {Function} callback   Standard callback function
 * @return {Void}                Null or error message
 */
exports.deleteLoodle = function (ctx, token, loodleId, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId,
        method:'DELETE',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) {
            response += chunk;
        });

        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response);
            }

            return callback(null);

        });
    });

    req.on('error', function (err) {
        log().error("Can't delete the loodle in the loodle application : ", err.message);
    });

    req.end();

};

var addUserIfNeeded = exports.addUserIfNeeded = function (ctx, loodleId, userId, currentUserToken, callback) {

    var user,
        token;

    async.waterfall([
        // Get user token
        function getUserToken (done) {
            UserDAO.getToken(userId, function (err, data) {
                token = data;
                return done(err, data);
            });
        },
        // Get the user data from the mirror account
        function getUserData (token, done) {
            UserDAO.get(ctx, token, function (err, data) {
                user = data;
                return done(err, data);
            });
        },
        // Check if the user is already in the loodle
        function checkIfInLoodle (userData, done) {
            UserDAO.isInLoodle(ctx, userData.id, loodleId, token, done);
        },
        // If not add him
        function AddIfNeeded (isInLoodle, done) {
            if (isInLoodle) return done();
            addUserToLoodle(ctx, currentUserToken, loodleId, userId, done);
        }
    ], callback);

};

/**
 * Add the specified user to the specified loodle
 *
 * @param currentUser
 * @param loodleId
 * @param userId
 * @param callback
 */
var addUserToLoodle = exports.addUserToLoodle = function (ctx, currentUserToken, loodleId, userId, callback) {

    var userToAddToken,
        user;

    async.series([
        // Get the token of the user to add
        function getUserToAddToken (done) {
            UserDAO.getToken(userId, function (err, data) {
                if (err) return done(err);

                userToAddToken = data;
                return done();
            });
        },
        // Get the user information (from the mirror account in the loodle application, we need it's id)
        function getUserToAddMirrorAccountInfo (done) {
            getUserInfo(ctx, userToAddToken, function (err, data) {
                user = data;
                return done(err, data);
            })
        },
        // Add the specified user to the loodle
        function addUser (done) {
            _addUser(ctx, loodleId, user.id, currentUserToken, done);
        }
    ], callback);

};

var _addUser = exports._addUser = function (ctx, loodleId, userId, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId + '/user/' + userId,
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }
            else
                return callback();
        });
    });

    req.on('error', function (err) {
        log().error("Can't add the user to the specified loodle : ", err.message);
    });

    req.end();

};

var getUserInfo = exports.getUserInfo = function (ctx, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/user',
        method:'GET',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }

            return callback(null, response.data);
        });
    });

    req.on('error', function (err) {
        log().error("Can't get user informations : ", err.message);
    });

    req.end();

};

var addSchedule = exports.addSchedule = function (ctx, loodleId, schedule, locale, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId + '/schedule',
        method:'POST',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    locale = locale.split('_')[0];

    var postData = JSON.stringify({
        'begin_time': schedule.begin_time,
        'end_time': schedule.end_time,
        'language': locale
    });

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }

            return callback(null, response.data);
        });

    });

    req.on('error', function (err) {
        log().error("Can't add schedule to the loodle : ", err.message);
    });

    req.write(postData);
    req.end();

};

var deleteSchedule = exports.deleteSchedule = function (ctx, loodleId, scheduleId, token, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId + '/schedule/' + scheduleId,
        method:'DELETE',
        headers: {
            'Content-type': 'application/json',
            'Authorization': 'Bearer ' + token
        },
    };

    var response = '';
    var req = http.request(options, function (res) {

        res.on('data', function (chunk) { response += chunk; });

        res.on('end', function () {

            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }

            return callback();
        });

    });

    req.end();

};

var addMemberWithVotes = exports.addMemberWithVotes = function (ctx, loodleId, firstName, lastName, votes, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var data = {
        'firstName': firstName,
        'lastName': lastName,
        'votes': votes
    };

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId + '/public/user',
        method: 'POST',
        headers: {
            'Content-type': 'application/json'
        }
    };

    var response = '';
    var req = http.request(options, function (res) {
        res.on('data', function (chunk) { response += chunk; });
        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                log().error("Response : ", response);
                return callback(response.data);
            }
            else {
                return callback(null, response.data);
            }
        });
    });

    req.on('error', function (err) {
        log().error("Can't update votes : ", err.message);
    });

    req.write(JSON.stringify(data));
    req.end();

};

/**
 * Update the votes of a public user in a loodle
 *
 * @param ctx
 * @param loodleId
 * @param votes
 * @param callback
 */
var updatePublicVotes = exports.updatePublicVotes = function (ctx, loodleId, votes, callback) {

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    var options = {
        host: host,
        port: port,
        path: '/api/loodle/' + loodleId + '/public/votes',
        method: 'PUT',
        headers: {
            'Content-type': 'application/json'
        }
    };

    var response = '';
    var req = http.request(options, function (res) {
        res.on('data', function (chunk) { response += chunk; });
        res.on('end', function () {
            // Parse the response to json
            response = JSON.parse(response);

            if (response.type === 'error') {
                return callback(response.data);
            }

            return callback(null, response.data);

        });
    });

    req.on('error', function (err) {
        log().error("Can't update votes : ", err.message);
    });

    req.write(JSON.stringify(votes));
    req.end();
};

var updateVotes = exports.updateVotes = function (ctx, token, loodleId, votes, callback) {

    var data = [];

    // Get config values
    var host = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'host'),
        port = LoodleConfig.getValue(ctx.tenant().alias, 'activity', 'port');

    async.forEachOf(votes, function (value, key, end) {

        data.push({id: key, vote: value});
        return end();

    }, function (err) {
        if (err) return callback(err);

        var options = {
            host: host,
            port: port,
            path: '/api/loodle/' + loodleId + '/votes',
            method:'PUT',
            headers: {
                'Content-type': 'application/json',
                'Authorization': 'Bearer ' + token
            }
        };

        var response = '';
        var req = http.request(options, function (res) {

            res.on('data', function (chunk) { response += chunk; });

            res.on('end', function () {

                // Parse the response to json
                response = JSON.parse(response);

                if (response.type === 'error') {
                    log().error("Response : ", response);
                    return callback(response.data);
                }
                else
                    return callback();
            });

        });

        req.on('error', function (err) {
            log().error("Can't update votes : ", err.message);
        });

        req.write(JSON.stringify(data));
        req.end();
    });

};
