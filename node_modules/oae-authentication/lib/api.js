/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var crypto = require('crypto');
var FacebookStrategy = require('passport-facebook').Strategy;
var GoogleStrategy = require('passport-google').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var OpenIDStrategy = require('passport-openid').Strategy;
var passport = require('passport');
var TwitterStrategy = require('passport-twitter').Strategy;
var Validator = require('validator').Validator;

var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;


// Holds an array of strategies that are keyed by the tenant alias.
var strategies = {};


TenantsAPI.on('start', function(tenant) {
    addStrategies(tenant);
});

TenantsAPI.on('stop', function(tenant) {
    removeStrategies(tenant);
});

/**
 * Register the local login strategy for all tenants. This can be done for all tenants (including
 * global admin) at the same time, as the request is passed into the callback
 */
var initLocalAuthenticationStrategy = module.exports.initLocalAuthenticationStrategy = function() {
    // There is no need to wrap strategies where we can pass the request..
    passport.use('local', new LocalStrategy({'passReqToCallback': true}, passwordCallback));
};

/**
 * Register the Facebook, Twitter and Google passport login strategies for a given tenant. This will
 * be called for all registered tenants upon start-up and new tenants that are being started on the fly.
 * 
 * @param  {Tenant}     tenant      The tenant for which we want to register the authentication endpoints
 */
var addStrategies = module.exports.addStrategies = function(tenant) {
    var alias = tenant.alias;
    if (!strategies[alias]) {
        strategies[alias] = [];

        // All the other strategies that require more work.
        // TODO: Check the config if these strategies need to be set on this server.
        setupFacebook(tenant);
        setupTwitter(tenant);
        setupGoogle(tenant);
    }
};

/**
 * When a tenant is being stopped or deleted, we unregister the local, Facebook, Twitter and Google passport login
 * strategies so users can no longer sign in onto that tenant
 * 
 * @param  {Tenant}     tenant      The tenant for which we want to unregister the authentication endpoints
 */
var removeStrategies = module.exports.removeStrategies = function(tenant) {
    var alias = tenant.alias;
    if (strategies[alias]) {
        for (var i = 0; i < strategies[alias].length; i++) {
            passport.unuse(strategies[alias][i].name)
        }
    }
};

/**
 * Utility methods that gets a user by the tenant+username combo. If no user was found it will be created.
 *
 * @param  {Context}      context         The current tenant
 * @param  {String}       username        The desired username for this user.
 * @param  {String}       firstName       The first name of this user.
 * @param  {String}       locale          The locale of this user.
 * @param  {String}       timezone        The timezone of this user.
 * @param  {String}       lastName        The last name of this user.
 * @param  {String}       displayName     The prefered display name of this user.
 * @param  {Function}     callback        A function returning the user.
 * @param  {Object}       callback.err    An error that occured, if any
 * @param  {Boolean}      callback.user   The user object
 */
var getOrCreateUser = module.exports.getOrCreateUser = function(context, username, locale, timezone, firstName, lastName, displayName, callback) {
    // Check if this user already exists in our DB.
    PrincipalsAPI.getTenantUser(context, username, function(err, user) {
        if (err && err.code === 404) {
            // new user, create an account.
            // Sometimes we can get a timezone from an external auth that we don't support
            // Rather than borking up the create user call, we set it to null so it automaticall
            // gets stored with the server's timezone (UTC).
            // The user can then change it in the UI if he wishes to do so.
            if (timezone) {
                var validator = new Validator();
                validator.check(timezone).isValidTimeZone();
                if (validator.hasErrors()) {
                    timezone = null;
                }
            }
            var password = crypto.randomBytes(128).toString('hex');
            PrincipalsAPI.createUser(context, username, password, "public", locale, timezone, firstName, lastName, displayName, function(err, createdUser) {
                if (err) {
                    return callback(err);
                } else {
                    // Return the user object for the created user
                    callback(null, createdUser);
                }
            });
        } else if (err) {
            return callback(err);
        } else {
            // User already exists, move on.
            return callback(null, user);
        }
    });
};


/////////////
//  LOCAL  //
/////////////

/**
 * Function that will be called by passport to check that a username + password combination is valid
 * 
 * @param  {Request}     req             The express HTTP request object
 * @param  {String}      username        The username entered by the user
 * @param  {String}      password        The password entered by the user
 * @param  {Function}    done            Standard callback function
 * @param  {Object}      done.err        Error object containing the error message and error code
 * @param  {User}        done.user       The user object representing the logged in user when the login has been succesful
 * @api private
 */
var passwordCallback = function(req, username, password, done) {
    var tenant = req.tenant;
    PrincipalsAPI.checkPassword(tenant, username, password, function(err, basicUser) {
        if (err && err.code !== 401) {
            return done(err);
        } else if (err && err.code === 401) {
            return done(null, false);
        }

        // By this point we know that we were succesfully logged in.
        // Retrieve the user account and stick it in the context.
        req.ctx = new Context(tenant, new User(tenant.alias, basicUser.id));
        PrincipalsAPI.getUser(req.ctx, basicUser.id, function(err, user) {
            if (err) {
                return done(err);
            }
            req.ctx = new Context(tenant, user);
            return done(null, user);
        });
    });
};


//////////////
//  GOOGLE  //
//////////////

/**
 * Register a new Google passport login strategy for a tenant
 * 
 * @param {Tenant}  tenant      Tenant for which we want to register the Google login strategy
 * @api private
 */
var setupGoogle = function(tenant) {
    var strategy = new GoogleStrategy({
        'providerURL': 'https://www.google.com/accounts/o8/id',
        'profile': true,
        'returnURL' : 'http://' + tenant.host + '/api/auth/google/callback',
        'realm': 'http://' + tenant.host + '/'
    }, function(identifier, profile, done) {
        var username = profile.emails[0].value;
        var displayName = profile.name.givenName + " " + profile.name.familyName;

        // TODO: Get locale/timezone.
        var context = new Context(tenant, null);
        getOrCreateUser(context, username, 'en_GB', 'Europe/London', profile.name.givenName, profile.name.familyName, displayName, done);
    });
    passport.use('google-' + tenant.alias, strategy);
    strategies[tenant.alias].push(strategy);
};


///////////////
//  TWITTER  //
///////////////

/**
 * Register a new Twitter passport login strategy for a tenant
 * 
 * @param {Tenant}  tenant      Tenant for which we want to register the Twitter login strategy
 * @api private
 */
var setupTwitter = function(tenant) {
    var strategy = new TwitterStrategy({
            'consumerKey': '8eET3GSaCVE5GVd5kZsw',
            'consumerSecret': 'OIqx7h36fMWqc0Cb3tUI1jzp7bzCbE2F3zJ0Gladc',
            'callbackURL': 'http://' + tenant.host + '/api/auth/twitter/callback'
    }, function(token, tokenSecret, profile, done) {
        // Use the Twitter handle to register this user.
        var username = "twitter-" + profile.username;
        // Twitter has no concept of first or lastname, so just fill in blanks for now.
        var firstName = '';
        var lastName = '';
        var displayName = profile.displayName;
        // TODO: Get proper locale
        var locale = 'en_GB';
        var timezone = profile._json.time_zone;

        var context = new Context(tenant, null);
        getOrCreateUser(context, username, locale, timezone, firstName, lastName, displayName, done);
    });
    passport.use('twitter-' + tenant.alias, strategy);
    strategies[tenant.alias].push(strategy);
};


////////////////
//  FACEBOOK  //
////////////////

/**
 * Register a new Facebook passport login strategy for a tenant
 * 
 * @param {Tenant}  tenant      Tenant for which we want to register the Facebook login strategy
 * @api private
 */
var setupFacebook = function(tenant) {
    var strategy = new FacebookStrategy({
        'clientID': '194758077323671',
        'clientSecret': '663d14e7f9ad0baeb4e43390825a659f',
        'callbackURL': 'http://' + tenant.host + '/api/auth/facebook/callback'
    }, function(accessToken, refreshToken, profile, done) {
        var username = "facebook-" + profile.username;
        var firstName = profile.name.givenName;
        var lastName = profile.name.familyName;
        var displayName = profile.displayName;
        var locale = profile._json.locale;
        // TODO: get proper timezone.
        var timezone = 'Europe/London';

        var context = new Context(tenant, null);
        getOrCreateUser(context, username, locale, timezone, firstName, lastName, displayName, done);
    });
    passport.use('facebook-' + tenant.alias, strategy);
    strategies[tenant.alias].push(strategy);
};