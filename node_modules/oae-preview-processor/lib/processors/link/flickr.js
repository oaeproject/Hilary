/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');
var util = require('util');

var log = require('oae-logger').logger('oae-preview-processor');
var PreviewConfig = require('oae-config').config('oae-preview-processor');

var LinkProcessorUtil = require('oae-preview-processor/lib/processors/link/util');
var PreviewUtil = require('oae-preview-processor/lib/util');

// A regular expression that can be used to check if a URL points to a specific photo.
var REGEX_PHOTO = /^http(s)?:\/\/(www\.)?flickr\.com\/photos\/([-_a-zA-Z0-9\@]+)\/(\d+)/;
// A regular expression that can be used to check if a URL points to a set of photos.
var REGEX_SET = /^http(s)?:\/\/(www\.)?flickr\.com\/photos\/([-_a-zA-Z0-9\@]+)\/sets\/(\d+)/;

/**
 * @borrows Interface.test as FlickrProcessor.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    // Don't bother with non-link content items.
    if (contentObj.resourceSubType !== 'link') {
        return callback(null, -1);
    }

    // First check that this retriever has been configured in the Admin UI.
    var config = _getConfig();
    if (!config.apiKey || !config.apiSecret) {
        return callback(null, -1);
    }

    // Only allow URLs that are on the Flickr domain.
    if (REGEX_PHOTO.test(contentObj.link) || REGEX_SET.test(contentObj.link)) {
        return callback(null, 10);
    } else {
        return callback(null, -1);
    }
};

/**
 * @borrows Interface.generatePreviews as FlickrProcessor.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {

    /*!
     * Downloads a thumbnail from flickr and processes it.
     *
     * @param  {Object}     err     An error object coming from the metadata fetchers.
     * @param  {Object}     opts    The object with metadata that we can use to fetch the image and/or a displayname and a description.
     * @param  {Boolean}    ignore  If this value is set to `true` we'll ignore the picture.
     * @api private
     */
    var handleDownload = function(err, opts, ignore) {
        if (err) {
            return callback(err);
        } else if (ignore) {
            return callback(null, true);
        }

        // Download it.
        var path = ctx.baseDir + '/flickr.jpg';
        PreviewUtil.downloadRemoteFile(opts.imageUrl, path, function(err, path) {
            if (err) {
                return callback(err);
            }

            LinkProcessorUtil.generatePreviewsFromImage(ctx, path, opts, callback);
        });
    };

    // Determine what type it is.
    var flickr = _getType(contentObj.link);
    if (flickr.type === 'photo') {
        _getFlickrPhoto(ctx, flickr.id, handleDownload);
    } else if (flickr.type === 'set') {
        _getFlickrSet(ctx, flickr.id, handleDownload);
    } else {
        // Technically shouldn't happen.
        log().error('Could not identify the type of Flickr url.');
        return callback({'code': 500, 'msg': 'Could not identify the type of Flickr url.'});
    }
};

/**
 * Get the large image URL for a Flickr Photo ID.
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {String}             id              The Photo ID.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 * @param  {String}             callback.url    The URL for the large image.
 * @api private
 */
var _getFlickrPhoto = function(ctx, id, callback) {
    var config = _getConfig();

    var apiUrl = util.format('http://api.flickr.com/services/rest/?method=flickr.photos.getInfo&api_key=%s&photo_id=%s&format=json&nojsoncallback=1', config.apiKey, id);
    request(apiUrl, function(err, response, body) {
        if (err || response.statusCode !== 200) {
            return callback(err || {'code': response.statusCode, 'msg': body});
        }

        var opts = {};
        try {
            var info = JSON.parse(body);
            // Ignore this photo if it has no thumbnail.
            if (!info.photo) {
                return callback(null, null, true);
            }

            opts = {
                'displayName': info.photo.title._content,
                'description': info.photo.description._content,
                'imageUrl': 'http://farm' + info.photo.farm + '.static.flickr.com/' + info.photo.server + '/' + info.photo.id + '_' + info.photo.secret + '_b.jpg'
            };
        } catch (error) {
            log().error({'err': error, 'contentId': ctx.contentId}, 'Could not parse flickr response.');
            callback({'code': 500, 'msg': error.message});
        }

        callback(null, opts);
    });
};

/**
 * Get the large image URL for a Flickr set.
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {String}             id              The set ID.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 * @param  {String}             callback.url    The URL for the large image.
 * @api private
 */
var _getFlickrSet = function(ctx, id, callback) {
    var config = _getConfig();
    var apiUrl = util.format('http://api.flickr.com/services/rest/?method=flickr.photosets.getInfo&api_key=%s&photoset_id=%s&format=json&nojsoncallback=1', config.apiKey, id);
    request(apiUrl, function(err, response, body) {
        if (err || response.statusCode !== 200) {
            return callback(err || {'code': response.statusCode, 'msg': body});
        }

        var opts = {};
        try {
            var info = JSON.parse(body);
            // Ignore this set if it has no thumbnail.
            if (!info.photoset) {
                return callback(null, null, true);
            }

            opts = {
                'displayName': info.photoset.title._content,
                'description': info.photoset.description._content,
                'imageUrl': 'http://farm' + info.photoset.farm + '.static.flickr.com/' + info.photoset.server + '/' + info.photoset.primary + '_' + info.photoset.secret + '_b.jpg'
            };
        } catch (error) {
            log().error({'err': error, 'contentId': ctx.contentId}, 'Could not parse flickr response.');
            callback({'code': 500, 'msg': error.message});
        }

        callback(null, opts);
    });
};

/**
 * Get the Flickr API values that have been configured in the Admin UI.
 *
 * @return {Object} The apiKey and apiSecret from the Admin UI.
 * @api private
 */
var _getConfig = function() {
    return {
        'apiKey': PreviewConfig.getValue('admin', 'flickr', 'apikey'),
        'apiSecret': PreviewConfig.getValue('admin', 'flickr', 'apisecret')
    };
};

/**
 * Get the type for this url.
 *
 * @param  {String} url The Flickr URL.
 * @return {Object}     An object that has a key `type` that is either set to `photo` or `set` and a key `id` which is set to either the photo-id or the set-id.
 * @api private
 */
var _getType = function(url) {
    // Check if it's a URL to a photo
    var match = url.match(REGEX_PHOTO);
    if (match) {
        return {'type': 'photo', 'id': match[4]};
    }

    // Check if it's a set.
    match = url.match(REGEX_SET);
    if (match) {
        return {'type': 'set', 'id': match[4]};
    }

    // This shouldn't really happen.
    return null;
};
