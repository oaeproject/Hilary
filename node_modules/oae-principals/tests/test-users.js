/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var api = require('oae-principals');
var Context = require('oae-context').Context;


var tenant = new Tenant('cam', 'Cambridge', 'Cambridge University', 3000);
var anonymousContext = new Context(tenant, null);

describe('Principals', function() {
    describe('Users', function() {

        var createUser = function(callback) {
            var r = Math.floor(Math.random()*10000000);

            var username = 'simong-' + r;
            var firstName = 'Simon';
            var lastName = 'Gaeremynck';
            var displayName = 'simong';
            var password = 'password';
            var visibility = "public";

            api.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, id) {
                if (err) {
                    assert.fail("Creating a new user should be possible.");
                    return assert.done();
                }

                api.getUser(anonymousContext, id, function(err, user) {
                    assert.equal(username, user.username);
                    assert.equal(firstName, user.firstName);
                    assert.equal(lastName, user.lastName);
                    assert.equal(displayName, user.displayName);
                    assert.equal(visibility, user.visibility);

                    // Try to create one again.
                    api.createUser(anonymousContext, username, password, 'public', 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, foo) {
                        if (!err) {
                            assert.fail("Creating a user with the same username should fail.");
                        }

                        // This way the exports.testCreateUser can be used in other tests.
                        callback(user);
                    });
                });
            });
        };

        it('should be able to create a user', function(callback) {
            createUser(function() {
                callback();
            });
        });

        it('should be able to update a user', function(callback) {
            createUser(function(user) {
                // Try to update it.
                var ctx = new Context(tenant, user);
                api.updateUser(ctx, user.id, 'private', 'en_GB', 'Europe/London', 'first', 'last', 'displayname', function(err){
                    if (err) {
                        assert.fail("Should be able to update a user.");
                        assert.done();
                    }

                    // Get it.
                    api.getUser(ctx, user.id, function(err, user) {
                        if (err) {
                            assert.fail("Should be able to get a user.");
                            assert.done();
                        }

                        assert.equal('private', user.visibility);
                        assert.equal('first', user.firstName);
                        assert.equal('last', user.lastName);
                        assert.equal('displayname', user.displayName);
                        assert.equal('en_GB', user.locale);
                        assert.equal('Europe/London', user.timezone);
                        callback();
                    });

                });
            });
        });

        it('should fail to update a user with no values.', function(callback) {
            createUser(function(user) {
                var ctx = new Context(tenant, user);
                api.updateUser(ctx, user.id, undefined, undefined, undefined, undefined, undefined, undefined, function(err){
                    if (!err) {
                        assert.fail('Updating a user with no values should fail.');
                    }
                    callback();
                });
            });
        });

        it('should be able to check a user his or her password', function(callback) {
            createUser(function(created_user) {
                api.checkPassword(tenant, created_user.username, 'password', function(err, pw_user) {
                    assert.ok(!err);
                    assert.equal(created_user.id, pw_user.id);
                    api.checkPassword(tenant, 'none_existing_user', 'password', function(err, pw_user) {
                        assert.ok(!err);
                        assert.equal(false, pw_user);
                        callback();
                    });
                });
            });
        });
    });
});