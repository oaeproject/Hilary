/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var SearchTestUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Create 2 users, one following the other
 *
 * @param  {RestContext}    restCtx                         The REST context with which to create the users
 * @param  {Function}       callback                        Invoked when the process completes
 * @param  {Object}         callback.follower               An object holding the restContext and user object of the user following the other
 * @param  {RestContext}    callback.follower.restContext   The rest context of the user following the other
 * @param  {User}           callback.follower.user          The user object representing the user following the other
 * @param  {Object}         callback.followed               An object holding the restContext and user object of the user being followed by the other
 * @param  {RestContext}    callback.followed.restContext   The rest context of the user following the other
 * @param  {User}           callback.followed.user          The user object representing the user being followed by the other
 */
var createFollowerAndFollowed = module.exports.createFollowerAndFollowed = function(restCtx, callback) {
    TestsUtil.generateTestUsers(restCtx, 2, function(err, testUsers) {
        var follower = _.values(testUsers)[0];
        var following = _.values(testUsers)[1];

        RestAPI.Following.follow(follower.restContext, following.user.id, function(err) {
            assert.ok(!err);
            return callback(follower, following);
        });
    });
};

/**
 * Perform the requests necessary for the provided followed user to become followed by the given list of users
 *
 * @param  {String}         followedUserId                  The id of the user to be followed
 * @param  {Object[]}       followerUsers                   The users with which to follow the followed user
 * @param  {RestContext}    followerUsers[i].restContext    The REST context that can be used to make the request to follow the followed user for this user
 * @param  {User}           followerUsers[i].user           The user object of the user to follow the followed user
 * @param  {Function}       callback                        Standard callback function
 */
var followByAll = module.exports.followByAll = function(followedUserId, followerUsers, callback) {
    if (followerUsers.length === 0) {
        return callback();
    }

    followerUsers = followerUsers.slice();
    var followerUser = followerUsers.shift();
    RestAPI.Following.follow(followerUser.restContext, followedUserId, function(err) {
        assert.ok(!err);

        // Recursively invoke the method again to follow the followedUserId by the next follower user in the list
        return followByAll(followedUserId, followerUsers, callback);
    });
};

/**
 * Perform the requests necessary for the provided follower user to begin following all the followed users
 *
 * @param  {RestContext}    restContext         The REST context that can be used to make the request to follow the followed users
 * @param  {String[]}       followedUserids     The ids of the users to follow
 * @param  {Function}       callback            Standard callback function
 */
var followAll = module.exports.followAll = function(restContext, followedUserIds, callback) {
    if (followedUserIds.length === 0) {
        return callback();
    }

    followedUserIds = followedUserIds.slice();
    var followedUserId = followedUserIds.shift();
    RestAPI.Following.follow(restContext, followedUserId, function(err) {
        assert.ok(!err);

        // Recursively invoke the method again to follow the next user in the list
        return followAll(restContext, followedUserIds, callback);
    });
};

/**
 * Ensure that the follower user follows the followed user according to both the follower and following listings.
 *
 * @param  {String}         followerUserId      The id of the follower user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId      The id of the expected followed user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback            Invoked when the assertions have been performed
 */
var assertFollows = module.exports.assertFollows = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    _findFollowerAndFollowing(followerUserId, followerRestCtx, followedUserId, followedRestCtx, function(follower, followed) {
        assert.ok(follower);
        assert.equal(follower.id, followerUserId);
        assert.ok(followed);
        assert.equal(followed.id, followedUserId);
        return callback();
    });
};

/**
 * Ensure that the follower user *does not* follow the followed user according to both the follower and following listings.
 *
 * @param  {String}         followerUserId      The id of the follower user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId      The id of the expected followed user
 * @param  {RestContext}    followerRestCtx     The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback            Invoked when the assertions have been performed
 */
var assertDoesNotFollow = module.exports.assertDoesNotFollow = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    _findFollowerAndFollowing(followerUserId, followerRestCtx, followedUserId, followedRestCtx, function(follower, followed) {
        if (follower) {
            assert.notEqual(follower.id, followerUserId);
        }

        if (followed) {
            assert.notEqual(followed.id, followedUserId);
        }

        return callback();
    });
};

/**
 * Ensure that both the following and follower feeds return a 401 error for the given rest context.
 *
 * @param  {RestContext}    restCtx     The REST context to perform the requests with
 * @param  {String[]}       userIds     The ids of the users whose feeds to request
 * @param  {Function}       callback    Invoked when the tests are complete
 */
var assertNoFollowFeedAccess = module.exports.assertNoFollowFeedAccess = function(restCtx, userIds, callback) {
    if (userIds.length === 0) {
        return callback();
    }

    var userId = userIds.shift();
    RestAPI.Following.getFollowing(restCtx, userId, null, null, function(err) {
        assert.ok(err);
        assert.equal(err.code, 401);

        RestAPI.Following.getFollowers(restCtx, userId, null, null, function(err) {
            assert.ok(err);
            assert.equal(err.code, 401);
            return assertNoFollowFeedAccess(restCtx, userIds, callback);
        });
    });
};

/**
 * Ensure that both the following and follower feeds do not err when requesting with the given rest context
 *
 * @param  {RestContext}    restCtx     The REST context to perform the requests with
 * @param  {String[]}       userIds     The ids of the users whose feeds to request
 * @param  {Function}       callback    Invoked when the tests are complete
 */
var assertHasFollowFeedAccess = module.exports.assertHasFollowFeedAccess = function(restCtx, userIds, callback) {
    if (userIds.length === 0) {
        return callback();
    }

    var userId = userIds.shift();
    _findFollowerAndFollowing(userId, restCtx, userId, restCtx, function() {
        // We don't actually care about the results, we just care about the no-err assertions in the method
        return assertHasFollowFeedAccess(restCtx, userIds, callback);
    });
};

/**
 * Ensure that the user in context does not have access to search the followers or following of the given users
 *
 * @param  {RestContext}    restCtx         The REST context to perform the requests with
 * @param  {String[]}       userIds         The ids of the users whose search feeds the user in context should not have access to
 * @param  {Function}       callback        Invoked when the assertions have completed
 */
var assertNoSearchFeedAccess = module.exports.assertNoSearchFeedAccess = function(restCtx, userIds, callback) {
    if (userIds.length === 0) {
        return callback();
    }

    var userId = userIds.shift();
    RestAPI.Search.search(restCtx, 'following', [userId], null, function(err, response) {
        assert.ok(err);
        assert.equal(err.code, 401);
        assert.ok(!response);

        RestAPI.Search.search(restCtx, 'followers', [userId], null, function(err, response) {
            assert.ok(err);
            assert.equal(err.code, 401);
            assert.ok(!response);
            return assertNoSearchFeedAccess(restCtx, userIds, callback);
        });
    });
};

/**
 * Ensure that the user in context has access to search the followers or following of the given users
 *
 * @param  {RestContext}    restCtx         The REST context to perform the requests with
 * @param  {String[]}       userIds         The ids of the users whose search feeds the user in context should have access to
 * @param  {Function}       callback        Invoked when the assertions have completed
 */
var assertHasSearchFeedAccess = module.exports.assertHasSearchFeedAccess = function(restCtx, userIds, callback) {
    if (userIds.length === 0) {
        return callback();
    }

    var userId = userIds.shift();
    searchFollowerAndFollowing(userId, restCtx, userId, restCtx, function() {
        // We don't actually care about the results, we just care about the no-err assertions in the method
        return assertHasSearchFeedAccess(restCtx, userIds, callback);
    });
};

/**
 * Search the following feed as the followerUserId and the followers feed of the followedUserId with no query parameters. This will effectively
 * get the search documents that represents the "follower user" and the "followed user" from the "followers" and "following" search feeds,
 * respectively.
 *
 * @param  {String}         followerUserId              The id of the follower user
 * @param  {RestContext}    followerRestCtx             The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId              The id of the expected followed user
 * @param  {RestContext}    followerRestCtx             The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback                    Invoked when the user has been fetched from both listings
 * @param  {Object}         [callback.followerUserDoc]  The follower user document from the following search that matches the follower user id. If unspecified, the user was not found
 * @param  {Object}         [callback.followedUserDoc]  The followed user document from the followers search that matches the followed user id. If unspecified, the user was not found
 */
var searchFollowerAndFollowing = module.exports.searchFollowerAndFollowing = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    SearchTestUtil.searchAll(followerRestCtx, 'following', [followerUserId], null, function(err, followingResponse) {
        assert.ok(!err);

        SearchTestUtil.searchAll(followedRestCtx, 'followers', [followedUserId], null, function(err, followerResponse) {
            assert.ok(!err);

            return callback(_findDoc(followerResponse.results, followerUserId), _findDoc(followingResponse.results, followedUserId));
        });
    });
};

/**
 * Find the follower user from the following list and the followed user from the follower list from each user.
 *
 * @param  {String}         followerUserId          The id of the follower user
 * @param  {RestContext}    followerRestCtx         The REST context that can be used to execute requests on behalf of the follower user
 * @param  {String}         followedUserId          The id of the expected followed user
 * @param  {RestContext}    followerRestCtx         The REST context that can be used to execute requests on behalf of the followed user
 * @param  {Function}       callback                Invoked when the user has been fetched from both listings
 * @param  {User}           [callback.follower]     The follower user from the following list. If unspecified, the user was not found
 * @param  {User}           [callback.followed]     The followed user from the followers list. If unspecified, the user was not found
 * @api private
 */
var _findFollowerAndFollowing = function(followerUserId, followerRestCtx, followedUserId, followedRestCtx, callback) {
    // To ensure the first item would be the user we're looking for, we simply slice one character off the end as the start
    var start = followedUserId.slice(0, -1);
    RestAPI.Following.getFollowing(followerRestCtx, followerUserId, start, 1, function(err, followingResponse) {
        assert.ok(!err);

        // Now we're looking for the follower user in the followers list of the followed user
        start = followerUserId.slice(0, -1);
        RestAPI.Following.getFollowers(followedRestCtx, followedUserId, start, 1, function(err, followerResponse) {
            assert.ok(!err);
            return callback(followerResponse.results[0], followingResponse.results[0]);
        });
    });
};

/**
 * Find the document with the given id from the list of search results
 *
 * @param  {Object[]}   results     An array of search documents in which to find the specified document
 * @param  {String}     docId       The id of the document to return
 * @return {Object}                 The search document with the given id. If not found, will be `null`
 * @api private
 */
var _findDoc = function(results, docId) {
    var doc = null;

    if (_.isArray(results)) {
        _.each(results, function(result) {
            if (result.id === docId) {
                doc = result;
            }
        });
    }

    return doc;
};
