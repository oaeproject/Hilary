/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var cookieParser = require('cookie-parser');
var cookieSession = require('cookie-session');
var crypto = require('crypto');
var MobileDetect = require('mobile-detect');
var passport = require('passport');
var util = require('util');

var log = require('oae-logger').logger('oae-authentication');
var TenantsUtil = require('oae-tenants/lib/util');

/**
 * Setup the necessary authentication middleware
 *
 * @param  {Object}     config  An object containing the full system configuration (i.e., 'config.js')
 * @param  {Express}    server  An express server
 */
var setupAuthMiddleware  = module.exports.setupAuthMiddleware = function(config, server) {
    // Tell express how to parse our cookies. All stateful data (e.g., authenticated user id,
    // imposter state) is stored on the user's session cookie. We encrypt that data with this
    // configured `secret`
    server.use(cookieParser(config.cookie.secret));

    // This middleware uses cookieSession to tell express how to write a session (i.e., a cookie
    // with encryption signed by the configured secret). That said, it needs to come before passport
    // authentication (`passport.session()`) because passport needs to know how to write the cookie
    server.use(function(req, res, next) {
        var cookieOpts = {'secret': config.cookie.secret};

        // Don't increase the expiry if we are accessing the global admin server
        if (!req.tenant.isGlobalAdminServer) {
            var md = new MobileDetect(req.headers['user-agent']);
            if (md.mobile()) {
                // For mobile clients that aren't accessing the global administration tenant, we
                // bump the cookie expiry to 30 days
                cookieOpts.maxAge = 1000 * 60 * 60 * 24 * 30;
            }
        }

        // Pass through to the actual cookie session middleware
        return cookieSession(cookieOpts)(req, res, next);
    });

    // Now that we know how to parse the cookie, we can extract the user in session, if any. The
    // resulting session information will be located on `req.oaeAuthInfo`
    server.use(passport.initialize({'userProperty': 'oaeAuthInfo'}));

    // Perform the request authentication
    server.use(passport.session());
};

/**
 * Checks whether a provided plain-text password matches a stored hashed password
 *
 * @param  {String}     plainTextPassword   The plain-text password provided by the user
 * @param  {String}     hashedPassword      The hashed password stored for the user
 * @return {Boolean}                        True if the provided password matches the stored hashed password, false if they are different
 */
var hashAndComparePassword = module.exports.hashAndComparePassword = function(plainTextPassword, hashedPassword) {
    // Get the salt of the hashed password
    var salt = hashedPassword.split('$')[0];
    // Check if the provided password with the extracted salt is the same as the stored password
    return hashPassword(plainTextPassword, salt) === hashedPassword;
};

/**
 * Hashes a string using SHA512
 *
 * @param  {String}     password        The passwords that needs to be hashed
 * @param  {String}     salt            A random salt that will be prepended to the password for hashing (optional)
 * @return {String}                     The hashed password
 */
var hashPassword = module.exports.hashPassword = function(password, salt) {
    // Prepend a random number to prevent rainbow table attacks
    salt = salt || crypto.randomBytes(16).toString('hex');
    password = salt + password;
    return salt + '$' + crypto.createHash('sha512').update(password).digest('hex');
};

/**
 * Get the ID of the authentication strategy for the given tenant
 *
 * @param  {Tenant}     tenant          The tenant for which to create the strategy ID
 * @param  {String}     strategyName    The name of the strategy
 * @return {String}                     The unique ID of the strategy for the tenant
 */
var getStrategyId = module.exports.getStrategyId = function(tenant, strategyName) {
    return util.format('%s:%s', tenant.alias, strategyName);
};

/**
 * Parses a strategy ID and returns the tenant alias and strategy name
 *
 * @param  {String}     strategyId  The strategy ID to parse
 * @return {Object}                 An object containing the `tenantAlias` and `strategyName`
 */
var parseStrategyId = module.exports.parseStrategyId = function(strategyId) {
    var parts = strategyId.split(':');
    var strategyName = parts.pop();
    var tenantAlias = parts.join(':');
    return {
        'tenantAlias': tenantAlias,
        'strategyName': strategyName
    };
};

/**
 * Outputs a log message for a successful authentication
 *
 * @param  {Request}    req                     The request the user used to login
 * @param  {Object}     authInfo                The authentication object that is returned by the strategy to be stored in `req.authInfo`
 * @param  {User}       authInfo.user           The user who will own the session
 * @param  {User}       [authInfo.imposter]     If the user in session is being impostered, this is the user impostering the owner of the session
 * @param  {String}     strategyName            The name of the strategy used for authn
 */
var logAuthenticationSuccess = module.exports.logAuthenticationSuccess = function(req, authInfo, strategyName) {
    var tenantAlias = req.tenant.alias;
    var user = authInfo.user;
    var imposter = authInfo.imposter;

    var data = {
        'userId': user.id,
        'headers': _.omit(req.headers, 'cookie', 'authentication'),
        'tenantAdmin': user.isTenantAdmin(tenantAlias),
        'globalAdmin': user.isGlobalAdmin(),
        'tenantAlias': tenantAlias,
        'strategyName': strategyName
    };

    if (imposter) {
        data.imposterId = imposter.id;
    }

    log().info(data, util.format('Login for "%s" to tenant "%s" from "%s"', user.id, tenantAlias, req.headers['x-forwarded-for']));
};

/**
 * A catch-all error handler for errors that bubbled out of passport strategies.
 *
 * @param  {Request}    req     The ExpressJS request object
 * @param  {Response}   res     The ExpressJS response object
 * @param  {Function}   next    The middleware which should be executed next
 * @return {Function}           A function that can be used as part of the middleware chain
 */
var handlePassportError = module.exports.handlePassportError = function(req, res, next) {
    return function(err) {
        if (err) {
            // An OAE-specific error
            if (err.reason && err.message) {
                log().warn({'err': err, 'host': req.host}, err.message);
                return res.redirect('/?authentication=failed&reason=' + err.reason);

            // If someone tried to sign in with a disabled strategy
            } else if (err.message && err.message.indexOf('Unknown authentication strategy') === 0) {
                log().warn({'host': req.host}, 'Authentication attempt with disabled strategy');
                return res.redirect('/?authentication=disabled');

            // Generic error
            } else {
                log().error({'err': err, 'host': req.host}, 'An error occurred during login');
                return res.redirect('/?authentication=error');
            }
        }

        // If no error ocurred we can move to the next middleware
        return next();
    };
};

/**
 * Authenticate the user with the passed in strategyId.
 * This will also take care of setting up the correct redirect behaviour once the user returns
 * to the application by setting a cookie called `redirectUrl` with the URL the client should be redirect to.
 *
 * @param  {String}     strategyId          The ID that should be used to authenticate the user with. This is the string as returned by `getStrategyId`
 * @param  {Object}     [passportOptions]   Any options that should be passed onto the strategy
 * @param  {Request}    req                 The ExpressJS request object
 * @param  {Response}   res                 The ExpressJS response object
 * @param  {Function}   next                The next middleware that should be executed
 */
var handleExternalSetup = module.exports.handleExternalSetup = function(strategyId, passportOptions, req, res, next) {
    // Get the generic error handler
    var errorHandler = handlePassportError(req, res, next);

    // Get the URL to which the user should be redirected and store it in a cookie,
    // so we can retrieve it once the user returns from the external authentication source
    var redirectUrl = validateRedirectUrl(req.param('redirectUrl'));
    res.cookie('redirectUrl', redirectUrl);

    // Initiate the authentication process
    passport.authenticate(strategyId, passportOptions)(req, res, errorHandler);
};

/**
 * Validate a URL that should be used to redirect the user within OAE after authentication.
 * If no URL is provided or the URL is invalid, `/me` will be returned.
 * Only a path within OAE is considered to be a valid redirect URL.
 *
 * @param  {String}     [redirectUrl]   The URL that should be tested
 * @return {String}                     A valid URL
 */
var validateRedirectUrl = module.exports.validateRedirectUrl = function(redirectUrl) {
    redirectUrl = redirectUrl || '/me';

    // Ensure that we're dealing with an OAE url so that we're not sending the user to a remote site
    if (redirectUrl.charAt(0) !== '/') {
        redirectUrl = '/me';
        log().warn({'redirectUrl': redirectUrl}, 'Possible Open Redirect attack detected');
    }

    return redirectUrl;
};

/**
 * Handles a callback request for an external authentication strategy.
 * This will take care of authenticating the user into the system, logging
 * a proper statement and redirecting the user to the correct page.
 *
 * @param  {String}     strategyId      The ID of the strategy that should be used to authenticate the user. This is the string as returned by `getStrategyId`
 * @param  {Request}    req             The ExpressJS request object
 * @param  {Response}   res             The ExpressJS response object
 * @param  {Function}   next            The next middleware that should be executed
 */
var handleExternalCallback = module.exports.handleExternalCallback = function(strategyId, req, res, next) {
    // Get the generic error handler
    var errorHandler = handlePassportError(req, res, next);

    // Authenticate this request with Passport. Because we specify a callback function
    // we will need to manually log the user in the system
    passport.authenticate(strategyId, {}, function(err, user, challenges, status) {
        if (err) {
            return errorHandler(err);
        } else if (!user) {
            // The user's credentials didn't check out. This would rarely occur in a
            // normal situation as external auth providers don't usually redirect with
            // bad parameters in the request, so somebody is probably tampering with it.
            // We bail out immediately
            log().warn({'challenges': challenges, 'status': status}, 'Possible tampering of external callback request detected');
            return res.redirect('/?authentication=failed&reason=tampering');
        }

        // The user's authentication credentials are correct, log the user into the system
        handleLogin(strategyId, user, req, res, next);
    })(req, res, errorHandler);
};

/**
 * Log a user onto the system
 *
 * @param  {String}         strategyId          The ID of the strategy that should be used to authenticate the user. This is the string as returned by `getStrategyId`
 * @param  {User}           user                The user that should be logged into the system
 * @param  {Request}        req                 The ExpressJS request object
 * @param  {Response}       res                 The ExpressJS response object
 * @param  {Function}       [next]              In case, this function is called in some middleware, the next function in the chain
 */
var handleLogin = module.exports.handleLogin = function(strategyId, user, req, res, next) {
    // Get the URL to which the user should be redirected
    var redirectUrl = validateRedirectUrl(req.cookies.redirectUrl);

    // This cookie serves no further purpose, remove it
    res.clearCookie('redirectUrl');

    // Get the generic error handler
    var errorHandler = handlePassportError(req, res, next);

    // Log a message, as he logged in with an external tenant
    var authInfo = {
        'user': user,
        'strategyId': strategyId
    };
    logAuthenticationSuccess(req, authInfo, strategyId);

    // Create a session for this user
    req.logIn(authInfo, function(err) {
        if (err) {
            return errorHandler(err);
        }

        // The user now has a session within Express
        // We can now safely redirect the user into the system
        return res.redirect(redirectUrl);
    });
};

/**
 * Constructs the callback URL for a given strategy by doing a look-up whether or not the tenant is using https.
 * ex: Suppose the passed in tenant uses https and the passed in strategy is 'google', the returned url will be:
 *     https://<tenant host>/api/auth/google/callback
 *
 * @param  {Tenant} tenant      The tenant object
 * @param  {String} strategy    The strategy for this callback url
 * @return {String}             An authentication callback url
 */
var constructCallbackUrl = module.exports.constructCallbackUrl = function(tenant, strategy) {
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    return baseUrl + '/api/auth/' + strategy + '/callback';
};


/**
 * Set one of the optional user profile parameters.
 * If the template or the result of the rendered template returns an empty string,
 * the profile parameter will not be set.
 *
 * @param  {Object}     profileParameters       The object where the profile parameter should be filled in
 * @param  {String}     profileParameterName    The name of the parameter. ex: `locale`, `email`, `timezone`, etc
 * @param  {String}     template                The template that can be used to generate the value for this profile parameter
 * @param  {Object}     data                    The data that can be used in the template
 */
var setProfileParameter = module.exports.setProfileParameter = function(profileParameters, profileParameterName, template, data) {
    var renderedString = renderTemplate(template, data);
    if (renderedString) {
        profileParameters[profileParameterName] = renderedString;
    }
};

/**
 * Render a template that supports some basic variable replacement. Strings between curly braces
 * will be replaced with the value against the `data` key. Undefined variables will be replaced
 * with the empty string. In case the template was empty or an error occurred when rendering the template,
 * an empty string will be returned.
 *
 * e.g.:
 *    ```javascript
 *        var template = '{firstName} {lastName}';
 *        var data = {'firstName': 'John', 'lastName': 'Doe'};
 *        var displayName = renderTemplate(template, data);
 *    ```
 *    Result:
 *        John Doe
 *
 * @param  {String}     template    The template that should be ran
 * @param  {Object}     data        The data that can be used in the template
 * @return {String}                 The rendered template
 */
var renderTemplate = module.exports.renderTemplate = function(template, data) {
    if (!template) {
        return '';
    }

    var matcher = new RegExp(/\{([\s\S]+?)\}/g);
    var result = template.replace(matcher, function(match, variableName, index) {
        if (data[variableName]) {
            return data[variableName];
        } else {
            return '';
        }
    });
    return result;
};
