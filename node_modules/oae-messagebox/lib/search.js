/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

var MessageBoxAPI = require('./api');
var MessageBoxConstants = require('./constants').MessageBoxConstants;



////////////////////
// INDEXING TASKS //
////////////////////

MessageBoxAPI.on(MessageBoxConstants.events.CREATED_MESSAGE, function(message) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'message',
        'resources': [{
            'id': message.id,
            'opts': {
                'indexResource': true
            }
        }]
    });
});

MessageBoxAPI.on(MessageBoxConstants.events.UPDATED_MESSAGE, function(messageId, newBody) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'message',
        'resources': [{
            'id': messageId,
            'opts': {
                'indexResource': true
            }
        }]
    });
});

MessageBoxAPI.on(MessageBoxConstants.events.DELETED_MESSAGE, function(messageId, deleteType) {
    MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'id': messageId});
});

/**
 * Produces a search document for a message.
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceMessageSearchDocuments = function(resources, callback) {
    var messageIds = _.map(resources, function(resource) {
        return resource.id;
    });

    MessageBoxAPI.getMessagesById(messageIds, null, function(err, messages) {
        if (err) {
            return callback(err);
        }

        // For each message, we'll create a 'message' document.
        // message documents are children of 'resource' documents.
        // It is assumed that the messageBoxId points a valid id for a resource document.
        var docs = [];
        _.each(messages, function(message) {
            var doc = {
                'id': message.id,
                'body': message.body,
                '_parent': message.messageBoxId,
                '_type': 'message'
            };
            docs.push(doc);
        });
        callback(null, docs);
    });
};

SearchAPI.registerSearchDocumentProducer('message', _produceMessageSearchDocuments);
