/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var ShortId = require('shortid');
var Path = require('path');

var IO = require('oae-util/lib/io');
var MQ = require('oae-util/lib/mq');
var MQTestUtil = require('oae-util/lib/test/mq-util');
var RestAPI = require('oae-rest');
var Tempfile = require('oae-util/lib/tempfile');
var TestsUtil = require('oae-tests/lib/util');

var PreviewAPI = require('oae-preview-processor/lib/api');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PreviewContext = require('oae-preview-processor/lib/model').PreviewContext;
var PreviewDefaultLinks = require('oae-preview-processor/lib/processors/link/default');
var PreviewImages = require('oae-preview-processor/lib/processors/file/images');
var PreviewOffice = require('oae-preview-processor/lib/processors/file/office');
var PreviewPDF = require('oae-preview-processor/lib/processors/file/pdf');
var PreviewUtil = require('oae-preview-processor/lib/util');

describe('Preview processor', function() {

    // We fill this variable on tests startup with the configuration
    // as specified in the root config.js/beforeTests file.
    var defaultConfig = null;

    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var signedAdminRestContext = null;
    // Rest contexts that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    before(function(callback) {
        signedAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.localhost.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Configure the SlideShare & Flickr processors.
        // We also switch the storage mechanism to 'test', so the PP can download the actual files.
        var update = {
            'oae-content/storage/backend': 'test',
            'oae-preview-processor/flickr/apikey': '0d7f5c9bd0277161d65dbea380a41ce2',
            'oae-preview-processor/flickr/apisecret': '14a0bda0b8857ae0',
            'oae-preview-processor/slideshare/sharedsecret': 'CI5h3oQk',
            'oae-preview-processor/slideshare/apikey': 'd1ELqsL0'
        };
        RestAPI.Config.updateConfig(globalAdminRestContext, 'admin', update, function(err) {
            assert.ok(!err);

            // Log in the admin so his cookie jar is set up appropriately
            RestAPI.User.getMe(signedAdminRestContext, function(err, meObj) {
                assert.ok(!err);

                defaultConfig = PreviewAPI.getConfiguration();

                callback();
            });
        });
    });

    after(function(callback) {
        // Revert back to local storage.
        var update = {'oae-content/storage/backend': 'local'};
        RestAPI.Config.updateConfig(globalAdminRestContext, 'admin', update, function(err) {
            assert.ok(!err);
            callback();
        });
    });

    /**
     * @return {Stream} Returns a stream that points to an image.
     */
    var getImageStream = function() {
        return fs.createReadStream(__dirname + '/data/image.png');
    };

    /**
     * @return {Stream} Returns a stream that points to an Office file.
     */
    var getOfficeStream = function() {
        return fs.createReadStream(__dirname + '/data/word.docx');
    };

    /**
     * @return {Stream} Returns a stream that points to a PDF file.
     */
    var getPDFStream = function() {
        return fs.createReadStream(__dirname + '/data/pdf.pdf');
    };

    /**
     * @return {Stream} Returns a stream that points to a ZIP file.
     */
    var getZipStream = function() {
        return fs.createReadStream(__dirname + '/data/foo.zip');
    };

    describe('Processor registration', function() {

        /**
         * Verifies that the processors are unregistered correctly and that the score as returned from the `test` function is respected
         */
        it('verify that processors can be unregistered', function(callback) {
            // Register some processors, each with a different test score.
            PreviewAPI.registerProcessor('verify-pp-20', {'testval': 20, 'test': function(ctx, contentObj, callback) { callback(null, 20); }, 'generatePreviews': function() {}});
            PreviewAPI.registerProcessor('verify-pp-30', {'testval': 30, 'test': function(ctx, contentObj, callback) { callback(null, 30); }, 'generatePreviews': function() {}});
            PreviewAPI.registerProcessor('verify-pp--1', {'testval': -1, 'test': function(ctx, contentObj, callback) { callback(null, -1); }, 'generatePreviews': function() {}});

            // Create a piece of content as a regular user
            TestsUtil.generateTestUsers(signedAdminRestContext, 1, function(err, response) {
                assert.ok(!err);
                var restCtx = _.values(response)[0].restContext;
                RestAPI.Content.createFile(restCtx, 'Test Content 1', 'Test content description 1', 'private', getImageStream,  [], [], function(err, contentObj) {
                    assert.ok(!err);

                    // The processor who returns 30 should be on top.
                    PreviewAPI.getProcessor(null, contentObj, function(err, processor) {
                        assert.ok(!err);
                        assert.equal(processor.testval, 30);

                        // Unregister our processors.
                        PreviewAPI.unregisterProcessor('verify-pp-20');
                        PreviewAPI.unregisterProcessor('verify-pp-30');
                        PreviewAPI.unregisterProcessor('verify-pp--1');
                        callback();
                    });
                });
            });
        });

        /**
         * Verifies that all required parameters are validated when (un)registering a processor.
         */
        it('verify parameter validation', function() {
            assert.throws(function() { PreviewAPI.registerProcessor(null); }, Error, 'A preview processor needs an ID.');
            assert.throws(function() { PreviewAPI.registerProcessor('test', null); }, Error, 'A preview processor needs to specify an object that has a test and generatePreviews method.');
            assert.throws(function() { PreviewAPI.registerProcessor('test', {}); }, Error, 'A preview processor needs to specify an object that has a test and generatePreviews method.');
            assert.throws(function() { PreviewAPI.registerProcessor('test', {'generatePreviews': function() {}}); }, Error, 'A preview processor needs to specify an object that has a test and generatePreviews method.');
            assert.throws(function() { PreviewAPI.registerProcessor('test', {'test': function() {}}); }, Error, 'A preview processor needs to specify an object that has a test and generatePreviews method.');

            assert.throws(function() { PreviewAPI.unregisterProcessor(null); }, Error, 'An ID needs to be specified when unregistering a processor');
        });
    });

    describe('Preview processor initialization', function() {

        /**
         * Configuring the Office PP with the wrong path to the LibreOffice binary should result in a 500 error.
         */
        it('verify the Office PP can detect if it is configured correctly.', function(callback) {
            var config = {
                'binary': 'some-none-existinant-binary',
                'timeout': 120000
            };
            PreviewOffice.init(config, function(err) {
                assert.ok(err);
                assert.equal(err.code, 500);
                callback();
            });
        });

        /**
         * Configuring the PDF PP with the wrong path to the pdftk binary should result in a 500 error.
         */
        it('verify the PDF PP can detect if it is configured correctly.', function(callback) {
            var config = {
                'binary': 'some-none-existinant-binary',
                'timeout': 120000
            };
            PreviewPDF.init(config, function(err) {
                assert.ok(err);
                assert.equal(err.code, 500);
                callback();
            });
        });
    });

    describe('Preview generation', function() {

        /*!
         * Enable the Preview Processor if the config specifies we can run with it enabled.
         */
        before(function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            /*
             * More then likely there will be a ton of stuff in the previews queue.
             * We need to clear it out before continuing on the following tests.
             * We can't do `MQ.purge` yet, as that requires that we're bound to the previews queue,
             * which we are *not* at this point, since the Preview Processor is still disabled by this point.
             *
             * We'll bind to the queue manually, purge it, unbind ourselves and enable the Preview Processor.
             * If all went well, the queue will be empty and the PP will be idle till the first test executes.
             */
            var listener = function() {};
            var options = {'subscribe': {'subscribe': false}};
            MQ.bind(PreviewConstants.MQ.TASK_GENERATE_PREVIEWS, listener, options, function(err) {
                if (err) {
                    return callback(new Error(err.msg));
                }

                // Purge anything that is in the queue.
                // Note: We need to enable the PP so that it binds to a queue that we can purge.
                MQ.purge(PreviewConstants.MQ.TASK_GENERATE_PREVIEWS, function(err) {
                    if (err) {
                        return callback(new Error(err.msg));
                    }

                    // Remove ourselves from the queue.
                    MQ.unbind(PreviewConstants.MQ.TASK_GENERATE_PREVIEWS, function(err) {
                        if (err) {
                            return callback();
                        }

                        // Enable the Preview Processor.
                        PreviewAPI.enable(function(err) {
                            if (err) {
                                return callback();
                            }
                            callback();
                        });
                    });
                });
            });
        });

        /*!
         * Disable the Preview Processor in case we enabled it earlier.
         */
        after(function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            // Disable the API.
            PreviewAPI.disable(function(err) {
                if (err) {
                    return callback(new Error(err.msg));
                }
                callback();
            });
        });

        /**
         * Creates a file and waits till it has been processed.
         *
         * @param  {String}      type       `link` or `file`.
         * @param  {String}      link       The stream that points to the file that should be uploaded.
         * @param  {Stream}      stream     The stream that points to the file that should be uploaded.
         * @param  {Function}    callback   Standard callback method that gets called when the file has previews associated to it.
         */
        var createContentAndWait = function(type, link, stream, callback) {
            // When the queue is empty, we create a piece of content for which we can generate preview items.
            MQTestUtil.whenTasksEmpty(PreviewConstants.MQ.TASK_GENERATE_PREVIEWS, function() {
                TestsUtil.generateTestUsers(signedAdminRestContext, 1, function(err, response) {
                    assert.ok(!err);
                    var restCtx = _.values(response)[0].restContext;
                    var contentCreated = function(err, contentObj) {
                        assert.ok(!err);

                        // Wait till the PP items have been generated.
                        MQTestUtil.whenTasksEmpty(PreviewConstants.MQ.TASK_GENERATE_PREVIEWS, function() {
                            // Ensure the preview items are there.
                            RestAPI.Content.getContent(restCtx, contentObj.id, function(err, updatedContent) {
                                assert.ok(!err);
                                callback(updatedContent);
                            });
                        });
                    };
                    if (type === 'file') {
                        RestAPI.Content.createFile(restCtx, 'Test Content 1', 'Test content description 1', 'private', stream,  [], [], contentCreated);
                    } else if (type === 'link') {
                        RestAPI.Content.createLink(restCtx, link, null, 'private', link,  [], [], contentCreated);
                    } else if (type === 'collabdoc') {
                        RestAPI.Content.createCollabDoc(restCtx, 'Test document', 'Test document', 'private', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            // Create a new revision, as the document would otherwise be ignored by the PP.
                            RestAPI.Content.publishCollabDoc(restCtx, contentObj.id, function(err) {
                                assert.ok(!err);
                                contentCreated(err, contentObj);
                            });
                        });
                    }
                });
            });
        };

        /**
         * Verifies the image processor.
         */
        it('verify image processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('file', null, getImageStream, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                callback();
            });
        });

        /**
         * Verifies the office processor.
         */
        it('verify office processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            // OpenOffice can sometimes be painfully slow to start up.
            this.timeout(30000);

            createContentAndWait('file', null, getOfficeStream, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                callback();
            });
        });

        /**
         * Verifies the PDF processor.
         */
        it('verify pdf processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            // OpenOffice can sometimes be painfully slow to start up.
            this.timeout(30000);

            createContentAndWait('file', null, getPDFStream, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                callback();
            });
        });

        /**
         * Verifies the default link processor.
         */
        it('verify default link processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('link', 'http://www.google.com', null, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                callback();
            });
        });

        /**
         * Verifies the default link processor only handles http urls.
         */
        it('verify default link processing only handles http(s)', function(callback) {
            var content = {'resourceSubType': 'link', 'link': 'file://localhost/etc/passwd'};
            PreviewDefaultLinks.test(null, content, function(err, score) {
                assert.ok(!err);
                assert.strictEqual(score, -1);

                content.link = 'ftp://localhost:21/etc/passwd';
                PreviewDefaultLinks.test(null, content, function(err, score) {
                    assert.ok(!err);
                    assert.strictEqual(score, -1);
                    callback();
                });
            });
        });

        /**
         * Verifies the youtube processor and assures that metadata is retrieved/set.
         */
        it('verify youtube link processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('link', 'http://www.youtube.com/watch?v=CogkBN-1nJ0', null, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                // Verify the displayName and description are set.
                assert.equal(content.displayName, 'Sakai OAE UI Evolution');
                assert.equal(content.description, 'A graphical representation of the Open Academic Environment code base.');
                callback();
            });
        });

        /**
         * Verifies the slideshare processor and assures that metadata is retrieved/set.
         */
        it('verify slideshare link processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('link', 'http://www.slideshare.net/armandalea/jasigsakai12-scholarlycomm-nyu', null, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                // Verify the displayName and description are set.
                assert.equal(content.displayName, 'Sakai OAE as a Scholarly Communications Tool');
                assert.equal(content.description, 'The Sakai OAE has much potential as a course management tool, though there is less exploration of using the platform as a viable scholarly communications tool. As a large global university, we aim to build and nurture relationships between scholars, to promote their work within the university and beyond, and to foster links between scholarship and teaching. We will discuss the pilot use of the Sakai OAE as a platform for scholarly collaborations and research among a small group of faculty members and graduate students. In addition to speaking about the successes and challenges of using the tool to disseminate scholarship, facilitate peer review, and promote and sustain fruitful exchanges among scholars, we will propose design considerations. Additionally, we will offer broader considerations for creating a continuum between the teaching, learning, and research portions of academia. This was presented at the 2012 Jasig-Sakai Conference.');
                callback();
            });
        });

        /**
         * Verifies the flickr photo processor and assures that metadata is retrieved/set.
         */
        it('verify flickr photo link processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('link', 'http://www.flickr.com/photos/stephen_marquard/5839086421/', null, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                // Verify the displayName and description are set.
                assert.equal(content.displayName, 'Sam and Nico demo Sakai OAE');
                assert.equal(content.description, '');
                callback();
            });
        });

        /**
         * Verifies the flickr set processor and assures that metadata is retrieved/set.
         */
        it('verify flickr set link processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('link', 'http://www.flickr.com/photos/iandolphinconferences/sets/72057594140880342/', null, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                // Verify the displayName and description are set.
                assert.equal(content.displayName, 'JA-SIG Denver 03');
                assert.equal(content.description, '');
                callback();
            });
        });

        /**
         * Verifies the vimeo processor and assures that metadata is retrieved/set.
         */
        it('verify vimeo link processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('link', 'https://vimeo.com/17564813', null, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                // Verify the displayName and description are set.
                assert.equal(content.displayName, 'Collaboration in Sakai OAE');
                assert.equal(content.description, 'Nadia Sultana (NYU) outlines the importance of collaboration among health care providers in the nursing school utilizing Sakai Open Academic Environment.');
                callback();
            });
        });

        /**
         * Verifies the collaborative document processor works.
         */
        it('verify collaborative document processing works', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('collabdoc', null, null, function(content) {
                assert.equal(content.previews.status, 'done');
                // Ensure we have a thumbnail url.
                assert.ok(content.previews.thumbnailUrl);
                assert.equal(content.previews.thumbnailUrl.indexOf('/api/download/signed'), 0);
                callback();
            });
        });

        /**
         * Verifies the collaborative document processor works.
         */
        it('verify unpublished collaborative documents are ignored', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            TestsUtil.generateTestUsers(signedAdminRestContext, 1, function(err, response) {
                assert.ok(!err);
                var restCtx = _.values(response)[0].restContext;
                RestAPI.Content.createCollabDoc(restCtx, 'Test document', 'Test document', 'private', [], [], function(err, contentObj) {
                    assert.ok(!err);

                    // Wait till it has been processed.
                    MQTestUtil.whenTasksEmpty(PreviewConstants.MQ.TASK_GENERATE_PREVIEWS, function() {
                        // Ensure the preview items are there.
                        RestAPI.Content.getContent(restCtx, contentObj.id, function(err, updatedContent) {
                            assert.ok(!err);
                            assert.equal(updatedContent.previews.status, 'ignored');
                            assert.ok(!updatedContent.previews.thumbnailUrl);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Verifies that the preview status of a piece of content is set to ignored if no PP can handle it.
         */
        it('verify zip files get ignored', function(callback) {
            // Ignore this test if the PP is disabled.
            if (!defaultConfig.previews.enabled) {
                return callback();
            }

            createContentAndWait('file', null, getZipStream, function(content) {
                assert.equal(content.previews.status, 'ignored');
                assert.ok(!content.previews.thumbnailUrl);
                callback();
            });
        });

    });

    describe('Preview util', function() {
        describe('#downloadRemoteFile', function() {

            it('verify remote files can be downloaded', function() {
                var tmpPath = Tempfile.createTempFile();
                PreviewUtil.downloadRemoteFile('http://localhost:2000/api/me', tmpPath.path, function(err, path) {
                    assert.ok(!err);
                    IO.readFile(path, function(err, data) {
                        assert.ok(!err);

                        // Verify there is some data there.
                        assert.ok(data);

                        // Verify we don't leak the global session into the download fetcher.
                        data = JSON.parse(data);
                        assert.ok(data.anon);
                    });
                });
            });
        });
    });
});
