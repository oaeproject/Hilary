/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var log = require('oae-logger').logger('oae-activity-notifications');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var Validator = require('oae-authz/lib/validator').Validator;

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityDAO = require('./dao');
var ActivityEmitter = require('./emitter');

ActivityEmitter.on(ActivityConstants.events.DELIVERED_NOTIFICATIONS, function(deliveredNotifications) {
    var userIdsIncrBy = {};
    _.each(deliveredNotifications, function(activities, userId) {
        userIdsIncrBy[userId] = activities.length;
    });

    incrementNotificationsUnread(userIdsIncrBy, function(err) {
        if (err) {
            // We don't have to break on an error here, we can still send e-mails
            log().error({
                'err': new Error(err.msg),
                'userIdsIncrBy': userIdsIncrBy
            }, 'Could not mark notifications as unread');
        }

        _.each(deliveredNotifications, function(activities, userId) {
            _.each(activities, function(activity) {
                log().info({'userId': userId, 'activity': activity}, 'TODO: Send an e-mail LOL');
            });
        });
    });
});

var markNotificationsRead = module.exports.markNotificationsRead = function(userId, callback) {
    // Extra protection, since we're using a DAO, to ensure that we don't upsert a non-principal row
    // into the Principals CF
    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'Can only mark notifications read for a user id'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    var lastReadTime = Date.now();
    var profileFields = {
        'notificationsUnread': 0,
        'notificationsLastRead': lastReadTime
    };

    ActivityDAO.clearNotificationsUnreadCount(userId, function(err) {
        if (err) {
            return callback(err);
        }

        PrincipalsDAO.updatePrincipals([userId], profileFields, function(err) {
            if (err) {
                return callback(err);
            }

            return callback(null, lastReadTime);
        });
    });
};

var incrementNotificationsUnread = module.exports.incrementNotificationsUnread = function(userIdIncrs, callback) {
    // Extra protection, since we're using a DAO, to ensure that we don't nulk upsert a non-principal rows
    // into the Principals CF
    var validator = new Validator();
    _.each(userIdIncrs, function(incrBy, userId) {
        validator.check(userId, {'code': 400, 'msg': 'Can only mark notifications unread for a user id'}).isUserId();
    });
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // First update the cached new notification counts, then update Cassandra. Some very clear drawbacks here:
    //
    //  1.  If 2 nodes increment and then persist to cassandra, and the first incr wins into cassandra, counts are
    //      off by 1. The next time a notification comes around it will be fixed.
    //  2.  If Redis is completely flushed or crashes with no disk storage, kiss all your counts good-bye. Will not
    //      become accurate again for a user until they "mark as read".
    //
    // Some ways to improve could be to repair by using a SELECT COUNT(*)... with the notificationsLastRead property,
    // but it is currently not clear how to detect which counts are incorrect. This is all out of scope ATM.
    ActivityDAO.incrementNotificationsUnreadCounts(userIdIncrs, function(err, newValues) {
        if (err) {
            return callback(err);
        }

        var todo = _.keys(newValues).length;
        var complete = false;

        if (todo === 0) {
            return callback();
        }

        var _monitorUpdatePrincipals = function(err) {
            if (complete) {
                // Nothing to do.
            } else if (err) {
                complete = true;
                return callback(err);
            } else {
                todo--;
                if (todo === 0) {
                    completed = true;
                    return callback();
                }
            }
        };

        // Update all principal profiles with the new count
        _.each(userIdIncrs, function(newValue, userId) {
            PrincipalsDAO.updatePrincipals([userId], {'notificationsUnread': newValue}, _monitorUpdatePrincipals);
        });
    });
};
